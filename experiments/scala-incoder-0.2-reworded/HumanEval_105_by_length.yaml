name: HumanEval_105_by_length
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
  \    // reverse the resulting list, and then replace each digit by its corresponding\
  \ name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
  Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong,\
  \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n\
  \    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
  , \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    //\
  \ >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has\
  \ any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong,\
  \ 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long])\
  \ : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
  \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
  Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
  \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
  \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
  \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"\
  One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
  Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
completions: ["        val result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortBy(_\
    \ - 1).reverse\n        arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).map { x =>\n\
    \            val digit = x.toString.toInt\n            val name = if (digit <\
    \ 10) \"One\" else if (digit < 20) \"Two\" else if (digit < 30) \"Three\" else\
    \ if (digit < 40) \"Four\" else if (digit < 50) \"Five\" else if (digit < 60)\
    \ \"Six\" else if (digit < 70) \"Seven\" else if (digit < 80) \"Eight\" else \"\
    Nine\"\n            name + digit.toString\n        }", "        val ones = arr.filter(x\
    \ => x >= 1l.toLong && x <= 9l.toLong).map(x => One(x))\n        val tens = arr.filter(x\
    \ => x >= 10l.toLong && x <= 99l.toLong).map(x => Ten(x))\n        val hundreds\
    \ = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong).map(x => Hundred(x))\n\
    \        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong).map(x\
    \ => Thousand(x))\n        val hundredsAndOnes = arr.filter(x => x >= 10000l.toLong\
    \ && x <= 99999l.toLong).map(x => HundredAndOne(x))\n        val hundredsAndTens\
    \ = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).map(x => HundredAndTen(x))\n\
    \        val hundredsAndHundreds = arr.filter(x => x >= 1000000l.toLong && x <=\
    \ 9999999l.toLong).map(x => HundredAndHundred(x))\n        val hundredsAndThousands\
    \ = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong).map(x =>\
    \ HundredAndThousand(x))\n        val hundredsAndMillions = arr.filter(x => x\
    \ >= 100000000l.toLong && x <= 99999999999l.toLong).map(x => HundredAndMillion(x))\n\
    \        val hundredsAndBillions = arr.filter(x => x >= 1000000000l.toLong &&\
    \ x <= 999999999999l.toLong).map(x => HundredAndBillion(x))\n        val hundredsAndTrillions\
    \ = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong).map(x\
    \ => HundredAndTrillion(x))\n        val hundredsAndQuadrillions = arr.filter(x\
    \ => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong).map(x => HundredAndQuadrillion(x))\n\
    \        val hundredsAndQuintillions = arr.filter(x => x >= 100000000000000l.toLong\
    \ && x <= 9999999999999999999l.toLong).map(x => HundredAndQuintillion(x))\n  \
    \      val hundredsAndSextillions = arr.filter(x => x >= 10000000000000000l.toLong\
    \ && x <= 99999999999999999999l.toLong).map(x => HundredAndSextillion(x))", " \
    \       val list = arr.toList\n        val len = list.size\n        val newList\
    \ = list.sortWith((x, y) => x < y).reverse\n        val newList2 = newList.map(x\
    \ => if (x < 10) \"One\" else if (x < 20) \"Two\" else if (x < 30) \"Three\" else\
    \ if (x < 40) \"Four\" else if (x < 50) \"Five\" else if (x < 60) \"Six\" else\
    \ if (x < 70) \"Seven\" else if (x < 80) \"Eight\" else \"Nine\")\n        newList2.toList",
  "        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(_\
    \ <= 9).toList\n        val tens = arr.filter(_ >= 10).toList\n        val tensReversed\
    \ = tens.reverse\n        val tensReversedString = tensReversed.mkString(\"\"\
    )\n        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n", "        val list =\
    \ arr.toList\n        val len = list.size\n        val ones = list.filter(x =>\
    \ x < 9).toList\n        val tens = list.filter(x => x >= 9 && x < 99).toList\n\
    \        val hundreds = list.filter(x => x >= 99).toList\n        val tensAndHundreds\
    \ = tens ++ hundreds\n        val tensAndHundredsAndOnes = tensAndHundreds ++\
    \ ones\n        val tensAndHundredsAndOnesAndTensAndHundreds = tensAndHundredsAndOnes\
    \ ++ tensAndHundreds\n        val tensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ = tensAndHundredsAndOnesAndTensAndHundreds ++ tensAndHundredsAndOnes\n     \
    \   val tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds = tensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ ++ tensAndHundredsAndOnesAndTensAndHundreds\n        val tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ = tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds ++ tensAndHundredsAndOnesAndTensAndHundredsAndOnes\n\
    \        val tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds\
    \ = tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes ++\
    \ tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds\n        val\
    \ tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ = tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds\n\
    \        val tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ = tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\n\
    \        val tensAndH", "        val list = arr.toList\n        val len = list.size\n\
    \        val one = list.filter(_ <= 9).toList\n        val two = list.filter(_\
    \ <= 99).toList\n        val three = list.filter(_ <= 999).toList\n        val\
    \ four = list.filter(_ <= 9999).toList\n        val five = list.filter(_ <= 99999).toList\n\
    \        val six = list.filter(_ <= 999999).toList\n        val seven = list.filter(_\
    \ <= 9999999).toList\n        val eight = list.filter(_ <= 999999999).toList\n\
    \        val nine = list.filter(_ <= 99999999999).toList\n        val ten = list.filter(_\
    \ <= 9999999998).toList\n        val eleven = list.filter(_ <= 999999999997).toList\n\
    \        val twelve = list.filter(_ <= 999999999996).toList\n        val thirteen\
    \ = list.filter(_ <= 999999999995).toList\n        val fourteen = list.filter(_\
    \ <= 999999999994).toList\n        val fifteen = list.filter(_ <= 999999999993).toList\n\
    \        val sixteen = list.filter(_ <= 999999999992).toList\n        val seventeen\
    \ = list.filter(_ <= 999999999991).toList\n        val eighteen = list.filter(_\
    \ <= 999999999990).toList\n        val nineteen = list.filter(_ <= 99999999999).toList\n\
    \        val twenty = list.filter(_ <= 99999999999).toList\n        val twentyone\
    \ = list.filter(_ <= 99999999999).toList\n        val twentytwo = list.filter(_\
    \ <= 99999999999).toList\n        val twentythree = list.filter(_ <= 99999999999).toList\n\
    \        val twentyfour = list.filter(_ <= 99999999999).toList\n        val twentyfive\
    \ = list.filter(_ <= 99999999999).toList\n        val twentysix = list.filter(_\
    \ <= 99999999999).toList\n        val twentyseven = list.filter(_ <= 99999999999).toList\n\
    \        val twentyeight = list.filter(_ <= 99999999999).toList\n        val twentynine\
    \ = list.filter(_ <= 99999999999).toList\n        val thirty = list.filter(_ <=\
    \ 99999999999).toList\n        val thirtyone = list.filter(_ <= 99999999999).toList\n\
    \        val thirtytwo = list.filter(_ <= 99999999999).toList\n        val thirtythree",
  "        val list = arr.toList\n        val len = list.size\n        val ones =\
    \ list.filter(x => x < 10).toList\n        val tens = list.filter(x => x >= 10\
    \ && x < 100).toList\n        val hundreds = list.filter(x => x >= 100).toList\n\
    \        val hundredsAndOnes = list.filter(x => x >= 100 && x < 1000).toList\n\
    \        val hundredsAndOnesAndTens = list.filter(x => x >= 1000 && x < 10000).toList\n\
    \        val hundredsAndOnesAndTensAndOnes = list.filter(x => x >= 10000).toList\n\
    \        val hundredsAndOnesAndTensAndOnesAndTens = list.filter(x => x >= 10000\
    \ && x < 100000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnes = list.filter(x\
    \ => x >= 100000 && x < 1000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndTens\
    \ = list.filter(x => x >= 1000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnes\
    \ = list.filter(x => x >= 1000000 && x < 10000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndTens\
    \ = list.filter(x => x >= 10000000 && x < 100000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = list.filter(x => x >= 100000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnes\
    \ = list.filter(x => x >= 100000000 && x < 1000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = list.filter(x => x >= 1000000000 && x < 10000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes\
    \ = list.filter(x => x >= 10000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = list.filter(x => x >= 10000000000 && x < 100000000000).toList\n        val\
    \ hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = list.filter(x => x >= 100000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = list.filter(x => x >= 100000000000 && x < 1000000000000).toList\n        val\
    \ hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOne", " \
    \       val ones = arr.filter(x => x < 9).map(x => s\"One\")\n        val twos\
    \ = arr.filter(x => x < 18).map(x => s\"Two\")\n        val threes = arr.filter(x\
    \ => x < 27).map(x => s\"Three\")\n        val fours = arr.filter(x => x < 36).map(x\
    \ => s\"Four\")\n        val fives = arr.filter(x => x < 45).map(x => s\"Five\"\
    )\n        val sixes = arr.filter(x => x < 54).map(x => s\"Six\")\n        val\
    \ sevens = arr.filter(x => x < 63).map(x => s\"Seven\")\n        val eights =\
    \ arr.filter(x => x < 72).map(x => s\"Eight\")\n        val nines = arr.filter(x\
    \ => x < 81).map(x => s\"Nine\")\n        val reversed = arr.reverse\n       \
    \ val result = reversed.map(x => x match {\n            case x if x < 10 => ones(x)\n\
    \            case x if x < 20 => twos(x)\n            case x if x < 30 => threes(x)\n\
    \            case x if x < 40 => fours(x)\n            case x if x < 50 => fives(x)\n\
    \            case x if x < 60 => sixes(x)\n            case x if x < 70 => sevens(x)\n\
    \            case x if x < 80 => eights(x)\n            case x if x < 90 => nines(x)\n\
    \            case _ => \"\"\n        }).filter(x => x != \"\")\n        result",
  "        val ones = arr.filter(x => x <= 9).toList\n        val tens = arr.filter(x\
    \ => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100).toList\n\
    \        val tensAndHundreds = arr.filter(x => x >= 100 && x <= 999).toList\n\
    \        val onesAndTensAndHundreds = arr.filter(x => x >= 1000 && x <= 9999).toList\n\
    \        val onesAndTensAndHundredsAndOnes = arr.filter(x => x >= 10000 && x <=\
    \ 99999).toList\n        val onesAndTensAndHundredsAndOnesAndTens = arr.filter(x\
    \ => x >= 100000 && x <= 999999).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundreds\
    \ = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTens\
    \ = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds\
    \ = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ = arr.filter(x => x >= 10000000000 && x <= 999999999999).toList\n        val\
    \ onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTens\
    \ = arr.filter(x => x >= 100000000000 && x <= 999999999999999).toList\n      \
    \  val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds\
    \ = arr.filter(x => x >= 1000000000000 && x <= 9999999999999999).toList\n    \
    \    val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ = arr.filter(x => x >= 10000000000000 && x <= 9999999999999999999).toList\n\
    \        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTens\
    \ = arr.filter(x ", "        val list = arr.toList.sortWith(_ < _)\n        val\
    \ reversed = list.reverse\n        val result = reversed.map(i => if (i <= 9)\
    \ s\"${i}\" else s\"${i - 10}\").mkString(\",\")\n        if (result.isEmpty)\
    \ Nil\n        else result.split(\",\").toList", "        val ones = arr.filter(x\
    \ => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >=\
    \ 10l.toLong && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >=\
    \ 100l.toLong && x <= 999l.toLong)\n        val thousands = arr.filter(x => x\
    \ >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands = arr.filter(x\
    \ => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands = arr.filter(x\
    \ => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val oneHundreds =\
    \ arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n        val\
    \ oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n\
    \        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000l.toLong\
    \ && x <= 999999999999l.toLong)\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >=\
    \ 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000000l.toLong && x <= 9999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n    \
    \    val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 10000000000000000l.toLong && x <= 999999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousandTh", "       \
    \ val list = arr.toList\n        val len = list.size\n        val ones = list.filter(x\
    \ => x < 9).toList\n        val tens = list.filter(x => x >= 9 && x < 99).toList\n\
    \        val hundreds = list.filter(x => x >= 99).toList\n        val tensAndHundreds\
    \ = tens.head + hundreds.head\n        val tensAndHundredsAndOnes = tensAndHundreds\
    \ + ones.head\n        val tensAndHundredsAndOnesAndOnes = tensAndHundredsAndOnes\
    \ + ones.head + ones.head\n        val tensAndHundredsAndOnesAndOnesAndOnes =\
    \ tensAndHundredsAndOnesAndOnes + ones.head + ones.head + ones.head\n        val\
    \ tensAndHundredsAndOnesAndOnesAndOnesAndOnes = tensAndHundredsAndOnesAndOnesAndOnes\
    \ + ones.head + ones.head + ones.head + ones.head + ones.head\n        val tensAndHundredsAndOnesAndOnesAndOnesAndOnesAndOnes\
    \ = tensAndHundredsAndOnesAndOnesAndOnesAndOnes + ones.head + ones.head + ones.head\
    \ + ones.head + ones.head + ones.head + ones.head + ones.head\n        val tensAndHundredsAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes\
    \ = tensAndHundredsAndOnesAndOnesAndOnesAndOnesAndOnes + ones.head + ones.head\
    \ + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head\
    \ + ones.head + ones.head + ones.head\n        val tensAndHundredsAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes\
    \ = tensAndHundredsAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes + ones.head + ones.head\
    \ + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head\
    \ + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head\
    \ + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head\
    \ + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head\
    \ + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head\
    \ + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head\
    \ + ones.head + ones.head + ones.head + ones.head + ones.head + ones.head + ",
  "        val list = arr.toList\n        val len = list.size\n        val ones =\
    \ list.filter(x => x < 9).toList\n        val tens = list.filter(x => x >= 9 &&\
    \ x < 99).toList\n        val hundreds = list.filter(x => x >= 99).toList\n  \
    \      val reversed = ones + tens + hundreds\n        val reversedList = reversed.reverse\n\
    \        val reversedListString = reversedList.toString\n        val reversedListStringList\
    \ = reversedListString.split(\",\")\n        val reversedListStringListReversed\
    \ = reversedListStringList.reverse\n        val reversedListStringListReversedString\
    \ = reversedListStringListReversed.toString\n        val reversedListStringListReversedStringList\
    \ = reversedListStringListReversedString.split(\",\")\n        val reversedListStringListReversedStringListReversed\
    \ = reversedListStringListReversedStringList.reverse\n        val reversedListStringListReversedStringListReversedString\
    \ = reversedListStringListReversedStringListReversedList.toString\n        val\
    \ reversedListStringListReversedStringListReversedStringListReversedStringListReversed\
    \ = reversedListStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val reversedListStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversed\
    \ = reversedListStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val reversedListStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversed\
    \ = reversedListStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val reversedListStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversed\
    \ = reversedListStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val reversedListStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList",
  "        val arr = arr.toList\n        val len = arr.length\n        val ones =\
    \ arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x < 99).toList\n\
    \        val hundreds = arr.filter(x => x < 999).toList\n        val thousands\
    \ = arr.filter(x => x < 9999).toList\n        val tenThousands = arr.filter(x\
    \ => x < 999999).toList\n        val oneThousands = arr.filter(x => x < 9999999).toList\n\
    \        val oneHundreds = arr.filter(x => x < 999999999).toList\n        val\
    \ oneThousandThousands = arr.filter(x => x < 99999999999).toList\n        val\
    \ oneHundredThousands = arr.filter(x => x < 999999999999).toList\n        val\
    \ oneHundredThousandThousands = arr.filter(x => x < 9999999999999).toList\n  \
    \      val oneHundredThousandThousands = arr.filter(x => x < 99999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousands = arr.filter(x => x <\
    \ 9999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(x => x < 99999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x < 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x < 999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x < 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x < 9999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x < 999999999999", "        val len = arr.length\n       \
    \ if (len == 0) Nil\n        else if (len == 1) arr(0) match {\n            case\
    \ 1l => \"One\"\n            case 2l => \"Two\"\n            case 3l => \"Three\"\
    \n            case 4l => \"Four\"\n            case 5l => \"Five\"\n         \
    \   case 6l => \"Six\"\n            case 7l => \"Seven\"\n            case 8l\
    \ => \"Eight\"\n            case 9l => \"Nine\"\n            case _ => \"\"\n\
    \        }\n        else arr(0) match {\n            case 1l => \"One\"\n    \
    \        case 2l => \"Two\"\n            case 3l => \"Three\"\n            case\
    \ 4l => \"Four\"\n            case 5l => \"Five\"\n            case 6l => \"Six\"\
    \n            case 7l => \"Seven\"\n            case 8l => \"Eight\"\n       \
    \     case 9l => \"Nine\"\n            case _ => \"\"\n        }", "        val\
    \ nums = arr.toList\n        val numsSorted = nums.sortWith(_ < _)\n        val\
    \ numsReversed = numsSorted.reverse\n        val numsReversedWithOne = numsReversed.map(_\
    \ + 10).filter(_ < 10)\n        val numsReversedWithTwo = numsReversed.map(_ +\
    \ 20).filter(_ < 20)\n        val numsReversedWithThree = numsReversed.map(_ +\
    \ 30).filter(_ < 30)\n        val numsReversedWithFour = numsReversed.map(_ +\
    \ 40).filter(_ < 40)\n        val numsReversedWithFive = numsReversed.map(_ +\
    \ 50).filter(_ < 50)\n        val numsReversedWithSix = numsReversed.map(_ + 60).filter(_\
    \ < 60)\n        val numsReversedWithSeven = numsReversed.map(_ + 70).filter(_\
    \ < 70)\n        val numsReversedWithEight = numsReversed.map(_ + 80).filter(_\
    \ < 80)\n        val numsReversedWithNine = numsReversed.map(_ + 90).filter(_\
    \ < 90)\n        numsReversedWithOne.map(_.toString).filter(_ != \"One\").mkString(\"\
    ,\")\n        numsReversedWithTwo.map(_.toString).filter(_ != \"Two\").mkString(\"\
    ,\")\n        numsReversedWithThree.map(_.toString).filter(_ != \"Three\").mkString(\"\
    ,\")\n        numsReversedWithFour.map(_.toString).filter(_ != \"Four\").mkString(\"\
    ,\")\n        numsReversedWithFive.map(_.toString).filter(_ != \"Five\").mkString(\"\
    ,\")\n        numsReversedWithSix.map(_.toString).filter(_ != \"Six\").mkString(\"\
    ,\")\n        numsReversedWithSeven.map(_.toString).filter(_ != \"Seven\").mkString(\"\
    ,\")\n        numsReversedWithEight.map(_.toString).filter(_ != \"Eight\").mkString(\"\
    ,\")\n        numsReversedWithNine.map(_.toString).filter(_ != \"Nine\").mkString(\"\
    ,\")", "        val list = arr.toList\n        val length = list.size\n      \
    \  val ones = list.filter(x => x < 10).toList\n        val tens = list.filter(x\
    \ => x >= 10 && x < 100).toList\n        val hundreds = list.filter(x => x >=\
    \ 100).toList\n        val reversed = ones + tens + hundreds\n        val reversedList\
    \ = reversed.reverse\n        val reversedStrings = reversedList.map(x => x.toString)\n\
    \        val reversedStringsReversed = reversedStrings.reverse\n        val reversedStringsReversedString\
    \ = reversedStringsReversed.map(x => x.toString)\n        val reversedStringsReversedStringReversed\
    \ = reversedStringsReversedString.map(x => x.reverse)\n        val reversedStringsReversedStringReversedString\
    \ = reversedStringsReversedStringReversed.map(x => x.toString)\n        val reversedStringsReversedStringReversedStringReversed\
    \ = reversedStringsReversedStringReversedString.map(x => x.reverse)\n        val\
    \ reversedStringsReversedStringReversedStringReversedStringReversed = reversedStringsReversedStringReversedStringReversedString.map(x\
    \ => x.toString)\n        val reversedStringsReversedStringReversedStringReversedStringReversedStringReversed\
    \ = reversedStringsReversedStringReversedStringReversedStringReversedString.map(x\
    \ => x.reverse)\n        val reversedStringsReversedStringReversedStringReversedStringReversedStringReversedStringReversed\
    \ = reversedStringsReversedStringReversedStringReversedStringReversedStringReversedString.map(x\
    \ => x.toString)\n        val reversedStringsReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed\
    \ = reversedStringsReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedString.map(x\
    \ => x.reverse)\n        val reversedStringsReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed\
    \ = reversedStringsReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedString.map(x\
    \ => x.toString)\n        val reversedStringsReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed\
    \ = reversedStringsReversedString", "        val nums = arr.toList\n        val\
    \ len = nums.map(_.toString).map(_.length).max\n        val maxNum = nums.max\n\
    \        val minNum = nums.min\n        val ones = nums.filter(x => x == 1l)\n\
    \        val tens = nums.filter(x => x == 10l)\n        val hundreds = nums.filter(x\
    \ => x == 100l)\n        val thousands = nums.filter(x => x == 1000l)\n      \
    \  val tenThousands = nums.filter(x => x == 10000l)\n        val hundredThousands\
    \ = nums.filter(x => x == 100000l)\n        val thousandThousands = nums.filter(x\
    \ => x == 1000000l)\n        val tenThousandThousands = nums.filter(x => x ==\
    \ 10000000l)\n        val hundredThousandThousands = nums.filter(x => x == 100000000l)\n\
    \        val thousandThousandThousands = nums.filter(x => x == 1000000000l)\n\
    \        val tenThousandThousandThousands = nums.filter(x => x == 10000000000l)\n\
    \        val hundredThousandThousandThousands = nums.filter(x => x == 100000000000l)\n\
    \        val thousandThousandThousandThousands = nums.filter(x => x == 1000000000000l)\n\
    \        val tenThousandThousandThousandThousands = nums.filter(x => x == 10000000000000l)\n\
    \        val hundredThousandThousandThousandThousands = nums.filter(x => x ==\
    \ 100000000000000l)\n        val thousandThousandThousandThousandThousands = nums.filter(x\
    \ => x == 1000000000000000l)\n        val tenThousandThousandThousandThousandThousands\
    \ = nums.filter(x => x == 10000000000000000l)\n        val hundredThousandThousandThousandThousandThousands\
    \ = nums.filter(x => x == 100000000000000000l)\n        val thousandThousandThousandThousandThousandThousands\
    \ = nums.filter(x => x == 1000000000000000000l)\n        val tenThousandThousandThousandThousandThousandThousands\
    \ = nums.filter(x => x == 10000000000000000000l)\n        val hundredThousandThousandThousandThousandThousandThousands\
    \ = nums.", "        val list = arr.toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\")\n        val ten = List(\"Ten\", \"Eleven\"\
    , \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"Nineteen\")\n        val hundred = List(\"Hundred\", \"Thousand\"\
    , \"Million\", \"Billion\", \"Trillion\", \"Quadrillion\", \"Quintillion\", \"\
    Sextillion\", \"Septillion\", \"Octillion\", \"Nonillion\", \"Decillion\", \"\
    Undecillion\", \"Duodecillion\", \"Tredecillion\", \"Quattuordecillion\", \"Quindecillion\"\
    , \"Sexdecillion\", \"Septdecillion\", \"Octodecillion\", \"Novemdecillion\",\
    \ \"Vigintillion\", \"Unvigintillion\", \"Duovigintillion\", \"Trevigintillion\"\
    , \"Quattuorvigintillion\", \"Quinvigintillion\", \"Sexvigintillion\", \"Septvigintillion\"\
    , \"Octovigintillion\", \"Novemvigintillion\", \"Vigintigintillion\", \"Unvigintigintillion\"\
    , \"Duovigintigintillion\", \"Trevigintigintillion\", \"Quattuorvigintigintillion\"\
    , \"Quinvigintigintillion\", \"Sexvigintigintillion\", \"Septvigintigintillion\"\
    , \"Octovigintigintillion\", \"Novemvigintigintillion\", \"Vigintigintigintillion\"\
    , \"Unvigintigintigintillion\", \"Duovigintigintigintillion\", \"Trevigintigintigintillion\"\
    , \"Quattuorvigintigintigintillion\", \"Quinvigintigintigintillion\", \"Sexvigintigintigintillion\"\
    , \"Septvigintigintigintillion\", \"Octovigintigintigintillion\", \"Novemvigintigintillion\"\
    , \"Vigintigintigintigintillion\", \"Unvigintigintiginti", "        val nums =\
    \ arr.toList\n        val numsSorted = nums.sortBy(_ % 10)\n        val numsReversed\
    \ = numsSorted.reverse\n        val numsReversedDigits = numsReversed.map(_.toString.toInt)\n\
    \        val numsReversedDigitsReversed = numsReversedDigits.map(_.toString)\n\
    \        val numsReversedDigitsReversedMap = numsReversedDigitsReversed.map(x\
    \ => (x -> \"One\")).toMap\n        val numsReversedDigitsReversedMapReversed\
    \ = numsReversedDigitsReversedMap.reverse\n        val numsReversedDigitsReversedMapReversedMap\
    \ = numsReversedDigitsReversedMapReversed.toMap\n        numsReversedDigitsReversedMapReversedMap.toList.map(x\
    \ => numsReversedDigitsReversedMapReversedMap.get(x))", "        val list = arr.toList\n\
    \        val len = list.size\n        val ones = list.filter(x => x < 9).toList\n\
    \        val tens = list.filter(x => x >= 9 && x < 99).toList\n        val tensReversed\
    \ = tens.reverse\n        val tensReversedString = tensReversed.map(x => x.toString).mkString(\"\
    \")\n        val tensReversedStringList = tensReversedString.split(\",\")\n  \
    \      val tensReversedStringListReversed = tensReversedStringList.reverse\n \
    \       val tensReversedStringListReversedString = tensReversedStringListReversed.map(x\
    \ => x.toString).mkString(\"\")\n        val tensReversedStringListReversedStringList\
    \ = tensReversedStringListReversedString.split(\",\")\n        val tensReversedStringListReversedStringListReversed\
    \ = tensReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedString\
    \ = tensReversedStringListReversedStringListReversed.map(x => x.toString).mkString(\"\
    \")\n        val tensReversedStringListReversedStringListReversedStringList =\
    \ tensReversedStringListReversedStringListReversedStringList.reverse\n       \
    \ val tensReversedStringListReversedStringListReversedStringListReversed = tensReversedStringListReversedStringListReversedStringListReversed.map(x\
    \ => x.toString).mkString(\"\")\n        val tensReversedStringListReversedStringListReversedStringListReversedString\
    \ = tensReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val tensReversedStringListReversedStringListReversedStringListReversedStringList\
    \ = tensReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversed\
    \ = tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversedString\
    \ = tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversed\
    \ = tensReversedStringListReversedStringListReversedStringListReversedString",
  "        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val\
    \ tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds\
    \ = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands\
    \ = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands\
    \ = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands\
    \ = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val\
    \ oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n\
    \        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x\
    \ <= 99999999999l.toLong)\n        val oneThousandThousandHundreds = arr.filter(x\
    \ => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >=\
    \ 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 100000000000000l.toLong && x <= 9999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 10000000000000000l.toLong && x <= 99999999999999999999l.toLong)\n  \
    \      val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 100000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 1000000000000000000l.toLong && x <= 999999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousandThous", "    \
    \    val result = arr.sortWith(_.toInt < _.toInt).reverse\n        val map = Map(\"\
    One\" -> 1, \"Two\" -> 2, \"Three\" -> 3, \"Four\" -> 4, \"Five\" -> 5, \"Six\"\
    \ -> 6, \"Seven\" -> 7, \"Eight\" -> 8, \"Nine\" -> 9)\n        val result = result.map(x\
    \ => map.getOrElse(x.toString, x.toString))\n        if (result.isEmpty) Nil\n\
    \        else result", "        val ones = arr.filter(x => x < 10).toList\n  \
    \      val tens = arr.filter(x => x >= 10 && x < 100).toList\n        val hundreds\
    \ = arr.filter(x => x >= 100).toList\n        val hundredsAndOnes = arr.filter(x\
    \ => x >= 100 && x < 1000).toList\n        val hundredsAndOnesAndTens = arr.filter(x\
    \ => x >= 1000 && x < 10000).toList\n        val hundredsAndOnesAndTensAndOnes\
    \ = arr.filter(x => x >= 10000).toList\n        val hundredsAndOnesAndTensAndOnesAndTens\
    \ = arr.filter(x => x >= 10000 && x < 100000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnes\
    \ = arr.filter(x => x >= 100000 && x < 1000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndTens\
    \ = arr.filter(x => x >= 1000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnes\
    \ = arr.filter(x => x >= 1000000 && x < 10000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndTens\
    \ = arr.filter(x => x >= 10000000 && x < 100000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnes\
    \ = arr.filter(x => x >= 100000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = arr.filter(x => x >= 100000000 && x < 1000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnes\
    \ = arr.filter(x => x >= 1000000000 && x < 10000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = arr.filter(x => x >= 10000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes\
    \ = arr.filter(x => x >= 10000000000 && x < 100000000000).toList\n        val\
    \ hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = arr.filter(x\
    \ => x >= 100000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes\
    \ = arr.filter(x => x >= 100000000000 && x < 1000000000000).toList\n        val\
    \ hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = arr.filter(x => x >= 1000000000000).toList\n        val hundredsAndOnesAndTensAnd",
  "        val ones = arr.filter(x => x % 10 == 0)\n        val tens = arr.filter(x\
    \ => x % 10 == 1)\n        val hundreds = arr.filter(x => x % 10 == 2)\n     \
    \   val thousands = arr.filter(x => x % 10 == 3)\n        val tenThousands = arr.filter(x\
    \ => x % 10 == 4)\n        val oneThousands = arr.filter(x => x % 10 == 5)\n \
    \       val hundredThousands = arr.filter(x => x % 10 == 6)\n        val thousandThousands\
    \ = arr.filter(x => x % 10 == 7)\n        val tenThousandThousands = arr.filter(x\
    \ => x % 10 == 8)\n        val oneThousandThousands = arr.filter(x => x % 10 ==\
    \ 9)\n        val hundredThousandThousands = arr.filter(x => x % 10 == 0)\n  \
    \      val thousandThousandThousands = arr.filter(x => x % 10 == 1)\n        val\
    \ oneThousandThousandThousands = arr.filter(x => x % 10 == 2)\n        val hundredThousandThousandThousands\
    \ = arr.filter(x => x % 10 == 3)\n        val thousandThousandThousandThousands\
    \ = arr.filter(x => x % 10 == 4)\n        val oneThousandThousandThousandThousands\
    \ = arr.filter(x => x % 10 == 5)\n        val hundredThousandThousandThousandThousands\
    \ = arr.filter(x => x % 10 == 6)\n        val thousandThousandThousandThousandThousands\
    \ = arr.filter(x => x % 10 == 7)\n        val oneThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x % 10 == 8)\n        val hundredThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x % 10 == 9)\n        val thousandThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x % 10 == 0)\n        val oneThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x % 10 == 1)\n        val hundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x % 10", "        val ones = arr.filter(x => x < 9).map(x\
    \ => s\"One\")\n        val tens = arr.filter(x => x >= 9 && x < 99).map(x =>\
    \ s\"Ten\")\n        val hundreds = arr.filter(x => x >= 99).map(x => s\"Hundred\"\
    )\n        val hundredsAndOnes = arr.filter(x => x >= 100 && x < 999).map(x =>\
    \ s\"Hundred and One\")\n        val hundredsAndTens = arr.filter(x => x >= 1000\
    \ && x < 9999).map(x => s\"Hundred and Ten\")\n        val hundredsAndOnesAndTens\
    \ = arr.filter(x => x >= 10000 && x < 99999).map(x => s\"Hundred and One and Ten\"\
    )\n        val hundredsAndOnesAndTensAndOnes = arr.filter(x => x >= 100000 &&\
    \ x < 999999).map(x => s\"Hundred and One and Ten and One\")\n        val hundredsAndOnesAndTensAndOnesAndTens\
    \ = arr.filter(x => x >= 1000000 && x < 9999999).map(x => s\"Hundred and One and\
    \ Ten and One and Ten\")\n        val hundredsAndOnesAndTensAndOnesAndTensAndOnes\
    \ = arr.filter(x => x >= 10000000 && x < 99999999).map(x => s\"Hundred and One\
    \ and Ten and One and Ten and One\")\n        val hundredsAndOnesAndTensAndOnesAndTensAndOnesAndTens\
    \ = arr.filter(x => x >= 100000000 && x < 999999999).map(x => s\"Hundred and One\
    \ and Ten and One and Ten and One and Ten\")\n        val hundredsAndOnesAndTensAndOnesAndTensAndOnesAndOnesAndTens\
    \ = arr.filter(x => x >= 1000000000 && x < 99999999999).map(x => s\"Hundred and\
    \ One and Ten and One and Ten and One and Ten and One\")\n        val hundredsAndOnesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndTens\
    \ = arr.filter(x => x >= 10000000000 && x < 999999999999).map(x => s\"Hundred\
    \ and One and Ten and One and Ten and One and Ten and One and Ten\")\n       \
    \ val hundredsAndOnesAndTensAndOnesAndTensAndOnesAndOnesAndOnesAndTens = arr.filter(x\
    \ => x >= 100000000000 && x < 999999999999999).map(x => s\"Hundred and One and\
    \ Ten and One and Ten and One and Ten and One and Ten and One\")", "        val\
    \ result = arr.sortWith(_ < _)\n        val reversed = result.reverse\n      \
    \  val replaced = reversed.map(i => if (i < 10) \"One\" else if (i < 20) \"Two\"\
    \ else if (i < 30) \"Three\" else if (i < 40) \"Four\" else if (i < 50) \"Five\"\
    \ else if (i < 60) \"Six\" else if (i < 70) \"Seven\" else if (i < 80) \"Eight\"\
    \ else \"Nine\")\n        reversed.toList ++ replaced", "        val ones = arr.filter(x\
    \ => x >= 1l.toLong && x <= 9l.toLong).map(x => x.toString)\n        val tens\
    \ = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).map(x => x.toString)\n\
    \        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong).map(x\
    \ => x.toString)\n        val thousands = arr.filter(x => x >= 1000l.toLong &&\
    \ x <= 9999l.toLong).map(x => x.toString)\n        val tenThousands = arr.filter(x\
    \ => x >= 100000l.toLong && x <= 999999l.toLong).map(x => x.toString)\n      \
    \  val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong).map(x\
    \ => x.toString)\n        val oneHundreds = arr.filter(x => x >= 10000000l.toLong\
    \ && x <= 999999999l.toLong).map(x => x.toString)\n        val oneThousandHundreds\
    \ = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong).map(x\
    \ => x.toString)\n        val oneThousandThousands = arr.filter(x => x >= 1000000000l.toLong\
    \ && x <= 999999999999l.toLong).map(x => x.toString)\n        val oneThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong).map(x\
    \ => x.toString)\n        val oneThousandThousandThousands = arr.filter(x => x\
    \ >= 1000000000000l.toLong && x <= 9999999999999999l.toLong).map(x => x.toString)\n\
    \        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000l.toLong\
    \ && x <= 9999999999999999999l.toLong).map(x => x.toString)\n        val oneThousandThousandThousandThousands\
    \ = arr.filter(x => x >= 10000000000000000l.toLong && x <= 99999999999999999999l.toLong).map(x\
    \ => x.toString)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 100000000000000000l.toLong && x <= 99999999999999999999999l.toLong).map(x\
    \ => x.toString)\n        val oneThousandThousandThousandThousandThous", "   \
    \     val nums = arr.toList\n        val numsLength = nums.size\n        val numsDigits\
    \ = nums.map(_.toString.length).max\n        val numsDigitsInt = nums.map(_.toString.length).toInt\n\
    \        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt\
    \ - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt\
    \ = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n       \
    \ val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt\
    \ - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt\
    \ = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n       \
    \ val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt\
    \ - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt\
    \ = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n       \
    \ val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt\
    \ - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt\
    \ = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n       \
    \ val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt\
    \ - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt\
    \ = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n       \
    \ val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt\
    \ - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt\
    \ = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt - 1\n       \
    \ val numsDigitsInt = numsDigitsInt - 1\n        val numsDigitsInt = numsDigitsInt\
    \ - 1\n        val numsDigitsInt = numsDigitsInt - 1\n        ", "        val\
    \ result = arr.sortWith(_ < _)\n        val reversed = result.reverse\n      \
    \  val result = reversed.map(i => if (i < 10) \"One\" else if (i < 20) \"Two\"\
    \ else if (i < 30) \"Three\" else if (i < 40) \"Four\" else if (i < 50) \"Five\"\
    \ else if (i < 60) \"Six\" else if (i < 70) \"Seven\" else if (i < 80) \"Eight\"\
    \ else \"Nine\")\n        result", "        val m = arr.map(_.toString).map(_.length).max\n\
    \        val n = arr.map(_.toString).map(_.length).min\n        val r = arr.map(_.toString).map(_.toChar).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.toString.toUpperCase).map(_.toString.toLowerCase).map(_.to",
  "        val list = arr.toList\n        val len = list.size\n        val reversed\
    \ = list.sortWith(_ < _)\n        val ones = reversed.filter(x => x < 10)\n  \
    \      val tens = reversed.filter(x => x >= 10 && x < 100)\n        val hundreds\
    \ = reversed.filter(x => x >= 100)\n        val names = List(\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n  \
    \      val result = ones + tens + hundreds\n        result.map(x => names.find(y\
    \ => y == x.toString).getOrElse(\"Not found\"))", "        val result = arr.filter(_\
    \ >= 1l.toLong && _ <= 9l.toLong).sortWith(_ < _).reverse.map(x => s\"${x.toInt}\"\
    .toUpperCase)\n        if (arr.isEmpty) result\n        else result", "      \
    \  val result = arr.filter(_ > 0).toList\n        val reversed = result.reverse\n\
    \        val ones = reversed.filter(_ < 10)\n        val tens = reversed.filter(_\
    \ >= 10 && _ < 100)\n        val hundreds = reversed.filter(_ >= 100)\n      \
    \  val names = ones + tens + hundreds\n        names.map(name => if (name.length\
    \ > 1) name else \"One\")", "        val ones = arr.filter(x => x < 9).toList\n\
    \        val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val hundreds\
    \ = arr.filter(x => x >= 99).toList\n        val reversed = ones + tens + hundreds\n\
    \        val result = reversed.map(x => if (x == 0) \"One\" else if (x == 1) \"\
    Two\" else if (x == 2) \"Three\" else if (x == 3) \"Four\" else if (x == 4) \"\
    Five\" else if (x == 5) \"Six\" else if (x == 6) \"Seven\" else if (x == 7) \"\
    Eight\" else if (x == 8) \"Nine\" else \"Digit\" + x.toString)\n        result",
  "        val nums = arr.toList\n        val numsLen = nums.size\n        val numsDigits\
    \ = nums.map(_.toString.length).max\n        val numsDigitSum = nums.map(_.toString.length).sum\n\
    \        val numsDigitSum2 = numsDigitSum * numsLen\n        val numsDigitSum3\
    \ = numsDigitSum2 * numsLen\n        val numsDigitSum4 = numsDigitSum3 * numsLen\n\
    \        val numsDigitSum5 = numsDigitSum4 * numsLen\n        val numsDigitSum6\
    \ = numsDigitSum5 * numsLen\n        val numsDigitSum7 = numsDigitSum6 * numsLen\n\
    \        val numsDigitSum8 = numsDigitSum7 * numsLen\n        val numsDigitSum9\
    \ = numsDigitSum8 * numsLen\n        val numsDigitSum10 = numsDigitSum9 * numsLen\n\
    \        val numsDigitSum11 = numsDigitSum10 * numsLen\n        val numsDigitSum12\
    \ = numsDigitSum11 * numsLen\n        val numsDigitSum13 = numsDigitSum12 * numsLen\n\
    \        val numsDigitSum14 = numsDigitSum13 * numsLen\n        val numsDigitSum15\
    \ = numsDigitSum14 * numsLen\n        val numsDigitSum16 = numsDigitSum15 * numsLen\n\
    \        val numsDigitSum17 = numsDigitSum16 * numsLen\n        val numsDigitSum18\
    \ = numsDigitSum17 * numsLen\n        val numsDigitSum19 = numsDigitSum18 * numsLen\n\
    \        val numsDigitSum20 = numsDigitSum19 * numsLen\n        val numsDigitSum21\
    \ = numsDigitSum20 * numsLen\n        val numsDigitSum22 = numsDigitSum21 * numsLen\n\
    \        val numsDigitSum23 = numsDigitSum22 * numsLen\n        val numsDigitSum24\
    \ = numsDigitSum23 * numsLen\n        val numsDigitSum25 = numsDigitSum24 * numsLen\n\
    \        val numsDigitSum26 = numsDigitSum25 * numsLen\n        val numsDigitSum27\
    \ = numsDigitSum26 * numsLen\n        val numsDigitSum28 = numsDigitSum", "  \
    \      val nums = arr.toList\n        val len = arr.size\n        val ones = nums.filter(x\
    \ => x < 9).toList\n        val tens = nums.filter(x => x >= 9 && x < 99).toList\n\
    \        val hundreds = nums.filter(x => x >= 99).toList\n        val hundredsReversed\
    \ = hundreds.reverse\n        val tensReversed = tens.reverse\n        val onesReversed\
    \ = ones.reverse\n        val tensReversedReversed = tensReversed.reverse\n  \
    \      val onesReversedReversed = onesReversed.reverse\n        val tensReversedReversedReversed\
    \ = tensReversedReversed.reverse\n        val onesReversedReversedReversed = onesReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversed = onesReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversed = onesReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = onesReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = onesReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReverse", "        val ones = arr.filter(x =>\
    \ x < 10).toList\n        val tens = arr.filter(x => x >= 10 && x < 20).toList\n\
    \        val hundreds = arr.filter(x => x >= 20 && x < 30).toList\n        val\
    \ thousands = arr.filter(x => x >= 30 && x < 40).toList\n        val hundredsAndThousands\
    \ = arr.filter(x => x >= 40 && x < 50).toList\n        val hundredsAndHundreds\
    \ = arr.filter(x => x >= 50 && x < 60).toList\n        val hundredsAndHundredsAndThousands\
    \ = arr.filter(x => x >= 60 && x < 70).toList\n        val hundredsAndHundredsAndHundreds\
    \ = arr.filter(x => x >= 70 && x < 80).toList\n        val hundredsAndHundredsAndHundredsAndThousands\
    \ = arr.filter(x => x >= 80 && x < 90).toList\n        val hundredsAndHundredsAndHundredsAndHundreds\
    \ = arr.filter(x => x >= 90 && x < 100).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndThousands\
    \ = arr.filter(x => x >= 100 && x < 1000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundreds\
    \ = arr.filter(x => x >= 1000 && x < 10000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundredsAndThousands\
    \ = arr.filter(x => x >= 10000 && x < 100000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundredsAndHundreds\
    \ = arr.filter(x => x >= 100000 && x < 1000000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundredsAndHundredsAndThousands\
    \ = arr.filter(x => x >= 1000000 && x < 10000000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundredsAndHundredsAndHundreds\
    \ = arr.filter(x => x >= 10000000 && x < 100000000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundredsAndHundredsAndHundredsAndThousands\
    \ = arr.filter(x => x >= 100000000 && x < 1000000000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundredsAndHundredsAndHundred",
  "        val nums = arr.toList\n        val len = nums.map(_.toString.length).max\n\
    \        val maxNum = nums.max\n        val maxNumStr = maxNum.toString\n    \
    \    val maxNumStr = maxNumStr.substring(0, maxNumStr.length - len)\n        nums.sortWith((a,\
    \ b) => a < b).reverse.map(num => {\n            val digit = num.toString\n  \
    \          val digitStr = digit.substring(0, digit.length - len)\n           \
    \ val digitName = digitStr.charAt(0).toString + digitStr.substring(1)\n      \
    \      if (digitStr == maxNumStr) {\n                digitName\n            }\
    \ else {\n                digit\n            }\n        }).filterNot(_.isEmpty)",
  "        val nums = arr.filter(_ > 0).toList\n        val numsSorted = nums.sortBy(_\
    \ % 10)\n        val reversed = numsSorted.reverse\n        val reversedString\
    \ = reversed.map(_ % 10).map(x => x match {\n            case 0 => \"Zero\"\n\
    \            case 1 => \"One\"\n            case 2 => \"Two\"\n            case\
    \ 3 => \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\
    \n            case 6 => \"Six\"\n            case 7 => \"Seven\"\n           \
    \ case 8 => \"Eight\"\n            case 9 => \"Nine\"\n            case _ => \"\
    \"\n        }).mkString\n        reversedString.replaceAllIn(reversed, reversedString)",
  "        val nums = arr.toList\n        val len = nums.map(_.toString).map(_.length).max\n\
    \        val reversed = nums.reverse\n        val result = reversed.map(x => if\
    \ (x < 10) {\n            val str = x.toString\n            val index = str.length\
    \ - 1\n            str.substring(0, index) + s\"${str.substring(index, index)}\"\
    \ + str.substring(index + 1)\n        } else {\n            val str = x.toString\n\
    \            val index = str.length - 1\n            str.substring(0, index) +\
    \ s\"${str.substring(index, index)}\" + str.substring(index + 1)\n        }).filter(x\
    \ => x.toString.length == len)\n        val replaced = result.map(x => x.replaceAll(\"\
    \\\\d\", \"One\").replaceAll(\"\\\\D\", \"Two\").replaceAll(\"\\\\b\", \"Three\"\
    ).replaceAll(\"\\\\B\", \"Four\").replaceAll(\"\\\\s\", \"Five\").replaceAll(\"\
    \\\\S\", \"Six\").replaceAll(\"\\\\w\", \"Seven\").replaceAll(\"\\\\W\", \"Eight\"\
    ).replaceAll(\"\\\\p\", \"Nine\"))\n        replaced", "        val nums = arr.toList\n\
    \        val numsLength = nums.map(_.toString.length).max\n        val numsLengthString\
    \ = numsLength.toString\n        val numsLengthStringLength = numsLengthString.length\n\
    \        val numsLengthStringLength = numsLengthStringLength.toInt\n        val\
    \ numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength\
    \ = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n\
    \        val numsLengthStringLength = numsLengthStringLength.toInt\n        val\
    \ numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength\
    \ = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n\
    \        val numsLengthStringLength = numsLengthStringLength.toInt\n        val\
    \ numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength\
    \ = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n\
    \        val numsLengthStringLength = numsLengthStringLength.toInt\n        val\
    \ numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength\
    \ = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n\
    \        val numsLengthStringLength = numsLengthStringLength.toInt\n        val\
    \ numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength\
    \ = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n\
    \        val numsLengthStringLength = numsLengthStringLength.toInt\n        val\
    \ numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength\
    \ = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n\
    \        val numsLengthStringLength = numsLengthStringLength.toInt\n        val\
    \ numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength\
    \ = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n\
    \        val numsLengthStringLength = numsLengthStringLength.toInt\n        val\
    \ numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength\
    \ = numsLengthStringLength.toInt\n", "        val n = arr.length\n        val\
    \ m = arr.head\n        val result = new mutable.ListBuffer[String]()\n      \
    \  val ones = List(1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l)\n        val tens = List(10l,\
    \ 20l, 30l, 40l, 50l, 60l, 70l, 80l, 90l)\n        val hundreds = List(100l, 200l,\
    \ 300l, 400l, 500l, 600l, 700l, 800l, 900l)\n        val thousands = List(1000l,\
    \ 2000l, 3000l, 4000l, 5000l, 6000l, 7000l, 8000l, 9000l)\n        val tenThousands\
    \ = List(10000l, 20000l, 30000l, 40000l, 50000l, 60000l, 70000l, 80000l, 90000l)\n\
    \        val hundredThousands = List(100000l, 200000l, 300000l, 400000l, 500000l,\
    \ 600000l, 700000l, 800000l, 900000l)\n        val oneThousands = List(1000000l,\
    \ 2000000l, 3000000l, 4000000l, 5000000l, 6000000l, 7000000l, 8000000l, 9000000l)\n\
    \        val tenMillions = List(100000l*10l, 200000l*10l, 300000l*10l, 400000l*10l,\
    \ 500000l*10l, 600000l*10l, 700000l*10l, 800000l*10l, 900000l*10l)\n        val\
    \ hundredMillions = List(100000l*100l, 200000l*100l, 300000l*100l, 400000l*100l,\
    \ 500000l*100l, 600000l*100l, 700000l*100l, 800000l*100l, 900000l*100l)\n    \
    \    val thousandMillions = List(100000l*1000l, 200000l*1000l, 300000l*1000l,\
    \ 400000l*1000l, 500000l*1000l, 600000l*1000l, 700000l*1000l, 800000l*1000l, 900000l*1000l)\n\
    \        val oneMillion = List(1000000l*1000l)\n        val tenThousand = List(10000l*1000l,\
    \ 20000l*1000l, 30000l*1000l, 40000l*1000l, 50000l*1000l, 60000l*1000l, 70000l*1000l,\
    \ 80000l*1000l, 90000l*1000l)\n        val hundredThousand = List(100000l*1000l*100l,\
    \ 200000l*1000l*100l, 3", "        val ones = arr.filter(x => x < 10).toList\n\
    \        val tens = arr.filter(x => x >= 10 && x < 20).toList\n        val teens\
    \ = arr.filter(x => x >= 20 && x < 30).toList\n        val twenties = arr.filter(x\
    \ => x >= 30 && x < 40).toList\n        val thirties = arr.filter(x => x >= 40\
    \ && x < 50).toList\n        val fourties = arr.filter(x => x >= 50 && x < 60).toList\n\
    \        val fifties = arr.filter(x => x >= 60 && x < 70).toList\n        val\
    \ sixties = arr.filter(x => x >= 70 && x < 80).toList\n        val seventies =\
    \ arr.filter(x => x >= 80 && x < 90).toList\n        val eighties = arr.filter(x\
    \ => x >= 90 && x < 100).toList\n        val nineties = arr.filter(x => x >= 100).toList\n\
    \        val onesAndTens = ones + tens\n        val onesAndTwenties = ones + twenties\n\
    \        val onesAndThirties = ones + thirties\n        val onesAndFourties =\
    \ ones + fourties\n        val onesAndFifties = ones + fifties\n        val onesAndSixties\
    \ = ones + sixties\n        val onesAndSeventies = ones + seventies\n        val\
    \ onesAndEighties = ones + eighties\n        val onesAndNineties = ones + nineties\n\
    \        val tensAndTwenties = tens + twenties\n        val tensAndThirties =\
    \ tens + thirties\n        val tensAndFourties = tens + fourties\n        val\
    \ tensAndFifties = tens + fifties\n        val tensAndSixties = tens + sixties\n\
    \        val tensAndSeventies = tens + seventies\n        val tensAndEighties\
    \ = tens + eighties\n        val tensAndNineties = tens + nineties\n        val\
    \ twentiesAndThirties = twenties + thirties\n        val twentiesAndFourties =\
    \ twenties + fourties\n        val twentiesAndFifties = twenties + fifties\n \
    \       val twentiesAndSixties = twenties + sixties\n        val twentiesAndSeventies\
    \ = twenties + seventies\n        val twentiesAndEighties = twenties + eighties\n\
    \        val twenties", "        val list = arr.toList\n        val len = list.size\n\
    \        val one = list.filter(x => x < 10).toList\n        val two = list.filter(x\
    \ => x >= 10 && x < 20).toList\n        val three = list.filter(x => x >= 20 &&\
    \ x < 30).toList\n        val four = list.filter(x => x >= 30 && x < 40).toList\n\
    \        val five = list.filter(x => x >= 40 && x < 50).toList\n        val six\
    \ = list.filter(x => x >= 50 && x < 60).toList\n        val seven = list.filter(x\
    \ => x >= 60 && x < 70).toList\n        val eight = list.filter(x => x >= 70 &&\
    \ x < 80).toList\n        val nine = list.filter(x => x >= 80 && x < 90).toList\n\
    \        val ten = list.filter(x => x >= 90 && x < 100).toList\n        val ten_one\
    \ = one.filter(x => x >= 10).toList\n        val ten_two = two.filter(x => x >=\
    \ 10).toList\n        val ten_three = three.filter(x => x >= 10).toList\n    \
    \    val ten_four = four.filter(x => x >= 10).toList\n        val ten_five = five.filter(x\
    \ => x >= 10).toList\n        val ten_six = six.filter(x => x >= 10).toList\n\
    \        val ten_seven = seven.filter(x => x >= 10).toList\n        val ten_eight\
    \ = eight.filter(x => x >= 10).toList\n        val ten_nine = nine.filter(x =>\
    \ x >= 10).toList\n        val ten_ten = ten.filter(x => x >= 10).toList\n   \
    \     val ten_ten_one = ten_one.filter(x => x >= 10).toList\n        val ten_ten_two\
    \ = ten_two.filter(x => x >= 10).toList\n        val ten_ten_three = ten_three.filter(x\
    \ => x >= 10).toList\n        val ten_ten_four = ten_four.filter(x => x >= 10).toList\n\
    \        val ten_ten_five = ten_five.filter(x => x >= 10).toList\n        val\
    \ ten_ten_six = ten_six.filter(x => x >= 10).toList\n        val ten_ten_seven\
    \ = ten_seven.filter(x => x >= 10).toList\n        val ten_ten_eight = ten_eight.filter(x\
    \ => x >= 10).toList\n        val ten_ten_nine = ten_nine.filter(", "        val\
    \ m = arr.head\n        val n = arr.last\n        val ones = arr.filter(_ <= 9).toList\n\
    \        val tens = arr.filter(_ >= 10 && _ < 100).toList\n        val hundreds\
    \ = arr.filter(_ >= 100).toList\n        val hundredsReversed = hundreds.reverse\n\
    \        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n\
    \        val tensReversedReversed = tensReversed.reverse\n        val onesReversedReversed\
    \ = onesReversed.reverse\n        val tensReversedReversedReversed = tensReversedReversed.reverse\n\
    \        val onesReversedReversedReversed = onesReversedReversed.reverse\n   \
    \     val tensReversedReversedReversedReversed = tensReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversed = onesReversedReversedReversed.reverse\n\
    \        val tensReversedReversedReversedReversedReversed = tensReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversed.reverse\n\
    \        val tensReversedReversedReversedReversedReversedReversedReversed = tensReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = onesReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val tensReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = tensReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val tensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = tensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = onesReversed", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val reversed = arr.sortWith(_ < _)\n        val result = reversed.reverse.map(i\
    \ => if (i < 10) \"One\" else if (i < 20) \"Two\" else if (i < 30) \"Three\" else\
    \ if (i < 40) \"Four\" else if (i < 50) \"Five\" else if (i < 60) \"Six\" else\
    \ if (i < 70) \"Seven\" else if (i < 80) \"Eight\" else \"Nine\")\n        if\
    \ (len == 0) result\n        else result.reverse", "        val list = arr.toList\n\
    \        val len = list.size\n        val ones = list.filter(_ <= 9).toList\n\
    \        val tens = list.filter(_ <= 99).toList\n        val hundreds = list.filter(_\
    \ <= 999).toList\n        val thousands = list.filter(_ <= 9999).toList\n    \
    \    val tenThousands = list.filter(_ <= 999999).toList\n        val hundredThousands\
    \ = list.filter(_ <= 9999999).toList\n        val thousandThousands = list.filter(_\
    \ <= 999999999).toList\n        val oneThousand = list.filter(_ <= 99999999999).toList\n\
    \        val oneHundred = list.filter(_ <= 999999999999).toList\n        val oneThousandThousand\
    \ = list.filter(_ <= 999999999999999).toList\n        val oneHundredThousand =\
    \ list.filter(_ <= 9999999999999999).toList\n        val oneThousandHundred =\
    \ list.filter(_ <= 9999999999999999999).toList\n        val oneHundredThousandThousand\
    \ = list.filter(_ <= 99999999999999999999).toList\n        val oneHundredThousandHundred\
    \ = list.filter(_ <= 99999999999999999999999).toList\n        val oneThousandHundredThousand\
    \ = list.filter(_ <= 999999999999999999999999).toList\n        val oneHundredThousandHundredThousand\
    \ = list.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandHundredThousandHundred\
    \ = list.filter(_ <= 9999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundred\
    \ = list.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandHundredThousandHundredThousand\
    \ = list.filter(_ <= 99999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousand\
    \ = list.filter(_ <= 99999999999999999999999999999999999).toList\n        val\
    \ oneThousandHundredThousandHundredThousandHundredThousand = list.filter(_ <=\
    \ 9999999999999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHund",
  "        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x\
    \ => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed\
    \ = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n\
    \        val tensReversedString = tensReversed.map(x => Ten(x))\n        val tensReversedString2\
    \ = tensReversed.map(x => Ten(x))\n        val tensReversedString3 = tensReversed.map(x\
    \ => Ten(x))\n        val tensReversedString4 = tensReversed.map(x => Ten(x))\n\
    \        val tensReversedString5 = tensReversed.map(x => Ten(x))\n        val\
    \ tensReversedString6 = tensReversed.map(x => Ten(x))\n        val tensReversedString7\
    \ = tensReversed.map(x => Ten(x))\n        val tensReversedString8 = tensReversed.map(x\
    \ => Ten(x))\n        val tensReversedString9 = tensReversed.map(x => Ten(x))\n\
    \        val tensReversedString10 = tensReversed.map(x => Ten(x))\n        val\
    \ tensReversedString11 = tensReversed.map(x => Ten(x))\n        val tensReversedString12\
    \ = tensReversed.map(x => Ten(x))\n        val tensReversedString13 = tensReversed.map(x\
    \ => Ten(x))\n        val tensReversedString14 = tensReversed.map(x => Ten(x))\n\
    \        val tensReversedString15 = tensReversed.map(x => Ten(x))\n        val\
    \ tensReversedString16 = tensReversed.map(x => Ten(x))\n        val tensReversedString17\
    \ = tensReversed.map(x => Ten(x))\n        val tensReversedString18 = tensReversed.map(x\
    \ => Ten(x))\n        val tensReversedString19 = tensReversed.map(x => Ten(x))\n\
    \        val tensReversedString20 = tensReversed.map(x => Ten(x))\n        val\
    \ tensReversedString21 = tensReversed.map(x => Ten(x))\n        val tensReversedString22\
    \ = tensReversed.map(x => Ten(x))\n        val tensReversedString23 = tensReversed.map(x\
    \ => Ten(x))\n        val tensReversedString24 = tensReversed.map(x => Ten(x))\n\
    \        val tensReverse", "        val ones = arr.filter(x => x >= 1l.toLong\
    \ && x <= 9l.toLong)\n        val tens = arr.filter(x => x >= 10l.toLong && x\
    \ <= 99l.toLong)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x\
    \ <= 999l.toLong)\n        val thousands = arr.filter(x => x >= 1000l.toLong &&\
    \ x <= 9999l.toLong)\n        val tenThousands = arr.filter(x => x >= 100000l.toLong\
    \ && x <= 999999l.toLong)\n        val oneThousands = arr.filter(x => x >= 1000000l.toLong\
    \ && x <= 9999999l.toLong)\n        val oneHundreds = arr.filter(x => x >= 10000000l.toLong\
    \ && x <= 999999999l.toLong)\n        val oneThousandHundreds = arr.filter(x =>\
    \ x >= 100000000l.toLong && x <= 99999999999l.toLong)\n        val oneThousandThousandHundreds\
    \ = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n  \
    \      val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000l.toLong\
    \ && x <= 999999999999999l.toLong)\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 10000000000000l.toLong && x <= 9999999999999999999l.toLong)\n      \
    \  val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x\
    \ >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n        val\
    \ oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x =>\
    \ x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n   \
    \     val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 10000000000000000l.toLong && x <= 999999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousandTh", "       \
    \ val list = arr.toList\n        val len = list.size\n        val newList = list.sortWith((a,\
    \ b) => a < b).reverse\n        val newLen = newList.size\n        val newList2\
    \ = newList.map(x => if (x == 0) \"Zero\" else if (x == 1) \"One\" else if (x\
    \ == 2) \"Two\" else if (x == 3) \"Three\" else if (x == 4) \"Four\" else if (x\
    \ == 5) \"Five\" else if (x == 6) \"Six\" else if (x == 7) \"Seven\" else if (x\
    \ == 8) \"Eight\" else if (x == 9) \"Nine\" else x.toString)\n        val newLen2\
    \ = newList2.size\n        if (newLen != len) newList2\n        else if (newLen2\
    \ == 0) List()\n        else newList2", "        val list = arr.toList\n     \
    \   val len = list.size\n        val ones = list.filter(_ < 10).toList\n     \
    \   val tens = list.filter(_ >= 10 && _ < 20).toList\n        val teens = list.filter(_\
    \ >= 20 && _ < 30).toList\n        val hundreds = list.filter(_ >= 30).toList\n\
    \        val thousands = list.filter(_ >= 100).toList\n        val millions =\
    \ list.filter(_ >= 1000).toList\n        val billions = list.filter(_ >= 10000).toList\n\
    \        val trillions = list.filter(_ >= 100000).toList\n        val quadrillions\
    \ = list.filter(_ >= 1000000).toList\n        val quintillions = list.filter(_\
    \ >= 10000000).toList\n        val sextillions = list.filter(_ >= 100000000).toList\n\
    \        val septillions = list.filter(_ >= 1000000000).toList\n        val octillions\
    \ = list.filter(_ >= 10000000000).toList\n        val nonillions = list.filter(_\
    \ >= 100000000000).toList\n        val decillions = list.filter(_ >= 1000000000000).toList\n\
    \        val undecillions = list.filter(_ >= 10000000000000).toList\n        val\
    \ duodecillions = list.filter(_ >= 100000000000000).toList\n        val tredecillions\
    \ = list.filter(_ >= 1000000000000000).toList\n        val quattuordecillions\
    \ = list.filter(_ >= 10000000000000000).toList\n        val quindecillions = list.filter(_\
    \ >= 100000000000000000).toList\n        val sexdecillions = list.filter(_ >=\
    \ 1000000000000000000).toList\n        val septendecillions = list.filter(_ >=\
    \ 10000000000000000000).toList\n        val octodecillions = list.filter(_ >=\
    \ 100000000000000000000).toList\n        val novemdecillions = list.filter(_ >=\
    \ 1000000000000000000000).toList\n        val vigintillions = list.filter(_ >=\
    \ 10000000000000000000000).toList\n        val unvigintillions = list.filter(_\
    \ >= 100000000000000000000000).toList\n        val duovigintillions = list.filter(_\
    \ >= 1000000000000000000000000).toList\n        val trevigintillions = list.filter(_\
    \ >= 10000000000000000000000000).toList\n        val quattuorvigintillions = list.filter(_\
    \ >= 100000000000000000000000000).toList\n        val quinvigintillions = list.filter(_\
    \ >= 1000000000000000000000000000", "        val ones = arr.filter(_ <= 9).toList\n\
    \        val tens = arr.filter(_ >= 10 && _ <= 99).toList\n        val tensReversed\
    \ = tens.reverse\n        val onesReversed = ones.reverse\n        val tensReversedString\
    \ = tensReversed.mkString(\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val onesReversedString = onesReversed.mkString(\"\
    \", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\")\n        val onesReversedStringList = onesReversedString.split(\"\
    One\").map(_.toInt)\n        val tensReversedStringList = tensReversedString.split(\"\
    Two\").map(_.toInt)\n        val onesReversedStringList = onesReversedString.split(\"\
    Three\").map(_.toInt)\n        val tensReversedStringList = tensReversedString.split(\"\
    Four\").map(_.toInt)\n        val onesReversedStringList = onesReversedString.split(\"\
    Five\").map(_.toInt)\n        val tensReversedStringList = tensReversedString.split(\"\
    Six\").map(_.toInt)\n        val onesReversedStringList = onesReversedString.split(\"\
    Seven\").map(_.toInt)\n        val tensReversedStringList = tensReversedString.split(\"\
    Eight\").map(_.toInt)\n        val onesReversedStringList = onesReversedString.split(\"\
    Nine\").map(_.toInt)\n        val onesReversedStringList = onesReversedString.split(\"\
    Ten\").map(_.toInt)\n        val tensReversedStringList = tensReversedString.split(\"\
    Eleven\").map(_.toInt)\n        val onesReversedStringList = onesReversedString.split(\"\
    Twelve\").map(_.toInt)\n        val tensReversedStringList = tensReversedString.split(\"\
    Thirteen\").map(_.toInt)\n        val onesReversedStringList = onesReversedString.split(\"\
    Fourteen\").map(_.toInt)\n        val tensReversedStringList = tensReversedString.split(\"\
    Fifteen\").map(_.toInt)\n        val onesReversedStringList = onesReversedString.split(\"\
    Sixteen\").map(_.toInt)\n        val tensReversedStringList = tensReversedString.split(\"\
    Seventeen\").map(_.toInt)", "        val nums = arr.toList\n        val len =\
    \ nums.map(_.toString.length).max\n        val maxNum = nums.max\n        val\
    \ minNum = nums.min\n        val maxLen = len\n        val minLen = len\n    \
    \    val maxNumStr = maxNum.toString\n        val minNumStr = minNum.toString\n\
    \        val maxLenStr = maxLen.toString\n        val minLenStr = minLen.toString\n\
    \        val maxNumLen = maxNumStr.length\n        val minNumLen = minNumStr.length\n\
    \        val maxLenLen = maxLenStr.length\n        val minLenLen = minLenStr.length\n\
    \        val maxNumDigits = maxNumStr.dropWhile(_ == '0').length\n        val\
    \ minNumDigits = minNumStr.dropWhile(_ == '0').length\n        val maxLenDigits\
    \ = maxLenStr.dropWhile(_ == '0').length\n        val minLenDigits = minLenStr.dropWhile(_\
    \ == '0').length\n        val maxNumDigitLen = maxNumDigits.toString\n       \
    \ val minNumDigitLen = minNumDigits.toString\n        val maxLenDigitLen = maxLenDigits.toString\n\
    \        val minLenDigitLen = minLenDigits.toString\n        val maxNumDigitLenLen\
    \ = maxNumDigitLen.toString\n        val minNumDigitLenLen = minNumDigitLen.toString\n\
    \        val maxLenDigitLenLen = maxLenDigitLen.toString\n        val minLenDigitLenLen\
    \ = minLenDigitLen.toString\n        val maxNumDigitLenLen = maxNumDigitLenLen.toString\n\
    \        val minNumDigitLenLen = minNumDigitLenLen.toString\n        val maxLenDigitLenLen\
    \ = maxLenDigitLenLen.toString\n        val minLenDigitLenLen = minLenDigitLenLen.toString\n\
    \        val maxNumDigitLenLen = maxNumDigitLenLen.toString\n        val minNumDigitLenLen\
    \ = minNumDigitLenLen.toString\n        val maxLenDigitLenLen = maxLenDigitLenLen.toString\n\
    \        val minLenDigitLenLen = minLenDigitLenLen.toString\n        val maxNumDigitLenLen\
    \ = maxNumDigitLenLen.toString\n        val minNumDigitLenLen = minNumDigitLenLen.toString\n\
    \        val maxLenDigitLenLen = maxLenDigitLenLen.toString\n        val minLenDigitLenLen\
    \ = minLenDigitLenLen.toString\n        val maxNumDigitLenLen = maxNumDigitLenLen.toString\n\
    \        val minNum", "        val ones = arr.filter(x => x < 9).toList\n    \
    \    val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val hundreds\
    \ = arr.filter(x => x >= 99).toList\n        val hundredsReversed = hundreds.reverse\n\
    \        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n\
    \        val onesAndTens = onesReversed.zip(tensReversed)\n        val onesAndHundreds\
    \ = onesAndTens.zip(hundredsReversed)\n        val onesAndHundredsReversed = onesAndHundreds.reverse\n\
    \        val onesAndHundredsReversedZipped = onesAndHundredsReversed.zip(onesAndHundredsReversed)\n\
    \        val onesAndHundredsReversedZippedReversed = onesAndHundredsReversedZipped.reverse\n\
    \        val onesAndHundredsReversedZippedReversedZipped = onesAndHundredsReversedZippedReversed.zip(onesAndHundredsReversedZippedReversed)\n\
    \        val onesAndHundredsReversedZippedReversedZippedReversed = onesAndHundredsReversedZippedReversedZipped.reverse\n\
    \        val onesAndHundredsReversedZippedReversedZippedReversedZipped = onesAndHundredsReversedZippedReversedZippedReversedZipped.zip(onesAndHundredsReversedZippedReversedZippedReversed)\n\
    \        val onesAndHundredsReversedZippedReversedZippedReversedZippedReversed\
    \ = onesAndHundredsReversedZippedReversedZippedReversedZippedReversed.zip(onesAndHundredsReversedZippedReversedZippedReversedZippedReversed)\n\
    \        val onesAndHundredsReversedZippedReversedZippedReversedZippedReversedZipped\
    \ = onesAndHundredsReversedZippedReversedZippedReversedZippedReversedZippedReversed.zip(onesAndHundredsReversedZippedReversedZippedReversedZippedReversedZipped)\n\
    \        val onesAndHundredsReversedZippedReversedZippedReversedZippedReversedZippedReversed\
    \ = onesAndHundredsReversedZippedReversedZippedReversedZippedReversedZippedReversed.zip(onesAndHundred",
  "        val arr = arr.toList\n        val len = arr.size\n        val ones = arr.filter(x\
    \ => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >=\
    \ 10l.toLong && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >=\
    \ 100l.toLong && x <= 999l.toLong)\n        val thousands = arr.filter(x => x\
    \ >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands = arr.filter(x\
    \ => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands = arr.filter(x\
    \ => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val oneHundreds =\
    \ arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n        val\
    \ oneThousandThousands = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n\
    \        val oneThousandHundreds = arr.filter(x => x >= 1000000000l.toLong &&\
    \ x <= 999999999999l.toLong)\n        val oneThousandThousandHundreds = arr.filter(x\
    \ => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n        val oneThousandThousandHundredThousands\
    \ = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999999l.toLong)\n\
    \        val oneThousandThousandHundredThousandHundreds = arr.filter(x => x >=\
    \ 100000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n        val\
    \ oneThousandThousandHundredThousandHundredThousands = arr.filter(x => x >= 10000000000000000l.toLong\
    \ && x <= 999999999999999999999999999l.toLong)\n        val oneThousandThousandHundredThousandHundredThousandHundreds\
    \ = arr.filter(x => x >= 100000000000000000l.toLong && x <= 9999999999999999999999999999999l.toLong)\n\
    \        val oneThousandThousandHundredThousandHundredThousandHundredThousands\
    \ = arr.filter(x => x >= 1000000000000000000l.toLong && x <= 99999999999999999999999999999999999l.toLong)\n\
    \        val oneThousandThousand", "        val ones = arr.filter(x => x < 9).toList\n\
    \        val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val tensReversed\
    \ = tens.reverse\n        val tensReversedString = tensReversed.map(x => x.toString).mkString(\"\
    \")\n        val onesReversed = ones.reverse\n        val onesReversedString =\
    \ onesReversed.map(x => x.toString).mkString(\"\")\n        val tensReversedString\
    \ = tensReversedString.replaceAll(\"\\\\D\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"\\\\D\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^0\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^1\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^2\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^3\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^4\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^5\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^6\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^7\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^8\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^9\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^10\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^11\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^12\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^13\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^14\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^15\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^16\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^17\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^18\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^19\", \"\")\n        val onesReverse", " \
    \       val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_\
    \ >= 10 && _ <=99).toList\n        val hundreds = arr.filter(_ >= 100 && _ <=\
    \ 999).toList\n        val thousands = arr.filter(_ >= 1000)\n        val hundredsString\
    \ = hundreds.map(_ => hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_) + 1).map(hundreds.indexOf(_)\
    \ + 1).map(hundreds.indexOf(_) + 1).map(hundred", "        val ones = arr.filter(x\
    \ => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >=\
    \ 10l.toLong && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >=\
    \ 100l.toLong && x <= 999l.toLong)\n        val thousands = arr.filter(x => x\
    \ >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands = arr.filter(x\
    \ => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands = arr.filter(x\
    \ => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val oneHundreds =\
    \ arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n        val\
    \ oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n\
    \        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000l.toLong\
    \ && x <= 999999999999l.toLong)\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >=\
    \ 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000000l.toLong && x <= 9999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n    \
    \    val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 10000000000000000l.toLong && x <= 999999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousandTh", "       \
    \ val list = arr.toList\n        val len = list.size\n        val reversed = list.sortWith(_\
    \ < _)\n        val result = reversed.reverse.map(x => if (x < 10) \"One\" else\
    \ if (x < 100) \"Two\" else if (x < 1000) \"Three\" else if (x < 10000) \"Four\"\
    \ else \"Five\" else if (x < 100000) \"Six\" else if (x < 1000000) \"Seven\" else\
    \ \"Eight\" else if (x < 10000000) \"Nine\" else \"Zero\")\n        val finalResult\
    \ = result.map(x => if (x.toString.length == 1) x else x.toString + \" \" + x)\n\
    \        if (finalResult.isEmpty) Nil\n        else finalResult", "        val\
    \ nums = arr.toList.sortWith(_ < _)\n        val reversed = nums.reverse\n   \
    \     val result = reversed.map(x => if (x < 10) \"One\" else if (x < 20) \"Two\"\
    \ else if (x < 30) \"Three\" else if (x < 40) \"Four\" else if (x < 50) \"Five\"\
    \ else if (x < 60) \"Six\" else if (x < 70) \"Seven\" else if (x < 80) \"Eight\"\
    \ else \"Nine\")\n        result", "        val len = arr.size\n        if (len\
    \ == 0) return Nil\n        val min = arr.min\n        val max = arr.max\n   \
    \     val ones = arr.filter(x => x < min || x > max).map(x => One(x))\n      \
    \  val tens = arr.filter(x => x >= min && x <= max).map(x => Ten(x))\n       \
    \ val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n \
    \       val tensReversedString = tensReversed.mkString(\"\")\n        val onesReversedString\
    \ = onesReversed.mkString(\"\")\n        val onesReversedStringLength = onesReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ onesReversedStringLength = onesReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val onesReversedStringLength = onesReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ onesReversedString", "        val list = arr.toList\n        val len = list.size\n\
    \        val reversed = list.sortWith(_ < _)\n        val ones = reversed.filter(_\
    \ < 10)\n        val tens = reversed.filter(_ >= 10)\n        val tensReversed\
    \ = tens.reverse\n        val tensReversedList = tensReversed.toList\n       \
    \ val tensReversedLen = tensReversedList.size\n        val tensReversedReversed\
    \ = tensReversedList.sortWith(_ < _)\n        val tensReversedReversedList = tensReversedReversed.toList\n\
    \        val tensReversedReversedLen = tensReversedReversedList.size\n       \
    \ val tensReversedReversedReversed = tensReversedReversedList.sortWith(_ < _)\n\
    \        val tensReversedReversedReversedList = tensReversedReversedReversed.toList\n\
    \        val tensReversedReversedReversedLen = tensReversedReversedReversedList.size\n\
    \        val tensReversedReversedReversedReversed = tensReversedReversedReversedList.sortWith(_\
    \ < _)\n        val tensReversedReversedReversedReversedList = tensReversedReversedReversedReversedReversed.toList\n\
    \        val tensReversedReversedReversedReversedLen = tensReversedReversedReversedReversedReversedList.size\n\
    \        val tensReversedReversedReversedReversedReversed = tensReversedReversedReversedReversedReversedList.sortWith(_\
    \ < _)\n        val tensReversedReversedReversedReversedReversedList = tensReversedReversedReversedReversedReversedReversed.toList\n\
    \        val tensReversedReversedReversedReversedReversedLen = tensReversedReversedReversedReversedReversedReversedList.size\n\
    \        val tensReversedReversedReversedReversedReversedReversed = tensReversedReversedReversedReversedReversedReversedList.sortWith(_\
    \ < _)\n        val tensReversedReversedReversedReversedReversedReversedList =\
    \ tensReversedReversedReversedReversedReversedReversedReversedReversed.toList\n\
    \        val tensReversedReversedReversedReversedReversedReversedLen = tensReversedReversedReversedReversedReversedReversedReversedList.size\n\
    \        val ten", "        val ones = arr.filter(x => x < 9).toList\n       \
    \ val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val hundreds =\
    \ arr.filter(x => x >= 99).toList\n        val hundredsReversed = hundreds.reverse\n\
    \        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n\
    \        val onesReversedWithOnes = onesReversed.map(x => if (x == 1) \"One\"\
    \ else x.toString)\n        val tensReversedWithOnes = tensReversed.map(x => if\
    \ (x == 1) \"One\" else x.toString)\n        val hundredsReversedWithOnes = hundredsReversed.map(x\
    \ => if (x == 1) \"One\" else x.toString)\n        val hundredsReversedWithOnesAndTens\
    \ = hundredsReversed.map(x => if (x == 1) \"One\" else x.toString).zip(tensReversed)\n\
    \        val hundredsReversedWithOnesAndTensAndOnes = hundredsReversed.map(x =>\
    \ if (x == 1) \"One\" else x.toString).zip(tensReversed).zip(onesReversed)\n \
    \       val hundredsReversedWithOnesAndTensAndOnesAndTens = hundredsReversed.map(x\
    \ => if (x == 1) \"One\" else x.toString).zip(tensReversed).zip(onesReversed).zip(tensReversed)\n\
    \        val hundredsReversedWithOnesAndTensAndOnesAndTensAndOnes = hundredsReversed.map(x\
    \ => if (x == 1) \"One\" else x.toString).zip(tensReversed).zip(onesReversed).zip(tensReversed).zip(onesReversed)\n\
    \        val hundredsReversedWithOnesAndTensAndOnesAndTensAndOnesAndOnes = hundredsReversed.map(x\
    \ => if (x == 1) \"One\" else x.toString).zip(tensReversed).zip(onesReversed).zip(tensReversed).zip(onesReversed).zip(onesReversed)\n\
    \        val hundredsReversedWithOnesAndTensAndOnesAndTensAndOnesAndOnesAndTens\
    \ = hundredsReversed.map(x => if (x == 1) \"One\" else x.toString).zip(tensReversed).zip(onesReversed).zip(tensReversed).zip(onesReversed).zip(onesReversed).zip(tensReversed)\n\
    \        val hundredsReversedWithOnesAndTensAndOnesAndTensAndOnesAndOne", "  \
    \      val len = arr.length\n        val ones = arr.filter(_ <= 9).toList\n  \
    \      val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_\
    \ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n     \
    \   val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands\
    \ = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <=\
    \ 999999999).toList\n        val oneThousandThousands = arr.filter(_ <= 99999999999).toList\n\
    \        val oneHundredThousands = arr.filter(_ <= 999999999999999).toList\n \
    \       val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_\
    \ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999", "     \
    \   val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n\
    \        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_\
    \ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n\
    \        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds\
    \ = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands = arr.filter(_\
    \ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_ <= 999999999999999).toList\n\
    \        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_\
    \ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n\
    \        val oneHund", "        val ones = arr.filter(x => x < 9).toList\n   \
    \     val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val hundreds\
    \ = arr.filter(x => x >= 99).toList\n        val hundredsReversed = hundreds.reverse\n\
    \        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n\
    \        val onesReversedString = onesReversed.map(x => One(x))\n        val tensReversedString\
    \ = tensReversed.map(x => Two(x))\n        val hundredsReversedString = hundredsReversed.map(x\
    \ => Three(x))\n        val hundredsReversedString2 = hundredsReversed.map(x =>\
    \ Four(x))\n        val hundredsReversedString3 = hundredsReversed.map(x => Five(x))\n\
    \        val hundredsReversedString4 = hundredsReversed.map(x => Six(x))\n   \
    \     val hundredsReversedString5 = hundredsReversed.map(x => Seven(x))\n    \
    \    val hundredsReversedString6 = hundredsReversed.map(x => Eight(x))\n     \
    \   val hundredsReversedString7 = hundredsReversed.map(x => Nine(x))\n       \
    \ val hundredsReversedString8 = hundredsReversed.map(x => Ten(x))\n        val\
    \ hundredsReversedString9hundredsReversedString10hundredsReversedString11hundredsReversedString12hundredsReversedString13hundredsReversedString14hundredsReversedString15hundredsReversedString16hundredsReversedString17hundredsReversedString18hundredsReversedString19hundredsReversedString20hundredsReversedString21hundredsReversedString22hundredsReversedString23hundredsReversedString24hundredsReversedString25hundredsReversedString26hundredsReversedString27hundredsReversedString28hundredsReversedString29hundredsReversedString30hundredsReversedString31hundredsReversedString32hundredsReversedString33hundredsReversedString34hundredsReversedString35hundredsReversedString36hundredsReversedString37hundredsReversedString38hundredsReversedString39hundredsReversedString40hundredsReversedString41hundredsReversedString42",
  "        val nums = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong)\n        if (nums.isEmpty)\
    \ List()\n        else nums.sortWith(_ < _).reverse.map(_.toString).map(name =>\
    \ s\"${name.toLowerCase()}\").toList", "        val result = new mutable.ListBuffer[String]()\n\
    \        var i = 0\n        while (i < arr.length) {\n            val num = arr(i)\n\
    \            if (num < 1 || num > 9) {\n                result.clear()\n     \
    \           return\n            }\n            val digit = num.toString.toInt\n\
    \            val name = if (digit == 1) \"One\" else if (digit == 2) \"Two\" else\
    \ if (digit == 3) \"Three\" else if (digit == 4) \"Four\" else if (digit == 5)\
    \ \"Five\" else if (digit == 6) \"Six\" else if (digit == 7) \"Seven\" else if\
    \ (digit == 8) \"Eight\" else if (digit == 9) \"Nine\" else null\n           \
    \ if (name != null) result += name\n            i += 1\n        }\n        result.toList",
  "        val ones = arr.filter(x => x < 9).map(x => s\"One\")\n        val twos\
    \ = arr.filter(x => x < 18).map(x => s\"Two\")\n        val threes = arr.filter(x\
    \ => x < 27).map(x => s\"Three\")\n        val fours = arr.filter(x => x < 36).map(x\
    \ => s\"Four\")\n        val fives = arr.filter(x => x < 45).map(x => s\"Five\"\
    )\n        val sixes = arr.filter(x => x < 54).map(x => s\"Six\")\n        val\
    \ sevens = arr.filter(x => x < 63).map(x => s\"Seven\")\n        val eights =\
    \ arr.filter(x => x < 72).map(x => s\"Eight\")\n        val nines = arr.filter(x\
    \ => x < 81).map(x => s\"Nine\")\n        val reversed = arr.reverse\n       \
    \ val result = reversed.map(x => x match {\n            case x if x < 10 => ones(x)\n\
    \            case x if x < 20 => twos(x)\n            case x if x < 30 => threes(x)\n\
    \            case x if x < 40 => fours(x)\n            case x if x < 50 => fives(x)\n\
    \            case x if x < 60 => sixes(x)\n            case x if x < 70 => sevens(x)\n\
    \            case x if x < 80 => eights(x)\n            case x if x < 90 => nines(x)\n\
    \            case _ => \"\"\n        })\n        result.filter(x => x.nonEmpty).map(x\
    \ => x.mkString(\"\"))", "        val result = arr.sortWith(_ < _)\n        val\
    \ reversed = result.reverse\n        val reversedStrings = reversed.map(_.toString)\n\
    \        val reversedStringsMap = new mutable.HashMap[String, String]()\n    \
    \    reversedStrings.foreach(s => reversedStringsMap(s.toInt) = s)\n        reversedStrings.map(reversedStringsMap.get(_))",
  "        val nums = arr.toList\n        val len = nums.map(_.toString.length).max\n\
    \        val numsSorted = nums.sortBy(_.toString.length)\n        val reversed\
    \ = numsSorted.reverse\n        val result = reversed.map(num => {\n         \
    \   val digit = num.toString.charAt(len - num.toString.length)\n            val\
    \ name = if (digit == '1') \"One\" else if (digit == '2') \"Two\" else if (digit\
    \ == '3') \"Three\" else if (digit == '4') \"Four\" else if (digit == '5') \"\
    Five\" else if (digit == '6') \"Six\" else if (digit == '7') \"Seven\" else if\
    \ (digit == '8') \"Eight\" else if (digit == '9') \"Nine\" else \"?\"\n      \
    \      name + digit\n        })\n        if (result.isEmpty) Nil else result",
  "        val result = arr.filter(_ >= 1l && _ <= 9l).sortWith(_ < _).reverse\n \
    \       val map = Map(\"One\" -> 1l, \"Two\" -> 2l, \"Three\" -> 3l, \"Four\"\
    \ -> 4l, \"Five\" -> 5l, \"Six\" -> 6l, \"Seven\" -> 7l, \"Eight\" -> 8l, \"Nine\"\
    \ -> 9l)\n        val result2 = result.map(x => map.getOrElse(x.toString, x))\n\
    \        result2.toList", "        val arr = arr.toList\n        val len = arr.size\n\
    \        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x\
    \ => x >= 9 && x < 99).toList\n        val hundreds = arr.filter(x => x >= 99).toList\n\
    \        val tensReversed = tens.reverse\n        val hundredsReversed = hundreds.reverse\n\
    \        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x\
    \ => One(x))\n        val tensReversedString = tensReversed.map(x => Two(x))\n\
    \        val hundredsReversedString = hundredsReversed.map(x => Three(x))\n  \
    \      val hundredsReversedString2 = hundredsReversed.map(x => Four(x))\n    \
    \    val hundredsReversedString3 = hundredsReversed.map(x => Five(x))\n      \
    \  val hundredsReversedString4 = hundredsReversed.map(x => Six(x))\n        val\
    \ hundredsReversedString5 = hundredsReversed.map(x => Seven(x))\n        val hundredsReversedString6\
    \ = hundredsReversed.map(x => Eight(x))\n        val hundredsReversedString7 =\
    \ hundredsReversed.map(x => Nine(x))\n        val hundredsReversedString8 = hundredsReversed.map(x\
    \ => Ten(x))\n        val hundredsReversedString9hundredsReversedString = hundredsReversed.map(x\
    \ => Ten(x))\n        val hundredsReversedString10hundredsReversedString = hundredsReversed.map(x\
    \ => Ten(x))\n        val hundredsReversedString11hundredsReversedString = hundredsReversed.map(x\
    \ => Ten(x))\n        val hundredsReversedString12hundredsReversedString = hundredsReversed.map(x\
    \ => Ten(x))\n        val hundredsReversedString13hundredsReversedString = hundredsReversed.map(x\
    \ => Ten(x))\n        val hundredsReversedString14hundredsReversedString = hundredsReversed.map(x\
    \ => Ten(x))\n        val hundredsReversedString15hundredsReversedString = hundredsReversed.map(x\
    \ => Ten(x))\n        val hundredsReversedString16hundredsReversedString = hundredsReversed.map(x\
    \ => Ten(x))\n        val hundredsReversedString17hundredsReversedString = hundredsReverse",
  "        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x\
    \ => x < 99).toList\n        val hundreds = arr.filter(x => x < 999).toList\n\
    \        val thousands = arr.filter(x => x < 9999).toList\n        val tenThousands\
    \ = arr.filter(x => x < 999999).toList\n        val oneThousands = arr.filter(x\
    \ => x < 9999999).toList\n        val oneHundreds = arr.filter(x => x < 999999999).toList\n\
    \        val oneThousandThousands = arr.filter(x => x < 99999999999).toList\n\
    \        val oneHundredThousands = arr.filter(x => x < 999999999999).toList\n\
    \        val oneHundredThousandThousands = arr.filter(x => x < 999999999999999).toList\n\
    \        val oneHundredThousandThousands = arr.filter(x => x < 999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 9999999999999999999998).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 99999999999999999999987).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 999999999999999999999876).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 99999999999999999999987654).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 999999999999999999999876543).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 9999999999999999999998765432).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 99999999999999999999987654321).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 999999999999999999999876543210).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 9999999999999999999998765432101).toList\n\
    \        val oneHundredThousandThousandThous", "        val nums = arr.toList\n\
    \        val len = nums.map(_.toString.length).max\n        val maxNum = nums.max\n\
    \        val minNum = nums.min\n        val ones = nums.filter(_ < 1).toList\n\
    \        val tens = nums.filter(_ < 10).toList\n        val hundreds = nums.filter(_\
    \ < 100).toList\n        val thousands = nums.filter(_ < 1000).toList\n      \
    \  val maxOnes = ones.max\n        val maxTens = tens.max\n        val maxHundreds\
    \ = hundreds.max\n        val maxThousands = thousands.max\n        val maxNums\
    \ = maxNum.toString.length\n        val maxOnesNum = maxOnes.toString.length\n\
    \        val maxTensNum = maxTens.toString.length\n        val maxHundredsNum\
    \ = maxHundreds.toString.length\n        val maxThousandsNum = maxThousands.toString.length\n\
    \        val maxNumsNum = maxNums.toString.length\n        val onesNum = ones.toString.length\n\
    \        val tensNum = tens.toString.length\n        hundreds.reverse.map { x\
    \ =>\n            val y = x.toString.reverse\n            val z = y.take(maxNumsNum\
    \ - maxNumsNum - maxOnesNum - maxTensNum - maxHundredsNum - maxThousandsNum -\
    \ maxNumsNum - onesNum).toList\n            val zStr = z.mkString(\"\")\n    \
    \        val zNum = zStr.substring(0, maxNumsNum)\n            val zNumStr = zNum.toString.substring(0,\
    \ maxOnesNum)\n            val zNumNum = zNumStr.substring(0, maxTensNum)\n  \
    \          val zNumNumStr = zNumNum.toString.substring(0, maxHundredsNum)\n  \
    \          val zNumNumNum = zNumNumStr.substring(0, maxThousandsNum)\n       \
    \     val zNumNumNumStr = zNumNumNum.toString.substring(0, maxNumsNum)\n     \
    \       val zNumNumNumNum = zNumNumNumStr.substring(0, onesNum)\n            val\
    \ zNumNumNumNumStr = zNumNumNumNum.toString.substring(0, tensNum)\n          \
    \  val zNumNumNumNumNum = zNumNumNumNumStr.substring(0, hundreds.size)\n     \
    \       val zNumNumNumNumNumStr = zNumNumNumNumNum", "        val list = arr.toList\n\
    \        val len = list.size\n        val ones = list.filter(_ <= 9).toList\n\
    \        val tens = list.filter(_ <= 99).toList\n        val hundreds = list.filter(_\
    \ <= 999).toList\n        val thousands = list.filter(_ <= 9999).toList\n    \
    \    val tenThousands = list.filter(_ <= 999999).toList\n        val oneThousands\
    \ = list.filter(_ <= 9999999).toList\n        val oneHundreds = list.filter(_\
    \ <= 999999999).toList\n        val oneThousandThousands = list.filter(_ <= 99999999999).toList\n\
    \        val oneHundredThousands = list.filter(_ <= 999999999999).toList\n   \
    \     val oneThousandThousandThousands = list.filter(_ <= 999999999999999).toList\n\
    \        val oneHundredThousandThousands = list.filter(_ <= 999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousands = list.filter(_ <= 999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousands = list.filter(_ <= 999999999999999999999999).toList\n\
    \        val oneHundredThous", "        val list = arr.toList\n        val length\
    \ = list.size\n        val reversed = list.sortWith(_ < _)\n        val result\
    \ = reversed.map(x => if (x < 10L) s\"$x\" else s\"${x}${byLength(list.filter(_\
    \ < x))}\")\n        if (length == 0) result\n        else result.filter(_ !=\
    \ \"One\")", "        val ones = arr.filter(x => x < 10).toList\n        val tens\
    \ = arr.filter(x => x >= 10 && x < 100).toList\n        val hundreds = arr.filter(x\
    \ => x >= 100).toList\n        val names = ones + tens + hundreds\n        names.sortWith((x,\
    \ y) => x < y)\n        names.reverse\n        names.map(x => if (x == 0) \"One\"\
    \ else if (x == 1) \"Two\" else if (x == 2) \"Three\" else if (x == 3) \"Four\"\
    \ else if (x == 4) \"Five\" else if (x == 5) \"Six\" else if (x == 6) \"Seven\"\
    \ else if (x == 7) \"Eight\" else if (x == 8) \"Nine\" else x.toString)", "  \
    \      val len = arr.length\n        if (len == 0) List()\n        else if (len\
    \ == 1) List(arr(0).asInstanceOf[String])\n        else arr.sortWith(_.toLong\
    \ < _.toLong).reverse.map(_.asInstanceOf[String]).toList", "        val ones =\
    \ arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >= 10).toList\n \
    \       val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.map(_.toString).mkString(\"\
    \")\n        val onesReversed = ones.reverse\n        val onesReversedString =\
    \ onesReversed.map(_.toString).mkString(\"\")\n        val onesReversedStringList\
    \ = onesReversedString.split(\"\\\\D+\")\n        val tensReversedStringList =\
    \ tensReversedString.split(\"\\\\D+\")\n        val onesReversedStringList = onesReversedString.split(\"\
    \\\\D+\")\n        val tensReversedStringList = tensReversedString.split(\"\\\\\
    D+\")\n        val onesReversedStringList = onesReversedString.split(\"\\\\D+\"\
    )\n        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n\
    \        val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n \
    \       val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n  \
    \      val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n   \
    \     val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n    \
    \    val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n     \
    \   val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n      \
    \  val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n       \
    \ val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n        val\
    \ onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n        val tensReversedStringList\
    \ = tensReversedString.split(\"\\\\D+\")\n        val onesReversedStringList =\
    \ onesReversedString.split(\"\\\\D+\")\n        val tensReversedStringList = tensReversedString.split(\"\
    \\\\D+\")\n        val onesReversedStringList = onesReversedString.split(\"\\\\\
    D+\")\n        val tensReversedStringList = tensReversedString.split(\"\\\\D+\"\
    )\n        val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n\
    \        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n \
    \       val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n  \
    \      val tensReversedStringList = tensReversedString.split(\"\\\\D+\")", " \
    \       val list = arr.toList\n        val len = list.size\n        val ones =\
    \ list.filter(x => x < 9).toList\n        val tens = list.filter(x => x >= 9 &&\
    \ x < 99).toList\n        val tensReversed = tens.reverse\n        val onesReversed\
    \ = ones.reverse\n        val tensReversedString = tensReversed.map(x => x.toString).mkString(\"\
    \")\n        val onesReversedString = onesReversed.map(x => x.toString).mkString(\"\
    \")\n        val onesReversedStringWithOne = onesReversedString + onesReversedString\n\
    \        val tensReversedStringWithTen = tensReversedString + tensReversedString\n\
    \        val onesReversedStringWithTen = onesReversedString + tensReversedStringWithTen\n\
    \        val onesReversedStringWithTenAndOne = onesReversedString + tensReversedStringWithTen\
    \ + onesReversedStringWithOne\n        val onesReversedStringWithTenAndOneAndTen\
    \ = onesReversedString + tensReversedStringWithTen + onesReversedStringWithOne\
    \ + tensReversedStringWithTen\n        val onesReversedStringWithTenAndOneAndTenAndFour\
    \ = onesReversedString + tensReversedStringWithTen + onesReversedStringWithOne\
    \ + tensReversedStringWithTen + onesReversedStringWithFour\n        val onesReversedStringWithTenAndOneAndTenAndFourAndThree\
    \ = onesReversedString + tensReversedStringWithTen + onesReversedStringWithOne\
    \ + tensReversedStringWithTen + onesReversedStringWithFour + tensReversedStringWithThree\n\
    \        val onesReversedStringWithTenAndOneAndTenAndFourAndThreeAndTwo = onesReversedString\
    \ + tensReversedStringWithTen + onesReversedStringWithOne + tensReversedStringWithTen\
    \ + onesReversedStringWithFour + tensReversedStringWithThree + tensReversedStringWithTwo\n\
    \        val onesReversedStringWithTenAndOneAndTenAndFourAndThreeAndTwoAndOne\
    \ = onesReversedString + tensReversedStringWithTen + onesReversedStringWithOne\
    \ + tensReversedStringWithTen + onesReversedStringWithFour + ", "        val ones\
    \ = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >= 10).toList\n\
    \        val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.map(_.toString).mkString(\"\
    \")\n        val onesReversed = ones.reverse\n        val onesReversedString =\
    \ onesReversed.map(_.toString).mkString(\"\")\n        val tensReversedString\
    \ = tensReversedString.replaceAll(\"\\\\D\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"\\\\D\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^0\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^1\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^2\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^3\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^4\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^5\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^6\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^7\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^8\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^9\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^10\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^11\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^12\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^13\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^14\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^15\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^16\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^17\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^18\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll(\"^19\", \"\")\n        val onesReversedString\
    \ = onesReversedString.replaceAll", "        val list = arr.toList\n        val\
    \ len = list.size\n        val one = list.toSet\n        val two = list.toSet\n\
    \        val three = list.toSet\n        val four = list.toSet\n        val five\
    \ = list.toSet\n        val six = list.toSet\n        val seven = list.toSet\n\
    \        val eight = list.toSet\n        val nine = list.toSet\n        val ten\
    \ = list.toSet\n        val hundred = list.toSet\n        val thousand = list.toSet\n\
    \        val tenThousand = list.toSet\n        val oneHundred = list.toSet\n \
    \       val oneThousand = list.toSet\n        val oneHundredThousand = list.toSet\n\
    \        val oneThousandThousand = list.toSet\n        val oneHundredThousandThousand\
    \ = list.toSet\n        val oneThousandThousandThousand = list.toSet\n       \
    \ val oneHundredThousandThousandThousand = list.toSet\n        val oneThousandThousandThousandThousand\
    \ = list.toSet\n        val oneHundredThousandThousandThousandThousand = list.toSet\n\
    \        val oneThousandThousandThousandThousandThousand = list.toSet\n      \
    \  val oneHundredThousandThousandThousandThousandThousand = list.toSet\n     \
    \   val oneThousandThousandThousandThousandThousandThousand = list.toSet\n   \
    \     val oneHundredThousandThousandThousandThousandThousandThousand = list.toSet\n\
    \        val oneThousandThousandThousandThousandThousandThousandThousand = list.toSet\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousandThousand\
    \ = list.toSet\n        val oneThousandThousandThousandThousandThousandThousandThousandThousand\
    \ = list.toSet\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousand\
    \ = list.toSet\n        val oneThousandTh", "        val ones = arr.filter(x =>\
    \ x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >= 10l.toLong\
    \ && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >= 100l.toLong)\n\
    \        val tensReversed = tens.reverse\n        val hundredsReversed = hundreds.reverse\n\
    \        val onesReversed = ones.reverse\n        val onesReversedWithNames =\
    \ onesReversed.map(x => onesReversedWithName(x))\n        val tensReversedWithNames\
    \ = tensReversed.map(x => tensReversedWithName(x))\n        val hundredsReversedWithNames\
    \ = hundredsReversed.map(x => hundredsReversedWithName(x))\n        val result\
    \ = onesReversedWithNames ++ tensReversedWithNames ++ hundredsReversedWithNames\n\
    \        val resultReversed = result.reverse\n        resultReversed.map(x =>\
    \ resultReversedWithName(x))", "        val list = arr.toList\n        val len\
    \ = list.size\n        val result = new mutable.ListBuffer[String]()\n       \
    \ val one = list.toSet\n        val ten = one.toSet\n        val hundred = ten.toSet\n\
    \        val thousand = hundred.toSet\n        val tenThousand = thousand.toSet\n\
    \        val oneThousand = tenThousand.toSet\n        val tenHundred = oneThousand.toSet\n\
    \        val oneHundred = tenHundred.toSet\n        val tenThousandHundred = oneHundred.toSet\n\
    \        val oneThousandHundred = tenThousandHundred.toSet\n        val tenHundredThousand\
    \ = oneThousandHundred.toSet\n        val oneHundredThousand = tenHundredThousand.toSet\n\
    \        val tenThousandHundredThousand = oneHundredThousand.toSet\n        val\
    \ oneThousandHundredThousand = tenThousandHundredThousand.toSet\n        val tenHundredThousandHundred\
    \ = oneThousandHundredThousand.toSet\n        val oneHundredThousandHundred =\
    \ tenHundredThousandHundred.toSet\n        val tenThousandHundredThousandHundred\
    \ = oneHundredThousandHundred.toSet\n        val oneThousandHundredThousandHundred\
    \ = tenThousandHundredThousandHundred.toSet\n        val tenHundredThousandHundredThousand\
    \ = oneThousandHundredThousandHundred.toSet\n        val oneHundredThousandHundredThousand\
    \ = tenHundredThousandHundredThousand.toSet\n        val tenThousandHundredThousandHundredThousand\
    \ = oneHundredThousandHundredThousandHundred.toSet\n        val oneThousandHundredThousandHundredThousand\
    \ = tenThousandHundredThousandHundredThousand.toSet\n        val tenHundredThousandHundredThousandHundred",
  "        val nums = arr.toList\n        val len = nums.map(_.toString.length).max\n\
    \        val numsSorted = nums.sortBy(_.toString.length)\n        val reversed\
    \ = numsSorted.reverse\n        val result = reversed.map(_.toString).map(x =>\
    \ if (x.toString.length == len) x else x.toString.replaceAll(\"[0-9]\", \"One\"\
    ).replaceAll(\"[0-9]\", \"Two\").replaceAll(\"[0-9]\", \"Three\").replaceAll(\"\
    [0-9]\", \"Four\").replaceAll(\"[0-9]\", \"Five\").replaceAll(\"[0-9]\", \"Six\"\
    ).replaceAll(\"[0-9]\", \"Seven\").replaceAll(\"[0-9]\", \"Eight\").replaceAll(\"\
    [0-9]\", \"Nine\"))\n        result", "        val ones = arr.filter(_ <= 9).toList\n\
    \        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_\
    \ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n     \
    \   val hundredsReversed = hundreds.reverse\n        val thousandsReversed = thousands.reverse\n\
    \        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n\
    \        val onesReversedString = onesReversed.map(_ + One).toList\n        val\
    \ tensReversedString = tensReversed.map(_ + Two).toList\n        val hundredsReversedString\
    \ = hundredsReversed.map(_ + Three).toList\n        val thousandsReversedString\
    \ = thousandsReversed.map(_ + Four).toList\n        val hundredsReversedStringReversed\
    \ = hundredsReversedString.reverse\n        val thousandsReversedStringReversed\
    \ = thousandsReversedString.reverse\n        val tensReversedStringReversed =\
    \ tensReversedString.reverse\n        val onesReversedStringReversed = onesReversedString.reverse\n\
    \        val onesReversedStringReversedString = onesReversedStringReversed.map(_\
    \ + Five).toList\n        val tensReversedStringReversedString = tensReversedStringReversed.map(_\
    \ + Six).toList\n        val hundredsReversedStringReversedString = hundredsReversedStringReversed.map(_\
    \ + Seven).toList\n        val thousandsReversedStringReversedString = thousandsReversedStringReversed.map(_\
    \ + Eight).toList\n        val hundredsReversedStringReversedStringReversed =\
    \ hundredsReversedStringReversedString.reverse\n        val thousandsReversedStringReversedStringReversed\
    \ = thousandsReversedStringReversedString.reverse\n        val tensReversedStringReversedStringReversed\
    \ = tensReversedStringReversedString.reverse\n        val onesReversedStringReversedStringReversed\
    \ = onesReversedStringReversedString.reverse\n        val onesReversedStringReversedStringReversedString\
    \ = onesReversedStringReversedStringReversed.map(_ + Nine).toList\n        val\
    \ tensReversedStringReversedStringReversedString = tensReversedStringReversedStringReversed.map(_\
    \ + One).toList\n        val hundredsReversedStringReversedStringReversedString\
    \ = hundredsReverse", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_\
    \ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_\
    \ <= 999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_\
    \ <= 999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_\
    \ <= 999999999999999999).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999998).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999987).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999876).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999998765).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999987654).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999876543).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999998765432).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999987654321).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999876543210).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999", "        val ones = arr.filter(x =>\
    \ x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed\
    \ = tens.reverse\n        val tensReversedString = tensReversed.map(x => x.toString.replaceAll(\"\
    \\\\D\", \"\"))\n        val tensReversedStringList = tensReversedString.toList\n\
    \        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x\
    \ => x.toString.replaceAll(\"\\\\D\", \"\"))\n        val onesReversedStringList\
    \ = onesReversedString.toList\n        val onesReversedStringListWithOnes = onesReversedStringList.zip(onesReversedStringList).filter(_._1\
    \ == 1).toList\n        val onesReversedStringListWithOnesReversed = onesReversedStringListWithOnes.reverse\n\
    \        val onesReversedStringListWithOnesReversedString = onesReversedStringListWithOnesReversed.map(x\
    \ => x._2.toString.replaceAll(\"\\\\D\", \"\"))\n        val onesReversedStringListWithOnesReversedStringList\
    \ = onesReversedStringListWithOnesReversedString.toList\n        val onesReversedStringListWithOnesReversedStringListWithOnes\
    \ = onesReversedStringListWithOnesReversedStringListWithOnes.reverse\n       \
    \ val onesReversedStringListWithOnesReversedStringListWithOnesReversed = onesReversedStringListWithOnesReversedStringListWithOnesReversed.map(x\
    \ => x._2.toString.replaceAll(\"\\\\D\", \"\"))\n        val onesReversedStringListWithOnesReversedStringListWithOnesReversedString\
    \ = onesReversedStringListWithOnesReversedStringListWithOnesReversedString.toList\n\
    \        val onesReversedStringListWithOnesReversedStringListWithOnesReversedStringListWithOnes\
    \ = onesReversedStringListWithOnesReversedStringListWithOnesReversedStringListWithOnes.reverse\n\
    \        val onesReversedStringListWithOnesReversedStringListWithOnesReversedStringListWithOnesReversedStringListWithOnes\
    \ = onesReversedStringListWithOnesReversedStringListWithOnesReversedStringListWithOnesReversedStringListWithOnes.map(x\
    \ => x._2.toString.replaceAll", "        val ones = arr.filter(x => x >= 1l.toLong\
    \ && x <= 9l.toLong)\n        val tens = arr.filter(x => x >= 10l.toLong && x\
    \ <= 99l.toLong)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x\
    \ <= 999l.toLong)\n        val thousands = arr.filter(x => x >= 1000l.toLong &&\
    \ x <= 9999l.toLong)\n        val tenThousands = arr.filter(x => x >= 100000l.toLong\
    \ && x <= 999999l.toLong)\n        val oneThousands = arr.filter(x => x >= 1000000l.toLong\
    \ && x <= 9999999l.toLong)\n        val oneHundreds = arr.filter(x => x >= 10000000l.toLong\
    \ && x <= 999999999l.toLong)\n        val oneThousandThousands = arr.filter(x\
    \ => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n        val oneThousandHundreds\
    \ = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n  \
    \      val oneThousandThousandHundreds = arr.filter(x => x >= 10000000000l.toLong\
    \ && x <= 999999999999999l.toLong)\n        val oneThousandThousandHundredThousands\
    \ = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n\
    \        val oneThousandThousandHundredThousandHundreds = arr.filter(x => x >=\
    \ 10000000000000l.toLong && x <= 9999999999999999999l.toLong)\n        val oneThousandThousandHundredThousandHundredThousands\
    \ = arr.filter(x => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n\
    \        val oneThousandThousandHundredThousandHundredThousandHundreds = arr.filter(x\
    \ => x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n\
    \        val oneThousandThousandHundredThousandHundredThousandHundredThousands\
    \ = arr.filter(x => x >= 10000000000000000l.toLong && x <= 999999999999999999999999999l.toLong)\n\
    \        val oneThousandThousandHundredThousandHundredThousandHundredThousandHundred",
  "        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).map(x => x.toString).sorted\n\
    \        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).map(x\
    \ => x.toString).sorted\n        val hundreds = arr.filter(x => x >= 100l.toLong\
    \ && x <= 999l.toLong).map(x => x.toString).sorted\n        val thousands = arr.filter(x\
    \ => x >= 1000l.toLong && x <= 9999l.toLong).map(x => x.toString).sorted\n   \
    \     val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).map(x\
    \ => x.toString).sorted\n        val oneThousands = arr.filter(x => x >= 1000000l.toLong\
    \ && x <= 9999999l.toLong).map(x => x.toString).sorted\n        val oneHundreds\
    \ = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong).map(x =>\
    \ x.toString).sorted\n        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong\
    \ && x <= 99999999999l.toLong).map(x => x.toString).sorted\n        val oneThousandThousands\
    \ = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong).map(x\
    \ => x.toString).sorted\n        val oneThousandThousandHundreds = arr.filter(x\
    \ => x >= 10000000000l.toLong && x <= 999999999999999l.toLong).map(x => x.toString).sorted\n\
    \        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000000l.toLong\
    \ && x <= 9999999999999999l.toLong).map(x => x.toString).sorted\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 100000000000000l.toLong && x <= 9999999999999999999l.toLong).map(x\
    \ => x.toString).sorted\n        val oneThousandThousandThousandThousands = arr.filter(x\
    \ => x >= 10000000000000000l.toLong && x <= 99999999999999999999l.toLong).map(x\
    \ => x.toString).sorted\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 100000000000000000l.toLong && x <= 99999999999999999999999l.toLong).map(x\
    \ => x.toString).sorted\n        val one", "        val ones = arr.filter(x =>\
    \ x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed\
    \ = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedWithTens\
    \ = onesReversed.zip(tensReversed)\n        val onesReversedWithTensReversed =\
    \ onesReversedWithTens.reverse\n        val onesReversedWithTensReversedWithOnes\
    \ = onesReversedWithTensReversed.zip(onesReversed)\n        val onesReversedWithTensReversedWithOnesReversed\
    \ = onesReversedWithTensReversedWithOnes.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTens\
    \ = onesReversedWithTensReversedWithOnesReversed.zip(tensReversed)\n        val\
    \ onesReversedWithTensReversedWithOnesReversedWithTensReversed = onesReversedWithTensReversedWithOnesReversedWithTens.reverse\n\
    \        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes\
    \ = onesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(onesReversed)\n\
    \        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed\
    \ = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes.reverse\n\
    \        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTens\
    \ = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed.zip(tensReversed)\n\
    \        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed\
    \ = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTens.reverse\n\
    \        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes\
    \ = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(onesReversed)\n\
    \        ", "        val result = new mutable.ListBuffer[String]()\n        val\
    \ ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val tens =\
    \ arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds =\
    \ arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands\
    \ = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands\
    \ = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val hundredThousands\
    \ = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val\
    \ thousandThousands = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n\
    \        val oneThousands = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n\
    \        val oneHundreds = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n\
    \        val oneThousandThousands = arr.filter(x => x >= 100000000000l.toLong\
    \ && x <= 999999999999999l.toLong)\n        val oneHundredThousands = arr.filter(x\
    \ => x >= 100000000000000l.toLong && x <= 9999999999999999999l.toLong)\n     \
    \   val oneThousandThousandThousands = arr.filter(x => x >= 10000000000000000l.toLong\
    \ && x <= 99999999999999999999999l.toLong)\n        val oneHundredThousandThousands\
    \ = arr.filter(x => x >= 100000000000000000l.toLong && x <= 999999999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000000l.toLong\
    \ && x <= 9999999999999999999999999999999l.toLong)\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(x => x >= 10000000000000000000000l.toLong && x <= 99999999999999999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x\
    \ => x >= 1000000000000000000000000l.toLong && x <= 999999999999999999999999999999999999999l.toLong)\n\
    \        ", "        val ones = arr.filter(x => x % 10 == 1)\n        val tens\
    \ = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n  \
    \      val onesReversed = ones.reverse\n        val onesReversedWithTens = onesReversed.zip(tensReversed)\n\
    \        val onesReversedWithTensReversed = onesReversedWithTens.reverse\n   \
    \     val onesReversedWithTensReversedWithOnes = onesReversedWithTensReversed.zip(onesReversed)\n\
    \        val onesReversedWithTensReversedWithOnesReversed = onesReversedWithTensReversedWithOnes.reverse\n\
    \        val onesReversedWithTensReversedWithOnesReversedWithTens = onesReversedWithTensReversedWithOnesReversed.zip(tensReversed)\n\
    \        val onesReversedWithTensReversedWithOnesReversedWithTensReversed = onesReversedWithTensReversedWithOnesReversedWithTens.reverse\n\
    \        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes\
    \ = onesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(onesReversed)\n\
    \        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed\
    \ = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes.reverse\n\
    \        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTens\
    \ = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed.zip(tensReversed)\n\
    \        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed\
    \ = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTens.reverse\n\
    \        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes\
    \ = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(onesReversed)\n\
    \        ", "        val len = arr.length\n        if (len == 0) List()\n    \
    \    else if (len == 1) List(arr(0).toString)\n        else arr.sortWith((x, y)\
    \ => x < y).reverse.map(x => x.toString).map(x => if (x == 0) \"One\" else if\
    \ (x == 1) \"Two\" else if (x == 2) \"Three\" else if (x == 3) \"Four\" else if\
    \ (x == 4) \"Five\" else if (x == 5) \"Six\" else if (x == 6) \"Seven\" else if\
    \ (x == 7) \"Eight\" else if (x == 8) \"Nine\" else x)", "        val list = arr.toList\n\
    \        val len = list.size\n        if (len == 0) List()\n        else if (len\
    \ == 1) List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(List(",
  "        val result = arr.filter(x => x >= 1 && x <= 9).sortWith(_ < _).reverse\n\
    \        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\"\
    , 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n\
    \        result.map(x => map.get(x)).filter(_.nonEmpty)", "        val ones =\
    \ arr.filter(x => x < 9).map(x => s\"One\")\n        val tens = arr.filter(x =>\
    \ x < 99).map(x => s\"Ten\")\n        val hundreds = arr.filter(x => x < 999).map(x\
    \ => s\"Hundred\")\n        val thousands = arr.filter(x => x < 9999).map(x =>\
    \ s\"Thousand\")\n        val millions = arr.filter(x => x < 99999).map(x => s\"\
    Million\")\n        val billions = arr.filter(x => x < 999999).map(x => s\"Billion\"\
    )\n        val trillions = arr.filter(x => x < 9999999).map(x => s\"Trillion\"\
    )\n        val quadrillions = arr.filter(x => x < 999999999).map(x => s\"Quadrillion\"\
    )\n        val quintillions = arr.filter(x => x < 99999999999).map(x => s\"Quintillion\"\
    )\n        val sextillions = arr.filter(x => x < 999999999999).map(x => s\"Sextillion\"\
    )\n        val septillions = arr.filter(x => x < 999999999999999).map(x => s\"\
    Septillion\")\n        val octillions = arr.filter(x => x < 999999999999999999).map(x\
    \ => s\"Octillion\")\n        val nonillions = arr.filter(x => x < 999999999999999999999).map(x\
    \ => s\"Nonillion\")\n        val decillions = arr.filter(x => x < 9999999999999999999998).map(x\
    \ => s\"Decillion\")\n        val undecillions = arr.filter(x => x < 99999999999999999999987).map(x\
    \ => s\"Undecillion\")\n        val duodecillions = arr.filter(x => x < 9999999999999999999998765).map(x\
    \ => s\"Duodecillion\")\n        val tredecillions = arr.filter(x => x < 99999999999999999999987654).map(x\
    \ => s\"Tredecillion\")\n        val quattuordecillions = arr.filter(x => x <\
    \ 9999999999999999999998765432).map(x => s\"Quattuordecillion\")\n        val\
    \ quindecillions = arr.filter(x => x < 99999999999999999999987654321).map(x =>\
    \ s\"Quindecillion\")\n        val sexdecillions = arr.filter(x => x < 999999999999999999999876543210).map(x\
    \ => s\"Sexdecilli", "        val ones = arr.filter(_ <= 9).toList\n        val\
    \ tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n\
    \        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands\
    \ = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <=\
    \ 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n\
    \        val oneThousandThousands = arr.filter(_ <= 99999999999).toList\n    \
    \    val oneHundredThousands = arr.filter(_ <= 999999999999).toList\n        val\
    \ oneHundredThousandThousands = arr.filter(_ <= 999999999999999).toList\n    \
    \    val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_\
    \ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHund",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <=\
    \ 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999998).toList\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999998).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999998).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999998).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999998).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999998).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999998).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999998).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999998).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999998).toList\n        val oneThousandThousandThousandThousandTh",
  "        val result = arr.filter(x => x >= 1 && x <= 9).sortWith(_ < _).reverse\n\
    \        val map = Map(\"One\" -> 1, \"Two\" -> 2, \"Three\" -> 3, \"Four\" ->\
    \ 4, \"Five\" -> 5, \"Six\" -> 6, \"Seven\" -> 7, \"Eight\" -> 8, \"Nine\" ->\
    \ 9)\n        result.map(x => map.getOrElse(x.toString, x.toString))", "     \
    \   val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n\
    \        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_\
    \ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n\
    \        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds\
    \ = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds = arr.filter(_\
    \ <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(_\
    \ <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds =\
    \ arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n",
  "        val result = arr.filter(_ >= 1l && _ <= 9l).sortWith(_ < _).reverse\n \
    \       val ones = arr.filter(_ >= 1l).map(_ - 1l).mkString(\"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n  \
    \      val tens = arr.filter(_ >= 10l).map(_ - 10l).mkString(\"Ten\", \"Eleven\"\
    , \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"Nineteen\")\n        val hundreds = arr.filter(_ >= 100l).map(_\
    \ - 100l).mkString(\"Hundred\", \"Thousand\", \"Million\", \"Billion\", \"Trillion\"\
    , \"Quadrillion\", \"Quintillion\", \"Sextillion\", \"Septillion\", \"Octillion\"\
    , \"Nonillion\", \"Decillion\", \"Undecillion\", \"Duodecillion\", \"Tredecillion\"\
    , \"Quattuordecillion\", \"Quindecillion\", \"Sexdecillion\", \"Septdecillion\"\
    , \"Octodecillion\", \"Novemdecillion\", \"Vigintillion\", \"Unvigintillion\"\
    , \"Duovigintillion\", \"Trevigintillion\", \"Quattuorvigintillion\", \"Quinvigintillion\"\
    , \"Sexvigintillion\", \"Septvigintillion\", \"Octovigintillion\", \"Novemvigintillion\"\
    , \"Vigintigintillion\", \"Unvigintigintillion\", \"Duovigintigintillion\", \"\
    Trevigintigintillion\", \"Quattuorvigintigintillion\", \"Quinvigintigintillion\"\
    , \"Sexvigintigintillion\", \"Septvigintigintillion\", \"Octovigintigintillion\"\
    , \"Novemvigintigintillion\", \"Vigintigintigintillion\", \"Unvigintigintigintillion\"\
    , \"Duovigintigintigintillion\", \"Trevigintigintigintillion\", \"Quattuorvigintigintigintillion\"\
    , \"Quinvigintigintigintillion\", \"Sexvigintigintigintillion\", \"Septvigintigintigintillion",
  "        val result = arr.filter(x => x >= 1 && x <= 9).map(x => s\"${x}\".toUpperCase).reverse\n\
    \        arr.filter(x => x < 1 || x > 9).map(x => s\"${x}\".toUpperCase).reverse\n\
    \        result", "        val list = arr.toList\n        val reversed = list.sortWith(_\
    \ < _)\n        val reversedString = reversed.map(_ + \"\").reverse.mkString(\"\
    \")\n        val reversedStringList = reversedString.toList\n        val reversedStringListLength\
    \ = reversedStringList.length\n        val one = \"One\"\n        val two = \"\
    Two\"\n        val three = \"Three\"\n        val four = \"Four\"\n        val\
    \ five = \"Five\"\n        val six = \"Six\"\n        val seven = \"Seven\"\n\
    \        val eight = \"Eight\"\n        val nine = \"Nine\"\n        val ten =\
    \ \"Ten\"\n        val hundred = \"Hundred\"\n        val thousand = \"Thousand\"\
    \n        val hundredAndOne = \"Hundred and One\"\n        val hundredAndOneAndOne\
    \ = \"Hundred and One and One\"\n        val hundredAndOneAndOneAndOne = \"Hundred\
    \ and One and One and One\"\n        val hundredAndOneAndOneAndOneAndOne = \"\
    Hundred and One and One and One and One\"\n        val hundredAndOneAndOneAndOneAndOneAndOne\
    \ = \"Hundred and One and One and One and One and One\"\n        val hundredAndOneAndOneAndOneAndOneAndOneAndOne\
    \ = \"Hundred and One and One and One and One and One and One\"\n        val hundredAndOneAndOneAndOneAndOneAndOneAndOneAndOne\
    \ = \"Hundred and One and One and One and One and One and One and One\"\n    \
    \    val hundredAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne = \"Hundred and\
    \ One and One and One and One and One and One and One and One\"\n        val hundredAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne\
    \ = \"Hundred and One and One and One and One and One and One and One and One\"\
    \n        val hundredAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAnd\
    \ = \"Hundred and One and One and One and One and One and One and One and One\
    \ and One\"\n        val hundredAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAnd\
    \ = \"Hundred and One and One and One and ", "        val ones = arr.filter(x\
    \ => x < 9).toList\n        val tens = arr.filter(x => x >= 9 && x < 99).toList\n\
    \        val hundreds = arr.filter(x => x >= 99).toList\n        val reversed\
    \ = ones + tens + hundreds\n        reversed.reverse.map(x => if (x < 10) \"One\"\
    \ else if (x < 100) \"Two\" else if (x < 1000) \"Three\" else \"Four\")", "  \
    \      val list = arr.toList\n        val length = list.size\n        val reversed\
    \ = list.sortWith(_ < _)\n        val result = reversed.map(i => if (i < 10) {\"\
    One\"} else if (i < 20) {\"Two\"} else if (i < 30) {\"Three\"} else if (i < 40)\
    \ {\"Four\"} else if (i < 50) {\"Five\"} else if (i < 60) {\"Six\"} else if (i\
    \ < 70) {\"Seven\"} else if (i < 80) {\"Eight\"} else if (i < 90) {\"Nine\"} else\
    \ {\"Ten\"})\n        val finalResult = result.map(i => if (i < length) i else\
    \ length.toString + i)\n        finalResult.toList", "        val list = arr.toList\n\
    \        val len = list.size\n        val ones = list.filter(_ <= 1).toList\n\
    \        val tens = list.filter(_ <= 10).toList\n        val hundreds = list.filter(_\
    \ <= 100).toList\n        val thousands = list.filter(_ <= 1000).toList\n    \
    \    val tenThousands = list.filter(_ <= 10000).toList\n        val oneThousands\
    \ = list.filter(_ <= 100000).toList\n        val oneHundreds = list.filter(_ <=\
    \ 100000).toList\n        val oneThousandThousands = list.filter(_ <= 1000000).toList\n\
    \        val oneThousandThousandThousands = list.filter(_ <= 10000000).toList\n\
    \        val oneHundredThousandThousands = list.filter(_ <= 100000000).toList\n\
    \        val oneHundredThousandThousandThousands = list.filter(_ <= 1000000000).toList\n\
    \        val oneHundredThousandThousandThousandThousands = list.filter(_ <= 10000000000).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousands = list.filter(_\
    \ <= 100000000000).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = list.filter(_ <= 1000000000000).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = list.filter(_ <= 10000000000000).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = list.filter(_ <= 100000000000000).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = list.filter(_ <= 1000000000000000).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = list.filter(_ <= 10000000000000000).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = list.filter(_ <= 100000000000000000).toList\n        val oneHundredThousandThous",
  "        val ones = arr.filter(_ < 1).toList\n        val tens = arr.filter(_ <\
    \ 10).toList\n        val hundreds = arr.filter(_ < 100).toList\n        val thousands\
    \ = arr.filter(_ < 1000).toList\n        val tenThousands = arr.filter(_ < 10000).toList\n\
    \        val hundredThousands = arr.filter(_ < 100000).toList\n        val thousandThousands\
    \ = arr.filter(_ < 1000000).toList\n        val hundredThousandThousands = arr.filter(_\
    \ < 10000000).toList\n        val thousandThousandThousands = arr.filter(_ < 100000000).toList\n\
    \        val hundredThousandThousandThousands = arr.filter(_ < 1000000000).toList\n\
    \        val thousandThousandThousandThousands = arr.filter(_ < 10000000000).toList\n\
    \        val hundredThousandThousandThousandThousands = arr.filter(_ < 100000000000).toList\n\
    \        val thousandThousandThousandThousandThousands = arr.filter(_ < 1000000000000).toList\n\
    \        val hundredThousandThousandThousandThousandThousands = arr.filter(_ <\
    \ 10000000000000).toList\n        val thousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ < 100000000000000).toList\n        val hundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ < 1000000000000000).toList\n        val thousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ < 10000000000000000).toList\n        val hundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ < 100000000000000000).toList\n        val thousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ < 1000000000000000000).toList\n        val hundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ < 10000000000000000000).toList\n        val thousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ < 100000000000000000000", "        val ones = arr.filter(_ <=\
    \ 9).toList\n        val tens = arr.filter(_ >= 10).toList\n        val tensReversed\
    \ = tens.reverse\n        val tensReversedString = tensReversed.map(_.toString).mkString(\"\
    \")\n        val tensReversedStringLength = tensReversedString.length\n      \
    \  val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = ten", "        val nums = arr.toList\n        val numsLength = nums.size\n\
    \        val numsSorted = nums.sortWith(_ < _)\n        val numsReversed = numsSorted.reverse\n\
    \        val numsReversedLength = numsReversed.size\n        val numsReversedSorted\
    \ = numsReversed.sortWith(_ < _)\n        val numsReversedReversed = numsReversedSorted.reverse\n\
    \        val numsReversedReversedLength = numsReversedReversed.size\n        val\
    \ numsReversedReversedSorted = numsReversedReversed.sortWith(_ < _)\n        val\
    \ numsReversedReversedReversedLength = numsReversedReversedSorted.reverse.size\n\
    \        val numsReversedReversedReversedSorted = numsReversedReversedSorted.reverse.sortWith(_\
    \ < _)\n        val numsReversedReversedReversedReversedLength = numsReversedReversedReversedSorted.reverse.size\n\
    \        val numsReversedReversedReversedReversedSorted = numsReversedReversedReversedSorted.reverse.sortWith(_\
    \ < _)\n        val numsReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedSorted.reverse.size\n\
    \        val numsReversedReversedReversedReversedReversedSorted = numsReversedReversedReversedReversedSorted.reverse.sortWith(_\
    \ < _)\n        val numsReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedSorted.reverse.size\n\
    \        val numsReversedReversedReversedReversedReversedSorted = numsReversedReversedReversedReversedSorted.reverse.sortWith(_\
    \ < _)\n        val numsReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedSorted.reverse.size\n\
    \        val numsReversedReversedReversedReversedReversedReversedSorted = numsReversedReversedReversedReversedReversedReversedSorted.reverse.sortWith(_\
    \ < _)\n        val numsReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedSorted.reverse.size\n\
    \        val numsReversedReversedReversedReversedReversedReversedSorted = numsReversed",
  "        val list = arr.toList.sortWith(_ < _)\n        val reversed = list.reverse\n\
    \        val result = reversed.map(x => if (x < 10) \"One\" else if (x < 20) \"\
    Two\" else if (x < 30) \"Three\" else if (x < 40) \"Four\" else if (x < 50) \"\
    Five\" else if (x < 60) \"Six\" else if (x < 70) \"Seven\" else if (x < 80) \"\
    Eight\" else \"Nine\")\n        result", "        val list = arr.toList.sortBy(_.toInt).reverse\n\
    \        val result = list.map(x => if (x < 10) {\n            val str = x.toString.toUpperCase\n\
    \            val index = str.indexOf(\"ZERO\")\n            val name = if (index\
    \ == -1) \"One\" else str.substring(0, index)\n            val digit = str.substring(index\
    \ + 1, str.length)\n            val index = digit.indexOf(\"ZERO\")\n        \
    \    val name = if (index == -1) \"One\" else digit.substring(0, index)\n    \
    \        name + digit\n        } else {\n            val str = x.toString.toUpperCase\n\
    \            val index = str.indexOf(\"ZERO\")\n            val name = if (index\
    \ == -1) \"Two\" else str.substring(0, index)\n            val digit = str.substring(index\
    \ + 1, str.length)\n            val index = digit.indexOf(\"ZERO\")\n        \
    \    val name = if (index == -1) \"Two\" else digit.substring(0, index)\n    \
    \        name + digit\n        })\n        result", "        val result = arr.filter(x\
    \ => x >= 1 && x <= 9).map(x => x % 10 + x.toString).reverse\n        arr.filter(x\
    \ => x != 0l).map(x => x % 10 + x.toString).reverse.map(x => x match {\n     \
    \       case 0 => \"Zero\"\n            case 1 => \"One\"\n            case 2\
    \ => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\n\
    \            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n            case x => s\"$x\"\n        }).filter(x => x != \"\").map(x => x\
    \ match {\n            case 0 => \"Zero\"\n            case 1 => \"One\"\n   \
    \         case 2 => \"Two\"\n            case 3 => \"Three\"\n            case\
    \ 4 => \"Four\"\n            case 5 => \"Five\"\n            case 6 => \"Six\"\
    \n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\n         \
    \   case 9 => \"Nine\"\n            case x => s\"$x\"\n        }).toList", " \
    \       val result = new mutable.ListBuffer[String]()\n        var i = 0\n   \
    \     while (i < arr.length) {\n            if (arr(i) > 9) {\n              \
    \  result.add(\"Nine\")\n                i += 1\n            } else if (arr(i)\
    \ > 8) {\n                result.add(\"Eight\")\n                i += 1\n    \
    \        } else if (arr(i) > 7) {\n                result.add(\"Seven\")\n   \
    \             i += 1\n            } else if (arr(i) > 6) {\n                result.add(\"\
    Six\")\n                i += 1\n            } else if (arr(i) > 5) {\n       \
    \         result.add(\"Five\")\n                i += 1\n            } else if\
    \ (arr(i) > 4) {\n                result.add(\"Four\")\n                i += 1\n\
    \            } else if (arr(i) > 3) {\n                result.add(\"Three\")\n\
    \                i += 1\n            } else if (arr(i) > 2) {\n              \
    \  result.add(\"Two\")\n                i += 1\n            } else if (arr(i)\
    \ > 1) {\n                result.add(\"One\")\n                i += 1\n      \
    \      } else {\n                result.add(arr(i).toString())\n             \
    \   i += 1\n            }\n        }\n        return result.toList", "       \
    \ val nums = arr.toList\n        val len = nums.map(_.toString).map(_.length).max\n\
    \        val reversed = nums.reverse\n        val result = reversed.map(x => if\
    \ (x < 10) {\n            s\"$x\"\n        } else {\n            val digit = x\
    \ - 10\n            val name = if (digit < 1) \"One\" else if (digit < 2) \"Two\"\
    \ else if (digit < 3) \"Three\" else if (digit < 4) \"Four\" else if (digit <\
    \ 5) \"Five\" else if (digit < 6) \"Six\" else if (digit < 7) \"Seven\" else if\
    \ (digit < 8) \"Eight\" else \"Nine\"\n            s\"$name$digit\"\n        })\n\
    \        if (len == 0) result else result.reverse", "        val result = arr.sortWith(_\
    \ < _).reverse\n        val digits = arr.map(_.toString).mkString(\",\")\n   \
    \     val names = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\")\n        val result = names.map(name => if (result.contains(name))\
    \ name else digits.indexOf(_))\n        result", "        val result = arr.filter(_\
    \ > 0).toList\n        val reversed = result.reverse\n        val ones = reversed.filter(_\
    \ < 10)\n        val tens = reversed.filter(_ >= 10 && _ < 100)\n        val hundreds\
    \ = reversed.filter(_ >= 100)\n        val tensNames = tens.map(x => s\"Ten$x\"\
    )\n        val hundredsNames = hundreds.map(x => s\"Hundred$x\")\n        val\
    \ onesNames = ones.map(x => s\"One$x\")\n        val result = onesNames.++(tensNames).++(hundredsNames)\n\
    \        if(result.isEmpty) Nil\n        else result", "        val result = arr.filter(_\
    \ >= 1l.toLong && _ <= 9l.toLong).sortBy(_ - 1).reverse\n        val map = Map(1l.toString\
    \ -> \"One\", 2l.toString -> \"Two\", 3l.toString -> \"Three\", 4l.toString ->\
    \ \"Four\", 5l.toString -> \"Five\", 6l.toString -> \"Six\", 7l.toString -> \"\
    Seven\", 8l.toString -> \"Eight\", 9l.toString -> \"Nine\")\n        result.map(map(_.toString))",
  "        val list = arr.toList\n        val len = list.size\n        val ones =\
    \ list.filter(_ <= 9).toList\n        val tens = list.filter(_ <= 99).toList\n\
    \        val hundreds = list.filter(_ <= 999).toList\n        val thousands =\
    \ list.filter(_ <= 9999).toList\n        val tenThousands = list.filter(_ <= 999999).toList\n\
    \        val oneThousands = list.filter(_ <= 9999999).toList\n        val oneHundreds\
    \ = list.filter(_ <= 999999999).toList\n        val oneThousandThousands = list.filter(_\
    \ <= 99999999999).toList\n        val oneHundredThousands = list.filter(_ <= 999999999999).toList\n\
    \        val oneHundredThousandThousands = list.filter(_ <= 999999999999999).toList\n\
    \        val oneHundredThousandThousands = list.filter(_ <= 999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = list.filter(_ <= 999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999998).toList\n\
    \        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999997).toList\n\
    \        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999996).toList\n\
    \        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999995).toList\n\
    \        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999994).toList\n\
    \        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999993).toList\n\
    \        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999992).toList\n\
    \        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999991).toList\n\
    \        val oneHundredThousandThousandThousands = list.filter(_ <= 9999999999999999999990).toList\n\
    \        val oneHundredThousandThousandThousands = list.filter(_ <= 999999999999999999999).toList\n\
    \        val oneHundredThousand", "        val len = arr.length\n        val ones\
    \ = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n\
    \        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_\
    \ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n\
    \        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds\
    \ = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands = arr.filter(_\
    \ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_ <= 999999999999).toList\n\
    \        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).toList\n\
    \        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_\
    \ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHund",
  "        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x\
    \ => x >= 9 && x < 99).toList\n        val hundreds = arr.filter(x => x >= 99).toList\n\
    \        val hundredsReversed = hundreds.reverse\n        val tensReversed = tens.reverse\n\
    \        val onesReversed = ones.reverse\n        val onesAndTens = ones + tens\n\
    \        val onesAndTensReversed = onesReversed + tensReversed\n        val onesAndTensAndHundreds\
    \ = onesAndTens + hundreds\n        val onesAndTensAndHundredsReversed = onesAndTensReversed\
    \ + hundredsReversed\n        val onesAndTensAndHundredsAndOnes = onesAndTensAndHundreds\
    \ + ones\n        val onesAndTensAndHundredsAndOnesReversed = onesAndTensAndHundredsReversed\
    \ + onesReversed\n        val onesAndTensAndHundredsAndOnesAndTens = onesAndTensAndHundredsAndOnes\
    \ + tens\n        val onesAndTensAndHundredsAndOnesAndTensReversed = onesAndTensAndHundredsAndOnesReversed\
    \ + tensReversed\n        val onesAndTensAndHundredsAndOnesAndTensAndHundreds\
    \ = onesAndTensAndHundredsAndOnesAndTens + hundreds\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsReversed\
    \ = onesAndTensAndHundredsAndOnesAndTensReversed + hundredsReversed\n        val\
    \ onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes = onesAndTensAndHundredsAndOnesAndTensAndHundreds\
    \ + ones\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesReversed\
    \ = onesAndTensAndHundredsAndOnesAndTensAndHundredsReversed + onesReversed\n \
    \       val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTens = onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ + tens\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensReversed\
    \ = onesAndTensAndHundredsAndOnesAndTensAndHundredsReversed ", "        val nums\
    \ = arr.toList\n        val len = nums.map(_.toString).map(_.length).max\n   \
    \     val ones = nums.filter(_.toString.length == 1)\n        val tens = nums.filter(_.toString.length\
    \ == 10)\n        val hundreds = nums.filter(_.toString.length == 100)\n     \
    \   val thousands = nums.filter(_.toString.length == 1000)\n        val tenThousands\
    \ = nums.filter(_.toString.length == 10000)\n        val hundredThousands = nums.filter(_.toString.length\
    \ == 100000)\n        val thousandThousands = nums.filter(_.toString.length ==\
    \ 1000000)\n        val oneThousands = nums.filter(_.toString.length == 10000000)\n\
    \        val oneHundreds = nums.filter(_.toString.length == 100000000)\n     \
    \   val oneThousandThousands = nums.filter(_.toString.length == 1000000000)\n\
    \        val oneThousandThousandThousands = nums.filter(_.toString.length == 10000000000)\n\
    \        val oneHundredThousands = nums.filter(_.toString.length == 100000000000)\n\
    \        val oneHundredThousandThousands = nums.filter(_.toString.length == 1000000000000)\n\
    \        val oneHundredThousandThousandThousands = nums.filter(_.toString.length\
    \ == 10000000000000)\n        val oneHundredThousandThousandThousandThousands\
    \ = nums.filter(_.toString.length == 100000000000000)\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = nums.filter(_.toString.length == 1000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = nums.filter(_.toString.length == 10000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = nums.filter(_.toString.length == 100000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = nums.filter(_.toString.length == 1000000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandThousandThousand",
  "        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x\
    \ => x >= 10 && x < 20).toList\n        val teens = arr.filter(x => x >= 20 &&\
    \ x < 30).toList\n        val hundreds = arr.filter(x => x >= 30 && x < 40).toList\n\
    \        val thousands = arr.filter(x => x >= 40 && x < 50).toList\n        val\
    \ millions = arr.filter(x => x >= 50 && x < 60).toList\n        val billions =\
    \ arr.filter(x => x >= 60 && x < 70).toList\n        val trillions = arr.filter(x\
    \ => x >= 70 && x < 80).toList\n        val quadrillions = arr.filter(x => x >=\
    \ 80 && x < 90).toList\n        val quintillions = arr.filter(x => x >= 90 &&\
    \ x < 100).toList\n        val sextillions = arr.filter(x => x >= 100 && x < 1000).toList\n\
    \        val septillions = arr.filter(x => x >= 1000 && x < 10000).toList\n  \
    \      val octillions = arr.filter(x => x >= 10000 && x < 100000).toList\n   \
    \     val nonillions = arr.filter(x => x >= 100000 && x < 1000000).toList\n  \
    \      val decillions = arr.filter(x => x >= 1000000 && x < 10000000).toList\n\
    \        val undecillions = arr.filter(x => x >= 10000000 && x < 100000000).toList\n\
    \        val duodecillions = arr.filter(x => x >= 100000000 && x < 1000000000).toList\n\
    \        val tredecillions = arr.filter(x => x >= 1000000000 && x < 10000000000).toList\n\
    \        val quattuordecillions = arr.filter(x => x >= 10000000000 && x < 100000000000).toList\n\
    \        val quindecillions = arr.filter(x => x >= 100000000000 && x < 1000000000000).toList\n\
    \        val sexdecillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000).toList\n\
    \        val septendecillions = arr.filter(x => x >= 10000000000000 && x < 100000000000000).toList\n\
    \        val octodecillions = arr.filter(x => x >= 100000000000000 && x < 1000000000000000).toList\n\
    \        val novemdecillions = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).toList\n\
    \        val vigintillions = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000).toList\n\
    \        val unvigintillions = arr.filter(x => x >= 10000000000000000", "    \
    \    val result = arr.filter(_ > 0).toList\n        val reversed = result.reverse\n\
    \        val reversedString = reversed.map(_ + \"\").mkString(\"\")\n        val\
    \ reversedStringList = reversedString.split(\"\\\\W+\")\n        val reversedStringListLength\
    \ = reversedStringList.length\n        val one = \"One\"\n        val two = \"\
    Two\"\n        val three = \"Three\"\n        val four = \"Four\"\n        val\
    \ five = \"Five\"\n        val six = \"Six\"\n        val seven = \"Seven\"\n\
    \        val eight = \"Eight\"\n        val nine = \"Nine\"\n        val ten =\
    \ \"Ten\"\n        val hundred = \"Hundred\"\n        val thousand = \"Thousand\"\
    \n        val million = \"Million\"\n        val billion = \"Billion\"\n     \
    \   val trillion = \"Trillion\"\n        val quadrillion = \"Quadrillion\"\n \
    \       val quintillion = \"Quintillion\"\n        val sextillion = \"Sextillion\"\
    \n        val septillion = \"Septillion\"\n        val octillion = \"Octillion\"\
    \n        val nonillion = \"Nonillion\"\n        val decillion = \"Decillion\"\
    \n        val undecillion = \"Undecillion\"\n        val duodecillion = \"Duodecillion\"\
    \n        val tredecillion = \"Tredecillion\"\n        val quattuordecillion =\
    \ \"Quattuordecillion\"\n        val quindecillion = \"Quindecillion\"\n     \
    \   val sexdecillion = \"Sexdecillion\"\n        val septendecillion = \"Septendecillion\"\
    \n        val octodecillion = \"Octodecillion\"\n        val novemdecillion =\
    \ \"Novemdecillion\"\n        val vigintillion = \"Vigintillion\"\n        val\
    \ unvigintillion = \"Unvigintillion\"\n        val duovigintillion = \"Duovigintillion\"\
    \n        val trevigintillion = \"Trevigintillion\"\n        val quattuorvigintillion\
    \ = \"Quattuorvigintillion\"\n        val quinvigin", "        val ones = arr.filter(x\
    \ => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >=\
    \ 10l.toLong && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >=\
    \ 100l.toLong && x <= 999l.toLong)\n        val thousands = arr.filter(x => x\
    \ >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands = arr.filter(x\
    \ => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands = arr.filter(x\
    \ => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val oneHundreds =\
    \ arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n        val\
    \ oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n\
    \        val oneThousandThousands = arr.filter(x => x >= 1000000000l.toLong &&\
    \ x <= 999999999999l.toLong)\n        val oneThousandThousandHundreds = arr.filter(x\
    \ => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n        val oneThousandThousandThousands\
    \ = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000l.toLong\
    \ && x <= 9999999999999999999l.toLong)\n        val oneThousandThousandThousandThousands\
    \ = arr.filter(x => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >=\
    \ 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n        val\
    \ oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000l.toLong\
    \ && x <= 999999999999999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 100000000000000000l.toLong && x <= 9999999999999999999999999999999l.toLong)\n\
    \        val oneThousandThousand", "        val ones = arr.filter(_ <= 9).toList\n\
    \        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_\
    \ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n     \
    \   val hundredsAndOnes = arr.filter(_ <= 9999999).toList\n        val hundredsAndTens\
    \ = arr.filter(_ <= 999999999).toList\n        val hundredsAndHundreds = arr.filter(_\
    \ <= 99999999999).toList\n        val hundredsAndThousands = arr.filter(_ <= 999999999999).toList\n\
    \        val hundredsAndHundredsAndOnes = arr.filter(_ <= 999999999999999).toList\n\
    \        val hundredsAndHundredsAndTens = arr.filter(_ <= 9999999999999999).toList\n\
    \        val hundredsAndHundredsAndHundreds = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val hundredsAndHundredsAndThousands = arr.filter(_ <= 99999999999999999999).toList\n\
    \        val hundredsAndHundredsAndHundredsAndOnes = arr.filter(_ <= 99999999999999999999999).toList\n\
    \        val hundredsAndHundredsAndHundredsAndTens = arr.filter(_ <= 999999999999999999999999).toList\n\
    \        val hundredsAndHundredsAndHundredsAndHundreds = arr.filter(_ <= 999999999999999999999999999).toList\n\
    \        val hundredsAndHundredsAndHundredsAndThousands = arr.filter(_ <= 9999999999999999999999999999).toList\n\
    \        val hundredsAndHundredsAndHundredsAndHundredsAndOnes = arr.filter(_ <=\
    \ 9999999999999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndTens\
    \ = arr.filter(_ <= 99999999999999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999).toList\n        val\
    \ hundredsAndHundredsAndHundredsAndHundredsAndHundredsAndOnes = arr.filter(_ <=\
    \ 999999999999999999999999999999999999999).to", "        val ones = arr.filter(x\
    \ => x >= 1l.toLong && x <= 9l.toLong)\n        val tens = arr.filter(x => x >=\
    \ 10l.toLong && x <= 99l.toLong)\n        val hundreds = arr.filter(x => x >=\
    \ 100l.toLong && x <= 999l.toLong)\n        val thousands = arr.filter(x => x\
    \ >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands = arr.filter(x\
    \ => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands = arr.filter(x\
    \ => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val oneHundreds =\
    \ arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n        val\
    \ oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n\
    \        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000l.toLong\
    \ && x <= 999999999999l.toLong)\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >=\
    \ 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000000l.toLong && x <= 9999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n    \
    \    val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 10000000000000000l.toLong && x <= 999999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousandTh", "       \
    \ val result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortWith(_ < _).reverse\n\
    \        val map = new mutable.HashMap[Long, String]()\n        result foreach\
    \ { x => map.put(x.toLong, map.getOrElse(x, \"One\")) }\n        val result2 =\
    \ map.values.toList\n        result2.reverse.map(x => x.toString.replaceAll(\"\
    \\\\d\", \"$0\"))", "        val ones = arr.filter(_ <= 9).toList\n        val\
    \ tens = arr.filter(_ >= 10 && _ <=99).toList\n        val hundreds = arr.filter(_\
    \ >= 100).toList\n        val hundredsReversed = hundreds.reverse\n        val\
    \ tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n     \
    \   val onesReversedString = onesReversed.map(_ + One).mkString(\"\")\n      \
    \  val tensReversedString = tensReversed.map(_ + Two).mkString(\"\")\n       \
    \ val hundredsReversedString = hundredsReversed.map(_ + Three).mkString(\"\")\n\
    \        val hundredsReversedStringReversed = hundredsReversedString.reverse\n\
    \        val tensReversedStringReversed = tensReversedStringReversed.reverse\n\
    \        val onesReversedStringReversed = onesReversedStringReversed.reverse\n\
    \        val onesReversedStringReversedString = onesReversedStringReversed.map(_\
    \ + Four).mkString(\"\")\n        val tensReversedStringReversedString = tensReversedStringReversed.map(_\
    \ + Five).mkString(\"\")\n        val hundredsReversedStringReversedString = hundredsReversedStringReversed.map(_\
    \ + Six).mkString(\"\")\n        val hundredsReversedStringReversedStringReversed\
    \ = hundredsReversedStringReversedStringReversed.reverse\n        val tensReversedStringReversedStringReversed\
    \ = tensReversedStringReversedStringReversed.reverse\n        val onesReversedStringReversedStringReversed\
    \ = onesReversedStringReversedStringReversed.reverse\n        val onesReversedStringReversedStringReversedString\
    \ = onesReversedStringReversedStringReversed.map(_ + Seven).mkString(\"\")\n \
    \       val tensReversedStringReversedStringReversedString = tensReversedStringReversedStringReversed.map(_\
    \ + Eight).mkString(\"\")\n        val hundredsReversedStringReversedStringReversedString\
    \ = hundredsReversedStringReversedStringReversed.map(_ + Nine).mkString(\"\")\n\
    \        val hundredsReversedStringReversedStringReversedStringReversed = hundredsReversedStringReversedStringReversedStringReversed.reverse\n\
    \        val tensReversedStringReversedStringReversedStringReversed = tensReversedStringReversedStringReversedStringReversed.reverse\n\
    \        val ones", "        val ones = arr.filter(x => x < 10).toList\n     \
    \   val tens = arr.filter(x => x >= 10 && x < 20).toList\n        val teens =\
    \ arr.filter(x => x >= 20 && x < 30).toList\n        val hundreds = arr.filter(x\
    \ => x >= 30 && x < 40).toList\n        val thousands = arr.filter(x => x >= 40\
    \ && x < 50).toList\n        val millions = arr.filter(x => x >= 50 && x < 60).toList\n\
    \        val billions = arr.filter(x => x >= 60 && x < 70).toList\n        val\
    \ trillions = arr.filter(x => x >= 70 && x < 80).toList\n        val quadrillions\
    \ = arr.filter(x => x >= 80 && x < 90).toList\n        val quintillions = arr.filter(x\
    \ => x >= 90 && x < 100).toList\n        val thousandands = arr.filter(x => x\
    \ >= 100 && x < 1000).toList\n        val millionands = arr.filter(x => x >= 1000\
    \ && x < 10000).toList\n        val billionands = arr.filter(x => x >= 10000 &&\
    \ x < 100000).toList\n        val trillionands = arr.filter(x => x >= 100000 &&\
    \ x < 1000000).toList\n        val quadrillionands = arr.filter(x => x >= 1000000\
    \ && x < 10000000).toList\n        val quintillionands = arr.filter(x => x >=\
    \ 10000000 && x < 100000000).toList\n        val thousandandands = arr.filter(x\
    \ => x >= 100000000 && x < 1000000000).toList\n        val millionandands = arr.filter(x\
    \ => x >= 1000000000 && x < 10000000000).toList\n        val billionandands =\
    \ arr.filter(x => x >= 10000000000 && x < 100000000000).toList\n        val trillionandands\
    \ = arr.filter(x => x >= 100000000000 && x < 1000000000000).toList\n        val\
    \ quadrillionands = arr.filter(x => x >= 1000000000000 && x < 10000000000000).toList\n\
    \        val quintillionands = arr.filter(x => x >= 10000000000000 && x < 100000000000000).toList\n\
    \        val thousandandands = arr.filter(x => x >= 100000000000000 && x < 1000000000000000).toList\n\
    \        val millionandands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).toList\n\
    \        val billionandands = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000).toList\n\
    \        val trillionandands = arr.filter(x => x >= 100000000000000000 && ", " \
    \       val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n       \
    \ val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val\
    \ hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val\
    \ thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n      \
    \  val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n\
    \        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n\
    \        val oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n\
    \        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x\
    \ <= 99999999999l.toLong)\n        val oneThousandThousandHundreds = arr.filter(x\
    \ => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >=\
    \ 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000000l.toLong && x <= 9999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n    \
    \    val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 10000000000000000l.toLong && x <= 999999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousandTh", "       \
    \ val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n\
    \        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_\
    \ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n\
    \        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds\
    \ = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds = arr.filter(_\
    \ <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(_\
    \ <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds =\
    \ arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter", "        val list = arr.toList.sortWith(_ < _)\n        val reversed\
    \ = list.reverse\n        val result = reversed.map(i => if (i <= 9) s\"${i}\"\
    \ else s\"${i - 10}\").mkString\n        if (result.isEmpty) Nil\n        else\
    \ result.split(\"\\\\D+\").map(i => if (i.isEmpty) \"One\" else i).mkString",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <=\
    \ 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_\
    \ <= 999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_\
    \ <= 9999999999999999999).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999999999999999).to",
  "        val list = arr.toList\n        val len = list.size\n        val one = list.filter(x\
    \ => x < 9).toList\n        val two = list.filter(x => x >= 9 && x < 18).toList\n\
    \        val three = list.filter(x => x >= 18 && x < 27).toList\n        val four\
    \ = list.filter(x => x >= 27 && x < 36).toList\n        val five = list.filter(x\
    \ => x >= 36 && x < 45).toList\n        val six = list.filter(x => x >= 45 &&\
    \ x < 54).toList\n        val seven = list.filter(x => x >= 54 && x < 63).toList\n\
    \        val eight = list.filter(x => x >= 63 && x < 72).toList\n        val nine\
    \ = list.filter(x => x >= 72 && x < 81).toList\n        val ten = list.filter(x\
    \ => x >= 81 && x < 90).toList\n        val hundred = list.filter(x => x >= 90\
    \ && x < 100).toList\n        val hundreds = list.filter(x => x >= 100).toList\n\
    \        val hundredths = list.filter(x => x >= 100).toList\n        val hundredth\
    \ = list.filter(x => x >= 100).toList\n        val hundredths = list.filter(x\
    \ => x >= 100).toList\n        val hundredth = list.filter(x => x >= 100).toList\n\
    \        val hundredths = list.filter(x => x >= 100).toList\n        val hundredth\
    \ = list.filter(x => x >= 100).toList\n        val hundredths = list.filter(x\
    \ => x >= 100).toList\n        val hundredth = list.filter(x => x >= 100).toList\n\
    \        val hundredths = list.filter(x => x >= 100).toList\n        val hundredth\
    \ = list.filter(x => x >= 100).toList\n        val hundredths = list.filter(x\
    \ => x >= 100).toList\n        val hundredth = list.filter(x => x >= 100).toList\n\
    \        val hundredths = list.filter(x => x >= 100).toList\n        val hundredth\
    \ = list.filter(x => x >= 100).toList\n        val hundredths = list.filter(x\
    \ => x >= 100).toList\n        val hundredth = list.filter(x => x >= 100).toList\n\
    \        val hundredths = list.filter(x => x >= 100).toList\n        val hundredth\
    \ = list.filter(x => x >= 100).toList\n        val hundredths = list.filter(x\
    \ => x >= 100).toList\n        val hundredth = list.filter(x => x >= 100).toList\n\
    \        val hundredths = ", "        val nums = arr.toList\n        val ones\
    \ = nums.filter(x => x < 10).toList\n        val tens = nums.filter(x => x >=\
    \ 10 && x < 100).toList\n        val hundreds = nums.filter(x => x >= 100).toList\n\
    \        val hundredsAndOnes = hundreds.map(x => x + \"One\")\n        val hundredsAndTens\
    \ = hundreds.map(x => x + \"Ten\")\n        val hundredsAndHundreds = hundreds.map(x\
    \ => x + \"Hundred\")\n        val hundredsAndOnesAndTens = hundredsAndOnes.map(x\
    \ => x + \"And\" + tens.map(x => x + \"Ten\"))\n        val hundredsAndOnesAndHundreds\
    \ = hundredsAndOnes.map(x => x + \"And\" + hundreds.map(x => x + \"Hundred\"))\n\
    \        val hundredsAndOnesAndHundredsAndTens = hundredsAndOnesAndHundreds.map(x\
    \ => x + \"And\" + hundredsAndTens.map(x => x + \"Ten\"))\n        val hundredsAndOnesAndHundredsAndTensAndHundreds\
    \ = hundredsAndOnesAndHundreds.map(x => x + \"And\" + hundredsAndTens.map(x =>\
    \ x + \"Ten\") + \"And\" + hundreds.map(x => x + \"Hundred\"))\n        val hundredsAndOnesAndHundredsAndTensAndHundredsAndOnes\
    \ = hundredsAndOnesAndHundreds.map(x => x + \"And\" + hundredsAndTens.map(x =>\
    \ x + \"Ten\") + \"And\" + hundreds.map(x => x + \"Hundred\") + \"And\" + ones.map(x\
    \ => x + \"One\"))\n        val hundredsAndOnesAndHundredsAndTensAndHundredsAndOnesAndTens\
    \ = hundredsAndOnesAndHundreds.map(x => x + \"And\" + hundredsAndTens.map(x =>\
    \ x + \"Ten\") + \"And\" + hundreds.map(x => x + \"Hundred\") + \"And\" + ones.map(x\
    \ => x + \"One\") + \"And\" + tens.map(x => x + \"Ten\"))\n        val hundredsAndOnesAndHundredsAndTensAndHundredsAndOnesAndHundreds\
    \ = hundredsAndOnesAndHundreds.map(x => x + \"And\" + hundredsAndTens.map(x =>\
    \ x + \"Ten\") + \"And\" + hundreds.map(x => x + \"Hundred\") + \"And", "    \
    \    val ones = arr.filter(x => x < 10).map(x => s\"One\")\n        val tens =\
    \ arr.filter(x => x >= 10 && x < 100).map(x => s\"Ten\")\n        val hundreds\
    \ = arr.filter(x => x >= 100 && x < 1000).map(x => s\"Hundred\")\n        val\
    \ thousands = arr.filter(x => x >= 1000 && x < 10000).map(x => s\"Thousand\")\n\
    \        val millions = arr.filter(x => x >= 10000 && x < 100000).map(x => s\"\
    Million\")\n        val billions = arr.filter(x => x >= 100000 && x < 1000000).map(x\
    \ => s\"Billion\")\n        val trillions = arr.filter(x => x >= 1000000 && x\
    \ < 10000000).map(x => s\"Trillion\")\n        val quadrillions = arr.filter(x\
    \ => x >= 10000000 && x < 100000000).map(x => s\"Quadrillion\")\n        val quintillions\
    \ = arr.filter(x => x >= 100000000 && x < 1000000000).map(x => s\"Quintillion\"\
    )\n        val sextillions = arr.filter(x => x >= 1000000000 && x < 10000000000).map(x\
    \ => s\"Sextillion\")\n        val septillions = arr.filter(x => x >= 10000000000\
    \ && x < 100000000000).map(x => s\"Septillion\")\n        val octillions = arr.filter(x\
    \ => x >= 100000000000 && x < 1000000000000).map(x => s\"Octillion\")\n      \
    \  val nonillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000).map(x\
    \ => s\"Nonillion\")\n        val decillions = arr.filter(x => x >= 10000000000000\
    \ && x < 100000000000000).map(x => s\"Decillion\")\n        val undecillions =\
    \ arr.filter(x => x >= 100000000000000 && x < 1000000000000000).map(x => s\"Undecillion\"\
    )\n        val duodecillions = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).map(x\
    \ => s\"Duodecillion\")\n        val tredecillions = arr.filter(x => x >= 10000000000000000\
    \ && x < 100000000000000000).map(x => s\"Tredecillion\")\n        val quattuordecillions\
    \ = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000).map(x\
    \ => s\"Quattuordecillion\")\n        val quindecillions = arr.filter(x => x >= ",
  "        val result = arr.foldLeft(List[String]()){\n            (acc, x) => acc\
    \ match {\n                case Nil => List(\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n                case _ =>\
    \ if (x < 9 && x > 1) List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\") else List(\"One\", \"Two\", \"Three\",\
    \ \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Nine\"\
    , \"Nine\", \"Nine\")\n            }\n        }.reverse\n        arr.foldLeft(List[String]()){\n\
    \            (acc, x) => acc match {\n                case Nil => List(\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )\n                case _ => if (x < 9 && x > 1) List(\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\") else List(\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    , \"Ten\", \"Nine\", \"Nine\", \"Nine\")\n            }\n        }.reverse.foldLeft(List[String]()){\n\
    \            (acc, x) => acc match {\n                case Nil => List(\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )\n                case _ => if (x < 9 && x > 1) List(\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\") else List(\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    , \"Ten\", \"Nine\", \"Nine\", \"Nine\")\n            }\n        }.reverse.foldLeft(List[String]()){\n\
    \            (acc, x) => acc match {\n                case Nil => List(\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )\n                case _ => if (x < 9 && x > 1) List(\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\") else List(\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    , \"Ten\", \"Nine\", \"Nine\", \"Nine\")\n            }\n        }.reverse.foldLeft(List[String]()){\n\
    \            (acc, x) => acc match {\n", "        val ones = arr.filter(x => x\
    \ >= 1l.toLong && x <= 9l.toLong).map(x => s\"One\")\n        val tens = arr.filter(x\
    \ => x >= 10l.toLong && x <= 99l.toLong).map(x => s\"Ten\")\n        val hundreds\
    \ = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong).map(x => s\"Hundred\"\
    )\n        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong).map(x\
    \ => s\"Thousand\")\n        val millions = arr.filter(x => x >= 100000l.toLong\
    \ && x <= 999999l.toLong).map(x => s\"Million\")\n        val billions = arr.filter(x\
    \ => x >= 1000000l.toLong && x <= 9999999l.toLong).map(x => s\"Billion\")\n  \
    \      val trillions = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong).map(x\
    \ => s\"Trillion\")\n        val quadrillions = arr.filter(x => x >= 100000000l.toLong\
    \ && x <= 99999999999l.toLong).map(x => s\"Quadrillion\")\n        val quintillions\
    \ = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong).map(x\
    \ => s\"Quintillion\")\n        val sextillions = arr.filter(x => x >= 10000000000l.toLong\
    \ && x <= 999999999999999l.toLong).map(x => s\"Sextillion\")\n        val septillions\
    \ = arr.filter(x => x >= 10000000000000l.toLong && x <= 9999999999999999l.toLong).map(x\
    \ => s\"Septillion\")\n        val octillions = arr.filter(x => x >= 1000000000000000l.toLong\
    \ && x <= 9999999999999999999l.toLong).map(x => s\"Octillion\")\n        val nonillions\
    \ = arr.filter(x => x >= 10000000000000000l.toLong && x <= 99999999999999999999l.toLong).map(x\
    \ => s\"Nonillion\")\n        val decillions = arr.filter(x => x >= 100000000000000000l.toLong\
    \ && x <= 99999999999999999999999l.toLong).map(x => s\"Decillion\")\n        val\
    \ undecillions = arr.filter(x => x >= 100000000000000000.0l.toLong && x <= 99999999999999999999999l.toLong).map(x\
    \ => s\"Undecillion\")", "        val ones = arr.filter(_ <= 9).toList\n     \
    \   val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_\
    \ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n     \
    \   val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands\
    \ = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <=\
    \ 999999999).toList\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).toList\n\
    \        val oneThousandThousandHundreds = arr.filter(_ <= 9999999999999).toList\n\
    \        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_\
    \ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.", "        val list = arr.toList\n        val len = list.size\n     \
    \   val ones = list.filter(_ <= 9).toList\n        val tens = list.filter(_ <=\
    \ 99).toList\n        val hundreds = list.filter(_ <= 999).toList\n        val\
    \ thousands = list.filter(_ <= 9999).toList\n        val tenThousands = list.filter(_\
    \ <= 999999).toList\n        val oneThousands = list.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = list.filter(_ <= 999999999).toList\n        val oneThousandThousands\
    \ = list.filter(_ <= 99999999999).toList\n        val oneHundredThousands = list.filter(_\
    \ <= 999999999999).toList\n        val oneHundredThousandThousands = list.filter(_\
    \ <= 999999999999999).toList\n        val oneHundredThousandThousands = list.filter(_\
    \ <= 999999999999999999).toList\n        val oneHundredThousandThousandThousands\
    \ = list.filter(_ <= 9999999999999).toList\n        val oneHundredThousandThousandThousands\
    \ = list.filter(_ <= 99999999999998).toList\n        val oneHundredThousandThousandThousands\
    \ = list.filter(_ <= 999999999999987).toList\n        val oneHundredThousandThousandThousands\
    \ = list.filter(_ <= 9999999999999876).toList\n        val oneHundredThousandThousandThousands\
    \ = list.filter(_ <= 99999999999998765).toList\n        val oneHundredThousandThousandThousands\
    \ = list.filter(_ <= 999999999999987654).toList\n        val oneHundredThousandThousandThousands\
    \ = list.filter(_ <= 9999999999999876543).toList\n        val oneHundredThousandThousandThousands\
    \ = list.filter(_ <= 99999999999998765432).toList\n        val oneHundredThousandThousandThousands\
    \ = list.filter(_ <= 999999999999987654321).toList\n        val oneHundredThousandThousandThousands\
    \ = list.filter(_ <= 9999999999999876543211).toList\n        val oneHundredThousandThousandThousands\
    \ = list.filter(_ <= 99999999999998765432111).toList\n        val oneHundredThousandThousandThous",
  "        val list = arr.toList\n        val len = list.size\n        val ones =\
    \ list.filter(_ <= 9).toList\n        val tens = list.filter(_ >= 10 && _ <=99).toList\n\
    \        val hundreds = list.filter(_ >= 100).toList\n        val hundredsReversed\
    \ = hundreds.reverse\n        val tensReversed = tens.reverse\n        val onesReversed\
    \ = ones.reverse\n        val tensReversedReversed = tensReversed.reverse\n  \
    \      val onesReversedReversed = onesReversed.reverse\n        val tensReversedReversedReversed\
    \ = tensReversedReversed.reverse\n        val onesReversedReversedReversed = onesReversedReversed.reverse\n\
    \        val tensReversedReversedReversedReversed = tensReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversed = onesReversedReversedReversed.reverse\n\
    \        val tensReversedReversedReversedReversedReversed = tensReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversed.reverse\n\
    \        val tensReversedReversedReversedReversedReversedReversedReversed = tensReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = onesReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val tensReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = tensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val tensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = tensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <=\
    \ 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_\
    \ <= 999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_\
    \ <= 9999999999999999999).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n\
    \        val oneHund", "        val len = arr.length\n        val reversed = arr.sortWith(_\
    \ < _)\n        val result = reversed.map(i => if (i < 1l.toLong || i > 9l.toLong)\
    \ \"\" else i.toString).reverse\n        val named = result.map(i => if (i < 1l.toLong\
    \ || i > 9l.toLong) \"\" else i.toString).map(i => if (i < 1l.toLong || i > 9l.toLong)\
    \ \"\" else i.toString.replaceAll(\"[0-9]\", \"One\").replaceAll(\"[0-9]\", \"\
    Two\").replaceAll(\"[0-9]\", \"Three\").replaceAll(\"[0-9]\", \"Four\").replaceAll(\"\
    [0-9]\", \"Five\").replaceAll(\"[0-9]\", \"Six\").replaceAll(\"[0-9]\", \"Seven\"\
    ).replaceAll(\"[0-9]\", \"Eight\").replaceAll(\"[0-9]\", \"Nine\"))\n        if\
    \ (len == 0) named.toList\n        else named", "        val list = arr.toList\n\
    \        val len = list.size\n        val reversed = list.sortWith(_ < _)\n  \
    \      val result = reversed.map(i => if (i < 10) {\n            val str = i.toString\n\
    \            val index = str.indexOf(\"0\")\n            val name = if (index\
    \ == -1) \"One\" else str.substring(0, index)\n            name else str\n   \
    \     }\n        else i.toString)\n        if (result.isEmpty) List()\n      \
    \  else result", "        val ones = arr.filter(x => x <= 9).toList\n        val\
    \ tens = arr.filter(x => x > 9).toList\n        val tensReversed = tens.reverse\n\
    \        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x\
    \ => One(x))\n        val tensReversedString = tensReversed.map(x => Two(x))\n\
    \        val tensReversedString2 = tensReversed.map(x => Three(x))\n        val\
    \ tensReversedString3 = tensReversed.map(x => Four(x))\n        val tensReversedString4\
    \ = tensReversed.map(x => Five(x))\n        val tensReversedString5 = tensReversed.map(x\
    \ => Six(x))\n        val tensReversedString6 = tensReversed.map(x => Seven(x))\n\
    \        val tensReversedString7 = tensReversed.map(x => Eight(x))\n        val\
    \ tensReversedString8 = tensReversed.map(x => Nine(x))\n        val tensReversedString9\
    \ = tensReversed.map(x => Ten(x))\n        val tensReversedString10 = tensReversed.map(x\
    \ => Eleven(x))\n        val tensReversedString11 = tensReversed.map(x => Twelve(x))\n\
    \        val tensReversedString12 = tensReversed.map(x => Thirteen(x))\n     \
    \   val tensReversedString13 = tensReversed.map(x => Fourteen(x))\n        val\
    \ tensReversedString14 = tensReversed.map(x => Fifteen(x))\n        val tensReversedString15\
    \ = tensReversed.map(x => Sixteen(x))\n        val tensReversedString16 = tensReversed.map(x\
    \ => Seventeen(x))\n        val tensReversedString17 = tensReversed.map(x => Eighteen(x))\n\
    \        val tensReversedString18 = tensReversed.map(x => Nineteen(x))\n     \
    \   val tensReversedString19 = tensReversed.map(x => Twenty(x))\n        val tensReversedString20\
    \ = tensReversed.map(x => TwentyOne(x))\n        val tensReversedString21 = tensReversed.map(x\
    \ => TwentyTwo(x))\n        val tensReversedString22 = tensReversed.map(x => TwentyThree(x))\n\
    \        val tensReversedString23 = tensReversed.map(", "        val list = arr.toList\n\
    \        val len = list.size\n        val maxLen = len / 10\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen\
    \ / 46\n        val maxLen47 = ", "        val nums = arr.filter(_ >= 1l && _\
    \ <= 9l)\n        val reversed = nums.reverse\n        val result = reversed.map(i\
    \ => s\"${i % 10}${byName(i)}\").filter(_.nonEmpty)\n        if (result.isEmpty)\
    \ Nil else result", "        val nums = arr.filter(_ > 0).toList\n        val\
    \ numsLength = nums.length\n        if (numsLength == 0) List()\n        else\
    \ if (numsLength == 1) List(nums(0).toString)\n        else {\n            val\
    \ numsLength = nums.length\n            val numsLength = nums.length\n       \
    \     val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = nums.length\n            val numsLength = nums.length\n\
    \            val numsLength = ", "        val result = arr.filter(_ >= 1l.toLong\
    \ && _ <= 9l.toLong).sortWith(_ < _).reverse\n        val map = new mutable.HashMap[String,\
    \ String]()\n        map.put(\"One\", \"1\")\n        map.put(\"Two\", \"2\")\n\
    \        map.put(\"Three\", \"3\")\n        map.put(\"Four\", \"4\")\n       \
    \ map.put(\"Five\", \"5\")\n        map.put(\"Six\", \"6\")\n        map.put(\"\
    Seven\", \"7\")\n        map.put(\"Eight\", \"8\")\n        map.put(\"Nine\",\
    \ \"9\")\n        result.map(x => map.get(x)).filter(x => x != null)", "     \
    \   val list = arr.toList\n        val len = list.size\n        val ones = list.filter(_\
    \ <= 9).toList\n        val tens = list.filter(_ >= 10 && _ < 19).toList\n   \
    \     val hundreds = list.filter(_ >= 20 && _ < 99).toList\n        val thousands\
    \ = list.filter(_ >= 100 && _ < 999).toList\n        val hundredsReversed = hundreds.reverse\n\
    \        val thousandsReversed = thousands.reverse\n        val tensReversed =\
    \ tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString\
    \ = onesReversed.mkString(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\")\n        val tensReversedString = tensReversed.mkString(\"\
    Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\"\
    , \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val hundredsReversedString\
    \ = hundredsReversed.mkString(\"Hundred\", \"Thousand\", \"Hundred\", \"Hundred\"\
    , \"Hundred\", \"Hundred\", \"Hundred\", \"Hundred\", \"Hundred\", \"Hundred\"\
    )\n        val thousandsReversedString = thousandsReversed.mkString(\"Thousand\"\
    , \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\"\
    , \"Thousand\", \"Thousand\", \"Thousand\")\n        val hundredsReversedStringList\
    \ = List(hundredsReversedString)\n        val thousandsReversedStringList = List(thousandsReversedString)\n\
    \        val hundredsReversedStringListString = hundredsReversedStringList.mkString(\"\
    Hundred\", \"Thousand\", \"Hundred\", \"Hundred\", \"Hundred\", \"Hundred\", \"\
    Hundred\", \"Hundred\", \"Hundred\", \"Hundred\", \"Hundred\")\n        val thousandsReversedStringListString\
    \ = thousandsReversedStringList.mkString(\"Thousand\", \"Thousand\", \"Thousand\"\
    , \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\", \"Thousand\"\
    , \"Thousand\", \"Thousand\")\n        val hundredsReversedStringListStringList\
    \ = List(hundredsReversedStringListString)\n        val thousandsReversedStringListStringList\
    \ = List(thousand", "        val list = arr.toList.sortWith(_ < _)\n        val\
    \ reversed = list.reverse\n        val result = reversed.map(i => if (i < 10)\
    \ \"One\" else if (i < 20) \"Two\" else if (i < 30) \"Three\" else if (i < 40)\
    \ \"Four\" else if (i < 50) \"Five\" else if (i < 60) \"Six\" else if (i < 70)\
    \ \"Seven\" else if (i < 80) \"Eight\" else \"Nine\")\n        result", "    \
    \    val nums = arr.toList\n        val numsLen = nums.size\n        val numsLenStr\
    \ = numsLen.toString\n        val numsLenStrLen = numsLenStr.length\n        val\
    \ numsLenStrLen2 = numsLenStrLen + 2\n        val numsLenStrLen3 = numsLenStrLen\
    \ + 3\n        val numsLenStrLen4 = numsLenStrLen + 4\n        val numsLenStrLen5\
    \ = numsLenStrLen + 5\n        val numsLenStrLen6 = numsLenStrLen + 6\n      \
    \  val numsLenStrLen7 = numsLenStrLen + 7\n        val numsLenStrLen8 = numsLenStrLen\
    \ + 8\n        val numsLenStrLen9 = numsLenStrLen + 9\n        val numsLenStrLen10\
    \ = numsLenStrLen + 10\n        val numsLenStrLen11 = numsLenStrLen + 11\n   \
    \     val numsLenStrLen12 = numsLenStrLen + 12\n        val numsLenStrLen13 =\
    \ numsLenStrLen + 13\n        val numsLenStrLen14 = numsLenStrLen + 14\n     \
    \   val numsLenStrLen15 = numsLenStrLen + 15\n        val numsLenStrLen16 = numsLenStrLen\
    \ + 16\n        val numsLenStrLen17 = numsLenStrLen + 17\n        val numsLenStrLen18\
    \ = numsLenStrLen + 18\n        val numsLenStrLen19 = numsLenStrLen + 19\n   \
    \     val numsLenStrLen20 = numsLenStrLen + 20\n        val numsLenStrLen21 =\
    \ numsLenStrLen + 21\n        val numsLenStrLen22 = numsLenStrLen + 22\n     \
    \   val numsLenStrLen23 = numsLenStrLen + 23\n        val numsLenStrLen24 = numsLenStrLen\
    \ + 24\n        val numsLenStrLen25 = numsLenStrLen + 25\n        val numsLenStrLen26\
    \ = numsLenStrLen + 26\n        val numsLenStrLen27 = numsLenStrLen + 27\n   \
    \     val numsLenStrLen28 = numsLenStrLen + 28\n        val numsLenStrLen29 =\
    \ numsLenStrLen + 29\n        val numsLen", "        val ones = arr.filter(x =>\
    \ x >= 1l.toLong && x <= 9l.toLong).map(x => x.toString)\n        val tens = arr.filter(x\
    \ => x >= 10l.toLong && x <= 99l.toLong).map(x => x.toString)\n        val hundreds\
    \ = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong).map(x => x.toString)\n\
    \        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong).map(x\
    \ => x.toString)\n        val tenThousands = arr.filter(x => x >= 100000l.toLong\
    \ && x <= 999999l.toLong).map(x => x.toString)\n        val oneThousands = arr.filter(x\
    \ => x >= 1000000l.toLong && x <= 9999999l.toLong).map(x => x.toString)\n    \
    \    val oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong).map(x\
    \ => x.toString)\n        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong\
    \ && x <= 99999999999l.toLong).map(x => x.toString)\n        val oneThousandThousands\
    \ = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong).map(x\
    \ => x.toString)\n        val oneThousandThousandHundreds = arr.filter(x => x\
    \ >= 10000000000l.toLong && x <= 999999999999999l.toLong).map(x => x.toString)\n\
    \        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000000l.toLong\
    \ && x <= 9999999999999999l.toLong).map(x => x.toString)\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 100000000000000l.toLong && x <= 9999999999999999999l.toLong).map(x\
    \ => x.toString)\n        val oneThousandThousandThousandThousands = arr.filter(x\
    \ => x >= 10000000000000000l.toLong && x <= 99999999999999999999l.toLong).map(x\
    \ => x.toString)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 100000000000000000l.toLong && x <= 99999999999999999999999l.toLong).map(x\
    \ => x.toString)\n        val oneThousandThousandThousandThousandThous", "   \
    \     val list = arr.toList\n        val len = list.size\n        if (len == 0)\
    \ return Nil\n        val min = list.min\n        val max = list.max\n       \
    \ val digits = list.map(_.toString.toInt)\n        val reversed = digits.reverse\n\
    \        val ones = reversed.takeWhile(_ < 10)\n        val tens = reversed.dropWhile(_\
    \ < 10).takeWhile(_ >= 10)\n        val tensMap = tens.map(_.toString.toInt)\n\
    \        val tensReversed = tensMap.reverse\n        val tensOnes = tensReversed.takeWhile(_\
    \ < 10)\n        val tensTens = tensReversed.dropWhile(_ < 10).takeWhile(_ >=\
    \ 10)\n        val tensTensMap = tensTens.map(_.toString.toInt)\n        val tensTensReversed\
    \ = tensTensMap.reverse\n        val tensOnesReversed = tensOnes.reverse\n   \
    \     val tensOnesReversedMap = tensOnesReversed.map(_.toString.toInt)\n     \
    \   val tensOnesReversedReversed = tensOnesReversedMap.reverse\n        val tensOnesReversedReversedMap\
    \ = tensOnesReversedReversed.map(_.toString.toInt)\n        val tensOnesReversedReversedReversedMap\
    \ = tensOnesReversedReversedMap.reverse\n        val tensOnesReversedReversedReversedMap\
    \ = tensOnesReversedReversedMap.reverse\n        val tensOnesReversedReversedReversedReversedMap\
    \ = tensOnesReversedReversedReversedMap.reverse\n        val tensOnesReversedReversedReversedReversedReversedMap\
    \ = tensOnesReversedReversedReversedReversedMap.reverse\n        val tensOnesReversedReversedReversedReversedReversedReversedMap\
    \ = tensOnesReversedReversedReversedReversedReversedMap.reverse\n        val tensOnesReversedReversedReversedReversedReversedReversedReversedMap\
    \ = tensOnesReversedReversedReversedReversedReversedReversedMap.reverse\n    \
    \    val tensOnesReversedReversedReversedReversedReversedReversedReversedReversedMap\
    \ = tensOnesReversedReversedReversedReversedReversedReversedReversedMap.reverse\n\
    \        val tensOnesReversedReversedReversedReversedReversedReversedReversed",
  "        val n = arr.size\n        val list = arr.toList\n        val ones = list.filter(x\
    \ => x < 10).toList\n        val tens = list.filter(x => x >= 10 && x < 20).toList\n\
    \        val hundreds = list.filter(x => x >= 20 && x < 30).toList\n        val\
    \ thousands = list.filter(x => x >= 30 && x < 40).toList\n        val hundredsAndOnes\
    \ = list.filter(x => x >= 40 && x < 50).toList\n        val hundredsAndTens =\
    \ list.filter(x => x >= 50 && x < 60).toList\n        val hundredsAndHundreds\
    \ = list.filter(x => x >= 60 && x < 70).toList\n        val hundredsAndThousands\
    \ = list.filter(x => x >= 70 && x < 80).toList\n        val hundredsAndHundredsAndOnes\
    \ = list.filter(x => x >= 80 && x < 90).toList\n        val hundredsAndHundredsAndTens\
    \ = list.filter(x => x >= 90 && x < 100).toList\n        val hundredsAndHundredsAndHundreds\
    \ = list.filter(x => x >= 100 && x < 1000).toList\n        val hundredsAndHundredsAndThousands\
    \ = list.filter(x => x >= 1000 && x < 10000).toList\n        val hundredsAndHundredsAndHundredsAndOnes\
    \ = list.filter(x => x >= 10000 && x < 100000).toList\n        val hundredsAndHundredsAndHundredsAndTens\
    \ = list.filter(x => x >= 100000 && x < 1000000).toList\n        val hundredsAndHundredsAndHundredsAndHundreds\
    \ = list.filter(x => x >= 1000000 && x < 10000000).toList\n        val hundredsAndHundredsAndHundredsAndThousands\
    \ = list.filter(x => x >= 10000000 && x < 100000000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndOnes\
    \ = list.filter(x => x >= 100000000 && x < 1000000000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndTens\
    \ = list.filter(x => x >= 1000000000 && x < 10000000000).toList\n        val hundredsAndHundredsAndHundredsAndHundredsAndHundreds\
    \ = list.filter(x => x >= 10000000000 && x < 100000000000).toList\n        val\
    \ hundredsAndHundredsAndHundredsAndHundredsAndThousands = list.filter(x => x >=\
    \ 100000000000 && x < 1000000000000).toList\n        val hundredsAndHundred",
  "        val list = arr.toList\n        val len = list.size\n        val reversed\
    \ = list.sortWith(_ < _)\n        val result = reversed.reverse.map(x => if (x\
    \ < 10) \"One\" else if (x < 100) \"Two\" else if (x < 1000) \"Three\" else if\
    \ (x < 10000) \"Four\" else if (x < 100000) \"Five\" else if (x < 1000000) \"\
    Six\" else if (x < 10000000) \"Seven\" else \"Eight\" else if (x < 100000000)\
    \ \"Nine\")\n        result", "        val ones = arr.filter(_ <= 9).toList\n\
    \        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_\
    \ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n     \
    \   val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands\
    \ = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <=\
    \ 999999999).toList\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).toList\n\
    \        val oneThousandThousandHundreds = arr.filter(_ <= 9999999999999).toList\n\
    \        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_\
    \ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n",
  "        val result = arr.sortWith(_.toLong < _.toLong)\n        val reversed =\
    \ result.reverse\n        reversed.map(_.toString).filterNot(_.equals(\"0\")).map(name\
    \ => s\"${name.toUpperCase()}\")", "        val ones = arr.filter(x => x >= 1l.toLong\
    \ && x <= 9l.toLong).map(x => x.toString.toUpperCase)\n        val tens = arr.filter(x\
    \ => x >= 10l.toLong && x <= 99l.toLong).map(x => x.toString.toUpperCase)\n  \
    \      val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong).map(x\
    \ => x.toString.toUpperCase)\n        val thousands = arr.filter(x => x >= 1000l.toLong\
    \ && x <= 9999l.toLong).map(x => x.toString.toUpperCase)\n        val hundredths\
    \ = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).map(x => x.toString.toUpperCase)\n\
    \        val thousandths = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong).map(x\
    \ => x.toString.toUpperCase)\n        val tenths = arr.filter(x => x >= 10000000l.toLong\
    \ && x <= 999999999l.toLong).map(x => x.toString.toUpperCase)\n        val oneths\
    \ = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong).map(x\
    \ => x.toString.toUpperCase)\n        val oneth = arr.filter(x => x >= 1000000000l.toLong\
    \ && x <= 999999999999l.toLong).map(x => x.toString.toUpperCase)\n        val\
    \ tenth = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong).map(x\
    \ => x.toString.toUpperCase)\n        val hundredth = arr.filter(x => x >= 1000000000000l.toLong\
    \ && x <= 9999999999999999l.toLong).map(x => x.toString.toUpperCase)\n       \
    \ val thousandth = arr.filter(x => x >= 100000000000000l.toLong && x <= 9999999999999999999l.toLong).map(x\
    \ => x.toString.toUpperCase)\n        val onehundredth = arr.filter(x => x >=\
    \ 1000000000000000l.toLong && x <= 99999999999999999999l.toLong).map(x => x.toString.toUpperCase)\n\
    \        val onethousandth = arr.filter(x => x >= 10000000000000000l.toLong &&\
    \ x <= 99999999999999999999999l.toLong).map(x => x.toString.toUpperCase)\n   \
    \     val onehundredthousandth = arr.filter(x => x >= 100000000000000000l.toLong\
    \ && x <= 999999999999999999999999l.toLong).map(x => ", "        val result =\
    \ arr.filter(_ > 0l).sortWith(_ < _).reverse.map(i => i.toString).map(i => i.replaceAll(\"\
    \\\\D\", \"\"))\n        if (result.isEmpty) List()\n        else result", " \
    \       val ones = arr.filter(x => x <= 9).toList\n        val tens = arr.filter(x\
    \ => x > 9).toList\n        val tensReversed = tens.reverse\n        val onesReversed\
    \ = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n\
    \        val tensReversedString = tensReversed.map(x => Two(x))\n        val tensReversedStringReversed\
    \ = tensReversedString.reverse\n        val tensReversedStringReversedString =\
    \ tensReversedStringReversed.map(x => Three(x))\n        val tensReversedStringReversedStringReversed\
    \ = tensReversedStringReversedString.reverse\n        val tensReversedStringReversedStringReversedString\
    \ = tensReversedStringReversedStringReversed.map(x => Four(x))\n        val tensReversedStringReversedStringReversedStringReversed\
    \ = tensReversedStringReversedStringReversedString.reverse\n        val tensReversedStringReversedStringReversedStringReversedString\
    \ = tensReversedStringReversedStringReversedStringReversed.map(x => Five(x))\n\
    \        val tensReversedStringReversedStringReversedStringReversedStringReversed\
    \ = tensReversedStringReversedStringReversedStringReversedStringReversed.map(x\
    \ => Six(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversedString\
    \ = tensReversedStringReversedStringReversedStringReversedStringReversedString.map(x\
    \ => Seven(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversedStringReversed\
    \ = tensReversedStringReversedStringReversedStringReversedStringReversedStringReversed.map(x\
    \ => Eight(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed\
    \ = tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedString.map(x\
    \ => Nine(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedString\
    \ = tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed.map(x\
    \ => Ten(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed\
    \ = tensReversedStringReversedStringReversedStringReversedString", "        val\
    \ arr = arr.toList\n        val len = arr.length\n        val ones = arr.filter(_\
    \ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds\
    \ = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n\
    \        val tenThousands = arr.filter(_ <= 999999).toList\n        val hundredThousands\
    \ = arr.filter(_ <= 9999999).toList\n        val thousandThousands = arr.filter(_\
    \ <= 999999999).toList\n        val oneThousands = arr.filter(_ <= 99999999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 9999999998).toList\n        val oneThousandThousands\
    \ = arr.filter(_ <= 999999999999).toList\n        val oneThousandHundreds = arr.filter(_\
    \ <= 9999999999998).toList\n        val oneHundredThousands = arr.filter(_ <=\
    \ 999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_\
    \ <= 9999999999999999999).toList\n        val oneHundredThousandHundreds = arr.filter(_\
    \ <= 99999999999999999999999).toList\n        val oneHundredThousandHundredThousands\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneHundredThousandHundredThousandHundredThousandThousands = arr.filter(_ <=\
    \ 9999999999999999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneHundredThousandHundredThousandHundredThousandHundredTh", "   \
    \     val nums = arr.toList\n        val numsLength = nums.length\n        val\
    \ numsReversed = nums.reverse\n        val numsReversedLength = numsReversed.length\n\
    \        val numsReversedReversed = numsReversed.reverse\n        val numsReversedReversedLength\
    \ = numsReversedReversed.length\n        val numsReversedReversedReversedLength\
    \ = numsReversedReversedReversed.length\n        val numsReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedReversed.length\n    \
    \    val numsReversedReversedReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedReversedReversed.length\n\
    \        val numsReversedReversedReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedReversedReversed.length\n\
    \        val numsReversedReversedReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedReversedReversedReversed.length\n\
    \        val numsReversedReversedReversedReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.length\n\
    \        val numsReversedReversedReversedReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.length\n\
    \        val numsReversedReversedReversedReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed",
  "        val list = arr.toList\n        val len = list.size\n        val reversed\
    \ = list.sortWith(_ < _)\n        val result = reversed.map(x => if (x < 10L)\
    \ x else x.toString.replaceFirst(\"^0*\", \"\"))\n        if (len > 0) result\
    \ else List()", "        val nums = arr.toList\n        val len = nums.map(_.toString.length).max\n\
    \        val numsSorted = nums.sortBy(_.toString.length)\n        val reversed\
    \ = numsSorted.reverse\n        val digits = reversed.map(_.toString)\n      \
    \  val names = \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n        val result = reversed.map(x => digits(x-1) + names(x))\n\
    \        if (result.isEmpty) List()\n        else result"]
stop_tokens:
- "\n    }\n"
