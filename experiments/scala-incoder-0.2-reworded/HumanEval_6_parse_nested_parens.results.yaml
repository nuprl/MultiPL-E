language: scala
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val paren_groups_with_paren_groups = paren_groups.zip(paren_groups).map(x\
    \ => x._1 :: x._2)\n        val paren_groups_with_paren_groups_sorted = paren_groups_with_paren_groups.sortBy(x\
    \ => x._1)\n        val paren_groups_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_sorted.map(x => x._2)\n        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups.sortBy(x => x._1)\n\
    \        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted.map(x => x._2)\n\
    \        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups.sortBy(x\
    \ => x._1)\n        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted.map(x\
    \ => x._2)\n        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups.sortBy(x\
    \ => x._1)\n        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted.map(x\
    \ => x._2)\n        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups.sortBy(x\
    \ => x._1)\n        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6dtsxmi2.scala:11:90 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_groups\e\
    [0m = paren_groups.zip(paren_groups).map(\e[36mx\e[0m => x._1 :: x._2)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                   value :: is not a member of Long\n\e[31m\e[31m-- Error: /tmp/tmp6dtsxmi2.scala:11:98\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m11 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_with_paren_groups\e[0m = paren_groups.zip(paren_groups).map(\e\
    [36mx\e[0m => x._1 :: x._2)\n\e[31m\e[31m   |\e[0m                           \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6dtsxmi2.scala:21:170 -----------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups\e\
    [0m = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6dtsxmi2.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659798094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_list = mutable.ListBuffer[Long]()\n\
    \        val paren_stack_map_list_size = mutable.ListBuffer[Long]()\n        val\
    \ paren_stack_map_list_size_max = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_max_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_max_max_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_max_max_max_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_max_max_max_max_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_max_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_max_max_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf82su57u.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf82su57u.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_list_size_max_index_max_max_max_max_max_max_max_max_max_max_max_max\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_list_size_max_index_max_max_max_max_max_max_max_max_max_max_max_max\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_list_size_max_index_max_max_max_max_max_max_max_max_max_max_max_max\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpf82su57u.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_list_size_max_index_max_max_max_max_max_max_max_max_max_max_max_max_max_max\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_list_size_max_index_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_list_size_max_index_max_max_max_max_max_max_max_max_max_max_max_max_max_max\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf82su57u.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e"
  stdout: ''
  timestamp: 1659798092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_list = mutable.ListBuffer[Long]()\n\
    \        val paren_stack_map_list_size = mutable.ListBuffer[Long]()\n        val\
    \ paren_stack_map_list_size_max = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index2\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index3\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index4\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index5\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index6\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index7\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index8\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index9\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index10\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index11\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index12\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index13\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index14\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index15\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index16\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index17\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index18\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index19\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index20\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index21\
    \ = mutable.ListBuffer[Long]()\n        val paren_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnrcf97ne.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnrcf97ne.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpnrcf97ne.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnrcf97ne.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_list\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpnrcf97ne.scala:13:40 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map_list_size\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                        Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnrcf97ne.scala:14:44\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_map_list_size_max\e[0m = mutable.ListBuffer[\e[35"
  stdout: ''
  timestamp: 1659798093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_list_string = paren_string.split(\" \")\n        val paren_list_long\
    \ = paren_list_string.map(x => x.toLong)\n        val paren_list_long = paren_list_long.sortWith((x,\
    \ y) => x > y)\n        val paren_list_long = paren_list_long.reverse\n      \
    \  val paren_list_long = paren_list_long.takeWhile(x => x != 0)\n        val paren_list_long\
    \ = paren_list_long.map(x => x.toLong)\n        val paren_list_long = paren_list_long.sortWith((x,\
    \ y) => x > y)\n        val paren_list_long = paren_list_long.reverse\n      \
    \  val paren_list_long = paren_list_long.takeWhile(x => x != 0)\n        val paren_list_long\
    \ = paren_list_long.map(x => x.toLong)\n        val paren_list_long = paren_list_long.sortWith((x,\
    \ y) => x > y)\n        val paren_list_long = paren_list_long.reverse\n      \
    \  val paren_list_long = paren_list_long.takeWhile(x => x != 0)\n        val paren_list_long\
    \ = paren_list_long.map(x => x.toLong)\n        val paren_list_long = paren_list_long.sortWith((x,\
    \ y) => x > y)\n        val paren_list_long = paren_list_long.reverse\n      \
    \  val paren_list_long = paren_list_long.takeWhile(x => x != 0)\n        val paren_list_long\
    \ = paren_list_long.map(x => x.toLong)\n        val paren_list_long = paren_list_long.sortWith((x,\
    \ y) => x > y)\n        val paren_list_long = paren_list_long.reverse\n      \
    \  val paren_list_long = paren_list_long.takeWhile(x => x != 0)\n        val paren_list_long\
    \ = paren_list_long.map(x => x.toLong)\n        val paren_list_long = paren_list_long.sortWith((x,\
    \ y) => x > y)\n        val paren_list_long = paren_list_long.reverse\n      \
    \  val paren_list_long = paren_list_long.takeWhile(x => x != 0)\n        val paren_list_long\
    \ = paren_list_long.map(x => x.toLong)\n        val paren_list_long = paren_list_long.sortWith((x,\
    \ y) => x > y)\n        val paren_list_long = paren_list_long.reverse\n      \
    \  val paren_list_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7n9szts5.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7n9szts5.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_list_long\e[0m = paren_list_long.sortWith((\e[36mx\e[0m, \e[36my\e\
    [0m) => x > y)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_list_long is already defined as \e[33mvalue\e[0m \e\
    [35mparen_list_long\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp7n9szts5.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_list_long\e[0m = paren_list_long.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_list_long is already defined as \e[33mvalue\e[0m \e[35mparen_list_long\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7n9szts5.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_list_long\e[0m = paren_list_long.takeWhile(\e\
    [36mx\e[0m => x != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_list_long is already defined as \e[33mvalue\e[0m \e\
    [35mparen_list_long\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp7n9szts5.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_list_long\e[0m = paren_list_long.map(\e\
    [36mx\e[0m => x.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_list_long is already defined as \e[33mv"
  stdout: ''
  timestamp: 1659798093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size = mutable.Stack[Long]()\n        val paren_stack_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size = mutable.Stack[Long]()\n  \
    \      val paren_stack_max_depth_pos_depth_pos = mutable.Stack[Long]()\n     \
    \   val paren_stack_max_depth_pos_depth_size_pos = mutable.Stack[Long]()\n   \
    \     val paren_stack_max_depth_pos_depth_size_pos_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size_pos_pos_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size_pos_pos_pos_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size_pos_pos_pos_pos_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size_pos_pos_pos_pos_pos_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size_pos_pos_pos_pos_pos_pos_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_pos_pos_pos_pos_pos_pos_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos\
    \ = mutable.Stack[Long]()\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeg6h8phr.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpeg6h8phr.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeg6h8phr.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_max\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpeg6h8phr.scala:13:35 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_max_size\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeg6h8phr.scala:14:36 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006]"
  stdout: ''
  timestamp: 1659798092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => if (x == \"(\") 1 else 0)\n        val paren_groups_with_paren_sum\
    \ = paren_groups_with_paren.reduce((x,y) => x + y)\n        val paren_groups_with_paren_max_level\
    \ = paren_groups_with_paren_sum / paren_groups_with_paren.length\n        val\
    \ paren_groups_with_paren_max_level_int = paren_groups_with_paren_max_level.toInt\n\
    \        val paren_groups_with_paren_max_level_long = paren_groups_with_paren_max_level_int.toLong\n\
    \        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long.toList\n\
    \        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.map(x\
    \ => if (x == 0) 1 else x)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.map(x => if (x == 1) x else x)\n\
    \        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.map(x\
    \ => if (x == 2) x else x)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.map(x => if (x == 3) x else x)\n\
    \        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.map(x\
    \ => if (x == 4) x else x)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.map(x => if (x == 5) x else x)\n\
    \        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.map(x\
    \ => if (x == 6) x else x)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.map(x => if (x == 7) x else x)\n\
    \        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.map(x\
    \ => if (x == 8) x else x)\n        val paren_groups_with_paren_max_level_long_list\
    \ = paren_groups_with_paren_max_level_long_list.map(x => if (x == 9) x else x)\n\
    \        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.map(x\
    \ => if (x == 10) x else x)\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpu4yfzeom.scala:28:11 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpu4yfzeom.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_max_level_long_list\e\
    [0m = paren_groups_with_paren_max_level_long_list.map(\e[36mx\e[0m => \e[33mif\e\
    [0m (x == \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m x)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_paren_max_level_long_list is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_with_paren_max_level_long_list\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu4yfzeom.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_max_level_long_list\e\
    [0m = paren_groups_with_paren_max_level_long_list.map(\e[36mx\e[0m => \e[33mif\e\
    [0m (x == \e[31m1\e[0m) x \e[33melse\e[0m x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_paren_max_level_long_list is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_with_paren_max_level_long_list\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu4yfzeom.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_max_level_long_list\e\
    [0m = paren_groups_with_paren_max_level_long_list.map(\e[36mx\e[0m => \e[33mif\e\
    [0m (x == \e[31m2\e[0m) x \e[33melse\e[0m x)\n\e[31"
  stdout: ''
  timestamp: 1659798094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_chars = paren_string.split(\" \").map(_.toChar)\n     \
    \   val paren_chars_count = paren_chars.map(_.length).sum\n        val paren_chars_count_max\
    \ = paren_chars.map(_.length).max\n        val paren_chars_count_min = paren_chars.map(_.length).min\n\
    \        val paren_chars_count_avg = paren_chars.map(_.length).average\n     \
    \   val paren_chars_count_sum = paren_chars.map(_.length).sum\n        val paren_chars_count_count_max\
    \ = paren_chars.map(_.length).max\n        val paren_chars_count_count_min = paren_chars.map(_.length).min\n\
    \        val paren_chars_count_count_avg = paren_chars.map(_.length).average\n\
    \        val paren_chars_count_count_sum = paren_chars.map(_.length).sum\n   \
    \     val paren_chars_count_count_count_max = paren_chars.map(_.length).max\n\
    \        val paren_chars_count_count_count_min = paren_chars.map(_.length).min\n\
    \        val paren_chars_count_count_count_avg = paren_chars.map(_.length).average\n\
    \        val paren_chars_count_count_count_sum = paren_chars.map(_.length).sum\n\
    \        val paren_chars_count_count_count_count_max = paren_chars.map(_.length).max\n\
    \        val paren_chars_count_count_count_count_min = paren_chars.map(_.length).min\n\
    \        val paren_chars_count_count_count_count_avg = paren_chars.map(_.length).average\n\
    \        val paren_chars_count_count_count_count_sum = paren_chars.map(_.length).sum\n\
    \        val paren_chars_count_count_count_count_count_max = paren_chars.map(_.length).max\n\
    \        val paren_chars_count_count_count_count_count_min = paren_chars.map(_.length).min\n\
    \        val paren_chars_count_count_count_count_count_avg = paren_chars.map(_.length).average\n\
    \        val paren_chars_count_count_count_count_count_sum = paren_chars.map(_.length).sum\n\
    \        val paren_chars_count_count_count_count_count_count_max = paren_chars.map(_.length).max\n\
    \        val paren_chars_count_count_count_count_count_count_min = paren_chars.map(_.length).min\n\
    \        val paren_chars_count_count_count_count_count_count_avg = paren_chars.map(_.length).average\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpvjxbw91h.scala:35:11 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvjxbw91h.scala:10:56 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                 value toChar is not a member of String\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpvjxbw91h.scala:10:63 -----------------------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvjxbw91h.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_counts\
    \ = paren_groups.map(x => x.split(\"(\")).map(x => (x.length, x))\n        val\
    \ paren_groups_with_counts_sorted = paren_groups_with_counts.sortBy(_._1).reverse\n\
    \        val paren_groups_with_counts_sorted_with_max_count = paren_groups_with_counts_sorted.takeWhile(_._1\
    \ < paren_groups_with_counts_sorted.last._1).reverse\n        val paren_groups_with_counts_sorted_with_max_count_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count.takeWhile(_._1 < paren_groups_with_counts_sorted_with_max_count.last._1).reverse\n\
    \        val paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_count.takeWhile(_._1\
    \ < paren_groups_with_counts_sorted_with_max_count_with_max_count.last._1).reverse\n\
    \        val paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count.takeWhile(_._1\
    \ < paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count.last._1).reverse\n\
    \        val paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count.takeWhile(_._1\
    \ < paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count.last._1).reverse\n\
    \        val paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count.takeWhile(_._1\
    \ < paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count.last._1).reverse\n\
    \        val paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count.takeWhile(_._1\
    \ < paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count.last._1).reverse\n\
    \        val paren_groups_with_counts_sorted_with_max_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmve04sd2.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmve04sd2.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size = mutable.Stack[Long]()\n        val paren_stack_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_paren = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_paren_size = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_depth_paren\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_depth_paren_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_depth_paren_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_depth_paren_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_depth_paren_depth_paren\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_depth_paren_depth_paren_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3mslp82d.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3mslp82d.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_depth_paren_depth_paren_depth_paren_depth_paren_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_depth_paren_depth_paren_depth_paren_depth_paren_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_max_depth_paren_depth_paren_depth_paren_depth_paren_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp3mslp82d.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3mslp82d.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3mslp82d.scala:12:32\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_depth\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available wh"
  stdout: ''
  timestamp: 1659798092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_size = mutable.Stack[Long]()\n        val paren_stack_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level = mutable.Stack[Long]()\n   \
    \     val paren_stack_level_level_level_level_size = mutable.Stack[Long]()\n \
    \       val paren_stack_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpik2r6fzb.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpik2r6fzb.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_level_level_level_level_level_level_level_level_level_level_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_level_level_level_level_level_level_level_level_level_size\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_level_level_level_level_level_level_level_level_level_level_size\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpik2r6fzb.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpik2r6fzb.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpik2r6fzb.scala:12:32\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_level\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        Not found: mutab"
  stdout: ''
  timestamp: 1659798093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_depth = paren_array_max_size.toLong\n       \
    \ val paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.to\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyc4uz6yt.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_depth\e\
    [0m = paren_array_max_depth.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_depth is already defined as \e[33mvalue\e\
    [0m \e[35mparen_array_max_depth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyc4uz6yt.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_depth\e\
    [0m = paren_array_max_depth.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_depth is already defined as \e[33mvalue\e\
    [0m \e[35mparen_array_max_depth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyc4uz6yt.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_depth\e\
    [0m = paren_array_max_depth.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_depth is already defined as \e[33mvalue\e\
    [0m \e[35mparen_array_max_depth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyc4uz6yt.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_depth\e\
    [0m = paren_array_max_depth.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_depth is already defined as \e[33mvalue\e\
    [0m \e[35mparen_array_max_depth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /t"
  stdout: ''
  timestamp: 1659798092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_list_string = paren_string.trim\n        val paren_list_list\
    \ = paren_list_string.split(\" \")\n        val paren_list_list_size = paren_list_list.size\n\
    \        val paren_list_list_size_long = paren_list_list_size.map(_.toLong)\n\
    \        val paren_list_list_size_long_sorted = paren_list_list_size_long.sort\n\
    \        val paren_list_list_size_long_sorted_size = paren_list_list_size_long_sorted.size\n\
    \        val paren_list_list_size_long_sorted_size_long = paren_list_list_size_long_sorted_size.map(_.toLong)\n\
    \        val paren_list_list_size_long_sorted_size_long_sorted = paren_list_list_size_long_sorted_size_long.sort\n\
    \        val paren_list_list_size_long_sorted_size_long_sorted_size = paren_list_list_size_long_sorted_size_long_sorted.size\n\
    \        val paren_list_list_size_long_sorted_size_long_sorted_size_long = paren_list_list_size_long_sorted_size_long_sorted_size_long.map(_.toLong)\n\
    \        val paren_list_list_size_long_sorted_size_long_sorted_size_long_sorted\
    \ = paren_list_list_size_long_sorted_size_long_sorted_size_long_sorted.sort\n\
    \        val paren_list_list_size_long_sorted_size_long_sorted_size_long_sorted_size\
    \ = paren_list_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long.map(_.toLong)\n\
    \        val paren_list_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted\
    \ = paren_list_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted.sort\n\
    \        val paren_list_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size\
    \ = paren_list_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted.map(_.toLong)\n\
    \        val paren_list_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted\
    \ = paren_list_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted.sort\n\
    \        val paren_list_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted\
    \ = paren_list_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted.sort\n\
    \        val paren_list_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted\
    \ = paren_list_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted_size_long_sorted.sort\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg119cy08.scala:13:61 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_list_list_size_long\e\
    [0m = paren_list_list_size.map(_.toLong)\n\e[31m\e[31m   |\e[0m              \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                    value map is not a member of Int\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpg119cy08.scala:19:74 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_list_list_size_long_sorted_size_long_sorted_size_long\e\
    [0m = paren_list_list_size_long_sorted_size_long_sorted_size_long.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mparen_list_list_size_long_sorted_size_long_sorted_size_long\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg119cy08.scala:20:81\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_list_list_size_long_sorted_size_long_sorted_size_long_sorted\e[0m\
    \ = paren_list_list_size_long_sorted_size_long_sorted_size_long_sorted.sort\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mparen_list_list_size_long_sorted_size_long_sorted_size_long_sorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg119cy08.scala:21:86\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_list_list_size_long_sorted_size_long_sorted_size_long_sorted_size\e\
    [0m = paren_list_list_size_long_sorted_size_long_sorted_size_long_sorted_size_long.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth = mutable.Stack[Long]()\n       \
    \ val paren_stack_max_depth_max_depth_max = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_max_depth_max_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_max_depth_max_depth = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_max_depth_max_depth_max = mutable.Stack[Long]()\n    \
    \    val paren_stack_max_depth_max_depth_max_depth_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzopniw2y.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzopniw2y.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzopniw2y.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_size\e[0m\
    \ = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzopniw2y.scala:13:36 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_max_depth\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzopniw2y.scala:14:40\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_max_depth_max\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-e"
  stdout: ''
  timestamp: 1659798093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_max_depth\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_with_max_depth_with_paren_groups\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_with_max_depth_with_paren_groups_with_depth\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_with_max_depth_with_paren_groups_with_depth_with_depth\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_with_max_depth_with_paren_groups_with_depth_with_depth_with_depth\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_with_max_depth_with_paren_groups_with_depth_with_depth_with_depth_with_depth\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_with_max_depth_with_paren_groups_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_with_max_depth_with_paren_groups_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_with_max_depth_with_paren_groups_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_with_max_depth_with_paren_groups_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_with_max_depth_with_paren_groups_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_with_max_depth_with_paren_groups_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_with_max_depth_with_paren_groups_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_with_max_depth_with_paren_groups_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa7pck5_h.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa7pck5_h.scala:11:42\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_max_depth\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa7pck5_h.scala:12:60\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_max_depth_with_paren_groups\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpa7pck5_h.scala:13:71 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_max_depth_with_paren_groups_with_depth\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                                                            ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa7pck5_h.scala:14:82\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_max_depth_with_paren_groups_with_depth_with_depth\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \                                                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        "
  stdout: ''
  timestamp: 1659798092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_levels\
    \ = mutable.Stack[Int]()\n        val paren_levels_count = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max = mutable.Stack[Int]()\n        val paren_levels_count_max_index\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index2 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index3 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index4 = mutable.Stack[Int]()\n        val paren_levels_count_max_index5\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index6 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index7 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index8 = mutable.Stack[Int]()\n        val paren_levels_count_max_index9\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index10 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index11 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index12 = mutable.Stack[Int]()\n        val paren_levels_count_max_index13\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index14 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index15 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index16 = mutable.Stack[Int]()\n        val paren_levels_count_max_index17\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index18 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index19 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index20 = mutable.Stack[Int]()\n        val paren_levels_count_max_index21\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index22 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index23 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index24 = mutable.Stack[Int]()\n        val paren_levels_count_max_index25\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpru3vb3g2.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpru3vb3g2.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpru3vb3g2.scala:11:27 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Stack[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpru3vb3g2.scala:12:33 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_levels_count\e[0m\
    \ = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpru3vb3g2.scala:13:37\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_levels_count_max\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpru3vb3g2.scala:14:43 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_levels_count_max_index\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \       "
  stdout: ''
  timestamp: 1659798093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_top\
    \ = paren_stack.empty\n        val paren_stack_top_count = paren_stack_top.length\n\
    \        val paren_stack_top_count_max = paren_stack_top_count - 1\n        val\
    \ paren_stack_top_count_min = paren_stack_top_count + 1\n        val paren_stack_top_count_min_max\
    \ = paren_stack_top_count_min * paren_stack_top_count_max\n        val paren_stack_top_count_min_max_sum\
    \ = paren_stack_top_count_min + paren_stack_top_count_max\n        val paren_stack_top_count_min_max_sum_2\
    \ = paren_stack_top_count_min * paren_stack_top_count_max * paren_stack_top_count_max\n\
    \        val paren_stack_top_count_min_max_sum_3 = paren_stack_top_count_min *\
    \ paren_stack_top_count_max * paren_stack_top_count_max * paren_stack_top_count_max\n\
    \        val paren_stack_top_count_min_max_sum_4 = paren_stack_top_count_min *\
    \ paren_stack_top_count_max * paren_stack_top_count_max * paren_stack_top_count_max\
    \ * paren_stack_top_count_max * paren_stack_top_count_max\n        val paren_stack_top_count_min_max_sum_5\
    \ = paren_stack_top_count_min * paren_stack_top_count_max * paren_stack_top_count_max\
    \ * paren_stack_top_count_max * paren_stack_top_count_max * paren_stack_top_count_max\
    \ * paren_stack_top_count_max * paren_stack_top_count_max * paren_stack_top_count_max\
    \ * paren_stack_top_count_max * paren_stack_top_count_max * paren_stack_top_count_max\
    \ * paren_stack_top_count_max * paren_stack_top_count_max * paren_stack_top_count_max\
    \ * paren_stack_top_count_max * paren_stack_top_count_max * paren_stack_top_count_max\
    \ * paren_stack_top_count_max * paren_stack_top_count_max * paren_stack_top_count_max\
    \ * paren_stack_top_count_max * paren_stack_top_count_max * paren_stack_top_count_max\
    \ * paren_stack_top_count_max * paren_stack_top_count_max * paren_stack_top_count_max\
    \ * paren_stack_top_count_max * paren_stack_top_count_max * paren_stack_top_count_max\
    \ * paren_stack_top_count_max * paren_stack_top_count_max * paren_stack_top_count_max\
    \ * paren_stack_top_count_max * paren_stack_top_count_max * paren_stack_top_count_max\
    \ * paren_stack_top_count_max * paren_stack_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo3hex7a2.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo3hex7a2.scala:21:5 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_groups\
    \ = paren_string.split(\" \")\n        val paren_group_size = paren_groups.length\n\
    \        val paren_group_max_depth = paren_group_size - 1\n        val paren_group_max_depth\
    \ = paren_group_max_depth.toLong\n        val paren_group_max_depth = paren_group_max_depth.toLong\n\
    \        val paren_group_max_depth = paren_group_max_depth.toLong\n        val\
    \ paren_group_max_depth = paren_group_max_depth.toLong\n        val paren_group_max_depth\
    \ = paren_group_max_depth.toLong\n        val paren_group_max_depth = paren_group_max_depth.toLong\n\
    \        val paren_group_max_depth = paren_group_max_depth.toLong\n        val\
    \ paren_group_max_depth = paren_group_max_depth.toLong\n        val paren_group_max_depth\
    \ = paren_group_max_depth.toLong\n        val paren_group_max_depth = paren_group_max_depth.toLong\n\
    \        val paren_group_max_depth = paren_group_max_depth.toLong\n        val\
    \ paren_group_max_depth = paren_group_max_depth.toLong\n        val paren_group_max_depth\
    \ = paren_group_max_depth.toLong\n        val paren_group_max_depth = paren_group_max_depth.toLong\n\
    \        val paren_group_max_depth = paren_group_max_depth.toLong\n        val\
    \ paren_group_max_depth = paren_group_max_depth.toLong\n        val paren_group_max_depth\
    \ = paren_group_max_depth.toLong\n        val paren_group_max_depth = paren_group_max_depth.toLong\n\
    \        val paren_group_max_depth = paren_group_max_depth.toLong\n        val\
    \ paren_group_max_depth = paren_group_max_depth.toLong\n        val paren_group_max_depth\
    \ = paren_group_max_depth.toLong\n        val paren_group_max_depth = paren_group_max_depth.toLong\n\
    \        val paren_group_max_depth = paren_group_max_depth.toLong\n        val\
    \ paren_group_max_depth = paren_group_max_depth.toLong\n        val paren_group_max_depth\
    \ = paren_group_max_depth.toLong\n        val paren_group_max_depth = paren_group_max_depth.toLong\n\
    \        val paren_group_max_depth = paren_group_max_depth.toLong\n        val\
    \ paren_group_max_depth = paren_group_max_depth.toLong\n        val paren_group_max_depth\
    \ = paren_group_max_depth.to\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsxq8rb_k.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_group_max_depth\e\
    [0m = paren_group_max_depth.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_max_depth is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_max_depth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsxq8rb_k.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_group_max_depth\e\
    [0m = paren_group_max_depth.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_max_depth is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_max_depth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsxq8rb_k.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_group_max_depth\e\
    [0m = paren_group_max_depth.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_max_depth is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_max_depth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsxq8rb_k.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_group_max_depth\e\
    [0m = paren_group_max_depth.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_max_depth is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_max_depth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /t"
  stdout: ''
  timestamp: 1659798093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_chars = paren_string.split(\" \").map(_.toChar)\n     \
    \   val paren_chars_count = paren_chars.map(c => if (c == '(') 1 else 0).sum\n\
    \        val paren_chars_count_max = paren_chars.map(c => if (c == '(') 1 else\
    \ 0).max\n        val paren_chars_count_min = paren_chars.map(c => if (c == '(')\
    \ 1 else 0).min\n        val paren_chars_count_sum = paren_chars.map(c => if (c\
    \ == '(') 1 else 0).sum\n        val paren_chars_count_count_max = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_min = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_sum = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).sum\n        val paren_chars_count_count_count_max\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_count_min\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_count_sum\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).sum\n        val paren_chars_count_count_count_count_max\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_count_count_min\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_count_count_sum\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).sum\n        val paren_chars_count_count_count_count_count_max\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_count_count_count_min\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_count_count_count_sum\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).sum\n        val paren_chars_count_count_count_count_count_count_max\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_count_count_count_count_min\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_count_count_count_count_sum\
    \ = paren_chars.map(c => if (c == '\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpy548jij2.scala:29:96 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_count_count_count_count_count_count_sum\e\
    [0m = paren_chars.map(\e[36mc\e[0m => \e[33mif\e[0m (c == '\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \               unclosed character literal\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpy548jij2.scala:10:56 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e[31m\"\
    \ \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                              \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \            value toChar is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmpy548jij2.scala:10:63\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m10 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e[31m\" \"\e[0m).map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpy548jij2.scala:30:5 ---------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_top\
    \ = paren_stack.empty\n        val paren_stack_top_depth = paren_stack_top match\
    \ {\n            case true => 0\n            case false => -1\n        }\n   \
    \     val paren_stack_top_depth_inc = paren_stack_top_depth match {\n        \
    \    case 0 => 1\n            case _ => paren_stack_top_depth + 1\n        }\n\
    \        val paren_stack_top_depth_dec = paren_stack_top_depth match {\n     \
    \       case 0 => -1\n            case _ => paren_stack_top_depth - 1\n      \
    \  }\n        val paren_stack_top_depth_mul = paren_stack_top_depth match {\n\
    \            case 0 => 1\n            case _ => paren_stack_top_depth * paren_stack_top_depth_inc\n\
    \        }\n        val paren_stack_top_depth_div = paren_stack_top_depth match\
    \ {\n            case 0 => 1\n            case _ => paren_stack_top_depth / paren_stack_top_depth_dec\n\
    \        }\n        val paren_stack_top_depth_mod = paren_stack_top_depth match\
    \ {\n            case 0 => 0\n            case _ => paren_stack_top_depth % paren_stack_top_depth_mul\n\
    \        }\n        val paren_stack_top_depth_div_rem = paren_stack_top_depth\
    \ match {\n            case 0 => 0\n            case _ => paren_stack_top_depth\
    \ % paren_stack_top_depth_div\n        }\n        val paren_stack_top_depth_mod_rem\
    \ = paren_stack_top_depth match {\n            case 0 => 0\n            case _\
    \ => paren_stack_top_depth % paren_stack_top_depth_mod\n        }\n        val\
    \ paren_stack_top_depth_mod_rem_mul = paren_stack_top_depth match {\n        \
    \    case 0 => 0\n            case _ => paren_stack_top_depth % paren_stack_top_depth_mod_rem\n\
    \        }\n        val paren_stack_top_depth_mod_rem_div = paren_stack_top_depth\
    \ match {\n            case 0 => 0\n            case _ => paren_stack_top_depth\
    \ % paren_stack_top_depth_mod_rem / paren_stack_top_depth_mod_rem_mul\n      \
    \  }\n        val paren_stack_top_depth_mod_rem_div_rem = paren_stack_top_depth\
    \ match {\n            case 0 => 0\n            case _ => paren_stack_top_depth\
    \ % paren_stack_top_depth_mod_rem / paren_stack_top_depth_mod_rem_div\n      \
    \  }\n        val paren_stack_top_depth_mod_rem_div_rem_mul = paren_stack_top_depth\
    \ match {\n            case 0 => 0\n            case _ => paren_stack_top_depth\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9inwbf0c.scala:67:0 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9inwbf0c.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9inwbf0c.scala:66:1 ---------------------\e[0m\e[0m\n\e[31m66\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp9inwbf0c.scala:60:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m60 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659798093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size = mutable.Stack[Long]()\n        val paren_stack_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size = mutable.Stack[Long]()\n  \
    \      val paren_stack_max_depth_pos_depth_pos = mutable.Stack[Long]()\n     \
    \   val paren_stack_max_depth_pos_depth_size_pos = mutable.Stack[Long]()\n   \
    \     val paren_stack_max_depth_pos_depth_size_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size_pos_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size_pos_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos_size_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos_size_depth_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos_size_depth_pos_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos_size_depth_pos_depth_size_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos_size_depth_pos_depth_size_pos_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos_size_depth_pos_depth_size_pos_depth_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos_size_depth_pos_depth_size_pos_depth_depth_pos_size\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4swt8z87.scala:33:121 --------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_pos_depth_size_pos_depth_depth_pos_size_depth_pos_depth_size_pos_depth_depth_pos_size\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4swt8z87.scala:10:26 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4swt8z87.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4swt8z87.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_max\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4swt8z87.scala:13:35 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_max_size\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\
    \e[31m   |\e[0"
  stdout: ''
  timestamp: 1659798092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => if (x == \"(\") 1 else 0)\n        val paren_groups_with_paren_sum\
    \ = paren_groups_with_paren.sum\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren.zipWithIndex.maxBy(_._1)._2\n        val paren_groups_with_paren_max_index_plus_one\
    \ = paren_groups_with_paren_max_index + 1\n        val paren_groups_with_paren_max_index_plus_one_plus_one\
    \ = paren_groups_with_paren_max_index_plus_one + 1\n        val paren_groups_with_paren_max_index_plus_one_plus_two\
    \ = paren_groups_with_paren_max_index_plus_one_plus_one + 1\n        val paren_groups_with_paren_max_index_plus_one_plus_three\
    \ = paren_groups_with_paren_max_index_plus_one_plus_two + 1\n        val paren_groups_with_paren_max_index_plus_one_plus_four\
    \ = paren_groups_with_paren_max_index_plus_one_plus_three + 1\n        val paren_groups_with_paren_max_index_plus_one_plus_five\
    \ = paren_groups_with_paren_max_index_plus_one_plus_four + 1\n        val paren_groups_with_paren_max_index_plus_one_plus_six\
    \ = paren_groups_with_paren_max_index_plus_one_plus_five + 1\n        val paren_groups_with_paren_max_index_plus_one_plus_seven\
    \ = paren_groups_with_paren_max_index_plus_one_plus_six + 1\n        val paren_groups_with_paren_max_index_plus_one_plus_eight\
    \ = paren_groups_with_paren_max_index_plus_one_plus_seven + 1\n        val paren_groups_with_paren_max_index_plus_one_plus_nine\
    \ = paren_groups_with_paren_max_index_plus_one_plus_eight + 1\n        val paren_groups_with_paren_max_index_plus_one_plus_ten\
    \ = paren_groups_with_paren_max_index_plus_one_plus_nine + 1\n        val paren_groups_with_paren_max_index_plus_one_plus_eleven\
    \ = paren_groups_with_paren_max_index_plus_one_plus_ten + 1\n        val paren_groups_with_paren_max_index_plus_one_plus_twelve\
    \ = paren_groups_with_paren_max_index_plus_one_plus_eleven + 1\n        val paren_groups_with_paren_max_index_plus_one_plus_thirteen\
    \ = paren_groups_with_paren_max_index_plus_one_plus_twelve + 1\n        val paren_groups_with_paren_max_index_plus_one_plus_fourteen\
    \ = paren_groups_with_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkq95e7qp.scala:28:71 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_max_index_plus_one_plus_fourteen\e\
    [0m = paren_groups_with_\n\e[31m\e[31m   |\e[0m                              \
    \                                         ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                           Not found: paren_groups_with_\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkq95e7qp.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n \
    \       val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp108oiuy9.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp108oiuy9.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m = paren_array_max_size.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp108oiuy9.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size.max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp108oiuy9.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size.map(_.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp108oiuy9.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size.max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size is already defined as \e[33mv"
  stdout: ''
  timestamp: 1659798093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val max_level = paren_groups.foldLeft(0l) { (max_level, group) => if (group\
    \ > max_level) group else max_level }\n        val max_level_groups = paren_groups.foldLeft(0l)\
    \ { (max_level_groups, group) => if (group > max_level_groups) group else max_level_groups\
    \ }\n        val max_level_groups_2 = paren_groups.foldLeft(0l) { (max_level_groups_2,\
    \ group) => if (group > max_level_groups_2) group else max_level_groups_2 }\n\
    \        val max_level_groups_3 = paren_groups.foldLeft(0l) { (max_level_groups_3,\
    \ group) => if (group > max_level_groups_3) group else max_level_groups_3 }\n\
    \        val max_level_groups_4 = paren_groups.foldLeft(0l) { (max_level_groups_4,\
    \ group) => if (group > max_level_groups_4) group else max_level_groups_4 }\n\
    \        val max_level_groups_5 = paren_groups.foldLeft(0l) { (max_level_groups_5,\
    \ group) => if (group > max_level_groups_5) group else max_level_groups_5 }\n\
    \        val max_level_groups_6 = paren_groups.foldLeft(0l) { (max_level_groups_6,\
    \ group) => if (group > max_level_groups_6) group else max_level_groups_6 }\n\
    \        val max_level_groups_7 = paren_groups.foldLeft(0l) { (max_level_groups_7,\
    \ group) => if (group > max_level_groups_7) group else max_level_groups_7 }\n\
    \        val max_level_groups_8 = paren_groups.foldLeft(0l) { (max_level_groups_8,\
    \ group) => if (group > max_level_groups_8) group else max_level_groups_8 }\n\
    \        val max_level_groups_9 = paren_groups.foldLeft(0l) { (max_level_groups_9,\
    \ group) => if (group > max_level_groups_9) group else max_level_groups_9 }\n\
    \        val max_level_groups_10 = paren_groups.foldLeft(0l) { (max_level_groups_10,\
    \ group) => if (group > max_level_groups_10) group else max_level_groups_10 }\n\
    \        val max_level_groups_11 = paren_groups.foldLeft(0l) { (max_level_groups_11,\
    \ group) => if (group > max_level_groups_11) group else max_level_groups_11 }\n\
    \        val max_level_groups_12 = paren_groups.foldLeft(0l) { (max_level_groups_12,\
    \ group) => if (group > max_level_groups_12) group else max_level_groups_12 }\n\
    \        val max_level_groups_13 = paren_groups.foldLeft(0l) { (max_level_\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp51k48uiz.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp51k48uiz.scala:33:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m33 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp51k48uiz.scala:24:63 ------------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmax_level_groups_13\e[0m = paren_groups.foldLeft(\e\
    [31m0l\e[0m) { (max_level_\n\e[31m\e[31m   |\e[0m                            \
    \                                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                                          Not found: max_level_\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp51k48uiz.scala:32:1 ---------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp51k48uiz.scala:26:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m26 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659798094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_max_depth\
    \ = paren_groups.map(paren_group => {\n            val paren_group_with_max_depth\
    \ = paren_group.split(\"(\").map(paren_group_with_max_depth => {\n           \
    \     val paren_group_with_max_depth_with_max_depth = paren_group_with_max_depth.split(\"\
    )\").map(paren_group_with_max_depth_with_max_depth => {\n                    val\
    \ paren_group_with_max_depth_with_max_depth_with_max_depth = paren_group_with_max_depth_with_max_depth.split(\"\
    )\").map(paren_group_with_max_depth_with_max_depth_with_max_depth => {\n     \
    \                   val paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_depth\
    \ = paren_group_with_max_depth_with_max_depth_with_max_depth.split(\"(\").map(paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_depth\
    \ => {\n                            val paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_depth_with_max_depth\
    \ = paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_depth.split(\"\
    )\").map(paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_depth_with_max_depth\
    \ => {\n                                val paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_depth_with_max_depth\
    \ = paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_depth.split(\"\
    )\").map(paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_depth_with_max_depth\
    \ => {\n                                    val paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_depth_with_max_depth\
    \ = paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_depth_with_max_depth.split(\"\
    (\").map(paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_depth_with_max_depth\
    \ => {\n                                        val paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_depth_with_max_depth\
    \ = paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_depth_with_max_depth.split(\"\
    )\").map(paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_depth_with_max_depth\
    \ => {\n                                            val paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_depth_with_max_depth\
    \ = paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_depth_with_max_depth.split(\"\
    )\").map(paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_depth_with_max_depth\
    \ => {\n                                                val paren_group_with_max_depth_with_max_depth_with_max_depth_with_max_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9ikzmo3i.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9ikzmo3i.scala:23:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp9ikzmo3i.scala:30:0 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ikzmo3i.scala:29:1\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_list = new mutable.ArrayList[Long]()\n\
    \        var paren_array_index = 0\n        var paren_array_level = 0\n      \
    \  var paren_array_max_level = 0\n        var paren_array_max_level_count = 0\n\
    \        var paren_array_max_level_count_index = 0\n        var paren_array_max_level_count_index2\
    \ = 0\n        var paren_array_max_level_count_index3 = 0\n        var paren_array_max_level_count_index4\
    \ = 0\n        var paren_array_max_level_count_index5 = 0\n        var paren_array_max_level_count_index6\
    \ = 0\n        var paren_array_max_level_count_index7 = 0\n        var paren_array_max_level_count_index8\
    \ = 0\n        var paren_array_max_level_count_index9 = 0\n        var paren_array_max_level_count_index10\
    \ = 0\n        var paren_array_max_level_count_index11 = 0\n        var paren_array_max_level_count_index12\
    \ = 0\n        var paren_array_max_level_count_index13 = 0\n        var paren_array_max_level_count_index14\
    \ = 0\n        var paren_array_max_level_count_index15 = 0\n        var paren_array_max_level_count_index16\
    \ = 0\n        var paren_array_max_level_count_index17 = 0\n        var paren_array_max_level_count_index18\
    \ = 0\n        var paren_array_max_level_count_index19 = 0\n        var paren_array_max_level_count_index20\
    \ = 0\n        var paren_array_max_level_count_index21 = 0\n        var paren_array_max_level_count_index22\
    \ = 0\n        var paren_array_max_level_count_index23 = 0\n        var paren_array_max_level_count_index24\
    \ = 0\n        var paren_array_max_level_count_index25 = 0\n        var paren_array_max_level_count_index26\
    \ = 0\n        var paren_array_max_level_count_index27 = 0\n        var paren_array_max_level_count_index28\
    \ = 0\n        var paren_array_max_level_count_index29 = 0\n        var paren_array_max_level_count_index30\
    \ = 0\n        var paren_array_max_level_count_index31 = 0\n        var paren_array_max_level_count_index32\
    \ = 0\n        var paren_array_max_level_count_index33 = 0\n        var paren_array_max_level_count_index34\
    \ = 0\n        var paren_array_max_level_count_index35 = 0\n        var paren_array_max_level_count_index36\
    \ = 0\n        var paren_array_max_level_count_index37 = 0\n        var paren_array_max_level_count_index38\
    \ = 0\n        var paren_array_max_level_count_index39 = 0\n        var paren_array_max_level_count_index40\
    \ = 0\n        var paren_array_max_level_count_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpljoi_h1i.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpljoi_h1i.scala:12:35\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_array_list\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                   Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpljoi_h1i.scala:58:5 ---------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_size_array = paren_array.take(paren_array_max_size)\n\
    \        val paren_array_max_size_array_size = paren_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size = paren_array_max_size_array_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array = paren_array_max_size_array_array.take(paren_array_max_size_array_max_size)\n\
    \        val paren_array_max_size_array_max_size_array_size = paren_array_max_size_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size_array_max_size = paren_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array =\
    \ paren_array_max_size_array_max_size_array_max_size_array.take(paren_array_max_size_array_max_size_array_max_size)\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_size = paren_array_max_size_array_max_size_array_max_size_array_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size - 1\n  \
    \      val paren_array_max_size_array_max_size_array_max_size_array_max_size_array\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array.take(paren_array_max_size_array_max_size_array_max_size_array_max_size)\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprt0shcdn.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprt0shcdn.scala:16:56\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_array_max_size_array_max_size_array\e[0m = paren_array_max_size_array_array.take(paren_array_max_size_array_max_size)\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: paren_array_max_size_array_array\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprt0shcdn.scala:18:65\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_array_max_size_array_max_size_array_max_size\e[0m = paren_array_max_size_array_max_size_array_max_size\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                           ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35mparen_array_max_size_array_max_size_array_max_size\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprt0shcdn.scala:19:71\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_array_max_size_array_max_size_array_max_size_array\e[0m = paren_array_max_size_array_max_size_array_max_size_array.take(paren_array_max_size_array_max_size_array_max_size)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mparen_array_max_size_array_max_size_array_max_size_array\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprt0shcdn.scala:20:76\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_array_max"
  stdout: ''
  timestamp: 1659798103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_level = mutable.Stack[Int]()\n\
    \        val paren_stack_level_size = mutable.Stack[Int]()\n        val paren_stack_level_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_size = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Int]()\n        val paren_stack_level_max_index_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index_max = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index_max_size = mutable.Stack[Int]()\n   \
    \     val paren_stack_level_max_index_max_index = mutable.Stack[Int]()\n     \
    \   val paren_stack_level_max_index_max_index_size = mutable.Stack[Int]()\n  \
    \      val paren_stack_level_max_index_max_index_max = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index_max_index_max_size = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index_max_index_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index_max_index_max_index_size = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index_max_index_max_index_max = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index_max_index_max_index_max_size = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index_max_index_max_index_max_index = mutable.Stack[Int]()\n\
    \        val paren_stack_level_max_index_max_index_max_index_max_index_size =\
    \ mutable.Stack[Int]()\n        val paren_stack_level_max_index_max_index_max_index_max_index_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index_max_index_max_index_max_index_max_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index_max_index_max_index_max_index_max_index_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index_max_index_max_index_max_index_max_index_max_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index_max_index_max_index_max_index_max_index_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_max_index_max_index_max_index_max_index_max_index_max_index_max_size\
    \ = mutable.Stack[Int]()\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9ke6fzy.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9ke6fzy.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9ke6fzy.scala:12:32\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_level\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpj9ke6fzy.scala:13:37 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_size\e[0m =\
    \ mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj9ke6fzy.scala:14:36 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_level_max\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31"
  stdout: ''
  timestamp: 1659798104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_chars = paren_string.split(\" \").map(_.toChar)\n     \
    \   val paren_chars_count = paren_chars.map(c => if (c == '(') 1 else 0).sum\n\
    \        val paren_chars_count_max = paren_chars.map(c => if (c == '(') 1 else\
    \ 0).max\n        val paren_chars_count_min = paren_chars.map(c => if (c == '(')\
    \ 1 else 0).min\n        val paren_chars_count_range = paren_chars.map(c => if\
    \ (c == '(') 1 else 0).max - paren_chars.map(c => if (c == '(') 1 else 0).min\n\
    \        val paren_chars_count_range_max = paren_chars_count - paren_chars_count_min\n\
    \        val paren_chars_count_range_min = paren_chars_count - paren_chars_count_max\n\
    \        val paren_chars_count_range_max = paren_chars_count - paren_chars_count_min\n\
    \        val paren_chars_count_range_min = paren_chars_count - paren_chars_count_max\n\
    \        val paren_chars_count_range_max = paren_chars_count - paren_chars_count_min\n\
    \        val paren_chars_count_range_min = paren_chars_count - paren_chars_count_max\n\
    \        val paren_chars_count_range_max = paren_chars_count - paren_chars_count_min\n\
    \        val paren_chars_count_range_min = paren_chars_count - paren_chars_count_max\n\
    \        val paren_chars_count_range_max = paren_chars_count - paren_chars_count_min\n\
    \        val paren_chars_count_range_min = paren_chars_count - paren_chars_count_max\n\
    \        val paren_chars_count_range_max = paren_chars_count - paren_chars_count_min\n\
    \        val paren_chars_count_range_min = paren_chars_count - paren_chars_count_max\n\
    \        val paren_chars_count_range_max = paren_chars_count - paren_chars_count_min\n\
    \        val paren_chars_count_range_min = paren_chars_count - paren_chars_count_max\n\
    \        val paren_chars_count_range_max = paren_chars_count - paren_chars_count_min\n\
    \        val paren_chars_count_range_min = paren_chars_count - paren_chars_count_max\n\
    \        val paren_chars_count_range_max = paren_chars_count - paren_chars_count_min\n\
    \        val paren_chars_count_range_min = paren\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx6uv8vl1.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_count_range_max\e\
    [0m = paren_chars_count - paren_chars_count_min\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_count_range_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_chars_count_range_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx6uv8vl1.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_count_range_min\e\
    [0m = paren_chars_count - paren_chars_count_max\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_count_range_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_chars_count_range_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx6uv8vl1.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_count_range_max\e\
    [0m = paren_chars_count - paren_chars_count_min\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_count_range_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_chars_count_range_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx6uv8vl1.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_count_range_min\e\
    [0m = paren_chars_count - paren_chars_count_max\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_count_range_min is already defined as \e[33mv"
  stdout: ''
  timestamp: 1659798104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_counts\
    \ = paren_groups.map(paren_group => {\n            val paren_group_with_counts\
    \ = paren_group.split(\"(\")\n            val paren_group_with_counts_count =\
    \ paren_group_with_counts.length\n            val paren_group_with_counts_count_with_paren\
    \ = paren_group_with_counts_count + 1\n            paren_group_with_counts_count_with_paren\n\
    \        })\n        val paren_groups_with_counts_sorted = paren_groups_with_counts.sortBy(_._1)\n\
    \        val paren_groups_with_counts_sorted_with_paren = paren_groups_with_counts_sorted.map(x\
    \ => (x._2, x._1))\n        val paren_groups_with_counts_sorted_with_paren_max\
    \ = paren_groups_with_counts_sorted_with_paren.maxBy(_._1)\n        val paren_groups_with_counts_sorted_with_paren_max_with_paren\
    \ = paren_groups_with_counts_sorted_with_paren_max._2\n        val paren_groups_with_counts_sorted_with_paren_max_with_paren_length\
    \ = paren_groups_with_counts_sorted_with_paren_max_with_paren.length\n       \
    \ val paren_groups_with_counts_sorted_with_paren_max_with_paren_length_with_paren\
    \ = paren_groups_with_counts_sorted_with_paren_max_with_paren_length + 1\n   \
    \     val paren_groups_with_counts_sorted_with_paren_max_with_paren_length_with_paren_length\
    \ = paren_groups_with_counts_sorted_with_paren_max_with_paren_length_with_paren.length\n\
    \        val paren_groups_with_counts_sorted_with_paren_max_with_paren_length_with_paren_length_with_paren\
    \ = paren_groups_with_counts_sorted_with_paren_max_with_paren_length_with_paren.length\
    \ + 1\n        val paren_groups_with_counts_sorted_with_paren_max_with_paren_length_with_paren_length_with_paren_length\
    \ = paren_groups_with_counts_sorted_with_paren_max_with_paren_length_with_paren_length_with_paren.length\n\
    \        val paren_groups_with_counts_sorted_with_paren_max_with_paren_length_with_paren_length_with_paren_length_with_paren\
    \ = paren_groups_with_counts_sorted_with_paren_max_with_paren_length_with_paren_length_with_paren.length\
    \ + 1\n        val paren_groups_with_counts_sorted_with_paren_max_with_paren_length_with_paren_length_with_paren_length_with_paren_length\
    \ = paren_groups_with_counts_sorted_with_paren_max_with_paren_length_with_paren_length_with_paren_length_with_paren.length\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpktk6l18p.scala:17:80 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_counts_sorted\e\
    [0m = paren_groups_with_counts.sortBy(_._1)\n\e[31m\e[31m   |\e[0m           \
    \                                                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                                         value _1 is not a member\
    \ of Int\n\e[31m\e[31m-- Error: /tmp/tmpktk6l18p.scala:17:83 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_counts_sorted\e\
    [0m = paren_groups_with_counts.sortBy(_._1)\n\e[31m\e[31m   |\e[0m           \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mInt\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mclass\e[0m \e[35mArrayOps\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpktk6l18p.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_size = paren_array_max_size.max(0)\n        val\
    \ paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_tbv5iis.scala:44:60 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size.max(\n\e[31m\e[31m   |\e[0m                         \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_tbv5iis.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size.max(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_tbv5iis.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size.max(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_tbv5iis.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size\e[0m\
    \ = paren_array_max_size.max(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_array_max_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_tbv5iis.scala:16:12 ---------"
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_top\
    \ = paren_stack.push(\"(\")\n        val paren_stack_bottom = paren_stack.push(\"\
    )\")\n        val paren_stack_top = paren_stack.push(\"(\")\n        val paren_stack_bottom\
    \ = paren_stack.push(\")\")\n        val paren_stack_top = paren_stack.push(\"\
    (\")\n        val paren_stack_bottom = paren_stack.push(\")\")\n        val paren_stack_top\
    \ = paren_stack.push(\"(\")\n        val paren_stack_bottom = paren_stack.push(\"\
    )\")\n        val paren_stack_top = paren_stack.push(\"(\")\n        val paren_stack_bottom\
    \ = paren_stack.push(\")\")\n        val paren_stack_top = paren_stack.push(\"\
    (\")\n        val paren_stack_bottom = paren_stack.push(\")\")\n        val paren_stack_top\
    \ = paren_stack.push(\"(\")\n        val paren_stack_bottom = paren_stack.push(\"\
    )\")\n        val paren_stack_top = paren_stack.push(\"(\")\n        val paren_stack_bottom\
    \ = paren_stack.push(\")\")\n        val paren_stack_top = paren_stack.push(\"\
    (\")\n        val paren_stack_bottom = paren_stack.push(\")\")\n        val paren_stack_top\
    \ = paren_stack.push(\"(\")\n        val paren_stack_bottom = paren_stack.push(\"\
    )\")\n        val paren_stack_top = paren_stack.push(\"(\")\n        val paren_stack_bottom\
    \ = paren_stack.push(\")\")\n        val paren_stack_top = paren_stack.push(\"\
    (\")\n        val paren_stack_bottom = paren_stack.push(\")\")\n        val paren_stack_top\
    \ = paren_stack.push(\"(\")\n        val paren_stack_bottom = paren_stack.push(\"\
    )\")\n        val paren_stack_top = paren_stack.push(\"(\")\n        val paren_stack_bottom\
    \ = paren_stack.push(\")\")\n        val paren_stack_top = paren_stack.push(\"\
    (\")\n        val paren_stack_bottom = paren_stack.push(\")\")\n        val paren_stack_top\
    \ = paren_stack.push(\"(\")\n        val paren_stack_bottom = paren_stack.push(\"\
    )\")\n        val paren_stack_top = paren_stack.push(\"(\")\n        val paren_stack_bottom\
    \ = paren_stack.push(\")\")\n        val paren_stack_top = paren_stack.push(\"\
    (\")\n        val paren_stack_bottom = paren\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeas6s0jh.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top\e[0m = paren_stack.push(\e\
    [31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top is already defined as \e[33mvalue\e[0m \e\
    [35mparen_stack_top\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpeas6s0jh.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_bottom\e[0m\
    \ = paren_stack.push(\e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_bottom is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_bottom\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpeas6s0jh.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top\e[0m = paren_stack.push(\e\
    [31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top is already defined as \e[33mvalue\e[0m \e\
    [35mparen_stack_top\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpeas6s0jh.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_bottom\e[0m\
    \ = paren_stack.push(\e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_bottom is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_bottom\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpeas6s0jh.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval"
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_size = mutable.Stack[Long]()\n        val paren_stack_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level = mutable.Stack[Long]()\n   \
    \     val paren_stack_level_level_level_level_size = mutable.Stack[Long]()\n \
    \       val paren_stack_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpayb0z0zv.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpayb0z0zv.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_level_level_level_level_level_level_level_level_level_level_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_level_level_level_level_level_level_level_level_level_level_size\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_level_level_level_level_level_level_level_level_level_level_level_size\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpayb0z0zv.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpayb0z0zv.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpayb0z0zv.scala:12:32\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_level\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      "
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqt7ptzwf.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqt7ptzwf.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpqt7ptzwf.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqt7ptzwf.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqt7ptzwf.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_top\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31"
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_queue\
    \ = mutable.Queue[Long]()\n        val paren_levels = mutable.Map[Long, Int]()\n\
    \        val paren_levels_sorted = mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse_sorted =\
    \ mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse_sorted_reverse\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7l9qz7g0.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7l9qz7g0.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp7l9qz7g0.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mparen_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_levels_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => if (x == \"(\") 1 else 0)\n        val paren_groups_with_paren_sum\
    \ = paren_groups_with_paren.sum\n        val paren_groups_with_paren_max_level\
    \ = paren_groups_with_paren_sum / paren_groups_with_paren_sum.toDouble\n     \
    \   val paren_groups_with_paren_max_level_int = paren_groups_with_paren_max_level.toInt\n\
    \        val paren_groups_with_paren_max_level_long = paren_groups_with_paren_max_level_int.toLong\n\
    \        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long.toList.sorted\n\
    \        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.take(paren_groups_with_paren_max_level_long_list)\n\
    \        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.map(x\
    \ => x.toLong)\n        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.sorted\n\
    \        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.take(paren_groups_with_paren_max_level_long_list)\n\
    \        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.map(x\
    \ => x.toLong)\n        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.sorted\n\
    \        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.take(paren_groups_with_paren_max_level_long_list)\n\
    \        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.map(x\
    \ => x.toLong)\n        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.sorted\n\
    \        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.take(paren_groups_with_paren_max_level_long_list)\n\
    \        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.map(x\
    \ => x.toLong)\n        val paren_groups_with_paren_max_level_long_list = paren_groups_with_paren_max_level_long_list.sorted\n\
    \        val paren_groups_with_paren\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2z6ps75w.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2z6ps75w.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_paren_max_level_long_list\e[0m = paren_groups_with_paren_max_level_long_list.take(paren_groups_with_paren_max_level_long_list)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_paren_max_level_long_list is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_with_paren_max_level_long_list\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2z6ps75w.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_max_level_long_list\e\
    [0m = paren_groups_with_paren_max_level_long_list.map(\e[36mx\e[0m => x.toLong)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_paren_max_level_long_list is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_with_paren_max_level_long_list\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2z6ps75w.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_max_level_long_list\e\
    [0m = paren_groups_with_paren_max_level_long_list.sorted\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_paren_max_level_long_list is already defined\
    \ as \e[33mvalue\e[0m \e[35"
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_size = mutable.Stack[Long]()\n        val paren_stack_level_current\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_current_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_current_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_current_size = mutable.Stack[Long]()\n        val paren_stack_level_current_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_current_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_current_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_current_size = mutable.Stack[Long]()\n        val paren_stack_level_current_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_current_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_current_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_current_size = mutable.Stack[Long]()\n        val paren_stack_level_current_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_current_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_current_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_current_size = mutable.Stack[Long]()\n        val paren_stack_level_current_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_current_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_current_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_current_size = mutable.Stack[Long]()\n        val paren_stack_level_current_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_current_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_current_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_current_size = mutable.Stack[Long]()\n        val paren_stack_level_current_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_current_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_current_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_current_size = mutable.Stack[Long]()\n        val paren_stack_level_current_size\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg7mg8q_v.scala:42:44 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_current_size\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                            ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg7mg8q_v.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_level_current_size\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_current_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_level_current_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg7mg8q_v.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_current_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_current_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_level_current_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg7mg8q_v.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_current_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_current_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_level_current_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161]"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val max_levels = paren_groups.foldLeft(0L) { (max_level, group) =>\n    \
    \        if (group > max_level) group else max_level\n        }\n        paren_groups.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcu5pzjfb.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        paren_groups.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[Long]\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mList\e[0m[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_index = paren_array_size - 1\n        val paren_array_max_value\
    \ = paren_array[paren_array_max_index]\n        val paren_array_max_value_length\
    \ = paren_array_max_value.length\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_char = paren_array_max_value.charAt(0)\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char.length\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char_length\
    \ - 1\n        val paren_array_max_value_char = paren_array_max_value.charAt(0)\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char.length\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char_length\
    \ - 1\n        val paren_array_max_value_char = paren_array_max_value.charAt(0)\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char.length\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char_length\
    \ - 1\n        val paren_array_max_value_char = paren_array_max_value.charAt(0)\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char.length\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char_length\
    \ - 1\n        val paren_array_max_value_char = paren_array_max_value.charAt(0)\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char.length\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char_length\
    \ - 1\n        val paren_array_max_value_char = paren_array_max_value.charAt(0)\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char.length\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char_length\
    \ - 1\n        val paren_array_max_value_char = paren_array_max_value.charAt(0)\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char.length\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char_length\
    \ - 1\n        val paren_array_max_value_char = paren_array_max_value.charAt(0)\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char.length\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char_length\
    \ - 1\n        val paren_array_max_value_char = paren_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy2lix1t4.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_value_length\e\
    [0m = paren_array_max_value_length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_array_max_value_length is already defined as \e[33mvalue\e\
    [0m \e[35mparen_array_max_value_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy2lix1t4.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_value_char_length\e\
    [0m = paren_array_max_value_char_length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_value_char_length is already defined as \e\
    [33mvalue\e[0m \e[35mparen_array_max_value_char_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy2lix1t4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_array_max_value_char\e[0m = paren_array_max_value.charAt(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_value_char is already defined as \e[33mvalue\e\
    [0m \e[35mparen_array_max_value_char\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy2lix1t4.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_value_char_length\e\
    [0m = paren_array_max_value_char.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_value_char_length is already defined as"
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_size\
    \ = paren_groups.length\n        val paren_groups_map = mutable.Map[Long, List[Long]]()\n\
    \        var paren_level = 0\n        var paren_level_max = paren_groups_size\n\
    \        var paren_level_max_index = 0\n        var paren_level_max_value = 0\n\
    \        var paren_level_max_count = 0\n        var paren_level_max_count_index\
    \ = 0\n        var paren_level_max_count_value = 0\n        var paren_level_max_count_count\
    \ = 0\n        var paren_level_max_count_index = 0\n        var paren_level_max_count_value\
    \ = 0\n        var paren_level_max_count_count = 0\n        var paren_level_max_count_index\
    \ = 0\n        var paren_level_max_count_value = 0\n        var paren_level_max_count_count\
    \ = 0\n        var paren_level_max_count_index = 0\n        var paren_level_max_count_value\
    \ = 0\n        var paren_level_max_count_count = 0\n        var paren_level_max_count_index\
    \ = 0\n        var paren_level_max_count_value = 0\n        var paren_level_max_count_count\
    \ = 0\n        var paren_level_max_count_index = 0\n        var paren_level_max_count_value\
    \ = 0\n        var paren_level_max_count_count = 0\n        var paren_level_max_count_index\
    \ = 0\n        var paren_level_max_count_value = 0\n        var paren_level_max_count_count\
    \ = 0\n        var paren_level_max_count_index = 0\n        var paren_level_max_count_value\
    \ = 0\n        var paren_level_max_count_count = 0\n        var paren_level_max_count_index\
    \ = 0\n        var paren_level_max_count_value = 0\n        var paren_level_max_count_count\
    \ = 0\n        var paren_level_max_count_index = 0\n        var paren_level_max_count_value\
    \ = 0\n        var paren_level_max_count_count = 0\n        var paren_level_max_count_index\
    \ = 0\n        var paren_level_max_count_value = 0\n        var paren_level_max_count_count\
    \ = 0\n        var paren_level_max_count_index = 0\n        var paren_level_max_count_value\
    \ = 0\n        var paren_level_max_count_count = 0\n        var paren_level_max_count_index\
    \ = 0\n        var paren_level_max_count_value = 0\n        var paren_level_max_count_count\
    \ = 0\n        var paren_level_max_count_index = 0\n        var paren_level_max_count_value\
    \ = 0\n        var paren_level_max_count_count = 0\n        var paren_level_max_count_index\
    \ = 0\n        var paren_level_max_count_value = 0\n        var paren_level_max_count_count\
    \ = 0\n        var paren_level_max_count_index = 0\n        var paren_level_max_count_value\
    \ = 0\n        var paren_level_max_count_count = 0\n        var paren_level_max_count_index\
    \ = 0\n        var paren_level_max_count_value = 0\n        var \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp5fr_pvkf.scala:68:11 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp5fr_pvkf.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_max_count_index\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level_max_count_index is already defined as \e[33mvariable\e\
    [0m \e[35mparen_level_max_count_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5fr_pvkf.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_max_count_value\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level_max_count_value is already defined as \e[33mvariable\e\
    [0m \e[35mparen_level_max_count_value\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5fr_pvkf.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_max_count_count\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level_max_count_count is already defined as \e[33mvariable\e\
    [0m \e[35mparen_level_max_count_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5fr_pvkf.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_max_count_index\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level_max_count_index is al"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_level = mutable.Stack[Int]()\n\
    \        val paren_stack_level_size = mutable.Stack[Int]()\n        val paren_stack_level_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_size = mutable.Stack[Int]()\n\
    \        val paren_stack_level_level_level_level = mutable.Stack[Int]()\n    \
    \    val paren_stack_level_level_level_level_size = mutable.Stack[Int]()\n   \
    \     val paren_stack_level_level_level_level_level = mutable.Stack[Int]()\n \
    \       val paren_stack_level_level_level_level_level_size = mutable.Stack[Int]()\n\
    \        val paren_stack_level_level_level_level_level_level = mutable.Stack[Int]()\n\
    \        val paren_stack_level_level_level_level_level_level_size = mutable.Stack[Int]()\n\
    \        val paren_stack_level_level_level_level_level_level_level = mutable.Stack[Int]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_size = mutable.Stack[Int]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_level = mutable.Stack[Int]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp155sw0zk.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp155sw0zk.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp155sw0zk.scala:11:31 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m = mutable.Stack[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp155sw0zk.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level\e[0m =\
    \ mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp155sw0zk.scala:13:37\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_level_size\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp155sw0zk.scala:14:38 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_level\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \   "
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_groups\
    \ = paren_string.split(\" \")\n        val paren_groups_with_paren = paren_groups.map(x\
    \ => if (x.equals(\"(\")) \"(\" + x else x + \")\")\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren.length\n        val paren_groups_with_paren_length_with_paren\
    \ = paren_groups_with_paren.map(x => if (x.equals(\"(\")) paren_groups_with_paren_length\
    \ + 1 else paren_groups_with_paren_length)\n        val paren_groups_with_paren_length_with_paren_sum\
    \ = paren_groups_with_paren_length_with_paren.sum\n        val paren_groups_with_paren_length_with_paren_sum_with_paren\
    \ = paren_groups_with_paren_length_with_paren_sum + 1\n        val paren_groups_with_paren_length_with_paren_sum_with_paren_length\
    \ = paren_groups_with_paren_length_with_paren_sum_with_paren.map(x => if (x.equals(\"\
    (\")) x + 1 else x)\n        val paren_groups_with_paren_length_with_paren_sum_with_paren_length_with_paren\
    \ = paren_groups_with_paren_length_with_paren_sum_with_paren_length_with_paren.map(x\
    \ => if (x.equals(\"(\")) x + 1 else x)\n        val paren_groups_with_paren_length_with_paren_sum_with_paren_length_with_paren_length\
    \ = paren_groups_with_paren_length_with_paren_sum_with_paren_length_with_paren.length\n\
    \        val paren_groups_with_paren_length_with_paren_sum_with_paren_length_with_paren_length_with_paren\
    \ = paren_groups_with_paren_length_with_paren_sum_with_paren_length_with_paren_length_with_paren.map(x\
    \ => if (x.equals(\"(\")) x + 1 else x)\n        val paren_groups_with_paren_length_with_paren_sum_with_paren_length_with_paren_length_with_paren_length\
    \ = paren_groups_with_paren_length_with_paren_sum_with_paren_length_with_paren_length_with_paren.length\n\
    \        val paren_groups_with_paren_length_with_paren_sum_with_paren_length_with_paren_length_with_paren_length_with_paren\
    \ = paren_groups_with_paren_length_with_paren_sum_with_paren_length_with_paren_length_with_paren_length_with_paren.length\n\
    \        val paren_groups_with_paren_length_with_paren_sum_with_paren_length_with_paren_length_with_paren_length_with_paren\
    \ = paren_groups_with_paren_length_with_paren_sum_with_paren_length_with_paren_length_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvyyocx2u.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_length_with_paren_sum_with_paren_length_with_paren_length_with_paren_length_with_paren\e\
    [0m = paren_groups_with_paren_length_with_paren_sum_with_paren_length_with_paren_length_\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_paren_length_with_paren_sum_with_paren_length_with_paren_length_with_paren_length_with_paren\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_paren_length_with_paren_sum_with_paren_length_with_paren_length_with_paren_length_with_paren\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvyyocx2u.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvyyocx2u.scala:17:135 -----------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_length_with_paren_sum_with_paren_length\e\
    [0m = paren_groups_with_paren_length_with_paren_sum_with_paren.map(\e[36mx\e[0m\
    \ => \e[33mif\e[0m (x.equals(\e[31m\"(\"\e[0m)) x + \e[31m1\e[0m \e[33melse\e\
    [0m x)\n\e[31m\e[31m   |\e[0m                                                \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value map is not a\
    \ member of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvyyocx2u.scala:18:8"
  stdout: ''
  timestamp: 1659798107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Int]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Int]()\n       \
    \ val paren_stack_top_top_top_top_top = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3b6ekvq6.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3b6ekvq6.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_top_top_top_top_top_top_top_top\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_top_top_top_top_top_top_top_top is already\
    \ defined as \e[33mvalue\e[0m \e[35mparen_stack_top_top_top_top_top_top_top_top_top\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3b6ekvq6.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp3b6ekvq6.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3b6ekvq6.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m     "
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val max_level = paren_groups.foldLeft(0l) { (max_level, group) => if (group\
    \ > max_level) group else max_level }\n        paren_groups.map(_.toLong).take(max_level)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2vw4z36b.scala:12:40\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        paren_groups.map(_.toLong).take(max_level)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                        Found:    (max_level : Long)\n\
    \e[31m   |\e[0m                                        Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_counter\
    \ = mutable.Stack[Int]()\n        val paren_stack_counter_list = mutable.Stack[Int]()\n\
    \        val paren_stack_counter_list2 = mutable.Stack[Int]()\n        val paren_stack_counter_list3\
    \ = mutable.Stack[Int]()\n        val paren_stack_counter_list4 = mutable.Stack[Int]()\n\
    \        val paren_stack_counter_list5 = mutable.Stack[Int]()\n        val paren_stack_counter_list6\
    \ = mutable.Stack[Int]()\n        val paren_stack_counter_list7 = mutable.Stack[Int]()\n\
    \        val paren_stack_counter_list8 = mutable.Stack[Int]()\n        val paren_stack_counter_list9\
    \ = mutable.Stack[Int]()\n        val paren_stack_counter_list10 = mutable.Stack[Int]()\n\
    \        val paren_stack_counter_list11 = mutable.Stack[Int]()\n        val paren_stack_counter_list12\
    \ = mutable.Stack[Int]()\n        val paren_stack_counter_list13 = mutable.Stack[Int]()\n\
    \        val paren_stack_counter_list14 = mutable.Stack[Int]()\n        val paren_stack_counter_list15\
    \ = mutable.Stack[Int]()\n        val paren_stack_counter_list16 = mutable.Stack[Int]()\n\
    \        val paren_stack_counter_list17 = mutable.Stack[Int]()\n        val paren_stack_counter_list18\
    \ = mutable.Stack[Int]()\n        val paren_stack_counter_list19 = mutable.Stack[Int]()\n\
    \        val paren_stack_counter_list20 = mutable.Stack[Int]()\n        val paren_stack_counter_list21\
    \ = mutable.Stack[Int]()\n        val paren_stack_counter_list22 = mutable.Stack[Int]()\n\
    \        val paren_stack_counter_list23 = mutable.Stack[Int]()\n        val paren_stack_counter_list24\
    \ = mutable.Stack[Int]()\n        val paren_stack_counter_list25 = mutable.Stack[Int]()\n\
    \        val paren_stack_counter_list26 = mutable.Stack[Int]()\n        val paren_stack_counter_list27\
    \ = mutable.Stack[Int]()\n        val paren_stack_counter_list28 = mutable.Stack[Int]()\n\
    \        val paren_stack_counter_list29 = mutable.Stack[Int]()\n        val paren\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9r1z9cpb.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9r1z9cpb.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9r1z9cpb.scala:11:34 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_counter\e[0m = mutable.Stack[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9r1z9cpb.scala:12:39 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_counter_list\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9r1z9cpb.scala:13:40 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_counter_list2\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                       \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                                        Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9r1z9cpb.scala:14:40\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_counter_list3\e[0m = mutable.Stack[\e[35mInt\e[0m]"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.Map[String, List[Long]]()\n        val paren_stack_map_keys = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values = mutable.Map[Long, Long]()\n  \
    \      val paren_stack_map_values_keys = mutable.Map[Long, Long]()\n        val\
    \ paren_stack_map_values_values_keys = mutable.Map[Long, Long]()\n        val\
    \ paren_stack_map_values_values_values = mutable.Map[Long, Long]()\n        val\
    \ paren_stack_map_values_values_values_keys = mutable.Map[Long, Long]()\n    \
    \    val paren_stack_map_values_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf9yeq70m.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf9yeq70m.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_values_keys\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpf9yeq70m.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_values_values\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf9yeq70m.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_counts\
    \ = paren_groups.map(x => (x, 1))\n        val paren_groups_with_counts_sorted\
    \ = paren_groups_with_counts.sortBy(_._1)\n        val paren_groups_with_counts_sorted_reversed\
    \ = paren_groups_with_counts_sorted.reverse\n        val paren_groups_with_counts_sorted_reversed_with_max_count\
    \ = paren_groups_with_counts_sorted_reversed.takeWhile(_._2 > 0)\n        val\
    \ paren_groups_with_counts_sorted_reversed_with_max_count_sorted = paren_groups_with_counts_sorted_reversed_with_max_count.sortBy(_._1)\n\
    \        val paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed\
    \ = paren_groups_with_counts_sorted_reversed_with_max_count_sorted.reverse\n \
    \       val paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count\
    \ = paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed.takeWhile(_._2\
    \ > 0)\n        val paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted\
    \ = paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count.sortBy(_._1)\n\
    \        val paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed\
    \ = paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted.reverse\n\
    \        val paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed_with_max_count\
    \ = paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed_with_max_count.takeWhile(_._2\
    \ > 0)\n        val paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted\
    \ = paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted.sortBy(_._1)\n\
    \        val paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed\
    \ = paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed.reverse\n\
    \        val paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed_with_max_count\
    \ = paren_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkrvzez6q.scala:20:132 --------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed_with_max_count\e\
    [0m = paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed_with_max_count.takeWhile(_._2\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \                                                                            \
    \                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\
    \e[31m   |\e[0m  paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed_with_max_count\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpkrvzez6q.scala:21:139 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted\e\
    [0m = paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpkrvzez6q.scala:22:148 --------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_counts_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed_with_max_count_sorted_reversed\e\
    [0m = paren_groups_with_counts_sorted_reversed"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val max_levels = paren_groups.foldLeft(0l) { (max_levels, group) => if (group\
    \ > max_levels) group else max_levels }\n        val max_levels_str = max_levels.toString.toLong.toString\n\
    \        val max_levels_str = max_levels_str.substring(0,max_levels_str.length-1)\n\
    \        val max_levels_str = max_levels_str.replaceFirst(\"0\",\"1\")\n     \
    \   val max_levels_str = max_levels_str.replaceFirst(\"1\",\"2\")\n        val\
    \ max_levels_str = max_levels_str.replaceFirst(\"2\",\"3\")\n        val max_levels_str\
    \ = max_levels_str.replaceFirst(\"3\",\"4\")\n        val max_levels_str = max_levels_str.replaceFirst(\"\
    4\",\"5\")\n        val max_levels_str = max_levels_str.replaceFirst(\"5\",\"\
    6\")\n        val max_levels_str = max_levels_str.replaceFirst(\"6\",\"7\")\n\
    \        val max_levels_str = max_levels_str.replaceFirst(\"7\",\"8\")\n     \
    \   val max_levels_str = max_levels_str.replaceFirst(\"8\",\"9\")\n        val\
    \ max_levels_str = max_levels_str.replaceFirst(\"9\",\"10\")\n        val max_levels_str\
    \ = max_levels_str.replaceFirst(\"10\",\"11\")\n        val max_levels_str = max_levels_str.replaceFirst(\"\
    11\",\"12\")\n        val max_levels_str = max_levels_str.replaceFirst(\"12\"\
    ,\"13\")\n        val max_levels_str = max_levels_str.replaceFirst(\"13\",\"14\"\
    )\n        val max_levels_str = max_levels_str.replaceFirst(\"14\",\"15\")\n \
    \       val max_levels_str = max_levels_str.replaceFirst(\"15\",\"16\")\n    \
    \    val max_levels_str = max_levels_str.replaceFirst(\"16\",\"17\")\n       \
    \ val max_levels_str = max_levels_str.replaceFirst(\"17\",\"18\")\n        val\
    \ max_levels_str = max_levels_str.replaceFirst(\"18\",\"19\")\n        val max_levels_str\
    \ = max_levels_str.replaceFirst(\"19\",\"20\")\n        val max_levels_str = max_levels_str.replaceFirst(\"\
    20\",\"21\")\n        val max_levels_str = max_levels_str.replaceFirst(\"21\"\
    ,\"22\")\n        val max_levels_str = max_levels_str.replaceFirst(\"22\",\"23\"\
    )\n        val max_levels_str = max_levels_str.replaceFirst(\"23\",\"24\")\n \
    \       \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp36yu_xhk.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmax_levels_str\e[0m = max_levels_str.substring(\e\
    [31m0\e[0m,max_levels_str.length-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_levels_str is already defined as \e[33mvalue\e[0m \e[35mmax_levels_str\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp36yu_xhk.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mmax_levels_str\e[0m = max_levels_str.replaceFirst(\e\
    [31m\"0\"\e[0m,\e[31m\"1\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_levels_str is already defined as \e[33mvalue\e[0m \e[35mmax_levels_str\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp36yu_xhk.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mmax_levels_str\e[0m = max_levels_str.replaceFirst(\e\
    [31m\"1\"\e[0m,\e[31m\"2\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_levels_str is already defined as \e[33mvalue\e[0m \e[35mmax_levels_str\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp36yu_xhk.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mmax_levels_str\e[0m = max_levels_str.replaceFirst(\e\
    [31m\"2\"\e[0m,\e[31m\"3\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_levels_str is already defined as \e[33mvalue\e[0m \e[35mmax_levels_str\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659798116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n\n        paren_string.split(\"\\\\s+\").foreach(x =>\
    \ {\n            val paren_stack_size += x.length\n            if (paren_stack.size\
    \ > 0) {\n                val paren_stack_top_size += paren_stack.last\n     \
    \           paren_stack_top_size += paren_stack.last\n            }\n        \
    \    if (x.equals(\"(\")) {\n                paren_stack.push(x.toLong)\n    \
    \            paren_stack_top_size += x.toLong\n            } else if (x.equals(\"\
    )\")) {\n                val paren_stack_top = paren_stack.pop()\n           \
    \     paren_stack_top_size -= paren_stack_top\n                paren_stack_top_size\
    \ += paren_stack_top\n            }\n        })\n        val paren_stack_top_size\
    \ = paren_stack_top_size.toList\n        val paren_stack_top_size = paren_stack_top_size.max\n\
    \        val paren_stack_top_size = paren_stack_top_size.toLong\n        val paren_stack_top_size\
    \ = paren_stack_top_size.toLong\n        val paren_stack_top_size = paren_stack_top_size.toLong\n\
    \        val paren_stack_top_size = paren_stack_top_size.toLong\n        val paren_stack_top_size\
    \ = paren_stack_top_size.toLong\n        val paren_stack_top_size = paren_stack_top_size.toLong\n\
    \        val paren_stack_top_size = paren_stack_top_size.toLong\n        val paren_stack_top_size\
    \ = paren_stack_top_size.toLong\n        val paren_stack_top_size = paren_stack_top_size.toLong\n\
    \        val paren_stack_top_size = paren_stack_top_size.toLong\n        val paren_stack_top_size\
    \ = paren_stack_top_size.toLong\n        val paren_stack_top_size = paren_stack_top_size.toLong\n\
    \        val paren_stack_top_size = paren_stack_top_size.toLong\n        val paren_stack_top_size\
    \ = paren_stack_top_size.toLong\n        val paren_stack_top_size = paren_stack_top_size.toLong\n\
    \        val paren_stack_top_size = paren_stack_top_size.toLong\n        val paren_stack_top_size\
    \ = paren_stack_top_size.toLong\n        val paren_stack_top_size = paren_stack_top_size.toLong\n\
    \        val paren_stack_top_size = paren_stack_top_size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx94dh7t7.scala:18:0 ----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (paren_stack.size > \e[31m0\e\
    [0m) {\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0m'=' expected, but 'end of\
    \ statement' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx94dh7t7.scala:20:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                paren_stack_top_size\
    \ += paren_stack.last\n\e[31m\e[31m   |\e[0m^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m'=' expected, but 'end of statement' found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx94dh7t7.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m = paren_stack_top_size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx94dh7t7.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = paren_stack_top_size.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx94dh7t7.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = paren_stack_top_size.max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx94dh7t7.scala:3"
  stdout: ''
  timestamp: 1659798115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.Map[String, List[Long]]()\n        paren_string.split(\"\\\\s+\").foreach(x\
    \ => {\n            val paren_str = x.trim\n            if (paren_str.length ==\
    \ 0) return\n            if (paren_stack_map.contains(paren_str)) {\n        \
    \        paren_stack_map(paren_str) = paren_stack_map(paren_str) ++ paren_stack\n\
    \            } else {\n                paren_stack_map.put(paren_str, List())\n\
    \                paren_stack_map(paren_str) = paren_stack\n            }\n   \
    \         paren_stack.push(paren_str)\n        })\n        val max_level = paren_stack_map.values.map(_.length).max\n\
    \        val max_level_map = paren_stack_map.map(x => (x._1, x._2.map(_.length).max))\n\
    \        val max_level_map_keys = max_level_map.keys\n        val max_level_map_values\
    \ = max_level_map.values\n        val max_level_map_keys_sorted = max_level_map_keys.sorted\n\
    \        val max_level_map_values_sorted = max_level_map_values.sorted\n     \
    \   val max_level_map_keys_sorted_zipped = max_level_map_keys_sorted.zip(max_level_map_values_sorted)\n\
    \        val max_level_map_keys_zipped = max_level_map_keys_sorted.zip(max_level_map_values_sorted)\n\
    \        val max_level_map_keys_zipped_sorted = max_level_map_keys_zipped.sorted\n\
    \        val max_level_map_values_zipped_sorted = max_level_map_values_zipped.sorted\n\
    \        val max_level_map_keys_zipped_sorted_zipped = max_level_map_keys_zipped_sorted.zip(max_level_map_values_zipped_sorted)\n\
    \        val max_level_map_keys_zipped_sorted_zipped_sorted = max_level_map_keys_zipped_sorted_zipped.sorted\n\
    \        val max_level_map_keys_zipped_sorted_zipped_sorted_zipped = max_level_map_keys_zipped_sorted_zipped_sorted.zip(max_level_map_values_zipped_sorted_zipped)\n\
    \        val max_level_map_keys_zipped_sorted_zipped_sorted_zipped_sorted = max_level_map_keys_zipped_sorted_zipped_sorted_zipped.sorted\n\
    \        val max_level_map_keys_zipped_sorted_zipped_sorted_zipped_sorted_zipped\
    \ = max_level_map_keys_zipped_sorted_zipped_sorted_zipped_sorted.zip(max_level_map_values_zipped_sorted_zipped_sorted_zipped)\n\
    \        val max_level_map_keys_zipped_sorted_zipped_sorted_zipped_sorted_zipped_sorted\
    \ = max_level_map_keys_zipped_sorted_zipped_sorted_zipped_sorted_zipped.sorted\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpujrjhd0i.scala:39:11 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpujrjhd0i.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpujrjhd0i.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mList\e[0m[\e[35mLong\e[0m]]()\n\e[31m\e[31m   |\e[0m  \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpujrjhd0i.scala:14:39 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m            \e[33mif\e[0m (paren_str.length == \e[31m0\e[0m) \e[33mreturn\e\
    [0m\n\e[31m\e[31m   |\e[0m                                       ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                       Found:    Unit\n\e[31m \
    \  |\e[0m                                       Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpujrjhd0i.scala:32:49 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmax_level_map_values_zipped_sorted\e\
    [0m = max_level_map_values_zipped.sorted\n\e[31m\e[31m   |\e[0m              \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                  Not found: max_level_map_values_zipped\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation a"
  stdout: ''
  timestamp: 1659798116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index_size = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptblhkjhv.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptblhkjhv.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptblhkjhv.scala:11:31 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptblhkjhv.scala:12:30 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptblhkjhv.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptblhkjhv.scala:14:36 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_top_count\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                "
  stdout: ''
  timestamp: 1659798115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_chars = paren_string.split(\" \").map(_.toChar)\n     \
    \   val paren_chars_count = paren_chars.map(_.length).sum\n        val paren_chars_count_with_paren\
    \ = paren_chars_count + 1\n        val paren_chars_count_with_paren_plus_1 = paren_chars_count_with_paren\
    \ + 1\n        val paren_chars_count_with_paren_plus_2 = paren_chars_count_with_paren_plus_1\
    \ + 1\n        val paren_chars_count_with_paren_plus_3 = paren_chars_count_with_paren_plus_2\
    \ + 1\n        val paren_chars_count_with_paren_plus_4 = paren_chars_count_with_paren_plus_3\
    \ + 1\n        val paren_chars_count_with_paren_plus_5 = paren_chars_count_with_paren_plus_4\
    \ + 1\n        val paren_chars_count_with_paren_plus_6 = paren_chars_count_with_paren_plus_5\
    \ + 1\n        val paren_chars_count_with_paren_plus_7 = paren_chars_count_with_paren_plus_6\
    \ + 1\n        val paren_chars_count_with_paren_plus_8 = paren_chars_count_with_paren_plus_7\
    \ + 1\n        val paren_chars_count_with_paren_plus_9 = paren_chars_count_with_paren_plus_8\
    \ + 1\n        val paren_chars_count_with_paren_plus_10 = paren_chars_count_with_paren_plus_9\
    \ + 1\n        val paren_chars_count_with_paren_plus_11 = paren_chars_count_with_paren_plus_10\
    \ + 1\n        val paren_chars_count_with_paren_plus_12 = paren_chars_count_with_paren_plus_11\
    \ + 1\n        val paren_chars_count_with_paren_plus_13 = paren_chars_count_with_paren_plus_12\
    \ + 1\n        val paren_chars_count_with_paren_plus_14 = paren_chars_count_with_paren_plus_13\
    \ + 1\n        val paren_chars_count_with_paren_plus_15 = paren_chars_count_with_paren_plus_14\
    \ + 1\n        val paren_chars_count_with_paren_plus_16 = paren_chars_count_with_paren_plus_15\
    \ + 1\n        val paren_chars_count_with_paren_plus_17 = paren_chars_count_with_paren_plus_16\
    \ + 1\n        val paren_chars_count_with_paren_plus_18 = paren_chars_count_with_paren_plus_17\
    \ + 1\n        val paren_chars_count_with_paren_plus_19 = paren_chars_count_with_paren_plus_18\
    \ + 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpybczgfqh.scala:10:56 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                 value toChar is not a member of String\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpybczgfqh.scala:10:63 -----------------------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpybczgfqh.scala:33:5 ---------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_list = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_array_list_size = paren_array_list.size\n        val paren_array_list_index\
    \ = paren_array_list_size\n        val paren_array_list_index1 = paren_array_list_index\
    \ + 1\n        val paren_array_list_index2 = paren_array_list_index1 + 1\n   \
    \     val paren_array_list_index3 = paren_array_list_index2 + 1\n        val paren_array_list_index4\
    \ = paren_array_list_index3 + 1\n        val paren_array_list_index5 = paren_array_list_index4\
    \ + 1\n        val paren_array_list_index6 = paren_array_list_index5 + 1\n   \
    \     val paren_array_list_index7 = paren_array_list_index6 + 1\n        val paren_array_list_index8\
    \ = paren_array_list_index7 + 1\n        val paren_array_list_index9 = paren_array_list_index8\
    \ + 1\n        val paren_array_list_index10 = paren_array_list_index9 + 1\n  \
    \      val paren_array_list_index11 = paren_array_list_index10 + 1\n        val\
    \ paren_array_list_index12 = paren_array_list_index11 + 1\n        val paren_array_list_index13\
    \ = paren_array_list_index12 + 1\n        val paren_array_list_index14 = paren_array_list_index13\
    \ + 1\n        val paren_array_list_index15 = paren_array_list_index14 + 1\n \
    \       val paren_array_list_index16 = paren_array_list_index15 + 1\n        val\
    \ paren_array_list_index17 = paren_array_list_index16 + 1\n        val paren_array_list_index18\
    \ = paren_array_list_index17 + 1\n        val paren_array_list_index19 = paren_array_list_index18\
    \ + 1\n        val paren_array_list_index20 = paren_array_list_index19 + 1\n \
    \       val paren_array_list_index21 = paren_array_list_index20 + 1\n        val\
    \ paren_array_list_index22 = paren_array_list_index21 + 1\n        val paren_array_list_index23\
    \ = paren_array_list_index22 + 1\n        val paren_array_list_index24 = paren_array_list_index23\
    \ + 1\n        val paren_array_list_index25 = paren_array_list_index24 + 1\n \
    \       val paren_array_list_index26 = paren_array_list_index25 + 1\n        val\
    \ paren_array_list_index27 = paren_array_list_index26 + 1\n        val paren\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcjv5axqa.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcjv5axqa.scala:12:31\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_array_list\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcjv5axqa.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val paren_groups_with_parens = paren_groups.map(x => if (x == 0) 0 else x)\n\
    \        val paren_groups_with_parens_sorted = paren_groups_with_parens.sortBy(x\
    \ => x)\n        val paren_groups_with_parens_sorted_with_parens = paren_groups_with_parens_sorted.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_parens_sorted_with_parens_sorted\
    \ = paren_groups_with_parens_sorted_with_parens.sortBy(x => x)\n        val paren_groups_with_parens_sorted_with_parens_sorted_with_parens\
    \ = paren_groups_with_parens_sorted_with_parens_sorted.map(x => if (x == 0) 0\
    \ else x)\n        val paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted\
    \ = paren_groups_with_parens_sorted_with_parens_sorted_with_parens.sortBy(x =>\
    \ x)\n        val paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens\
    \ = paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted\
    \ = paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens.sortBy(x\
    \ => x)\n        val paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens\
    \ = paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted\
    \ = paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens\
    \ = paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted\
    \ = paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_paren\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpggrq8e59.scala:19:115 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens\e\
    [0m = paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpggrq8e59.scala:20:122 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted\e\
    [0m = paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpggrq8e59.scala:22:141 -----------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted\e\
    [0m = paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_paren\n\
    \e[31m\e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1659798118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n   \
    \     val paren_groups_with_paren_length = paren_groups_with_paren.map(x => x.length).max\n\
    \        val paren_groups_with_paren_length_sorted = paren_groups_with_paren.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_groups_with_paren_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted.map(x => x.length).max\n        val\
    \ paren_groups_with_paren_length_sorted_length_sorted = paren_groups_with_paren_length_sorted.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_groups_with_paren_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted.map(x => x.length).max\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted.sortWith((x, y) => x.length\
    \ <= y.length)\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted.map(x =>\
    \ x.length).max\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted.map(x\
    \ => x.length).max\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.map(x\
    \ => x.length).max\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.map(x\
    \ => x.length).max\n        val paren_groups_with_paren\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_fd5v5js.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_fd5v5js.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\e\
    [0m = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.length <= y.length)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp_fd5v5js.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\e\
    [0m = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.map(\e\
    [36mx\e[0m => x.length).max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_paren_length_sorted"
  stdout: ''
  timestamp: 1659798117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_level_groups = List[String]()\n        for (paren_group\
    \ <- paren_groups) {\n            val paren_group_levels = paren_group.split(\"\
    \\\\(\").map(x => x.split(\"\\\\)\").length)\n            if (paren_group_levels.max\
    \ > max_level) {\n                max_level = paren_group_levels.max\n       \
    \         max_level_groups = paren_group.split(\"\\\\(\")\n            }\n   \
    \     }\n        max_level_groups.map(x => x.split(\"\\\\)\").length.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp0x79x7dh.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                max_level = paren_group_levels.max\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Reassignment to val max_level\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0x79x7dh.scala:17:52 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                max_level_groups = paren_group.split(\e\
    [31m\"\\\\(\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                   Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren_groups\
    \ = paren_groups.map(x => x.split(\"(\"))\n        val paren_groups_with_paren_groups_flat\
    \ = paren_groups_with_paren_groups.flatten\n        val paren_groups_with_paren_groups_flat_sorted\
    \ = paren_groups_with_paren_groups_flat.sortBy(x => x.length)\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_flat_sorted.map(x => x.mkString(\"(\",\",\"\
    ,\")\"))\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups.flatten\n   \
    \     val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat.sortBy(x\
    \ => x.length)\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted.map(x\
    \ => x.mkString(\"(\",\",\",\")\"))\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups.flatten\n\
    \        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat.sortBy(x\
    \ => x.length)\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted.map(x\
    \ => x.mkString(\"(\",\",\",\")\"))\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups.flatten\n\
    \        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp23rmbyj2.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp23rmbyj2.scala:16:167 -----------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted\e\
    [0m = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat.sortBy(\e\
    [36mx\e[0m => x.length)\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \                                                          ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value length is not a member of\
    \ Char\n\e[31m\e[31m-- Error: /tmp/tmp23rmbyj2.scala:16:174 ----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted\e\
    [0m = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat.sortBy(\e\
    [36mx\e[0m => x.length)\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mInt\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mclass\e[0m \e[35mArrayOps\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp23rmbyj2.scala:23:5 ---------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_levels\
    \ = mutable.Stack[Int]()\n        val paren_levels_count = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max = mutable.Stack[Int]()\n        val paren_levels_count_max_index\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index2 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index3 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index4 = mutable.Stack[Int]()\n        val paren_levels_count_max_index5\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index6 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index7 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index8 = mutable.Stack[Int]()\n        val paren_levels_count_max_index9\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index10 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index11 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index12 = mutable.Stack[Int]()\n        val paren_levels_count_max_index13\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index14 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index15 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index16 = mutable.Stack[Int]()\n        val paren_levels_count_max_index17\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index18 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index19 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index20 = mutable.Stack[Int]()\n        val paren_levels_count_max_index21\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index22 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index23 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index24 = mutable.Stack[Int]()\n        val paren_levels_count_max_index25\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpru3vb3g2.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpru3vb3g2.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpru3vb3g2.scala:11:27 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Stack[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpru3vb3g2.scala:12:33 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_levels_count\e[0m\
    \ = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpru3vb3g2.scala:13:37\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_levels_count_max\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpru3vb3g2.scala:14:43 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_levels_count_max_index\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \       "
  stdout: ''
  timestamp: 1659798093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_parentheses\
    \ = paren_groups.map(x => if (x.equals(\"(\")) 1 else 0)\n        val paren_groups_with_parentheses_count\
    \ = paren_groups_with_parentheses.sum\n        val paren_groups_with_parentheses_count_with_parentheses\
    \ = paren_groups_with_parentheses_count + 1\n        val paren_groups_with_parentheses_count_with_parentheses_plus_one\
    \ = paren_groups_with_parentheses_count_with_parentheses + 1\n        val paren_groups_with_parentheses_count_with_parentheses_plus_two\
    \ = paren_groups_with_parentheses_count_with_parentheses_plus_one + 1\n      \
    \  val paren_groups_with_parentheses_count_with_parentheses_plus_three = paren_groups_with_parentheses_count_with_parentheses_plus_two\
    \ + 1\n        val paren_groups_with_parentheses_count_with_parentheses_plus_four\
    \ = paren_groups_with_parentheses_count_with_parentheses_plus_three + 1\n    \
    \    val paren_groups_with_parentheses_count_with_parentheses_plus_five = paren_groups_with_parentheses_count_with_parentheses_plus_four\
    \ + 1\n        val paren_groups_with_parentheses_count_with_parentheses_plus_six\
    \ = paren_groups_with_parentheses_count_with_parentheses_plus_five + 1\n     \
    \   val paren_groups_with_parentheses_count_with_parentheses_plus_seven = paren_groups_with_parentheses_count_with_parentheses_plus_six\
    \ + 1\n        val paren_groups_with_parentheses_count_with_parentheses_plus_eight\
    \ = paren_groups_with_parentheses_count_with_parentheses_plus_seven + 1\n    \
    \    val paren_groups_with_parentheses_count_with_parentheses_plus_nine = paren_groups_with_parentheses_count_with_parentheses_plus_eight\
    \ + 1\n        val paren_groups_with_parentheses_count_with_parentheses_plus_ten\
    \ = paren_groups_with_parentheses_count_with_parentheses_plus_nine + 1\n     \
    \   val paren_groups_with_parentheses_count_with_parentheses_plus_eleven = paren_groups_with_parentheses_count_with_parentheses_plus_ten\
    \ + 1\n        val paren_groups_with_parentheses_count_with_parentheses_plus_twelve\
    \ = paren_groups_with_parentheses_count_with_parentheses_plus_eleven + 1\n   \
    \     val paren_groups_with_parentheses_count_with_parentheses_plus_thirteen =\
    \ paren_groups_with_parentheses_count_with_parentheses_plus_twelve + 1\n     \
    \   val paren_groups_with_parentheses_count_with_parentheses_plus_fourteen = paren_groups_with_parentheses_count_with_parentheses_plus_thirteen\
    \ + 1\n        val paren_groups_with_parentheses_count_with_parentheses_plus_fifteen\
    \ = paren\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98hjvs6r.scala:28:80 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parentheses_count_with_parentheses_plus_fifteen\e\
    [0m = paren\n\e[31m\e[31m   |\e[0m                                           \
    \                                     ^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                                            Not found: paren\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp98hjvs6r.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val max_levels = paren_groups.foldLeft(0l) { (max_levels, group) =>\n   \
    \         if (group.isEmpty) max_levels\n            else max_levels + (if (group.isEmpty)\
    \ 0 else 1)\n        }\n        val max_levels_str = max_levels.toString.toLong\n\
    \        val max_levels_str = max_levels_str.toString.padLeft(max_levels_str.length,\
    \ '0')\n        val max_levels_str = max_levels_str.substring(0, max_levels_str.length\
    \ - max_levels_str.length % 3)\n        val max_levels_str = max_levels_str +\
    \ max_levels_str.substring(max_levels_str.length - 1)\n        val max_levels_str\
    \ = max_levels_str + max_levels_str.substring(max_levels_str.length - 1)\n   \
    \     val max_levels_str = max_levels_str + max_levels_str.substring(max_levels_str.length\
    \ - 1)\n        val max_levels_str = max_levels_str + max_levels_str.substring(max_levels_str.length\
    \ - 1)\n        val max_levels_str = max_levels_str + max_levels_str.substring(max_levels_str.length\
    \ - 1)\n        val max_levels_str = max_levels_str + max_levels_str.substring(max_levels_str.length\
    \ - 1)\n        val max_levels_str = max_levels_str + max_levels_str.substring(max_levels_str.length\
    \ - 1)\n        val max_levels_str = max_levels_str + max_levels_str.substring(max_levels_str.length\
    \ - 1)\n        val max_levels_str = max_levels_str + max_levels_str.substring(max_levels_str.length\
    \ - 1)\n        val max_levels_str = max_levels_str + max_levels_str.substring(max_levels_str.length\
    \ - 1)\n        val max_levels_str = max_levels_str + max_levels_str.substring(max_levels_str.length\
    \ - 1)\n        val max_levels_str = max_levels_str + max_levels_str.substring(max_levels_str.length\
    \ - 1)\n        val max_levels_str = max_levels_str + max_levels_str.substring(max_levels_str.length\
    \ - 1)\n        val max_levels_str = max_levels_str + max_levels_str.substring(max_levels_str.length\
    \ - 1)\n        val max_levels_str = max_levels_str + max_levels_str.substring(max_levels_str.length\
    \ - 1)\n        val max_levels_str = max_levels_str + max_levels_str.substring(max_levels_str.length\
    \ - 1)\n        val max_levels_str = max_levels_str + max_levels_str.substring(max_levels_str\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7uu3zwlo.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7uu3zwlo.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_levels_str\e[0m = max_levels_str.toString.padLeft(max_levels_str.length,\
    \ \e[31m'0'\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_levels_str is already defined as \e[33mvalue\e[0m \e[35mmax_levels_str\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7uu3zwlo.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mmax_levels_str\e[0m = max_levels_str.substring(\e\
    [31m0\e[0m, max_levels_str.length - max_levels_str.length % \e[31m3\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_levels_str is already defined as \e[33mvalue\e[0m \e[35mmax_levels_str\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7uu3zwlo.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mmax_levels_str\e[0m = max_levels_str\
    \ + max_levels_str.substring(max_levels_str.length - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_levels_str is already defined as \e[33mvalue\e[0m \e[35mmax_levels_str\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7uu3zwlo.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mmax_levels_str\e["
  stdout: ''
  timestamp: 1659798119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Long]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_8i56hwj.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_8i56hwj.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_max_level_len\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_level_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_level_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_8i56hwj.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_level_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_level_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_8i56hwj.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_level_len is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_max_level_len\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_8i56hwj.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_len\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_max_l"
  stdout: ''
  timestamp: 1659798117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\"\\\\s+\")\n        val paren_groups_with_parens\
    \ = paren_groups.map(x => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n   \
    \     val paren_groups_with_parens_with_depth = paren_groups_with_parens.map(x\
    \ => parseParens(x))\n        val paren_groups_with_parens_with_depth_with_depth\
    \ = paren_groups_with_parens_with_depth.map(x => x.map(y => y.map(z => z.toLong)))\n\
    \        val paren_groups_with_parens_with_depth_with_depth_with_depth = paren_groups_with_parens_with_depth_with_depth.map(x\
    \ => x.map(y => y.map(z => z.map(w => w.toLong))))\n        val paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth\
    \ = paren_groups_with_parens_with_depth_with_depth_with_depth.map(x => x.map(y\
    \ => y.map(z => z.map(w => w.map(x => x.toLong))))\n        val paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth.map(x\
    \ => x.map(y => y.map(z => z.map(w => w.map(x => x.map(y => y.toLong)))))\n  \
    \      val paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth.map(x\
    \ => x.map(y => y.map(z => z.map(w => w.map(x => x.map(y => y.map(z => z.toLong)))))\n\
    \        val paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth.map(x\
    \ => x.map(y => y.map(z => z.map(w => w.map(x => x.map(y => y.map(z => z.map(w\
    \ => w.toLong)))))\n        val paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuu0xhsa2.scala:16:8 ----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_with_depth_with_depth_with_depth_with_depth_with_depth\e\
    [0m = paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth.map(\e\
    [36mx\e[0m => x.map(\e[36my\e[0m => y.map(\e[36mz\e[0m => z.map(\e[36mw\e[0m =>\
    \ w.map(\e[36mx\e[0m => x.map(\e[36my\e[0m => y.toLong)))))\n\e[31m\e[31m   |\e\
    [0m        ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'val' found\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpuu0xhsa2.scala:12:84 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_with_depth\e\
    [0m = paren_groups_with_parens.map(\e[36mx\e[0m => parseParens(x))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                        Not found: parseParens\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpuu0xhsa2.scala:12:99 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_with_depth\e\
    [0m = paren_groups_with_parens.map(\e[36mx\e[0m => parseParens(x))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \                     No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                                          where:    B is a type variable\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuu0xhsa2.scala:27:1 ---------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_list_string = paren_string.trim().replaceAll(\"\\\\s+\"\
    , \" \")\n        val paren_list_list = paren_list_string.split(\" \")\n     \
    \   val paren_list_list_list = paren_list_list.map(x => x.split(\"\\\\(\"))\n\
    \        val paren_list_list_list_list = paren_list_list_list.map(x => x.map(y\
    \ => y.split(\"\\\\)\")))\n        val paren_list_list_list_list_list = paren_list_list_list_list.map(x\
    \ => x.map(y => y.map(z => z.split(\"\\\\)\")))) //(x => x.map(y => y.map(z =>\
    \ z.split(\"\\\\)\")))\n        val paren_list_list_list_list_list_list = paren_list_list_list_list_list.map(x\
    \ => x.map(y => y.map(z => z.map(w => w.split(\"\\\\)\")))) //(x => x.map(y =>\
    \ y.map(z => z.map(w => w.split(\"\\\\)\")))) //(x => x.map(y => y.map(z => z.map(w\
    \ => w.split(\"\\\\)\")))) //(x => x.map(y => y.map(z => z.map(w => w.split(\"\
    \\\\)\")))) //(x => x.map(y => y.map(z => z.map(w => w.split(\"\\\\)\")))) //(x\
    \ => x.map(y => y.map(z => z.map(w => w.split(\"\\\\)\")))) //(x => x.map(y =>\
    \ y.map(z => z.map(w => w.split(\"\\\\)\")))) //(x => x.map(y => y.map(z => z.map(w\
    \ => w.split(\"\\\\)\")))) //(x => x.map(y => y.map(z => z.map(w => w.split(\"\
    \\\\)\")))) //(x => x.map(y => y.map(z => z.map(w => w.split(\"\\\\)\")))) //(x\
    \ => x.map(y => y.map(z => z.map(w => w.split(\"\\\\)\")))) //(x => x.map(y =>\
    \ y.map(z => z.map(w => w.split(\"\\\\)\")))) //(x => x.map(y => y.map(z => z.map(w\
    \ => w.split(\"\\\\)\")))) //(x => x.map(y => y.map(z => z.map(w => w.split(\"\
    \\\\)\")))) //(x => x.map(y => y.map(z => z.map(w => w.split(\"\\\\)\")))) //(x\
    \ => x.map(y => y.map(z => z.map(w => w.split(\"\\\\)\")))) //(x => x.map(y =>\
    \ y.map(z => z.map(w => w.\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppfvvox3m.scala:16:4 ----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmppfvvox3m.scala:16:5 ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => x.replaceAll(\"\\\\(\", \"(\").replaceAll(\"\\\\)\"\
    , \")\"))\n        val paren_groups_with_paren_length = paren_groups_with_paren.length\n\
    \        val paren_groups_with_paren_length_with_paren = paren_groups_with_paren.map(x\
    \ => x.replaceAll(\"\\\\(\", \"(\").replaceAll(\"\\\\)\", \")\")).length\n   \
    \     val paren_groups_with_paren_length_with_paren_length = paren_groups_with_paren_length_with_paren\
    \ + paren_groups_with_paren_length\n        val paren_groups_with_paren_length_with_paren_length_with_paren\
    \ = paren_groups_with_paren_length_with_paren_length + paren_groups_with_paren_length_with_paren\n\
    \        val paren_groups_with_paren_length_with_paren_length_with_paren_length\
    \ = paren_groups_with_paren_length_with_paren_length_with_paren + paren_groups_with_paren_length_with_paren_length\n\
    \        val paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren\
    \ = paren_groups_with_paren_length_with_paren_length_with_paren + paren_groups_with_paren_length_with_paren_length_with_paren\n\
    \        val paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren_length\
    \ = paren_groups_with_paren_length_with_paren_length_with_paren_length + paren_groups_with_paren_length_with_paren_length_with_paren_length\n\
    \        val paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren_length_with_paren\
    \ = paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren\
    \ + paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren\n\
    \        val paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren_length_with_paren_length\
    \ = paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren\
    \ + paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren_length\n\
    \        val paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren_length_with_paren_length_with_paren\
    \ = paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren_length_with_paren\
    \ + paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren_length_with_paren\n\
    \        val paren_group\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy7g1jd85.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpy7g1jd85.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map\
    \ = mutable.HashMap[Long, Long]()\n        paren_string.split(\"\\\\s+\").foreach(x\
    \ => {\n            val paren_level = paren_stack_map.getOrElse(x, 0).toLong\n\
    \            paren_stack_map.put(x, paren_level + 1)\n            paren_stack.push(paren_level)\n\
    \        })\n        val max_level = paren_stack.max\n        val max_level_map\
    \ = paren_stack_map.max\n        val max_level_map_keys = max_level_map.keys\n\
    \        val max_level_map_values = max_level_map.values\n        val max_level_map_keys_sorted\
    \ = max_level_map_keys.sorted\n        val max_level_map_values_sorted = max_level_map_values.sorted\n\
    \        val max_level_map_keys_sorted_zipped = max_level_map_keys_sorted.zip(max_level_map_values_sorted)\n\
    \        val max_level_map_keys_zipped = max_level_map_keys_sorted_zipped.map(_._1)\n\
    \        val max_level_map_values_zipped = max_level_map_keys_sorted_zipped.map(_._2)\n\
    \        val max_level_map_keys_zipped_sorted = max_level_map_keys_zipped.sorted\n\
    \        val max_level_map_values_zipped_sorted = max_level_map_values_zipped.sorted\n\
    \        val max_level_map_keys_zipped_zipped = max_level_map_keys_zipped_sorted.zip(max_level_map_values_zipped_sorted)\n\
    \        val max_level_map_keys_zipped_zipped_sorted = max_level_map_keys_zipped_zipped.map(_._1)\n\
    \        val max_level_map_values_zipped_zipped = max_level_map_keys_zipped_zipped_sorted.map(_._2)\n\
    \        val max_level_map_keys_zipped_zipped_sorted = max_level_map_keys_zipped_zipped.sorted\n\
    \        val max_level_map_values_zipped_zipped_sorted = max_level_map_values_zipped_zipped.sorted\n\
    \        val max_level_map_keys_zipped_zipped_zipped = max_level_map_keys_zipped_zipped_sorted.zip(max_level_map_values_zipped_zipped_sorted)\n\
    \        val max_level_map_keys_zipped_zipped_zipped_sorted = max_level_map_keys_zipped_zipped_zipped.map(_._1)\n\
    \        val max_level_map_values_zipped_zipped_zipped = max_level_map_keys_zipped_zipped_zipped_sorted.map(_._2)\n\
    \        val max_level_map_keys_zipped_zipped_zipped_sorted = max_level_map_keys_zipped_zipped_zipped.sorted\n\
    \        val max_level_map_values_zipped_zipped_zipped_sor\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu6war1aq.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu6war1aq.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_level_map_keys_zipped_zipped_sorted\e[0m = max_level_map_keys_zipped_zipped.sorted\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_map_keys_zipped_zipped_sorted is already defined\
    \ as \e[33mvalue\e[0m \e[35mmax_level_map_keys_zipped_zipped_sorted\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu6war1aq.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax_level_map_keys_zipped_zipped_zipped_sorted\e\
    [0m = max_level_map_keys_zipped_zipped_zipped.sorted\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_map_keys_zipped_zipped_zipped_sorted is already\
    \ defined as \e[33mvalue\e[0m \e[35mmax_level_map_keys_zipped_zipped_zipped_sorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpu6war1aq.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpu6war1aq.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1659798118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_parentheses\
    \ = paren_groups.map(x => if (x == \"(\") 1 else 0)\n        val paren_groups_with_parentheses_sum\
    \ = paren_groups_with_parentheses.sum\n        val paren_groups_with_parentheses_product\
    \ = paren_groups_with_parentheses.product\n        val paren_groups_with_parentheses_product2\
    \ = paren_groups_with_parentheses_product * paren_groups_with_parentheses_product\n\
    \        val paren_groups_with_parentheses_product3 = paren_groups_with_parentheses_product2\
    \ * paren_groups_with_parentheses_product\n        val paren_groups_with_parentheses_product4\
    \ = paren_groups_with_parentheses_product3 * paren_groups_with_parentheses_product\n\
    \        val paren_groups_with_parentheses_product5 = paren_groups_with_parentheses_product4\
    \ * paren_groups_with_parentheses_product\n        val paren_groups_with_parentheses_product6\
    \ = paren_groups_with_parentheses_product5 * paren_groups_with_parentheses_product\n\
    \        val paren_groups_with_parentheses_product7 = paren_groups_with_parentheses_product6\
    \ * paren_groups_with_parentheses_product\n        val paren_groups_with_parentheses_product8\
    \ = paren_groups_with_parentheses_product7 * paren_groups_with_parentheses_product\n\
    \        val paren_groups_with_parentheses_product9 = paren_groups_with_parentheses_product8\
    \ * paren_groups_with_parentheses_product\n        val paren_groups_with_parentheses_product10\
    \ = paren_groups_with_parentheses_product9 * paren_groups_with_parentheses_product\n\
    \        val paren_groups_with_parentheses_product11 = paren_groups_with_parentheses_product10\
    \ * paren_groups_with_parentheses_product\n        val paren_groups_with_parentheses_product12\
    \ = paren_groups_with_parentheses_product11 * paren_groups_with_parentheses_product\n\
    \        val paren_groups_with_parentheses_product13 = paren_groups_with_parentheses_product12\
    \ * paren_groups_with_parentheses_product\n        val paren_groups_with_parentheses_product14\
    \ = paren_groups_with_parentheses_product13 * paren_groups_with_parentheses_product\n\
    \        val paren_groups_with_parentheses_product15 = paren_groups_with_parentheses_product14\
    \ * paren_groups_with_parentheses_product\n        val paren_groups_with_parentheses_product16\
    \ = paren_groups_with_parentheses_product15 * paren_groups_with_parentheses_product\n\
    \        val paren_groups_with_parentheses_product17 = paren_groups_with_parentheses_product16\
    \ * paren_groups_with_parentheses_product\n        val paren_groups_with_parentheses_product18\
    \ = paren_group\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvdi0j1gn.scala:30:54 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parentheses_product18\e\
    [0m = paren_group\n\e[31m\e[31m   |\e[0m                                     \
    \                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                        Not found: paren_group\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvdi0j1gn.scala:31:5 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_counts\
    \ = paren_groups.map(x => x.split(\"(\").map(x => x.split(\")\").map(x => x.toLong).sum).toList\n\
    \        val max_count = paren_groups_with_counts.max\n        val max_index =\
    \ paren_groups_with_counts.indexWhere(_ == max_count)\n        val max_groups\
    \ = paren_groups.take(max_index)\n        val max_groups_with_counts = max_groups.map(x\
    \ => x.split(\"(\").map(x => x.split(\")\").map(x => x.toLong).sum).toList\n \
    \       val max_groups_with_counts_index = max_groups_with_counts.indexWhere(_\
    \ == max_count)\n        val max_groups_with_counts_groups = max_groups_with_counts.take(max_groups_with_counts_index)\n\
    \        val max_groups_with_counts_groups_with_counts = max_groups_with_counts_groups.map(x\
    \ => x.split(\"(\").map(x => x.split(\")\").map(x => x.toLong).sum).toList\n \
    \       val max_groups_with_counts_groups_with_counts_index = max_groups_with_counts_groups_with_counts.indexWhere(_\
    \ == max_count)\n        val max_groups_with_counts_groups_with_counts_groups\
    \ = max_groups_with_counts_groups_with_counts.take(max_groups_with_counts_groups_with_counts_index)\n\
    \        val max_groups_with_counts_groups_with_counts_groups_with_counts = max_groups_with_counts_groups_with_counts_groups.map(x\
    \ => x.split(\"(\").map(x => x.split(\")\").map(x => x.toLong).sum).toList\n \
    \       val max_groups_with_counts_groups_with_counts_groups_with_counts_index\
    \ = max_groups_with_counts_groups_with_counts_groups_with_counts.indexWhere(_\
    \ == max_count)\n        val max_groups_with_counts_groups_with_counts_groups_with_counts_groups\
    \ = max_groups_with_counts_groups_with_counts_groups_with_counts.take(max_groups_with_counts_groups_with_counts_groups_with_counts_index)\n\
    \        val max_groups_with_counts_groups_with_counts_groups_with_counts_groups_with_counts\
    \ = max_groups_with_counts_groups_with_counts_groups_with_counts_groups.map(x\
    \ => x.split(\"(\").map(x => x.split(\")\").map(x => x.toLong).sum).toList\n \
    \       val max_groups_with_counts_groups_with_counts_groups_with_counts_groups_with_counts_index\
    \ = max_groups_with_counts_groups_with_counts_groups_with_counts_groups_with_counts.indexWhere(_\
    \ == max_count)\n        val max_groups_with_counts_groups_with_counts_groups_with_counts_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6ywk2wwf.scala:12:8 ----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_count\e[0m = paren_groups_with_counts.max\n\
    \e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but\
    \ 'val' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ywk2wwf.scala:34:1\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val max_level = paren_groups.foldLeft(0l) { (max_level, group) => if (group\
    \ > max_level) group else max_level }\n        val max_level_groups = paren_groups.map(_.toLong).take(max_level)\n\
    \        val max_level_groups_with_parentheses = max_level_groups.map(_.toLong).takeRight(max_level).map(_.toLong)\n\
    \        val max_level_groups_with_parentheses_without_parentheses = max_level_groups_with_parentheses.map(_.toLong).takeRight(1)\n\
    \        val max_level_groups_with_parentheses_without_parentheses_without_parentheses\
    \ = max_level_groups_with_parentheses_without_parentheses.map(_.toLong).takeRight(1)\n\
    \        val max_level_groups_with_parentheses_without_parentheses_without_parentheses_without_parentheses\
    \ = max_level_groups_with_parentheses_without_parentheses_without_parentheses.map(_.toLong).takeRight(1)\n\
    \        val max_level_groups_with_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses\
    \ = max_level_groups_with_parentheses_without_parentheses_without_parentheses_without_parentheses.map(_.toLong).takeRight(1)\n\
    \        val max_level_groups_with_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses\
    \ = max_level_groups_with_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses.map(_.toLong).takeRight(1)\n\
    \        val max_level_groups_with_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses\
    \ = max_level_groups_with_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses.map(_.toLong).takeRight(1)\n\
    \        val max_level_groups_with_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses\
    \ = max_level_groups_with_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses.map(_.toLong).takeRight(1)\n\
    \        val max_level_groups_with_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses\
    \ = max_level_groups_with_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses.map(_.toLong).takeRight(1)\n\
    \        val max_level_groups_with_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi5mxao6v.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpi5mxao6v.scala:12:63 --------------------\e[0m\e[0m\n\e[31m12 |\e[0m\
    \        \e[33mval\e[0m \e[36mmax_level_groups\e[0m = paren_groups.map(_.toLong).take(max_level)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \      Found:    (max_level : Long)\n\e[31m   |\e[0m                         \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpi5mxao6v.scala:13:89 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax_level_groups_with_parentheses\e[0m =\
    \ max_level_groups.map(_.toLong).takeRight(max_level).map(_.toLong)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (max_level : Long)\n\e[31m   |\e[0m       \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpi5mxao6v.scala:19:168 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmax_level_groups_with_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses\e\
    [0m = max_level_groups_with_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses_without_parentheses.map(_.toLong).takeRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                                                                            \
    \                                                 ^\e[0m\n\e[31m   |\e[0mRecursive "
  stdout: ''
  timestamp: 1659798120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n   \
    \     val paren_groups_with_paren_length = paren_groups_with_paren.map(x => x.length).toList\n\
    \        val paren_groups_with_paren_length = paren_groups_with_paren_length.max\n\
    \        val paren_groups_with_paren_length_with_paren = paren_groups_with_paren.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_paren_length_with_paren_length\
    \ = paren_groups_with_paren_length_with_paren.map(x => x.length).toList\n    \
    \    val paren_groups_with_paren_length_with_paren_length_with_paren = paren_groups_with_paren_length_with_paren.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_paren_length_with_paren_length_with_paren_length\
    \ = paren_groups_with_paren_length_with_paren_length_with_paren.map(x => x.length).toList\n\
    \        val paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren\
    \ = paren_groups_with_paren_length_with_paren_length_with_paren.map(x => x.replace(\"\
    (\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren_length\
    \ = paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren.map(x\
    \ => x.length).toList\n        val paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren_length_with_paren\
    \ = paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren_length_with_paren_length\
    \ = paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren_length_with_paren.map(x\
    \ => x.length).toList\n        val paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren_length_with_paren_length_with_paren\
    \ = paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren_length_with_paren.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_paren_length_with_paren_length_with_paren_length_with_paren_length_with_paren_length_with_paren_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp95b4oah8.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp95b4oah8.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_paren_length\e[0m = paren_groups_with_paren_length.max\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_paren_length is already defined as \e[33mvalue\e\
    [0m \e[35mparen_groups_with_paren_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp95b4oah8.scala:24:5 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_size\
    \ = paren_groups.length\n        val paren_groups_sizes = paren_groups.map(paren_group\
    \ => paren_group.length)\n        val max_paren_groups_size = paren_groups_sizes.max\n\
    \        val max_paren_groups_size_index = paren_groups_sizes.indexOf(max_paren_groups_size)\n\
    \        val max_paren_groups_size_value = paren_groups_sizes(max_paren_groups_size_index)\n\
    \        val max_paren_groups_size_long = max_paren_groups_size.toLong\n     \
    \   val paren_groups_size_longs = paren_groups_sizes.map(paren_groups_size =>\
    \ paren_groups_size.toLong)\n        val max_paren_groups_size_long_index = paren_groups_size_longs.indexOf(max_paren_groups_size_long)\n\
    \        val max_paren_groups_size_long_value = paren_groups_size_longs(max_paren_groups_size_long_index)\n\
    \        val max_paren_groups_size_long_long = max_paren_groups_size_long.toLong\n\
    \        val paren_groups_size_long_longs = paren_groups_size_longs.map(paren_groups_size_long\
    \ => paren_groups_size_long.toLong)\n        val max_paren_groups_size_long_long_index\
    \ = paren_groups_size_long_longs.indexOf(max_paren_groups_size_long_long)\n  \
    \      val max_paren_groups_size_long_long_value = paren_groups_size_long_longs(max_paren_groups_size_long_long_index)\n\
    \        val max_paren_groups_size_long_long_long = max_paren_groups_size_long_long.toLong\n\
    \        val paren_groups_size_long_long_longs = paren_groups_size_long_longs.map(paren_groups_size_long_long\
    \ => paren_groups_size_long_long.toLong)\n        val max_paren_groups_size_long_long_long_index\
    \ = paren_groups_size_long_long_longs.indexOf(max_paren_groups_size_long_long_long)\n\
    \        val max_paren_groups_size_long_long_long_value = paren_groups_size_long_long_longs(max_paren_groups_size_long_long_long_index)\n\
    \        val max_paren_groups_size_long_long_long_long = max_paren_groups_size_long_long_long.toLong\n\
    \        val paren_groups_size_long_long_long_longs = paren_groups_size_long_long_longs.map(paren_groups_size_long_long_long\
    \ => paren_groups_size_long_long_long.toLong)\n        val max_paren_groups_size_long_long_long_long_index\
    \ = paren_groups_size_long_long_long_longs.indexOf(max_paren_groups_size_long_long_long_long)\n\
    \        val max_paren_groups_size_long_long_long_long_value = paren_groups_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw2g7uom2.scala:31:62 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmax_paren_groups_size_long_long_long_long_value\e\
    [0m = paren_groups_\n\e[31m\e[31m   |\e[0m                                   \
    \                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                  Not found: paren_groups_\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw2g7uom2.scala:32:5 ---------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_chars = paren_string.split(\" \").map(_.toChar)\n     \
    \   val paren_chars_count = paren_chars.map(c => if (c == '(') 1 else 0).sum\n\
    \        val paren_chars_count_max = paren_chars.map(c => if (c == '(') 1 else\
    \ 0).max\n        val paren_chars_count_min = paren_chars.map(c => if (c == '(')\
    \ 1 else 0).min\n        val paren_chars_count_avg = paren_chars.map(c => if (c\
    \ == '(') 1 else 0).average\n        val paren_chars_count_sum = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).sum\n        val paren_chars_count_count_max = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_min = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_avg = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).average\n        val paren_chars_count_count_sum\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).sum\n        val paren_chars_count_count_count_max\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_count_min\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_count_avg\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).average\n        val paren_chars_count_count_count_sum\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).sum\n        val paren_chars_count_count_count_count_max\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_count_count_min\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_count_count_avg\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).average\n        val paren_chars_count_count_count_count_sum\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).sum\n        val paren_chars_count_count_count_count_count_max\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_count_count_count_min\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).min\n        val paren\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfabtzq9l.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfabtzq9l.scala:10:56\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars\e[0m = paren_string.split(\e[31m\" \"\e[0m).map(_.toChar)\n\e\
    [31m\e[31m   |\e[0m                                                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmpfabtzq9l.scala:10:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfabtzq9l.scala:31:5 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_level_index = 0\n        val paren_group_index = 0\n  \
    \      val paren_group_size = 0\n        val paren_group_level = 0\n        val\
    \ paren_group_level_stack = mutable.Stack[Int]()\n        val paren_group_level_stack_len\
    \ = mutable.Stack[Int]()\n        val paren_group_level_stack_len_size = 0\n \
    \       val paren_group_level_stack_len_stack = mutable.Stack[Int]()\n       \
    \ val paren_group_level_stack_len_stack_len = mutable.Stack[Int]()\n        val\
    \ paren_group_level_stack_len_stack_len_size = 0\n        val paren_group_level_stack_len_stack_len_stack\
    \ = mutable.Stack[Int]()\n        val paren_group_level_stack_len_stack_len_stack_len\
    \ = mutable.Stack[Int]()\n        val paren_group_level_stack_len_stack_len_stack_len_stack\
    \ = mutable.Stack[Int]()\n        val paren_group_level_stack_len_stack_len_stack_len_stack_len\
    \ = mutable.Stack[Int]()\n        val paren_group_level_stack_len_stack_len_stack_len_stack_len_stack\
    \ = mutable.Stack[Int]()\n        val paren_group_level_stack_len_stack_len_stack_len_stack_len_stack_len\
    \ = mutable.Stack[Int]()\n        val paren_group_level_stack_len_stack_len_stack_len_stack_len_stack_len_stack\
    \ = mutable.Stack[Int]()\n        val paren_group_level_stack_len_stack_len_stack_len_stack_len_stack_len_stack_len\
    \ = mutable.Stack[Int]()\n        val paren_group_level_stack_len_stack_len_stack_len_stack_len_stack_len_stack_len_stack\
    \ = mutable.Stack[Int]()\n        val paren_group_level_stack_len_stack_len_stack_len_stack_len_stack_len_stack_len_stack_len\
    \ = mutable.Stack[Int]()\n        val paren_group_level_stack_len_stack_len_stack_len_stack_len_stack_len_stack_len_stack_len_stack\
    \ = mutable.Stack[Int]()\n        val paren_group_level_stack_len_stack_len_stack_len_stack_len_stack_len_stack_len_stack_len_stack_len\
    \ = mutable.Stack[Int]()\n        val paren_group_level_stack_len_stack_len_stack_len_stack_len_stack_len_stack_len_stack_len_stack_len_stack\
    \ = mutable.Stack[Int]()\n        val paren_group_level_stack_len_stack_len_stack_len_stack_len_stack_len_stack_len_stack_len_stack_len_stack_len\
    \ = mutable.Stack[Int]()\n        val paren_group_level_stack_len_\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsdis3fvp.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdis3fvp.scala:16:38\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_level_stack\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                      Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdis3fvp.scala:17:42 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_group_level_stack_len\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpsdis3fvp.scala:19:48 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_group_level_stack_len_stack\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsdis3fvp.scala:20:52 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_group_level_stack_len_stack_len\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdis3fvp.scala:22:58 -----------"
  stdout: ''
  timestamp: 1659798127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_max = mutable.Stack[Long]()\n        val paren_stack_top_count_max_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_max_index2 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_max_index3 = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_count_max_index4 = mutable.Stack[Long]()\n        val paren_stack_top_count_max_index5\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_max_index6 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_max_index7 = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_count_max_index8 = mutable.Stack[Long]()\n        val paren_stack_top_count_max_index9\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_max_index10 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_max_index11 = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_count_max_index12 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_max_index13 = mutable.Stack[Long]()\n        val paren_stack_top_count_max_index14\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_max_index15 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_max_index16 = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_count_max_index17 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_max_index18 = mutable.Stack[Long]()\n        val paren_stack_top_count_max_index19\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_max_index20 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_max_index21 = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_count_max_index22 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_max_index23 = mutable.Stack[Long]()\n        val paren_stack_top_count_max_index24\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_max_index25\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp12e7c6nc.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp12e7c6nc.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp12e7c6nc.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_top\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp12e7c6nc.scala:12:36 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_count\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp12e7c6nc.scala:13:40 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_top_count_max\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                        Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp12e7c6nc.scala:14:46\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_top_count_max_index\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e\
    [31m\e[3"
  stdout: ''
  timestamp: 1659798127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_top\
    \ = paren_stack.size\n        val paren_stack_max_level = paren_stack_top\n  \
    \      val paren_stack_max_level_stack = mutable.Stack[Long]()\n        val paren_stack_max_level_stack_top\
    \ = paren_stack_max_level_stack.size\n        val paren_stack_max_level_stack_max_level\
    \ = paren_stack_max_level_stack_top\n        val paren_stack_max_level_stack_max_level_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_stack_max_level_stack_top\
    \ = paren_stack_max_level_stack_max_level_stack.size\n        val paren_stack_max_level_stack_max_level_stack_max_level\
    \ = paren_stack_max_level_stack_max_level_stack_top\n        val paren_stack_max_level_stack_max_level_stack_max_level_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_stack_max_level_stack_max_level_stack_top\
    \ = paren_stack_max_level_stack_max_level_stack_max_level_stack.size\n       \
    \ val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level =\
    \ paren_stack_max_level_stack_max_level_stack_max_level_stack_top\n        val\
    \ paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\
    \ = paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack.size\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level\
    \ = paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\
    \ = paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack.size\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level\
    \ = paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\n\
    \        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack_top\
    \ = paren_stack_max_level_stack_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp25cmfoij.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp25cmfoij.scala:13:42 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_stack\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp25cmfoij.scala:16:58 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_stack_max_level_stack\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                                 Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp25cmfoij.scala:19:74 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_level_stack_max_level_stack_max_level_stack\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                                                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp25cmfoij.scala:22:90\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_max_level_stack_max_level_stack_max_level_stack_max_level_stack\e\
    [0m = mutabl"
  stdout: ''
  timestamp: 1659798127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_level_groups = mutable.ListBuffer[String]()\n        for\
    \ (paren_group <- paren_groups) {\n            val paren_group_levels = paren_group.split(\"\
    \\\\(\").map(_.length).max\n            if (paren_group_levels > max_level) {\n\
    \                max_level = paren_group_levels\n                max_level_groups\
    \ = paren_group\n            }\n        }\n        max_level_groups.map(_.split(\"\
    \\\\)\").map(_.length).max).toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp623ziv93.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_level_groups\e[0m =\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp623ziv93.scala:16:26\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                max_level\
    \ = paren_group_levels\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val max_level\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp623ziv93.scala:17:33 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                max_level_groups = paren_group\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val max_level_groups\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_depth = paren_array_max_size.toLong\n       \
    \ val paren_array_max_depth = paren_array_max_depth.toInt\n        val paren_array_max_depth\
    \ = paren_array_max_depth + 1\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toInt\n        val\
    \ paren_array_max_depth = paren_array_max_depth + 1\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth + 1\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth + 1\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth + 1\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth + 1\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth + 1\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth + 1\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth + 1\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth + 1\n        val paren_array_max_depth\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0wheuxld.scala:43:35 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_depth\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0wheuxld.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_array_max_depth\e[0m = paren_array_max_depth.toInt\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_array_max_depth is already defined as \e[33mvalue\e[0m \e\
    [35mparen_array_max_depth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0wheuxld.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_depth\e\
    [0m = paren_array_max_depth + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_depth is already defined as \e[33mvalue\e\
    [0m \e[35mparen_array_max_depth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0wheuxld.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_depth\e\
    [0m = paren_array_max_depth.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_depth is already defined as \e[33mvalue\e\
    [0m \e[35mparen_array_max_depth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0wheuxld.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m "
  stdout: ''
  timestamp: 1659798128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexIndex\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexIndexSize =\
    \ mutable.Stack[Long]()\n        val paren_stack_top_count_indexIndexIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexIndexIndexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexIndexIndexIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexIndexIndexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexIndexIndexIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexIndexIndexIndexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexIndexIndexIndexIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexIndexIndexIndexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexIndexIndexIndexIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexIndexIndexIndexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexIndexIndexIndexIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexIndexIndexIndexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexIndexIndexIndexIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexIndexIndexIndexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexIndexIndexIndexIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexIndexIndexIndexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexIndexIndexIndexIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexIndexIndexIndexSize = mutable.Stack[Long]()\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp59dh5eal.scala:38:11 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp59dh5eal.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_count_indexIndexIndexSize\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_indexIndexIndexSize is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_stack_top_count_indexIndexIndexSize\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp59dh5eal.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_count_indexIndexIndexIndex\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_indexIndexIndexIndex is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_stack_top_count_indexIndexIndexIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp59dh5eal.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_count_indexIndexIndexIndexSize\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_indexIndexIndexIndexSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mparen_stack_top_count_indexIndexIndexIndexSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel defi"
  stdout: ''
  timestamp: 1659798127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_size = mutable.Stack[Long]()\n        val paren_stack_top_size_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_stack_top_size = mutable.Stack[Long]()\n   \
    \     val paren_stack_top_size_stack_top_size_size = mutable.Stack[Long]()\n \
    \       val paren_stack_top_size_stack_top_size_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_stack_top_size_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_stack_top_size_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_stack_top_size_stack_top_size_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_stack_top_size_stack_top_size_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size_stack_top_size_stack_top_size_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_stack_top_size_stack_top_size_stack_top_size_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_stack_top_size_stack_top_size_stack_top_size_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_stack_top_size_stack_top_size_stack_top_size_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_stack_top_size_stack_top_size_stack_top_size_stack_top_size_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_stack_top_size_stack_top_size_stack_top_size_stack_top_size_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_stack_top_size_stack_top_size_stack_top_size_stack_top_size_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_stack_top_size_stack_top_size_stack_top_size_stack_top_size_stack_top_size_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_stack_top_size_stack_top_size_stack_top_size_stack_top_size_stack_top_size_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size_stack_top_size_stack_top_size_stack_top_size_stack_top_size_stack_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbe7a_e06.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbe7a_e06.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbe7a_e06.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_top\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbe7a_e06.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbe7a_e06.scala:13:40 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_top_size_size\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                        Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbe7a_e06.scala:14:41\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_top_size_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e["
  stdout: ''
  timestamp: 1659798130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_levels = mutable.ListBuffer[Long]()\n        for (paren_group\
    \ <- paren_groups) {\n            val paren_group_levels = paren_group.split(\"\
    \\\\(\").map(_.length.toLong)\n            if (paren_group_levels.max > max_level)\
    \ {\n                max_level = paren_group_levels.max\n                max_levels\
    \ += paren_group_levels.max\n            }\n        }\n        max_levels\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6aq7b4k7.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6aq7b4k7.scala:16:28 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                max_level = paren_group_levels.max\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            Found:    Long\n\e[31m   |\e[0m     \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_levels\
    \ = mutable.ListBuffer.empty[Long]\n        paren_string.split(\"\\\\s+\").foreach(x\
    \ => {\n            val paren_level = x.count('(') - x.count(')')\n          \
    \  paren_levels += paren_level\n            paren_stack += x\n        })\n   \
    \     val max_level = paren_levels.max\n        val max_level_paren_stack = paren_stack.filter(_\
    \ == ')')\n        val max_level_paren_stack_length = max_level_paren_stack.length\n\
    \        val max_level_paren_stack_paren_length = max_level_paren_stack_length\
    \ - 1\n        val max_level_paren_stack_paren_levels = max_level_paren_stack.take(max_level_paren_stack_paren_length)\n\
    \        val max_level_paren_stack_paren_levels_length = max_level_paren_stack_paren_levels.length\n\
    \        val max_level_paren_stack_paren_levels_paren_length = max_level_paren_stack_paren_levels_length\
    \ - 1\n        val max_level_paren_stack_paren_levels_paren_levels = max_level_paren_stack_paren_levels.take(max_level_paren_stack_paren_levels_paren_length)\n\
    \        val max_level_paren_stack_paren_levels_paren_levels_length = max_level_paren_stack_paren_levels_paren_levels.length\n\
    \        val max_level_paren_stack_paren_levels_paren_levels_paren_length = max_level_paren_stack_paren_levels_paren_levels_length\
    \ - 1\n        val max_level_paren_stack_paren_levels_paren_levels_paren_levels\
    \ = max_level_paren_stack_paren_levels_paren_levels.take(max_level_paren_stack_paren_levels_paren_levels_paren_length)\n\
    \        val max_level_paren_stack_paren_levels_paren_levels_paren_levels_length\
    \ = max_level_paren_stack_paren_levels_paren_levels_paren_levels.length\n    \
    \    val max_level_paren_stack_paren_levels_paren_levels_paren_levels_paren_length\
    \ = max_level_paren_stack_paren_levels_paren_levels_paren_levels_length - 1\n\
    \        val max_level_paren_stack_paren_levels_paren_levels_paren_levels_paren_levels\
    \ = max_level_paren_stack_paren_levels_paren_levels_paren_levels_paren_levels.take(max_level_paren_stack_paren_levels_paren_levels_paren_levels_paren_length)\n\
    \        val max_level_paren\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz566ht_u.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz566ht_u.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpz566ht_u.scala:11:27 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz566ht_u.scala:13:38 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mparen_level\e[0m = x.count(\e\
    [31m'('\e[0m) - x.count(\e[31m')'\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                       ^^^\e[0m\n\e[31m   |\e[0m                            \
    \          Found:    (\e[31m'('\e[0m : Char)\n\e[31m   |\e[0m                \
    \                      Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpz566ht_u.scala:13:53 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mparen_level\e[0m = x.count(\e\
    [31m'('\e[0m) - x.count(\e[31m')'\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                                      ^^^\e[0m\n\e[31m   |\e[0m             \
    \                                  Found:    (\e[31m')'\e[0m : Char)\n\e[31m \
    \  |\e[0m                                               Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-expla"
  stdout: ''
  timestamp: 1659798131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.Map[String, List[Long]]()\n        val paren_stack_map_keys = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values = mutable.Map[Long, Long]()\n  \
    \      val paren_stack_map_values_keys = mutable.Map[Long, Long]()\n        val\
    \ paren_stack_map_values_values_keys = mutable.Map[Long, Long]()\n        val\
    \ paren_stack_map_values_values_values = mutable.Map[Long, Long]()\n        val\
    \ paren_stack_map_values_values_values_keys = mutable.Map[Long, Long]()\n    \
    \    val paren_stack_map_values_values_values_values = mutable.Map[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf9yeq70m.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf9yeq70m.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_values_keys\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpf9yeq70m.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_values_values\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf9yeq70m.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_chars = paren_string.split(\" \").map(_.toChar)\n     \
    \   val paren_chars_count = paren_chars.map(_.length).sum\n        val paren_chars_count_with_paren\
    \ = paren_chars_count + 1\n        val paren_chars_count_with_paren_plus_one =\
    \ paren_chars_count_with_paren + 1\n        val paren_chars_count_with_paren_plus_two\
    \ = paren_chars_count_with_paren_plus_one + 1\n        val paren_chars_count_with_paren_plus_three\
    \ = paren_chars_count_with_paren_plus_two + 1\n        val paren_chars_count_with_paren_plus_four\
    \ = paren_chars_count_with_paren_plus_three + 1\n        val paren_chars_count_with_paren_plus_five\
    \ = paren_chars_count_with_paren_plus_four + 1\n        val paren_chars_count_with_paren_plus_six\
    \ = paren_chars_count_with_paren_plus_five + 1\n        val paren_chars_count_with_paren_plus_seven\
    \ = paren_chars_count_with_paren_plus_six + 1\n        val paren_chars_count_with_paren_plus_eight\
    \ = paren_chars_count_with_paren_plus_seven + 1\n        val paren_chars_count_with_paren_plus_nine\
    \ = paren_chars_count_with_paren_plus_eight + 1\n        val paren_chars_count_with_paren_plus_ten\
    \ = paren_chars_count_with_paren_plus_nine + 1\n        val paren_chars_count_with_paren_plus_eleven\
    \ = paren_chars_count_with_paren_plus_ten + 1\n        val paren_chars_count_with_paren_plus_twelve\
    \ = paren_chars_count_with_paren_plus_eleven + 1\n        val paren_chars_count_with_paren_plus_thirteen\
    \ = paren_chars_count_with_paren_plus_twelve + 1\n        val paren_chars_count_with_paren_plus_fourteen\
    \ = paren_chars_count_with_paren_plus_thirteen + 1\n        val paren_chars_count_with_paren_plus_fifteen\
    \ = paren_chars_count_with_paren_plus_fourteen + 1\n        val paren_chars_count_with_paren_plus_sixteen\
    \ = paren_chars_count_with_paren_plus_fifteen + 1\n        val paren_chars_count_with_paren_plus_seventeen\
    \ = paren_chars_count_with_paren_plus_sixteen + 1\n        val paren_chars_count_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgqe5rv1t.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgqe5rv1t.scala:10:56\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars\e[0m = paren_string.split(\e[31m\" \"\e[0m).map(_.toChar)\n\e\
    [31m\e[31m   |\e[0m                                                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmpgqe5rv1t.scala:10:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgqe5rv1t.scala:31:5 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_chars = paren_string.split(\" \").map(_.toChar)\n     \
    \   val paren_chars_count = paren_chars.map(c => if (c == '(') 1 else 0).sum\n\
    \        val paren_chars_count_max = paren_chars.map(c => if (c == '(') 1 else\
    \ 0).max\n        val paren_chars_count_min = paren_chars.map(c => if (c == '(')\
    \ 1 else 0).min\n        val paren_chars_count_range = paren_chars_count_max -\
    \ paren_chars_count_min\n        val paren_chars_count_range_max = paren_chars_count_range\
    \ * 2\n        val paren_chars_count_range_min = paren_chars_count_range * 3\n\
    \        val paren_chars_count_range_max = paren_chars_count_range_max + 1\n \
    \       val paren_chars_count_range_min = paren_chars_count_range_min - 1\n  \
    \      val paren_chars_count_range_min = paren_chars_count_range_min - 1\n   \
    \     val paren_chars_count_range_max = paren_chars_count_range_max + 1\n    \
    \    val paren_chars_count_range_min = paren_chars_count_range_min - 1\n     \
    \   val paren_chars_count_range_max = paren_chars_count_range_max + 1\n      \
    \  val paren_chars_count_range_min = paren_chars_count_range_min - 1\n       \
    \ val paren_chars_count_range_max = paren_chars_count_range_max + 1\n        val\
    \ paren_chars_count_range_min = paren_chars_count_range_min - 1\n        val paren_chars_count_range_max\
    \ = paren_chars_count_range_max + 1\n        val paren_chars_count_range_min =\
    \ paren_chars_count_range_min - 1\n        val paren_chars_count_range_max = paren_chars_count_range_max\
    \ + 1\n        val paren_chars_count_range_min = paren_chars_count_range_min -\
    \ 1\n        val paren_chars_count_range_max = paren_chars_count_range_max + 1\n\
    \        val paren_chars_count_range_min = paren_chars_count_range_min - 1\n \
    \       val paren_chars_count_range_max = paren_chars_count_range_max + 1\n  \
    \      val paren_chars_count_range_min = paren_chars_count_range_min - 1\n   \
    \     val paren_chars_count_range_max = paren_chars_count_range_max + 1\n    \
    \    val paren_chars_count_range_min = paren_chars_count_range_min - 1\n     \
    \   val paren_char\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuumiqbs1.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuumiqbs1.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_chars_count_range_max\e[0m = paren_chars_count_range_max + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_chars_count_range_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_chars_count_range_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuumiqbs1.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_count_range_min\e\
    [0m = paren_chars_count_range_min - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mparen_chars_count_range_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_chars_count_range_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuumiqbs1.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_count_range_min\e\
    [0m = paren_chars_count_range_min - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mparen_chars_count_range_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_chars_count_range_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuumiqbs1.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_count_range_max\e\
    [0m = paren_chars_count_range_max + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659798131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index_size = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Long]()\n        val paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptblhkjhv.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptblhkjhv.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptblhkjhv.scala:11:31 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptblhkjhv.scala:12:30 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptblhkjhv.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptblhkjhv.scala:14:36 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_top_count\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                "
  stdout: ''
  timestamp: 1659798115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_list_string = paren_string.trim\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\s+\", \" \")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\(|\\\\)\", \"\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\)\\\\)\", \"\\\\)\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\(|\\\\)\", \"\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\)\\\\)\", \"\\\\)\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\(|\\\\)\", \"\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\)\\\\)\", \"\\\\)\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\(|\\\\)\", \"\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\)\\\\)\", \"\\\\)\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\(|\\\\)\", \"\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\)\\\\)\", \"\\\\)\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\(|\\\\)\", \"\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\)\\\\)\", \"\\\\)\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\(|\\\\)\", \"\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\)\\\\)\", \"\\\\)\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\(|\\\\)\", \"\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\)\\\\)\", \"\\\\)\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\(|\\\\)\", \"\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\)\\\\)\", \"\\\\)\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\(|\\\\)\", \"\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\)\\\\)\", \"\\\\)\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\(|\\\\)\", \"\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\)\\\\)\", \"\\\\)\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\(|\\\\)\", \"\")\n        val paren_list_string\
    \ = paren_list_string.replaceAll(\"\\\\)\\\\)\", \"\\\\)\")\n        val paren\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv2ne0ot0.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv2ne0ot0.scala:11:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_list_string\e[0m = paren_list_string.replaceAll(\e[31m\"\\\\s+\"\
    \e[0m, \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_list_string is already defined as \e[33mvalue\e[0m \e\
    [35mparen_list_string\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpv2ne0ot0.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_list_string\e[0m =\
    \ paren_list_string.replaceAll(\e[31m\"\\\\(|\\\\)\"\e[0m, \e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_list_string is already defined as \e[33mvalue\e[0m \e\
    [35mparen_list_string\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpv2ne0ot0.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_list_string\e[0m =\
    \ paren_list_string.replaceAll(\e[31m\"\\\\)\\\\)\"\e[0m, \e[31m\"\\\\)\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_list_string is already defined as \e[33mvalue\e[0m \e\
    [35mparen_list_string\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpv2ne0ot0.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_list_string\e[0m =\
    \ paren_list_string.replaceAll(\e[31m\"\\\\(|\\\\)\"\e[0m, \e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^"
  stdout: ''
  timestamp: 1659798130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_chars = paren_string.chars\n        val paren_chars_size\
    \ = paren_chars.length\n        val paren_chars_map = paren_chars.groupBy(c =>\
    \ c).mapValues(_.length)\n        val paren_chars_map_sorted = paren_chars_map.toSeq.sortBy(_._2)\n\
    \        val paren_chars_map_sorted_reversed = paren_chars_map_sorted.reverse\n\
    \        val paren_chars_map_sorted_reversed_size = paren_chars_map_sorted_reversed.length\n\
    \        val paren_chars_map_sorted_reversed_map = paren_chars_map_sorted_reversed.mapValues(_.length)\n\
    \        val paren_chars_map_sorted_reversed_map_sorted = paren_chars_map_sorted_reversed_map.toSeq.sortBy(_._2)\n\
    \        val paren_chars_map_sorted_reversed_map_sorted_reversed = paren_chars_map_sorted_reversed_map_sorted.reverse\n\
    \        val paren_chars_map_sorted_reversed_map_sorted_reversed_size = paren_chars_map_sorted_reversed_map_sorted_reversed.length\n\
    \        val paren_chars_map_sorted_reversed_map_sorted_reversed_map = paren_chars_map_sorted_reversed_map_sorted_reversed.mapValues(_.length)\n\
    \        val paren_chars_map_sorted_reversed_map_sorted_reversed_map_sorted =\
    \ paren_chars_map_sorted_reversed_map_sorted_reversed_map.toSeq.sortBy(_._2)\n\
    \        val paren_chars_map_sorted_reversed_map_sorted_reversed_map_sorted_reversed\
    \ = paren_chars_map_sorted_reversed_map_sorted_reversed_map_sorted_reversed.reverse\n\
    \        val paren_chars_map_sorted_reversed_map_sorted_reversed_map_sorted_reversed_size\
    \ = paren_chars_map_sorted_reversed_map_sorted_reversed_map_sorted_reversed_map.length\n\
    \        val paren_chars_map_sorted_reversed_map_sorted_reversed_map_sorted_reversed_map\
    \ = paren_chars_map_sorted_reversed_map_sorted_reversed_map_sorted_reversed_map.mapValues(_.length)\n\
    \        val paren_chars_map_sorted_reversed_map_sorted_reversed_map_sorted_reversed_map_sorted\
    \ = paren_chars_map_sorted_reversed_map_sorted_reversed_map_sorted_reversed_map.toSeq.sortBy(_._2)\n\
    \        val paren_chars_map_sorted_reversed_map_sorted_reversed_map_sorted_reversed_map_sorted_reversed\
    \ = paren_chars_map_sorted_reversed_map_sorted_reversed_map_sorted_reversed_map_sorted_reversed_map.reverse\n\
    \        val paren_chars_map_sorted_reversed_map_sorted_reversed_\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoupkhe5k.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoupkhe5k.scala:11:43\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars_size\e[0m = paren_chars.length\n\e[31m\e[31m   |\e[0m        \
    \                       ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \ value length is not a member of java.util.stream.IntStream\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpoupkhe5k.scala:12:42 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_map\e[0m = paren_chars.groupBy(\e\
    [36mc\e[0m => c).mapValues(_.length)\n\e[31m\e[31m   |\e[0m                  \
    \            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value groupBy\
    \ is not a member of java.util.stream.IntStream\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpoupkhe5k.scala:22:86 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_map_sorted_reversed_map_sorted_reversed_map_sorted_reversed\e\
    [0m = paren_chars_map_sorted_reversed_map_sorted_reversed_map_sorted_reversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mparen_chars_map_sorted_reversed_map_sorted_reversed_map_sorted_reversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpoupkhe5k.scala:24:90\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_chars_map_sorted_reversed_map_sorted_reversed_map_sorted_reversed_map\e\
    [0m = paren_chars_map_sorted_reversed_map_sorted_reversed_map_sorted_reversed_map.mapValues(_.length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_chars_map_sorted_reversed"
  stdout: ''
  timestamp: 1659798130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_size\
    \ = paren_groups.length\n        val paren_groups_map = mutable.HashMap[String,\
    \ Long]()\n        var paren_groups_max_level = 0\n        var paren_groups_max_level_paren_groups\
    \ = List[String]()\n        for (i <- 0 until paren_groups_size) {\n         \
    \   val paren_group = paren_groups(i)\n            val paren_group_size = paren_group.length\n\
    \            val paren_group_map = mutable.HashMap[String, Long]()\n         \
    \   var paren_group_max_level = 0\n            var paren_group_max_level_paren_groups\
    \ = List[String]()\n            for (j <- 0 until paren_group_size) {\n      \
    \          val paren_group_char = paren_group(j)\n                val paren_group_char_map\
    \ = mutable.HashMap[String, Long]()\n                val paren_group_char_map_size\
    \ = paren_group_char.length\n                for (k <- 0 until paren_group_char_map_size)\
    \ {\n                    val paren_group_char_char = paren_group_char(k)\n   \
    \                 val paren_group_char_char_map = mutable.HashMap[String, Long]()\n\
    \                    val paren_group_char_char_map_size = paren_group_char_char.length\n\
    \                    for (l <- 0 until paren_group_char_char_map_size) {\n   \
    \                     val paren_group_char_char_char_map = mutable.HashMap[String,\
    \ Long]()\n                        val paren_group_char_char_char_map_size = paren_group_char_char_char_map.length\n\
    \                        for (m <- 0 until paren_group_char_char_char_map_size)\
    \ {\n                            val paren_group_char_char_char_char_map = mutable.HashMap[String,\
    \ Long]()\n                            val paren_group_char_char_char_map_size\
    \ = paren_group_char_char_char_char_map.length\n                            for\
    \ (n <- 0 until paren_group_char_char_char_map_size) {\n                     \
    \           val paren_group_char_char_char_char_map_size = paren_group_char_char_char_char_map.length\n\
    \                                paren_group_char_char_char_char_map.put(paren_group_char_char_char_char_map_size.toString,\
    \ n.toLong)\n                            }\n                            paren_group_char_char_char_map.put(paren_group_char_char_char_map_size.toString,\
    \ m.toLong)\n                        }\n                        paren_group_char_char_char_map.put(paren_group_char_char_char_map_size.toString,\
    \ l.toLong)\n                    }\n                    paren_group_char_char_map.put(paren_group_char_char_map_size.toString,\
    \ k.toLong)\n                }\n                paren_group_char_map.put(paren_group_char_map_size.toString,\
    \ j.toLong)\n                paren_group_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0libx0zm.scala:55:0 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0libx0zm.scala:12:31\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_map\e[0m = mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0libx0zm.scala:18:34 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mparen_group_map\e[0m\
    \ = mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp0libx0zm.scala:23:43 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mparen_group_char_map\e\
    [0m = mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                         Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp0libx0zm.scala:24:65 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mparen_group_char_map_size\e\
    [0m = paren_group_char.length\n\e[31m\e[31m   |\e[0m                         \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                            value length is not a member of Char\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp0libx0zm.scala:26:48 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    \e[33mval\e[0m \e[36mparen_group_char_char\e\
    [0"
  stdout: ''
  timestamp: 1659798131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_size_array = paren_array_max_size.map(_.toLong).toArray\n\
    \        val paren_array_max_size_array_size = paren_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size = paren_array_max_size_array_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array = paren_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \        val paren_array_max_size_array_max_size_array_size = paren_array_max_size_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size_array_max_size = paren_array_max_size_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array = paren_array_max_size_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_size = paren_array_max_size_array_max_size_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphmnmek_4.scala:13:62 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size_array\e\
    [0m = paren_array_max_size.map(_.toLong).toArray\n\e[31m\e[31m   |\e[0m      \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                        value map is not a member of Int\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmphmnmek_4.scala:18:65 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size_array_max_size_array_max_size\e\
    [0m = paren_array_max_size_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mparen_array_max_size_array_max_size_array_max_size\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphmnmek_4.scala:21:80\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_array_max_size_array_max_size_array_max_size_array_max_size\e[0m\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mparen_array_max_size_array_max_size_array_max_size_array_max_size\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphmnmek_4.scala:24:95\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\e\
    [0m = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e"
  stdout: ''
  timestamp: 1659798132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\"\\\\s+\")\n        val paren_groups_with_parens\
    \ = paren_groups.map(x => x.replaceAll(\"\\\\(\", \"\\\\(\".replaceAll(\"\\\\\
    )\", \"\\\\)\")).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\\\\\
    )\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\\\
    \\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\
    \\\\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\
    \\\\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\
    \\\\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\
    \\\\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\
    \\\\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\
    \\\\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\
    \\\\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\
    \\\\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\
    \\\\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\
    \\\\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\
    \\\\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\
    \\\\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\
    \\\\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\
    \\\\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\
    \\\\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\
    \\\\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\", \"\\\\(\".replaceAll(\"\
    \\\\)\", \"\\\\)(\"))).map(x => x.replaceAll(\"\\\\)(\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2jfvcqsf.scala:12:4 ----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2jfvcqsf.scala:11:124\
    \ -----------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_parens\e[0m = paren_groups.map(\e[36mx\e[0m => x.replaceAll(\e\
    [31m\"\\\\(\"\e[0m, \e[31m\"\\\\(\"\e[0m.replaceAll(\e[31m\"\\\\)\"\e[0m, \e[31m\"\
    \\\\)\"\e[0m)).map(\e[36mx\e[0m => x.replaceAll(\e[31m\"\\\\)(\"\e[0m, \e[31m\"\
    \\\\(\"\e[0m.replaceAll(\e[31m\"\\\\)\"\e[0m, \e[31m\"\\\\)(\"\e[0m))).map(\e\
    [36mx\e[0m => x.replaceAll(\e[31m\"\\\\)(\"\e[0m, \e[31m\"\\\\(\"\e[0m.replaceAll(\e\
    [31m\"\\\\)\"\e[0m, \e[31m\"\\\\)(\"\e[0m))).map(\e[36mx\e[0m => x.replaceAll(\e\
    [31m\"\\\\)(\"\e[0m, \e[31m\"\\\\(\"\e[0m.replaceAll(\e[31m\"\\\\)\"\e[0m, \e\
    [31m\"\\\\)(\"\e[0m))).map(\e[36mx\e[0m => x.replaceAll(\e[31m\"\\\\)(\"\e[0m,\
    \ \e[31m\"\\\\(\"\e[0m.replaceAll(\e[31m\"\\\\)\"\e[0m, \e[31m\"\\\\)(\"\e[0m))).map(\e\
    [36mx\e[0m => x.replaceAll(\e[31m\"\\\\)(\"\e[0m, \e[31m\"\\\\(\"\e[0m.replaceAll(\e\
    [31m\"\\\\)\"\e[0m, \e[31m\"\\\\)(\"\e[0m))).map(\e[36mx\e[0m => x.replaceAll(\e\
    [31m\"\\\\)(\"\e[0m, \e[31m\"\\\\(\"\e[0m.replaceAll(\e[31m\"\\\\)\"\e[0m, \e\
    [31m\"\\\\)(\"\e[0m))).map(\e[36mx\e[0m => x.replaceAll(\e[31m\"\\\\)(\"\e[0m,\
    \ \e[31m\"\\\\(\"\e[0m.replaceAll(\e[31m\"\\\\)\"\e[0m, \e[31m\"\\\\)(\"\e[0m))).map(\e\
    [36mx\e[0m => x.replaceAll(\e[31m\"\\\\)(\"\e[0m, \e[31m\"\\\\(\"\e[0m.replaceAll(\e\
    [31m\"\\\\)\"\e[0m, \e[31m\"\\\\)(\"\e[0m))).map(\e[36mx\e[0m => x.replaceAll(\e\
    [31m\"\\\\)(\"\e[0m, \e[31m\"\\\\(\"\e[0m.replaceAll(\e[31m\"\\\\)\"\e[0m, \e\
    [31m\"\\\\)(\"\e[0m))).map(\e[36mx\e[0m => x.replaceAll(\e[31m\"\\\\)(\"\e[0m,\
    \ \e[31m\"\\\\(\"\e[0m.replaceAll(\e[31m\"\\\\)\"\e[0m, \e[31m\"\\\\)(\"\e[0m))).map(\e\
    [36mx\e[0m => x.replaceAll(\e[31m\"\\\\)(\"\e[0m, \e[31m\"\\\\(\"\e[0m.replaceAll(\e\
    [31m\"\\\\)\"\e[0m, \e[31m\"\\\\)(\"\e[0m))).map(\e[36mx\e[0m => x.replaceAll(\e\
    [31m\"\\\\)(\"\e[0m, \e[31m\"\\\\(\"\e[0m.replaceAll(\e[31m\"\\\\)\"\e[0m, \e\
    [31m\"\\\\)(\"\e[0m))).map(\e[36mx\e[0m => x.replaceAll(\e[31m\"\\\\)(\"\e[0m,\
    \ \e[31m\"\\\\(\"\e[0m.replaceAll(\e[31m\"\\\\)\"\e[0m, \e[31m\"\\\\)(\"\e[0m))).map(\e\
    [36mx\e[0m => x.replaceAll(\e[31m\"\\\\)(\"\e[0m, \e[31m\"\\\\(\"\e[0m.replaceAll(\e\
    [31m\"\\\\)\"\e[0m, \e[31m\"\\\\)(\"\e[0m))).map(\e[36mx\e[0m => x.replaceAll(\e\
    [31m\"\\\\)(\"\e"
  stdout: ''
  timestamp: 1659798132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n\n        paren_string.split(\"\\\\s+\").foreach {\n\
    \            paren =>\n                paren match {\n                    case\
    \ \"(\" =>\n                        paren_stack.push(paren.toLong)\n         \
    \               paren_stack_size.push(paren.toLong)\n                        paren_stack_top.push(paren.toLong)\n\
    \                        paren_stack_top_size.push(paren.toLong)\n           \
    \         case \")\" =>\n                        paren_stack.pop() match {\n \
    \                           case \"\" =>\n                                paren_stack_top_size.pop()\
    \ match {\n                                    case \"\" =>\n                \
    \                        paren_stack_top_size.pop() match {\n                \
    \                            case \"\" =>\n                                  \
    \              paren_stack_top_size.pop() match {\n                          \
    \                          case \"\" =>\n                                    \
    \                    paren_stack_top_size.pop() match {\n                    \
    \                                        case \"\" =>\n                      \
    \                                          paren_stack_top_size.pop() match {\n\
    \                                                                    case \"\"\
    \ =>\n                                                                       \
    \ paren_stack_top_size.pop() match {\n                                       \
    \                                     case \"\" =>\n                         \
    \                                                       paren_stack_top_size.pop()\
    \ match {\n                                                                  \
    \                  case \"\" =>\n                                            \
    \                                            paren_stack_top_size.pop() match\
    \ {\n                                                                        \
    \                    case \"\" =>\n                                          \
    \                                                      paren_stack_top_size.pop()\
    \ match {\n                                                                  \
    \                                  case \"\" =>\n                            \
    \                                                                            paren_stack_top_size.pop()\
    \ match {\n                                                                  \
    \                                          case \"\" =>\n                    \
    \                                                                            \
    \                paren_stack_top_size.pop() match {\n                        \
    \                                                                            \
    \                case \"\" =>\n                                              \
    \                                                                          paren_stack_top_size.pop()\
    \ match {\n                                                                  \
    \                                                          case \"\" =>\n    \
    \                                                                            \
    \                                                paren_stack_top_size.pop() match\
    \ {\n                                                                        \
    \                                                            case \"\" =>\n  \
    \                                                                            \
    \                                                          paren_stack_top_size.pop()\
    \ match {\n                                                                  \
    \                                                                          case\
    \ \"\" =>\n                                                                  \
    \                                                                            \
    \  paren_stack_top_size.pop() match {\n                                      \
    \                                                                            \
    \                                  case \"\" =>\n                            \
    \                                                                            \
    \                                                paren_stack_top_size.pop() match\
    \ {\n                                                                        \
    \                                                                            \
    \        case \"\" =>\n                                                      \
    \                                                                            \
    \                              paren_stack_top_size.pop() match {\n          \
    \                                                                            \
    \                                                                            \
    \  case \"\" =>\n                                                            \
    \                                                                            \
    \                                paren_stack_top_size.pop() match {\n        \
    \                                                                            \
    \                                                                            \
    \            case \"\" =>\n                                                  \
    \                                                                            \
    \                                                  paren_stack_top_size.pop()\
    \ match {\n                                                                  \
    \                                                                            \
    \                                      case \"\" =>\n                        \
    \                                                                            \
    \                                                                            \
    \        paren_stack_top_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpioj6jpl5.scala:74:0 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpioj6jpl5.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_size\e[0m = paren_stack_top_size\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_stack_top_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_size\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpioj6jpl5.scala:10:26 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpioj6jpl5.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpioj6jpl5.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_top\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpioj6jpl5.scala:13:35 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]"
  stdout: ''
  timestamp: 1659798128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_keys = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_values = mutable.Map[Long, Long]()\n  \
    \      val paren_stack_map_values_keys = mutable.Map[Long, Long]()\n        val\
    \ paren_stack_map_values_values = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9jkcuc48.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9jkcuc48.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_values_values_values_values_values_values_values_keys\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_keys\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_map_values_values_values_values_values_values_values_keys\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9jkcuc48.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_values_keys\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp9jkcuc48.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_values_values_values_values_values_values_values_values_values_values_keys\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_list = new mutable.ArrayList[Long]()\n\
    \        var paren_array_index = 0\n        while(paren_array_index < paren_array_size)\
    \ {\n            val paren_array_element = paren_array(paren_array_index)\n  \
    \          val paren_array_element_size = paren_array_element.length\n       \
    \     val paren_array_element_list = new mutable.ArrayList[Long]()\n         \
    \   var paren_array_element_index = 0\n            while(paren_array_element_index\
    \ < paren_array_element_size) {\n                val paren_array_element_element\
    \ = paren_array_element(paren_array_element_index)\n                val paren_array_element_element_size\
    \ = paren_array_element_element.length\n                val paren_array_element_element_list\
    \ = new mutable.ArrayList[Long]()\n                var paren_array_element_element_index\
    \ = 0\n                while(paren_array_element_element_index < paren_array_element_element_size)\
    \ {\n                    val paren_array_element_element_element = paren_array_element_element(paren_array_element_element_index)\n\
    \                    val paren_array_element_element_element_size = paren_array_element_element_element.length\n\
    \                    val paren_array_element_element_element_list = new mutable.ArrayList[Long]()\n\
    \                    var paren_array_element_element_element_index = 0\n     \
    \               while(paren_array_element_element_element_index < paren_array_element_element_element_size)\
    \ {\n                        val paren_array_element_element_element_element =\
    \ paren_array_element_element_element(paren_array_element_element_element_index)\n\
    \                        val paren_array_element_element_element_element_size\
    \ = paren_array_element_element_element_element.length\n                     \
    \   val paren_array_element_element_element_element_list = new mutable.ArrayList[Long]()\n\
    \                        var paren_array_element_element_element_element_index\
    \ = 0\n                        while(paren_array_element_element_element_element_index\
    \ < paren_array_element_element_element_element_size) {\n                    \
    \        val paren_array_element_element_element_element_element = paren_array_element_element_element_element(paren_array_element_element_element_element_index)\n\
    \                            val paren_array_element_element_element_element_element_size\
    \ = paren_array_element_element_element_element_element.length\n             \
    \               val paren_array_element_element_element_element_element_element_list\
    \ = new mutable.ArrayList[Long]()\n                            var paren_array_element_element_element_element_element_element_index\
    \ = 0\n                            while(paren_array_element_element_element_element_element_element_index\
    \ < paren_array_element_element_element_element_element_element_size) {\n    \
    \                            val paren_array_element_element_element_element_element_element_element\
    \ = paren_array_element_element_element_element_element_element(paren_array_element_element_element_element_element_element_element_index)\n\
    \                                val paren_array_element_element_element_element_element_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcqpe_ig2.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcqpe_ig2.scala:50:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m50 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpcqpe_ig2.scala:12:35 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_array_list\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpcqpe_ig2.scala:17:47 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            \e[33mval\e[0m \e[36mparen_array_element_list\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpcqpe_ig2.scala:21:83 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mparen_array_element_element_size\e\
    [0m = paren_array_element_element.length\n\e[31m\e[31m   |\e[0m              \
    \                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Char\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcqpe_ig2.scala:22:59\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e\
    [0m \e[36mparen_array_element_element_list\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \      "
  stdout: ''
  timestamp: 1659798130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_list_string = paren_string.trim\n        val paren_list_string_array\
    \ = paren_list_string.split(\" \")\n        val paren_list_string_array_length\
    \ = paren_list_string_array.length\n        val paren_list_string_array_length_long\
    \ = paren_list_string_array_length.toLong\n        val paren_list_string_array_length_long_inc\
    \ = paren_list_string_array_length_long + 1\n        val paren_list_string_array_length_long_dec\
    \ = paren_list_string_array_length_long - 1\n        val paren_list_string_array_length_long_dec_inc\
    \ = paren_list_string_array_length_long_dec + 1\n        val paren_list_string_array_length_long_dec_inc_inc\
    \ = paren_list_string_array_length_long_dec_inc + 1\n        val paren_list_string_array_length_long_dec_inc_inc_inc\
    \ = paren_list_string_array_length_long_dec_inc_inc + 1\n        val paren_list_string_array_length_long_dec_inc_inc_inc_inc\
    \ = paren_list_string_array_length_long_dec_inc_inc_inc + 1\n        val paren_list_string_array_length_long_dec_inc_inc_inc_inc_inc\
    \ = paren_list_string_array_length_long_dec_inc_inc_inc_inc + 1\n        val paren_list_string_array_length_long_dec_inc_inc_inc_inc_inc_inc\
    \ = paren_list_string_array_length_long_dec_inc_inc_inc_inc_inc + 1\n        val\
    \ paren_list_string_array_length_long_dec_inc_inc_inc_inc_inc_inc_inc = paren_list_string_array_length_long_dec_inc_inc_inc_inc_inc_inc\
    \ + 1\n        val paren_list_string_array_length_long_dec_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = paren_list_string_array_length_long_dec_inc_inc_inc_inc_inc_inc_inc + 1\n\
    \        val paren_list_string_array_length_long_dec_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = paren_list_string_array_length_long_dec_inc_inc_inc_inc_inc_inc_inc_inc +\
    \ 1\n        val paren_list_string_array_length_long_dec_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = paren_list_string_array_length_long_dec_inc_inc_inc_inc_inc_inc_inc\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprdngkbnx.scala:26:5\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_levels\
    \ = mutable.Stack[Int]()\n        paren_stack.push(paren_string)\n        paren_levels.push(paren_stack.length)\n\
    \        val paren_levels_array = paren_levels.toArray\n        val paren_levels_array_length\
    \ = paren_levels_array.length\n        val paren_levels_array_max_index = paren_levels_array_length\
    \ - 1\n        val paren_levels_array_max_value = paren_levels_array(paren_levels_array_max_index)\n\
    \        val paren_levels_array_min_value = paren_levels_array_max_value - paren_levels_array_max_index\n\
    \        val paren_levels_array_min_index = paren_levels_array_min_value\n   \
    \     val paren_levels_array_min_value = paren_levels_array_min_value\n      \
    \  val paren_levels_array_min_value = paren_levels_array_min_value\n        val\
    \ paren_levels_array_max_value = paren_levels_array_max_value\n        val paren_levels_array_max_index\
    \ = paren_levels_array_max_value\n        val paren_levels_array_max_value = paren_levels_array_max_value\n\
    \        val paren_levels_array_max_index = paren_levels_array_max_value\n   \
    \     val paren_levels_array_max_value = paren_levels_array_max_value\n      \
    \  val paren_levels_array_max_index = paren_levels_array_max_value\n        val\
    \ paren_levels_array_max_value = paren_levels_array_max_value\n        val paren_levels_array_max_index\
    \ = paren_levels_array_max_value\n        val paren_levels_array_max_value = paren_levels_array_max_value\n\
    \        val paren_levels_array_max_index = paren_levels_array_max_value\n   \
    \     val paren_levels_array_max_value = paren_levels_array_max_value\n      \
    \  val paren_levels_array_max_index = paren_levels_array_max_value\n        val\
    \ paren_levels_array_max_value = paren_levels_array_max_value\n        val paren_levels_array_max_index\
    \ = paren_levels_array_max_value\n        val paren_levels_array_max_value = paren_levels_array_max_value\n\
    \        val paren_levels_array_max_index = paren_levels_array_max_value\n   \
    \     val paren_levels_array_max_value = paren_levels_array_max_value\n      \
    \  val paren_levels_array_max_index = paren_levels_array_max_value\n        val\
    \ paren_levels_array_max_value = paren_levels_array_max_value\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpayjwe507.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_levels_array_min_value\e\
    [0m = paren_levels_array_min_value\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_levels_array_min_value is already defined as \e[33mvalue\e\
    [0m \e[35mparen_levels_array_min_value\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpayjwe507.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_levels_array_min_value\e\
    [0m = paren_levels_array_min_value\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_levels_array_min_value is already defined as \e[33mvalue\e\
    [0m \e[35mparen_levels_array_min_value\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpayjwe507.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_levels_array_max_value\e\
    [0m = paren_levels_array_max_value\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_levels_array_max_value is already defined as \e[33mvalue\e\
    [0m \e[35mparen_levels_array_max_value\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpayjwe507.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_levels_array_max_index\e\
    [0m = paren_levels_array_max_value\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_levels_array_max_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_levels_array_max_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overl"
  stdout: ''
  timestamp: 1659798132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_counts\
    \ = paren_groups.map(x => x.split(\"(\").map(y => y.split(\")\").map(z => z.length.toLong)).map(x\
    \ => x.reduceLeft((x,y) => if (x < y) x else y))\n        val max_count = paren_groups_with_counts.map(x\
    \ => x.reduceLeft((x,y) => if (x < y) x else y)).max\n        val max_count_with_parens\
    \ = paren_groups_with_counts.map(x => x.reduceLeft((x,y) => if (x < y) x else\
    \ y)).filter(x => x == max_count).map(x => x.toLong)\n        val max_count_with_parens_without_parens\
    \ = max_count_with_parens.filter(x => x != 0)\n        val max_count_with_parens_without_parens_without_parens\
    \ = max_count_with_parens_without_parens.filter(x => x != 0)\n        val max_count_with_parens_without_parens_without_parens_without_parens\
    \ = max_count_with_parens_without_parens_without_parens.filter(x => x != 0)\n\
    \        val max_count_with_parens_without_parens_without_parens_without_parens_without_parens\
    \ = max_count_with_parens_without_parens_without_parens_without_parens.filter(x\
    \ => x != 0)\n        val max_count_with_parens_without_parens_without_parens_without_parens_without_parens_without_parens\
    \ = max_count_with_parens_without_parens_without_parens_without_parens_without_parens.filter(x\
    \ => x != 0)\n        val max_count_with_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens\
    \ = max_count_with_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens.filter(x\
    \ => x != 0)\n        val max_count_with_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens\
    \ = max_count_with_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens.filter(x\
    \ => x != 0)\n        val max_count_with_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens\
    \ = max_count_with_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens.filter(x\
    \ => x != 0)\n        val max_count_with_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfs895y60.scala:12:8 ----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_count\e[0m = paren_groups_with_counts.map(\e\
    [36mx\e[0m => x.reduceLeft((\e[36mx\e[0m,\e[36my\e[0m) => \e[33mif\e[0m (x < y)\
    \ x \e[33melse\e[0m y)).max\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e\
    [0m        ')' expected, but 'val' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfs895y60.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_chars = paren_string.split(\" \").map(_.toChar)\n     \
    \   val paren_chars_count = paren_chars.map(_.length).sum\n        val paren_chars_count_with_paren\
    \ = paren_chars_count + 1\n        val paren_chars_count_with_paren_plus_one =\
    \ paren_chars_count_with_paren + 1\n        val paren_chars_count_with_paren_plus_two\
    \ = paren_chars_count_with_paren_plus_one + 1\n        val paren_chars_count_with_paren_plus_three\
    \ = paren_chars_count_with_paren_plus_two + 1\n        val paren_chars_count_with_paren_plus_four\
    \ = paren_chars_count_with_paren_plus_three + 1\n        val paren_chars_count_with_paren_plus_five\
    \ = paren_chars_count_with_paren_plus_four + 1\n        val paren_chars_count_with_paren_plus_six\
    \ = paren_chars_count_with_paren_plus_five + 1\n        val paren_chars_count_with_paren_plus_seven\
    \ = paren_chars_count_with_paren_plus_six + 1\n        val paren_chars_count_with_paren_plus_eight\
    \ = paren_chars_count_with_paren_plus_seven + 1\n        val paren_chars_count_with_paren_plus_nine\
    \ = paren_chars_count_with_paren_plus_eight + 1\n        val paren_chars_count_with_paren_plus_ten\
    \ = paren_chars_count_with_paren_plus_nine + 1\n        val paren_chars_count_with_paren_plus_eleven\
    \ = paren_chars_count_with_paren_plus_ten + 1\n        val paren_chars_count_with_paren_plus_twelve\
    \ = paren_chars_count_with_paren_plus_eleven + 1\n        val paren_chars_count_with_paren_plus_thirteen\
    \ = paren_chars_count_with_paren_plus_twelve + 1\n        val paren_chars_count_with_paren_plus_fourteen\
    \ = paren_chars_count_with_paren_plus_thirteen + 1\n        val paren_chars_count_with_paren_plus_fifteen\
    \ = paren_chars_count_with_paren_plus_fourteen + 1\n        val paren_chars_count_with_paren_plus_sixteen\
    \ = paren_chars_count_with_paren_plus_fifteen + 1\n        val paren_chars_count_with_paren_plus_seventeen\
    \ = paren_chars_count_with_paren_plus_sixteen + 1\n        val paren_chars_count_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgqe5rv1t.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgqe5rv1t.scala:10:56\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars\e[0m = paren_string.split(\e[31m\" \"\e[0m).map(_.toChar)\n\e\
    [31m\e[31m   |\e[0m                                                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmpgqe5rv1t.scala:10:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgqe5rv1t.scala:31:5 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_list_string = paren_string.trim\n        val paren_list_string_array\
    \ = paren_list_string.split(\" \")\n        val paren_list_string_array_length\
    \ = paren_list_string_array.length\n        val paren_list_string_array_length_long\
    \ = paren_list_string_array_length.toLong\n        val paren_list_string_array_length_long_inc\
    \ = paren_list_string_array_length_long + 1\n        val paren_list_string_array_length_long_dec\
    \ = paren_list_string_array_length_long - 1\n        val paren_list_string_array_length_long_dec_long\
    \ = paren_list_string_array_length_long_dec.toLong\n        val paren_list_string_array_length_long_dec_long_inc\
    \ = paren_list_string_array_length_long_dec_long + 1\n        val paren_list_string_array_length_long_dec_long_inc_long\
    \ = paren_list_string_array_length_long_dec_long_inc.toLong\n        val paren_list_string_array_length_long_dec_long_inc_long_inc\
    \ = paren_list_string_array_length_long_dec_long_inc_long + 1\n        val paren_list_string_array_length_long_dec_long_inc_long_inc_long\
    \ = paren_list_string_array_length_long_dec_long_inc_long_inc.toLong\n       \
    \ val paren_list_string_array_length_long_dec_long_inc_long_inc_long_inc = paren_list_string_array_length_long_dec_long_inc_long_inc_long\
    \ + 1\n        val paren_list_string_array_length_long_dec_long_inc_long_inc_long_inc_long\
    \ = paren_list_string_array_length_long_dec_long_inc_long_inc_long_inc.toLong\n\
    \        val paren_list_string_array_length_long_dec_long_inc_long_inc_long_inc_long_inc\
    \ = paren_list_string_array_length_long_dec_long_inc_long_inc_long_inc_long +\
    \ 1\n        val paren_list_string_array_length_long_dec_long_inc_long_inc_long_inc_long_inc_long\
    \ = paren_list_string_array_length_long_dec_long_inc_long_inc_long_inc_long_inc.toLong\n\
    \        val paren_list_string_array_length_long_dec_long_inc_long_inc_long_inc_long_inc_long_inc\
    \ = paren_list_string_array_length_long_dec_long_inc_long_inc_long_inc_long_inc_long\
    \ + 1\n        val paren_list_string_array_length_long_dec_long_inc_long_inc_long_inc_long_inc_long_inc_long_inc\
    \ = paren_list_string_array_length_long_dec_long\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3x_dhigx.scala:27:5\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_level_groups = mutable.ListBuffer[String]()\n        for\
    \ (paren_group <- paren_groups) {\n            val level_of_nesting = paren_group.count(\"\
    (\") - paren_group.count(\")\")\n            if (level_of_nesting > max_level)\
    \ {\n                max_level = level_of_nesting\n                max_level_groups\
    \ = max_level_groups :+ paren_group\n            }\n        }\n        max_level_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpin9hutkq.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_level_groups\e[0m =\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpin9hutkq.scala:14:53\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e\
    [36mlevel_of_nesting\e[0m = paren_group.count(\e[31m\"(\"\e[0m) - paren_group.count(\e\
    [31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \              ^^^\e[0m\n\e[31m   |\e[0m                                     \
    \          Found:    (\e[32m\"(\"\e[0m : String)\n\e[31m   |\e[0m            \
    \                                   Required: Char => Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpin9hutkq.scala:14:78 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mlevel_of_nesting\e[0m\
    \ = paren_group.count(\e[31m\"(\"\e[0m) - paren_group.count(\e[31m\")\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^^^\e[0m\n\e[31m   |\e[0m                             \
    \                  Found:    (\e[32m\")\"\e[0m : String)\n\e[31m   |\e[0m    \
    \                                           Required: Char => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpin9hutkq.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                max_level = level_of_nesting\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val max_level\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpin9hutkq.scala:17:33 ------------------------"
  stdout: ''
  timestamp: 1659798139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_size\
    \ = paren_groups.length\n        val paren_groups_map = mutable.HashMap[String,\
    \ Long]()\n        val paren_groups_list_size = mutable.ArrayBuffer(0l)\n    \
    \    val paren_groups_list_map = mutable.HashMap[Long, List[Long]]()\n       \
    \ val paren_groups_list_map_size = mutable.ArrayBuffer(0l)\n        val paren_groups_list_map_key\
    \ = mutable.HashMap[Long, Long]()\n        val paren_groups_list_map_key_size\
    \ = mutable.ArrayBuffer(0l)\n        val paren_groups_list_map_value = mutable.HashMap[Long,\
    \ Long]()\n        val paren_groups_list_map_value_size = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_2 = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_3 = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_4 = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_5 = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_6 = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_7 = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_8 = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_9 = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_10 = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_11 = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_12 = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_13 = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_14 = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_15 = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_16 = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_17 = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_18 = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_map_value_key_size_19 = mutable.\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfgcsk60y.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpfgcsk60y.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_map_value_key_size\e[0m\
    \ = mutable.ArrayBuffer(\e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_list_map_value_key_size is already defined as\
    \ \e[33mvalue\e[0m \e[35mparen_groups_list_map_value_key_size\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfgcsk60y.scala:12:31\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_map\e[0m = mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfgcsk60y.scala:13:37 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_size\e\
    [0m = mutable.ArrayBuffer(\e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfgcsk60y.scala:14:36 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_list_map\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mList\e[0m[\e[35mLong\e[0m]]()\n\e[31m\e[31m   |\e[0m    \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling wit"
  stdout: ''
  timestamp: 1659798140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_parens\
    \ = paren_groups.map(x => if (x == \"(\") 1 else 0)\n        val paren_groups_with_parens_sum\
    \ = paren_groups_with_parens.sum\n        val paren_groups_with_parens_count =\
    \ paren_groups_with_parens.count\n        val paren_groups_with_parens_max_count\
    \ = paren_groups_with_parens_count - paren_groups_with_parens_sum\n        val\
    \ paren_groups_with_parens_max_sum = paren_groups_with_parens_sum / paren_groups_with_parens_count\n\
    \        val paren_groups_with_parens_max_index = paren_groups_with_parens_max_sum.indexOfMax\n\
    \        val paren_groups_with_parens_max_value = paren_groups_with_parens_max_sum.max\n\
    \        val paren_groups_with_parens_max_index = paren_groups_with_parens_max_index\
    \ + 1\n        val paren_groups_with_parens_max_parens = paren_groups_with_parens.take(paren_groups_with_parens_max_index)\n\
    \        val paren_groups_with_parens_max_parens_count = paren_groups_with_parens_max_parens.count\n\
    \        val paren_groups_with_parens_max_parens_sum = paren_groups_with_parens_max_parens.sum\n\
    \        val paren_groups_with_parens_max_parens_max_index = paren_groups_with_parens_max_parens_sum.indexOfMax\n\
    \        val paren_groups_with_parens_max_parens_max_value = paren_groups_with_parens_max_parens_sum.max\n\
    \        val paren_groups_with_parens_max_parens_max_index = paren_groups_with_parens_max_parens_max_index\
    \ + 1\n        val paren_groups_with_parens_max_parens_max_parens = paren_groups_with_parens_max_parens.take(paren_groups_with_parens_max_parens_max_index)\n\
    \        val paren_groups_with_parens_max_parens_max_parens_count = paren_groups_with_parens_max_parens_max_parens.count\n\
    \        val paren_groups_with_parens_max_parens_max_parens_sum = paren_groups_with_parens_max_parens_max_parens.sum\n\
    \        val paren_groups_with_parens_max_parens_max_parens_max_index = paren_groups_with_parens_max_parens_max_parens_sum.indexOfMax\n\
    \        val paren_groups_with_parens_max_parens_max_parens_max_value = paren_groups_with_parens_max_parens_max_parens_sum.max\n\
    \        val paren_groups_with_parens_max_parens_max_parens_max_index = paren_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpush79aae.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_max_index\e\
    [0m = paren_groups_with_parens_max_index + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_parens_max_index is already defined as \e\
    [33mvalue\e[0m \e[35mparen_groups_with_parens_max_index\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpush79aae.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_parens_max_parens_max_index\e[0m = paren_groups_with_parens_max_parens_max_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_parens_max_parens_max_index is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_with_parens_max_parens_max_index\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpush79aae.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_max_parens_max_parens_max_index\e\
    [0m = paren_\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_parens_max_parens_max_parens_max_index is\
    \ already defined as \e[33mvalue\e[0m \e[35mparen_groups_with_parens_max_parens_max_parens_max_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpush79aae.scala:14:80 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_max_count\e\
    [0m = paren_groups_with_parens_count - par"
  stdout: ''
  timestamp: 1659798142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_parentheses\
    \ = paren_groups.map(x => if (x.equals(\"(\")) 1 else 0)\n        val paren_groups_with_parentheses_count\
    \ = paren_groups_with_parentheses.sum\n        val paren_groups_with_parentheses_count_with_parentheses\
    \ = paren_groups_with_parentheses_count + paren_groups_with_parentheses.last\n\
    \        val paren_groups_with_parentheses_count_with_parentheses_count = paren_groups_with_parentheses_count_with_parentheses.toLong\n\
    \        val paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses\
    \ = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses.toLong\n\
    \        val paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses\
    \ = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses.toLong\n\
    \        val paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses\
    \ = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses.toLong\n\
    \        val paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses\
    \ = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses.toLong\n\
    \        val paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses\
    \ = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses.toLong\n\
    \        val paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses\
    \ = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses.toLong\n\
    \        val paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses\
    \ = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parenthese\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjzmc34oo.scala:15:90 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parentheses_count_with_parentheses_count_with_parentheses\e\
    [0m = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpjzmc34oo.scala:16:113 --------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses\e\
    [0m = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpjzmc34oo.scala:17:136 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses\e\
    [0m = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m\
    \  pare"
  stdout: ''
  timestamp: 1659798140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Int]()\n       \
    \ val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyeyrd3_c.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyeyrd3_c.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_top_top_top_top_top_top_top_top\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_top_top_top_top_top_top_top_top is already\
    \ defined as \e[33mvalue\e[0m \e[35mparen_stack_top_top_top_top_top_top_top_top_top\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyeyrd3_c.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpyeyrd3_c.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpyeyrd3_c.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1659798139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val paren_groups_with_parens = paren_groups.zipWithIndex.filter(_._2 % 2\
    \ == 0).map(_._1)\n        val paren_groups_with_parens_sorted = paren_groups_with_parens.sortBy(_._2)\n\
    \        val paren_groups_with_parens_sorted_with_parens = paren_groups_with_parens_sorted.zipWithIndex.filter(_._2\
    \ % 2 == 1).map(_._1)\n        val paren_groups_with_parens_sorted_with_parens_sorted\
    \ = paren_groups_with_parens_sorted_with_parens.sortBy(_._2)\n        val paren_groups_with_parens_sorted_with_parens_sorted_with_parens\
    \ = paren_groups_with_parens_sorted_with_parens_sorted.zipWithIndex.filter(_._2\
    \ % 2 == 2).map(_._1)\n        val paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted\
    \ = paren_groups_with_parens_sorted_with_parens_sorted_with_parens.sortBy(_._2)\n\
    \        val paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens\
    \ = paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted.zipWithIndex.filter(_._2\
    \ % 2 == 3).map(_._1)\n        val paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted\
    \ = paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens.sortBy(_._2)\n\
    \        val paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens\
    \ = paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted.zipWithIndex.filter(_._2\
    \ % 2 == 4).map(_._1)\n        val paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted\
    \ = paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens.sortBy(_._2)\n\
    \        val paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens\
    \ = paren_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted.zipWithIndex.filter(_._2\
    \ % 2 == 5).map(_._1)\n        val paren_groups_with_parens_sorted_with_parens_sorted_with_paren\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppjz_9fiz.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppjz_9fiz.scala:12:80\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_parens_sorted\e[0m = paren_groups_with_parens.sortBy(_._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^^^^\e[0m\n\e[31m   |\e[0m                            \
    \            value _2 is not a member of Long\n\e[31m\e[31m-- Error: /tmp/tmppjz_9fiz.scala:12:83\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m12 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_with_parens_sorted\e[0m = paren_groups_with_parens.sortBy(_._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                           ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mBigDecimal\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mclass\e[0m \e[35mArrayOps\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppjz_9fiz.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val max_level = paren_groups.foldLeft(0L) { (max_level, paren_group) =>\n\
    \            val current_level = max_level\n            val new_level = paren_group.foldLeft(0L)\
    \ { (current_level, paren_group) =>\n                val new_level = current_level\
    \ + 1\n                if (paren_group == \"(\") new_level\n                else\
    \ new_level\n            }\n            if (new_level > max_level) max_level else\
    \ new_level\n        }\n        paren_groups.map(_.toLong).take(max_level).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_qhb_7c7.scala:13:40 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mnew_level\e[0m = paren_group.foldLeft(\e\
    [31m0L\e[0m) { (\e[36mcurrent_level\e[0m, \e[36mparen_group\e[0m) =>\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            value foldLeft is not a member of Long\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_qhb_7c7.scala:20:40 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        paren_groups.map(_.toLong).take(max_level).toList\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                        Found:    (max_level : Long)\n\
    \e[31m   |\e[0m                                        Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_levels = mutable.ListBuffer[Long]()\n        for (paren_group\
    \ <- paren_groups) {\n            val paren_group_levels = paren_group.split(\"\
    \\\\(\").map(x => x.split(\"\\\\)\").length)\n            if (paren_group_levels.max\
    \ > max_level) {\n                max_level = paren_group_levels.max\n       \
    \         max_levels += paren_group_levels.max\n            }\n        }\n   \
    \     max_levels.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9gh2a6ce.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp9gh2a6ce.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                max_level = paren_group_levels.max\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Reassignment to val max_level\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\"\\\\s+\")\n        val max_level\
    \ = 0\n        val max_level_groups = mutable.ListBuffer[String]()\n        val\
    \ max_level_group_size = mutable.ListBuffer[Long]()\n        for (paren_group\
    \ <- paren_groups) {\n            val paren_group_level = (paren_group.length()\
    \ - paren_group.indexOf(\"(\")).toLong\n            if (paren_group_level > max_level)\
    \ {\n                max_level = paren_group_level\n                max_level_groups\
    \ = paren_groups\n                max_level_group_size = paren_group_size\n  \
    \          }\n            if (paren_group_level == max_level) {\n            \
    \    max_level_groups += paren_group\n                paren_group_size += paren_group.length()\n\
    \            }\n        }\n        max_level_groups.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmw1i6gv7.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_level_groups\e[0m =\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmw1i6gv7.scala:13:35\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mmax_level_group_size\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpmw1i6gv7.scala:17:28 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                max_level = paren_group_level\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            Found:    (paren_group_level : Long)\n\e[31m  \
    \ |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpmw1i6gv7.scala:18:33 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                max_level_groups = paren_groups\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val max_level_groups\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmw1i6gv7.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                max_level_group_size = paren_group_size\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Not found: paren_group_size\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available wh"
  stdout: ''
  timestamp: 1659798141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_list = mutable.ListBuffer[Long]()\n\
    \        val paren_stack_map_list_size = mutable.ListBuffer[Long]()\n        val\
    \ paren_stack_map_list_size_max = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index2\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index3\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index4\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index5\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index6\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index7\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index8\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index9\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index10\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index11\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index12\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index13\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index14\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index15\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index16\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index17\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index18\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index19\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index20\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index21\
    \ = mutable.ListBuffer[Long]()\n        val paren_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnrcf97ne.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnrcf97ne.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpnrcf97ne.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnrcf97ne.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_list\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpnrcf97ne.scala:13:40 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map_list_size\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                        Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnrcf97ne.scala:14:44\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_map_list_size_max\e[0m = mutable.ListBuffer[\e[35"
  stdout: ''
  timestamp: 1659798093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_depth = mutable.Stack[Long]()\n        val paren_stack_max_size_depth_2\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_depth_3 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_depth_4 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_size_depth_5 = mutable.Stack[Long]()\n        val paren_stack_max_size_depth_6\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_depth_7 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_depth_8 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_size_depth_9 = mutable.Stack[Long]()\n        val paren_stack_max_size_depth_10\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_depth_11 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_depth_12 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_size_depth_13 = mutable.Stack[Long]()\n        val paren_stack_max_size_depth_14\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_depth_15 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_depth_16 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_size_depth_17 = mutable.Stack[Long]()\n        val paren_stack_max_size_depth_18\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_depth_19 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_depth_20 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_size_depth_21 = mutable.Stack[Long]()\n        val paren_stack_max_size_depth_22\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_depth_23 = mutable.Stack[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdyzhis56.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdyzhis56.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdyzhis56.scala:12:32\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_depth\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdyzhis56.scala:13:36 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdyzhis56.scala:14:35 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_max_size\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- "
  stdout: ''
  timestamp: 1659798142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Long]()\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(paren_stack_size.size)\n        val paren_stack_level_limit\
    \ = paren_stack_level_limit.push(\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2qud3r48.scala:35:67 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_limit\e\
    [0m = paren_stack_level_limit.push(\n\e[31m\e[31m   |\e[0m                   \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                  expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2qud3r48.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_level_limit\e[0m = paren_stack_level_limit.push(paren_stack_size.size)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_limit is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_level_limit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2qud3r48.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_limit\e\
    [0m = paren_stack_level_limit.push(paren_stack_size.size)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_limit is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_level_limit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2qud3r48.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_limit\e\
    [0m = paren_stack_level_limit.push(paren_stack_size.size)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_limit is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_level_limit\e[0m\n\e[31m   |\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659798142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_list = mutable.ArrayBuffer.empty[Long]\n\
    \        var paren_array_index = 0\n        while (paren_array_index < paren_array_size)\
    \ {\n            val paren_array_element = paren_array(paren_array_index)\n  \
    \          if (paren_array_element == \"(\") {\n                paren_array_index\
    \ += 1\n                paren_array_list += paren_array_index.toLong\n       \
    \     } else if (paren_array_element == \")\") {\n                paren_array_index\
    \ += 1\n                val paren_array_element_size = paren_array_index.toLong\n\
    \                val paren_array_element_list = paren_array_list.take(paren_array_element_size)\n\
    \                val paren_array_element_list_size = paren_array_element_list.length\n\
    \                if (paren_array_element_list_size == paren_array_element_size)\
    \ {\n                    paren_array_list += paren_array_element_list\n      \
    \          } else {\n                    paren_array_list += paren_array_element_list\n\
    \                    paren_array_list += paren_array_element_list\n          \
    \      }\n            } else {\n                paren_array_index += 1\n     \
    \       }\n        }\n        return paren_array_list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkv5uq8t.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_array_list\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m          \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_levels = mutable.ListBuffer[Long]()\n        for (paren_group\
    \ <- paren_groups) {\n            val paren_group_levels = paren_group.split(\"\
    \\\\(\").map(_.toLong)\n            val paren_group_level = paren_group_levels.max\n\
    \            if (paren_group_level > max_level) {\n                max_level =\
    \ paren_group_level\n                max_levels += paren_group_level\n       \
    \     }\n        }\n        max_levels\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprs18dt3s.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprs18dt3s.scala:17:28 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                max_level = paren_group_level\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            Found:    (paren_group_level : Long)\n\e[31m  \
    \ |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_levels\
    \ = mutable.Stack[Long]()\n        val paren_levels_map = mutable.Map[Long, Long]()\n\
    \        paren_stack.push(paren_string)\n        paren_levels.push(0)\n      \
    \  paren_levels_map.put(0, 0l)\n        while(paren_stack.nonEmpty) {\n      \
    \      val paren_string = paren_stack.pop()\n            val paren_levels_map_value\
    \ = paren_levels_map.getOrElse(paren_levels.last, 0l)\n            val paren_levels_map_value_plus_one\
    \ = paren_levels_map_value + 1\n            val paren_levels_map_value_plus_one_plus_one\
    \ = paren_levels_map_value_plus_one + 1\n            paren_levels_map.put(paren_levels_map_value_plus_one_plus_one,\
    \ paren_levels_map_value_plus_one)\n            val paren_levels_map_value_plus_one_plus_two\
    \ = paren_levels_map_value_plus_one + 2\n            val paren_levels_map_value_plus_two_plus_one\
    \ = paren_levels_map_value_plus_two + 1\n            val paren_levels_map_value_plus_two_plus_two\
    \ = paren_levels_map_value_plus_two + 2\n            val paren_levels_map_value_plus_two_plus_three\
    \ = paren_levels_map_value_plus_two + 3\n            val paren_levels_map_value_plus_three_plus_one\
    \ = paren_levels_map_value_plus_three + 1\n            val paren_levels_map_value_plus_three_plus_two\
    \ = paren_levels_map_value_plus_three + 2\n            val paren_levels_map_value_plus_three_plus_three\
    \ = paren_levels_map_value_plus_three + 3\n            val paren_levels_map_value_plus_three_plus_four\
    \ = paren_levels_map_value_plus_three + 4\n            val paren_levels_map_value_plus_four_plus_one\
    \ = paren_levels_map_value_plus_four + 1\n            val paren_levels_map_value_plus_four_plus_two\
    \ = paren_levels_map_value_plus_four + 2\n            val paren_levels_map_value_plus_four_plus_three\
    \ = paren_levels_map_value_plus_four + 3\n            val paren_levels_map_value_plus_four_plus_four\
    \ = paren_levels_map_value_plus_four + 4\n            val paren_levels_map_value_plus_four_plus_five\
    \ = paren_levels_map_value_plus_four + 5\n            val paren_levels_map_value_plus_five_plus_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaxp0h0xm.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaxp0h0xm.scala:44:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m44 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpaxp0h0xm.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaxp0h0xm.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaxp0h0xm.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_levels_map\e[0m =\
    \ mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m     \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpaxp0h0xm.scala:23:59 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            \e[33mval\e[0m \e[36mparen_levels_map_value_plus_two_plus_one\e\
    [0m = paren_levels_map_value_plus_two + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: paren_levels_map_value_plus_two\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation"
  stdout: ''
  timestamp: 1659798143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_level_groups = List[String]()\n        for (paren_group\
    \ <- paren_groups) {\n            val paren_group_level = getNestingLevel(paren_group)\n\
    \            if (paren_group_level > max_level) {\n                max_level =\
    \ paren_group_level\n                max_level_groups = paren_group\n        \
    \    } else if (paren_group_level == max_level) {\n                max_level_groups\
    \ = max_level_groups ::: List(paren_group)\n            }\n        }\n       \
    \ val max_level_group_list = max_level_groups.toList\n        val max_level_group_list_length\
    \ = max_level_group_list.length\n        val max_level_group_index = max_level_group_list.indexOf(0)\n\
    \        val max_level_group_length = max_level_group_list[max_level_group_index].length\n\
    \        val max_level_group_list_with_max_level = max_level_group_list.take(max_level_group_index\
    \ + 1)\n        val max_level_group_list_with_max_level_length = max_level_group_list_with_max_level.length\n\
    \        val max_level_group_list_with_max_level_length = max_level_group_list_with_max_level_length\
    \ + 1\n        val max_level_group_list_with_max_level_length = max_level_group_list_with_max_level_length\
    \ + 1\n        val max_level_group_list_with_max_level_length = max_level_group_list_with_max_level_length\
    \ + 1\n        val max_level_group_list_with_max_level_length = max_level_group_list_with_max_level_length\
    \ + 1\n        val max_level_group_list_with_max_level_length = max_level_group_list_with_max_level_length\
    \ + 1\n        val max_level_group_list_with_max_level_length = max_level_group_list_with_max_level_length\
    \ + 1\n        val max_level_group_list_with_max_level_length = max_level_group_list_with_max_level_length\
    \ + 1\n        val max_level_group_list_with_max_level_length = max_level_group_list_with_max_level_length\
    \ + 1\n        val max_level_group_list_with_max_level_length = max_level_group_list_with_max_level_length\
    \ + 1\n        val max_level_group_list_with_max_level_length = max_level_group_list_with_max_level_length\
    \ + 1\n        val max_level_group_list_with_max_level_length = max_level_group_list_with_max_level_length\
    \ + 1\n        val max_level_group_list_with_max_level_length = max_level_group_list_with_max_level_length\
    \ + 1\n        val max_level_group_list_with_max_level_length = max_level_group_list_with_max_level_length\
    \ + 1\n        val max_level_group_list_with_max_level_length = max_level_group_list_with_max_level_length\
    \ + 1\n        val max_level_group_list_with_max_level_length = max_level_group_list_with_max_level_length\
    \ + 1\n        val max_level_group_list_with_max_level_length = \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpv715etqq.scala:43:56 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmax_level_group_list_with_max_level_length\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \        ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv715etqq.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax_level_group_list_with_max_level_length\e\
    [0m = max_level_group_list_with_max_level_length + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_group_list_with_max_level_length is already defined\
    \ as \e[33mvalue\e[0m \e[35mmax_level_group_list_with_max_level_length\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv715etqq.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax_level_group_list_with_max_level_length\e\
    [0m = max_level_group_list_with_max_level_length + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_group_list_with_max_level_length is already defined\
    \ as \e[33mvalue\e[0m \e[35mmax_level_group_list_with_max_level_length\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv715etqq.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax_level_group_list_with_max_level_length\e\
    [0m = max_level_group_list_with_max_level_length + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_count_size = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv_wqi0s3.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv_wqi0s3.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_count_count_count_count_count_count_count_count_size\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_count_count_count_count_count_count_count_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_count_count_count_count_count_count_count_count_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv_wqi0s3.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_count_count_count_count_count_count_count_count_count\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_count_count_count_count_count_count_count_count\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_count_count_count_count_count_count_count_count_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpv_wqi0s3.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpv_wqi0s3.scala:11:31 ------------------------\e\
    ["
  stdout: ''
  timestamp: 1659798143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_levels\
    \ = mutable.Map[Long, Int]()\n        paren_string.split(\"\\\\s+\").foreach(x\
    \ => {\n            val level = paren_levels.getOrElse(x, 0)\n            paren_levels\
    \ += x -> level\n            paren_stack += level\n        })\n        paren_stack.takeWhile(x\
    \ => paren_stack.nonEmpty).reverse.map(x => paren_levels(x)).toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpugx2_3p5.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpugx2_3p5.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpscoi9hth.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpscoi9hth.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_size\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpscoi9hth.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpscoi9hth.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpscoi9hth.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m"
  stdout: ''
  timestamp: 1659798143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_counts\
    \ = paren_groups.map(x => x.split(\"()\").map(y => y.toLong).map(z => z.length))\n\
    \        val max_count = paren_groups_with_counts.max\n        val max_count_index\
    \ = paren_groups_with_counts.indexOf(max_count)\n        val max_count_group =\
    \ paren_groups(max_count_index)\n        val max_count_group_index = paren_groups.indexOf(max_count_group)\n\
    \        val max_count_group_length = max_count_group.length\n        val max_count_group_length\
    \ = max_count_group_length + 1\n        val max_count_group_length = max_count_group_length\
    \ + 1\n        val max_count_group_length = max_count_group_length + 1\n     \
    \   val max_count_group_length = max_count_group_length + 1\n        val max_count_group_length\
    \ = max_count_group_length + 1\n        val max_count_group_length = max_count_group_length\
    \ + 1\n        val max_count_group_length = max_count_group_length + 1\n     \
    \   val max_count_group_length = max_count_group_length + 1\n        val max_count_group_length\
    \ = max_count_group_length + 1\n        val max_count_group_length = max_count_group_length\
    \ + 1\n        val max_count_group_length = max_count_group_length + 1\n     \
    \   val max_count_group_length = max_count_group_length + 1\n        val max_count_group_length\
    \ = max_count_group_length + 1\n        val max_count_group_length = max_count_group_length\
    \ + 1\n        val max_count_group_length = max_count_group_length + 1\n     \
    \   val max_count_group_length = max_count_group_length + 1\n        val max_count_group_length\
    \ = max_count_group_length + 1\n        val max_count_group_length = max_count_group_length\
    \ + 1\n        val max_count_group_length = max_count_group_length + 1\n     \
    \   val max_count_group_length = max_count_group_length + 1\n        val max_count_group_length\
    \ = max_count_group_length + 1\n        val max_count_group_length = max_count_group_length\
    \ + 1\n        val max_count_group_length = max_count_group_length + 1\n     \
    \   val max_count_group_length = max_count_group_length + 1\n        val max_count_group_length\
    \ = max_count_group_length + 1\n        val max_count_group_length = max_count_group_length\
    \ + 1\n        val max_count_group_length = max_count_group_length + 1\n     \
    \   val max_count_group_length = max_count_group_length + 1\n        val max_count_group_length\
    \ = max_count_group_length + 1\n        val max_count_group_length = max_count_group_length\
    \ + 1\n        val max_count_group_length = max_count_group_length + 1\n     \
    \   val max_count_group_length = max_count_group_length + 1\n        val max_count_group_length\
    \ = max_count_group_length + 1\n        val max_count_group_length = max_count_group_length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptahhyozr.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmax_count_group_length\e\
    [0m = max_count_group_length + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_count_group_length is already defined as \e[33mvalue\e\
    [0m \e[35mmax_count_group_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptahhyozr.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmax_count_group_length\e\
    [0m = max_count_group_length + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_count_group_length is already defined as \e[33mvalue\e\
    [0m \e[35mmax_count_group_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptahhyozr.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmax_count_group_length\e\
    [0m = max_count_group_length + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_count_group_length is already defined as \e[33mvalue\e\
    [0m \e[35mmax_count_group_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptahhyozr.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax_count_group_length\e\
    [0m = max_count_group_length + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_count_group_length is already defined as \e[33mvalue\e\
    [0m \e[35mmax_count_group_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n"
  stdout: ''
  timestamp: 1659798145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpckp_o_t5.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = paren_stack_top_size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpckp_o_t5.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = paren_stack_top_size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpckp_o_t5.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = paren_stack_top_size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpckp_o_t5.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = paren_stack_top_size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpckp_o_t5.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m    "
  stdout: ''
  timestamp: 1659798144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\"\\\\s+\")\n        val paren_groups_size\
    \ = paren_groups.length\n        val paren_groups_map = paren_groups.map(x =>\
    \ x.toLong).toMap\n        val paren_groups_list_size = paren_groups_map.size\n\
    \        val paren_groups_list_map = paren_groups_map.map(x => x._1 -> x._2.toLong).toMap\n\
    \        val paren_groups_list_map_size = paren_groups_list_map.size\n       \
    \ val paren_groups_list_map_max_key = paren_groups_list_map_size.max\n       \
    \ val paren_groups_list_map_max_value = paren_groups_list_map_size.toList.max\n\
    \        val paren_groups_list_map_max_key_value = paren_groups_list_map_max_key\
    \ -> paren_groups_list_map_max_value\n        val paren_groups_list_map_max_key_value_list_size\
    \ = paren_groups_list_map_max_key_value._2.toList.length\n        val paren_groups_list_map_max_key_value_list_max_value\
    \ = paren_groups_list_map_max_key_value._2.toList.max\n        val paren_groups_list_map_max_key_value_list_max_key_value\
    \ = paren_groups_list_map_max_key_value._1 -> paren_groups_list_map_max_key_value_list_max_value\n\
    \        val paren_groups_list_map_max_key_value_list_max_key_value_list_size\
    \ = paren_groups_list_map_max_key_value_list_max_key_value._2.toList.length\n\
    \        val paren_groups_list_map_max_key_value_list_max_key_value_list_max_value\
    \ = paren_groups_list_map_max_key_value_list_max_key_value._2.toList.max\n   \
    \     val paren_groups_list_map_max_key_value_list_max_key_value_list_max_key_value\
    \ = paren_groups_list_map_max_key_value_list_max_key_value._1 -> paren_groups_list_map_max_key_value_list_max_key_value_list_max_value\n\
    \        val paren_groups_list_map_max_key_value_list_max_key_value_list_max_key_value_list_size\
    \ = paren_groups_list_map_max_key_value_list_max_key_value_list_max_key_value._2.toList.length\n\
    \        val paren_groups_list_map_max_key_value_list_max_key_value_list_max_key_value_list_max_value\
    \ = paren_groups_list_map_max_key_value_list_max_key_value_list_max_key_value._2.toList.max\n\
    \        val paren_groups_list_map_max_key_value_list_max_key_value_list_max_key_value_list_max_key_value\
    \ = paren_groups_list_map_max_key_value_list_max_key_value_list_max_key_value._1\
    \ -> paren_groups_list_map_max_key_value_list_max_key_value_list_max_key_value_list_max_value\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpts4kjkiw.scala:12:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_map\e[0m =\
    \ paren_groups.map(\e[36mx\e[0m => x.toLong).toMap\n\e[31m\e[31m   |\e[0m    \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpts4kjkiw.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.HashMap[String, Long]()\n        val paren_stack_map_list = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size = mutable.ArrayBuffer.empty[Long]\n   \
    \     val paren_stack_map_list_size_max = mutable.ArrayBuffer.empty[Long]\n  \
    \      val paren_stack_map_list_size_max_index = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_value = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key = mutable.ArrayBuffer.empty[String]\n\
    \        val paren_stack_map_list_size_max_key_index = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key_value = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key_key_index = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key_key_value = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key_key_key_index = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key_key_key_value = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key_key_key_key_index = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key_key_key_key_value = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key_key_key_key_key_index = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key_key_key_key_key_key_value = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key_key_key_key_key_key_key_index =\
    \ mutable.ArrayBuffer.empty[Long]\n        val paren_stack_map_list_size_max_key_key_key_key_key_key_key_value\
    \ = mutable.ArrayBuffer.empty[Long]\n        val paren_stack_map_list_size_max_key_key_key_key_key_key_key_key_index\
    \ = mutable.ArrayBuffer.empty[Long]\n        val paren_stack_map_list_size_max_key_key_key_key_key_key_key_key_value\
    \ = mutable.ArrayBuffer.empty[Long]\n        val paren_stack_map_list_size_max_key_key_key_key_key_key_key_key_key_index\
    \ = mutable.ArrayBuffer.empty[Long]\n        val paren_stack_map_list_size_max_key_key_key_key_key_key_key_key_key_key_value\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpm6edhh90.scala:33:89 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_list_size_max_key_key_key_key_key_key_key_key_key_key_value\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                           expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm6edhh90.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm6edhh90.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm6edhh90.scala:12:35\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_map_list\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e\
    [31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm6edhh90.scala:13:40 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_list_size\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659798143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_level_groups = List[String]()\n        for (paren_group\
    \ <- paren_groups) {\n            val paren_group_split = paren_group.split(\"\
    \\\\(\")\n            val paren_group_split_size = paren_group_split.length\n\
    \            val paren_group_split_size = paren_group_split_size + 1\n       \
    \     val paren_group_split_size = paren_group_split_size * paren_group_split_size\n\
    \            val paren_group_split_size = paren_group_split_size.toLong\n    \
    \        if (paren_group_split_size > max_level) {\n                max_level\
    \ = paren_group_split_size\n                max_level_groups = paren_group_split\n\
    \            }\n        }\n        val max_level_groups = max_level_groups.reverse\n\
    \        val max_level_group_size = max_level_groups.length\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        val max_level_group_size\
    \ = max_level_group_size * max_level_group_size\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2j0ukpwe.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmax_level_groups\e[0m =\
    \ max_level_groups.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_groups is already defined as \e[33mvalue\e[0m \e\
    [35mmax_level_groups\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2j0ukpwe.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmax_level_group_size\e[0m\
    \ = max_level_group_size * max_level_group_size\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmax_level_group_size is already defined as \e[33mvalue\e[0m \e\
    [35mmax_level_group_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2j0ukpwe.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmax_level_group_size\e[0m\
    \ = max_level_group_size * max_level_group_size\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmax_level_group_size is already defined as \e[33mvalue\e[0m \e\
    [35mmax_level_group_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2j0ukpwe.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmax_level_group_size\e[0m\
    \ = max_level_group_size * max_level_group_size\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmax_level_group_size is already defined as \e[33mvalue\e[0m \e\
    [35mmax_level_group_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of topleve"
  stdout: ''
  timestamp: 1659798145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren_groups\
    \ = paren_groups.map(paren_group => {\n            val paren_group_with_paren_groups\
    \ = paren_group.split(\"(\")\n            val paren_group_with_paren_groups_without_paren_groups\
    \ = paren_group_with_paren_groups.filter(x => x.contains(\")\"))\n           \
    \ val paren_group_with_paren_groups_without_paren_groups_without_paren_groups\
    \ = paren_group_with_paren_groups_without_paren_groups.filter(x => x.contains(\"\
    (\"))\n            val paren_group_with_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups\
    \ = paren_group_with_paren_groups_without_paren_groups_without_paren_groups.filter(x\
    \ => x.contains(\")\"))\n            val paren_group_with_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups\
    \ = paren_group_with_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups.filter(x\
    \ => x.contains(\"(\"))\n            val paren_group_with_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups\
    \ = paren_group_with_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups.filter(x\
    \ => x.contains(\")\"))\n            val paren_group_with_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups\
    \ = paren_group_with_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups.filter(x\
    \ => x.contains(\"(\"))\n            val paren_group_with_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups\
    \ = paren_group_with_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups.filter(x\
    \ => x.contains(\")\"))\n            val paren_group_with_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups\
    \ = paren_group_with_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups.filter(x\
    \ => x.contains(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpt9bg1kmq.scala:20:395 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mparen_group_with_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups\e\
    [0m = paren_group_with_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups.filter(\e\
    [36mx\e[0m => x.contains(\"\n\e[31m\e[31m   |\e[0m                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0m                                                 unclosed string literal\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt9bg1kmq.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpt9bg1kmq.scala:29:0 ----------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt9bg1kmq.scala:28:1 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val paren_groups_with_max_depth = paren_groups.foldLeft(List[Long]()){\n\
    \            (acc, elem) => {\n                val max_depth = acc.foldRight(0)(_\
    \ + _)\n                if (max_depth < elem) elem :: acc\n                else\
    \ acc // max depth is greater than the current element\n            }\n      \
    \  }\n        paren_groups_with_max_depth.map(_.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4v32ht4g.scala:13:49\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                \e[33mval\e[0m\
    \ \e[36mmax_depth\e[0m = acc.foldRight(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e\
    [0m                                                 ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                 Found:    Long\n\e[31m   |\e\
    [0m                                                 Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqt7ptzwf.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqt7ptzwf.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpqt7ptzwf.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqt7ptzwf.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqt7ptzwf.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_top\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31"
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_levels = mutable.ListBuffer[Long]()\n        for (paren_group\
    \ <- paren_groups) {\n            val paren_group_levels = paren_group.split(\"\
    \\\\(\").map(_.length).max\n            if (paren_group_levels > max_level) {\n\
    \                max_level = paren_group_levels\n                max_levels +=\
    \ paren_group_levels\n            }\n        }\n        max_levels\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpen9e6_xm.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpen9e6_xm.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                max_level = paren_group_levels\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val max_level\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_level_groups = mutable.ListBuffer.empty[String]\n     \
    \   for (i <- 0 until paren_groups.length) {\n            val paren_group = paren_groups(i)\n\
    \            if (paren_group.length == 0) continue\n            val paren_group_level\
    \ = (paren_group.length - 1) / 2\n            if (paren_group_level > max_level)\
    \ {\n                max_level = paren_group_level\n                max_level_groups\
    \ = mutable.ListBuffer.empty[String]\n            }\n            if (paren_group_level\
    \ == max_level) {\n                max_level_groups += paren_group\n         \
    \   } else {\n                max_level_groups += paren_group + \" \"\n      \
    \      }\n        }\n        val max_level_group_list = max_level_groups.toList\n\
    \        val max_level_group_string = max_level_group_list.mkString(\" \")\n \
    \       val max_level_group_length = max_level_group_string.length\n        val\
    \ max_level_group_list_length = max_level_group_list.length\n        val max_level_group_list_strings\
    \ = max_level_group_list.map(_.mkString(\"\"))\n        val max_level_group_list_strings_length\
    \ = max_level_group_list_strings.length\n        val max_level_group_list_strings_strings_length\
    \ = max_level_group_list_strings_length * max_level_group_list_strings_length\n\
    \        val max_level_group_list_strings_strings_strings_length = max_level_group_list_strings_strings_length\
    \ * max_level_group_list_strings_strings_length\n        val max_level_group_list_strings_strings_strings_strings_length\
    \ = max_level_group_list_strings_strings_strings_length * max_level_group_list_strings_strings_strings_length\n\
    \        val max_level_group_list_strings_strings_strings_strings_strings_length\
    \ = max_level_group_list_strings_strings_strings_strings_length * max_level_group_list_strings_strings_strings_strings_length\n\
    \        val max_level_group_list_strings_strings_strings_strings_strings_strings_length\
    \ = max_level_group_list_strings_strings_strings_strings_strings_length * max_level_group_list_strings_strings_strings_strings_strings_length\n\
    \        val max_level_group_list_strings_strings_strings_strings_strings_strings_strings_length\
    \ = max_level_group_list_strings_strings_strings_strings_strings_strings_length\
    \ * max_level_group_list_strings_strings_strings_strings_strings_strings_length\n\
    \        val max_level_group_list_strings_strings_strings_strings_strings_strings_strings_strings_length\
    \ = max_level_group_list_strings_strings_strings_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_c19p2h9.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_level_groups\e[0m =\
    \ mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m         \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_c19p2h9.scala:15:41 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m            \e[33mif\e[0m (paren_group.length == \e[31m0\e[0m) continue\n\e\
    [31m\e[31m   |\e[0m                                         ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                         Not found: continue\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp_c19p2h9.scala:18:26 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                max_level = paren_group_level\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val max_level\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_c19p2h9.scala:19:35 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                max_level_groups = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_c19p2h9.scala:39:106\
    \ -----------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mmax_level_group_list_strings_strings_strings_strings_strings_strings_strings_strings_length\e\
    [0m = max_level_group_list_strings_strings_strings_\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\"\\\\s+\")\n        val paren_groups_size\
    \ = paren_groups.length\n        val paren_groups_map = paren_groups.map(x =>\
    \ x.toLong)\n        val paren_groups_map = paren_groups_map.toMap\n        val\
    \ paren_groups_map = paren_groups_map.toList\n        val paren_groups_map = paren_groups_map.toSet\n\
    \        val paren_groups_map = paren_groups_map.toSeq\n        val paren_groups_map\
    \ = paren_groups_map.toIterator\n        val paren_groups_map = paren_groups_map.toStream\n\
    \        val paren_groups_map = paren_groups_map.toBuffer\n        val paren_groups_map\
    \ = paren_groups_map.toList\n        val paren_groups_map = paren_groups_map.toSet\n\
    \        val paren_groups_map = paren_groups_map.toSeq\n        val paren_groups_map\
    \ = paren_groups_map.toIterator\n        val paren_groups_map = paren_groups_map.toStream\n\
    \        val paren_groups_map = paren_groups_map.toBuffer\n        val paren_groups_map\
    \ = paren_groups_map.toList\n        val paren_groups_map = paren_groups_map.toSet\n\
    \        val paren_groups_map = paren_groups_map.toSeq\n        val paren_groups_map\
    \ = paren_groups_map.toIterator\n        val paren_groups_map = paren_groups_map.toStream\n\
    \        val paren_groups_map = paren_groups_map.toBuffer\n        val paren_groups_map\
    \ = paren_groups_map.toList\n        val paren_groups_map = paren_groups_map.toSet\n\
    \        val paren_groups_map = paren_groups_map.toSeq\n        val paren_groups_map\
    \ = paren_groups_map.toIterator\n        val paren_groups_map = paren_groups_map.toStream\n\
    \        val paren_groups_map = paren_groups_map.toBuffer\n        val paren_groups_map\
    \ = paren_groups_map.toList\n        val paren_groups_map = paren_groups_map.toSet\n\
    \        val paren_groups_map = paren_groups_map.toSeq\n        val paren_groups_map\
    \ = paren_groups_map.toIterator\n        val paren_groups_map = paren_groups_map.toStream\n\
    \        val paren_groups_map = paren_groups_map.toBuffer\n        val paren_groups_map\
    \ = paren_groups_map.toList\n        val paren_groups_map = paren_groups_map.toSet\n\
    \        val paren_groups_map = paren_groups_map.toSeq\n        val paren_groups_map\
    \ = paren_groups_map.toIterator\n        val paren_groups_map = paren_groups_map.toStream\n\
    \        val paren\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptxdku4kv.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptxdku4kv.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_map\e[0m = paren_groups_map.toMap\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_groups_map\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_groups_map\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptxdku4kv.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_map\e[0m = paren_groups_map.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_map is already defined as \e[33mvalue\e[0m \e\
    [35mparen_groups_map\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptxdku4kv.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_map\e[0m =\
    \ paren_groups_map.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_map is already defined as \e[33mvalue\e[0m \e\
    [35mparen_groups_map\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptxdku4kv.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_map\e[0m =\
    \ paren_groups_map.toSeq\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_map is already defined as \e[33mvalue\e[0m \e\
    [35mparen_groups_map\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same g"
  stdout: ''
  timestamp: 1659798152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_levels\
    \ = mutable.Stack[Long]()\n        paren_string.split(\"\\\\s+\").foreach(x =>\
    \ {\n            val level = paren_stack.size\n            paren_stack.push(x.toLong)\n\
    \            paren_levels.push(level)\n        })\n        val max_level = paren_levels.pop()\n\
    \        val max_level = max_level.toLong\n        val max_level = max_level +\
    \ 1\n        val paren_levels = paren_levels.reverse\n        val paren_levels_size\
    \ = paren_levels.size\n        val paren_levels_size = paren_levels_size + max_level\n\
    \        val paren_levels_size = paren_levels_size.toLong\n        val paren_levels_size\
    \ = paren_levels_size + max_level\n        val paren_levels_size = paren_levels_size.toLong\n\
    \        val paren_levels_size = paren_levels_size + max_level\n        val paren_levels_size\
    \ = paren_levels_size.toLong\n        val paren_levels_size = paren_levels_size\
    \ + max_level\n        val paren_levels_size = paren_levels_size.toLong\n    \
    \    val paren_levels_size = paren_levels_size + max_level\n        val paren_levels_size\
    \ = paren_levels_size.toLong\n        val paren_levels_size = paren_levels_size\
    \ + max_level\n        val paren_levels_size = paren_levels_size.toLong\n    \
    \    val paren_levels_size = paren_levels_size + max_level\n        val paren_levels_size\
    \ = paren_levels_size.toLong\n        val paren_levels_size = paren_levels_size\
    \ + max_level\n        val paren_levels_size = paren_levels_size.toLong\n    \
    \    val paren_levels_size = paren_levels_size + max_level\n        val paren_levels_size\
    \ = paren_levels_size.toLong\n        val paren_levels_size = paren_levels_size\
    \ + max_level\n        val paren_levels_size = paren_levels_size.toLong\n    \
    \    val paren_levels_size = paren_levels_size + max_level\n        val paren_levels_size\
    \ = paren_levels_size.toLong\n        val paren_levels_size = paren_levels_size\
    \ + max_level\n        val paren_levels_size = paren_levels_size.toLong\n    \
    \    val paren_levels_size = paren_levels_size + max_level\n        val paren_levels_size\
    \ = paren_levels_size.toLong\n        val paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2onsk_wx.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2onsk_wx.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_level\e[0m = max_level.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level is already defined as \e[33mvalue\e[0m \e[35mmax_level\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2onsk_wx.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mmax_level\e[0m = max_level + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mmax_level is already defined as \e[33mvalue\e[0m \e[35mmax_level\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2onsk_wx.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = paren_levels.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mparen_levels is already defined as \e[33mvalue\e[0m \e[35mparen_levels\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2onsk_wx.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_levels_size\e[0m = paren_levels_size\
    \ + max_level\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_levels_size is already defined as \e[33mvalue\e[0m \e\
    [35mparen_levels_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2onsk_wx.s"
  stdout: ''
  timestamp: 1659798153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_levels\
    \ = mutable.Stack[Long]()\n        paren_string.split(\"\\\\s+\").foreach { s\
    \ =>\n            val paren_level = if (paren_stack.nonEmpty) paren_stack.last.length\
    \ else 0\n            paren_stack.push(s)\n            paren_levels.push(paren_level)\n\
    \        }\n        val max_level = paren_levels.max\n        val max_level_paren_stack\
    \ = paren_stack.dropRight(max_level)\n        val max_level_paren_levels = paren_levels.dropRight(max_level)\n\
    \        val max_level_paren_string = max_level_paren_stack.mkString(\" \")\n\
    \        val max_level_paren_level_string = max_level_paren_levels.mkString(\"\
    \ \")\n        val max_level_paren_string_list = max_level_paren_string.split(\"\
    \\\\s+\")\n        val max_level_paren_level_string_list = max_level_paren_level_string.split(\"\
    \\\\s+\")\n        val max_level_paren_string_list = max_level_paren_string_list.dropRight(max_level_paren_string_list.length-1)\n\
    \        val max_level_paren_level_string_list = max_level_paren_level_string_list.dropRight(max_level_paren_level_string_list.length-1)\n\
    \        val max_level_paren_string_list = max_level_paren_string_list.map(_.toLong).toList\n\
    \        val max_level_paren_level_string_list = max_level_paren_level_string_list.map(_.toLong).toList\n\
    \        val max_level_paren_string_list = max_level_paren_string_list.map(_.toLong).toList\n\
    \        val max_level_paren_level_string_list = max_level_paren_level_string_list.map(_.toLong).toList\n\
    \        val max_level_paren_string_list = max_level_paren_string_list.map(_.toLong).toList\n\
    \        val max_level_paren_level_string_list = max_level_paren_level_string_list.map(_.toLong).toList\n\
    \        val max_level_paren_string_list = max_level_paren_string_list.map(_.toLong).toList\n\
    \        val max_level_paren_level_string_list = max_level_paren_level_string_list.map(_.toLong).toList\n\
    \        val max_level_paren_string_list = max_level_paren_string_list.map(_.toLong).toList\n\
    \        val max_level_paren_level_string_list = max_level_paren_level_string_list.map(_.toLong).toList\n\
    \        val max_level_paren_string_list = max_level_paren_string_list.map(_.toLong).toList\n\
    \        val max_level_paren_level_string_list = max_level_paren_level_string_list.map(_.toLong).toList\n\
    \        val max_level_paren_string_list = max_level_paren_string_list.map(_.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7n07sv6r.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7n07sv6r.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_level_paren_string_list\e[0m = max_level_paren_string_list.dropRight(max_level_paren_string_list.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_paren_string_list is already defined as \e[33mvalue\e\
    [0m \e[35mmax_level_paren_string_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7n07sv6r.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmax_level_paren_level_string_list\e\
    [0m = max_level_paren_level_string_list.dropRight(max_level_paren_level_string_list.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_paren_level_string_list is already defined as \e\
    [33mvalue\e[0m \e[35mmax_level_paren_level_string_list\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7n07sv6r.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_level_paren_string_list\e[0m = max_level_paren_string_list.map(_.toLong).toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_paren_string_list is already defined as \e[33mvalue\e\
    [0m \e[35mmax_level_paren_string_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of top"
  stdout: ''
  timestamp: 1659798152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_count\
    \ = paren_groups.length\n        val paren_groups_map = paren_groups.map(x =>\
    \ x.toLong).toMap\n        val paren_groups_count = paren_groups_map.size\n  \
    \      val paren_groups_map = paren_groups.map(x => x.toLong).toMap\n        val\
    \ paren_groups_count = paren_groups_map.size\n        val paren_groups_map = paren_groups.map(x\
    \ => x.toLong).toMap\n        val paren_groups_count = paren_groups_map.size\n\
    \        val paren_groups_map = paren_groups.map(x => x.toLong).toMap\n      \
    \  val paren_groups_count = paren_groups_map.size\n        val paren_groups_map\
    \ = paren_groups.map(x => x.toLong).toMap\n        val paren_groups_count = paren_groups_map.size\n\
    \        val paren_groups_map = paren_groups.map(x => x.toLong).toMap\n      \
    \  val paren_groups_count = paren_groups_map.size\n        val paren_groups_map\
    \ = paren_groups.map(x => x.toLong).toMap\n        val paren_groups_count = paren_groups_map.size\n\
    \        val paren_groups_map = paren_groups.map(x => x.toLong).toMap\n      \
    \  val paren_groups_count = paren_groups_map.size\n        val paren_groups_map\
    \ = paren_groups.map(x => x.toLong).toMap\n        val paren_groups_count = paren_groups_map.size\n\
    \        val paren_groups_map = paren_groups.map(x => x.toLong).toMap\n      \
    \  val paren_groups_count = paren_groups_map.size\n        val paren_groups_map\
    \ = paren_groups.map(x => x.toLong).toMap\n        val paren_groups_count = paren_groups_map.size\n\
    \        val paren_groups_map = paren_groups.map(x => x.toLong).toMap\n      \
    \  val paren_groups_count = paren_groups_map.size\n        val paren_groups_map\
    \ = paren_groups.map(x => x.toLong).toMap\n        val paren_groups_count = paren_groups_map.size\n\
    \        val paren_groups_map = paren_groups.map(x => x.toLong).toMap\n      \
    \  val paren_groups_count = paren_groups_map.size\n        val paren_groups_map\
    \ = paren_groups.map(x => x.toLong).toMap\n        val paren_groups_count = paren_groups_map.size\n\
    \        val paren_groups_map = paren_groups.map(x => x.toLong).toMap\n      \
    \  val paren_groups_count = \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp89_ple9n.scala:43:32 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_count\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp89_ple9n.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_count\e[0m = paren_groups_map.size\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_groups_count\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_groups_count\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp89_ple9n.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_map\e[0m = paren_groups.map(\e\
    [36mx\e[0m => x.toLong).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_map is already defined as \e[33mvalue\e[0m \e\
    [35mparen_groups_map\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp89_ple9n.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_count\e[0m\
    \ = paren_groups_map.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_count is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_groups_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp89_ple9n.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_map\e[0m =\
    \ paren_groups.map(\e[36mx\e[0m"
  stdout: ''
  timestamp: 1659798155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_max = mutable.Stack[Int]()\n\
    \        val paren_stack_max_size = mutable.Stack[Int]()\n        val paren_stack_max_depth\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_size = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_max = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_max_depth_size = mutable.Stack[Int]()\n   \
    \     val paren_stack_max_depth_max_depth_max = mutable.Stack[Int]()\n       \
    \ val paren_stack_max_depth_max_depth_max_size = mutable.Stack[Int]()\n      \
    \  val paren_stack_max_depth_max_depth_max_depth = mutable.Stack[Int]()\n    \
    \    val paren_stack_max_depth_max_depth_max_depth_size = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_size = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_size = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_size = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_size\
    \ = mutable.Stack[Int]\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpamt379z9.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpamt379z9.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpamt379z9.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_max\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpamt379z9.scala:13:35 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_max_size\e[0m = mutable.Stack[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpamt379z9.scala:14:36 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] N"
  stdout: ''
  timestamp: 1659798154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n   \
    \     val paren_groups_with_paren_length = paren_groups_with_paren.map(x => x.length)\n\
    \        val max_paren_groups_with_paren_length = paren_groups_with_paren_length.max\n\
    \        val max_paren_groups_with_paren = paren_groups_with_paren.max\n     \
    \   val max_paren_groups_with_paren_length = max_paren_groups_with_paren.length\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpqy1tzryb.scala:35:11 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpqy1tzryb.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmax_paren_groups_with_paren_length\e\
    [0m = max_paren_groups_with_paren.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_paren_length is already defined as \e\
    [33mvalue\e[0m \e[35mmax_paren_groups_with_paren_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqy1tzryb.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_paren_groups_with_paren_length\e[0m = max_paren_groups_with_paren_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_paren_length is already defined as \e\
    [33mvalue\e[0m \e[35mmax_paren_groups_with_paren_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqy1tzryb.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_paren_groups_with_paren_length\e[0m = max_paren_groups_with_paren_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_paren_length is already defined as \e\
    [33mvalue\e[0m \e[35mmax_paren_groups_with_paren_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] N"
  stdout: ''
  timestamp: 1659798154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps5w4iswy.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps5w4iswy.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_size\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps5w4iswy.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps5w4iswy.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps5w4iswy.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1659798154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_size = mutable.Stack[Long]()\n        val paren_stack_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level = mutable.Stack[Long]()\n   \
    \     val paren_stack_level_level_level_level_size = mutable.Stack[Long]()\n \
    \       val paren_stack_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_level_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp49opss3u.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp49opss3u.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp49opss3u.scala:11:31 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp49opss3u.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp49opss3u.scala:13:37\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_level_size\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp49opss3u.scala:14:38 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_level\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \  "
  stdout: ''
  timestamp: 1659798153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_parens\
    \ = paren_groups.map(x => if (x == \"(\") 1 else 0)\n        val paren_groups_with_parens_sum\
    \ = paren_groups_with_parens.sum\n        val paren_groups_with_parens_count =\
    \ paren_groups_with_parens.count\n        val paren_groups_with_parens_max_count\
    \ = paren_groups_with_parens_count / paren_groups_with_parens_sum\n        val\
    \ paren_groups_with_parens_max_count_index = paren_groups_with_parens_max_count.toInt\n\
    \        val paren_groups_with_parens_max_count_index = paren_groups_with_parens_max_count_index.toLong\n\
    \        val paren_groups_with_parens_max_count_index_plus_one = paren_groups_with_parens_max_count_index\
    \ + 1\n        val paren_groups_with_parens_max_count_index_minus_one = paren_groups_with_parens_max_count_index\
    \ - 1\n        val paren_groups_with_parens_max_count_index_minus_two = paren_groups_with_parens_max_count_index\
    \ - 2\n        val paren_groups_with_parens_max_count_index_minus_three = paren_groups_with_parens_max_count_index\
    \ - 3\n        val paren_groups_with_parens_max_count_index_minus_four = paren_groups_with_parens_max_count_index\
    \ - 4\n        val paren_groups_with_parens_max_count_index_minus_five = paren_groups_with_parens_max_count_index\
    \ - 5\n        val paren_groups_with_parens_max_count_index_minus_six = paren_groups_with_parens_max_count_index\
    \ - 6\n        val paren_groups_with_parens_max_count_index_minus_seven = paren_groups_with_parens_max_count_index\
    \ - 7\n        val paren_groups_with_parens_max_count_index_minus_eight = paren_groups_with_parens_max_count_index\
    \ - 8\n        val paren_groups_with_parens_max_count_index_minus_nine = paren_groups_with_parens_max_count_index\
    \ - 9\n        val paren_groups_with_parens_max_count_index_minus_ten = paren_groups_with_parens_max_count_index\
    \ - 10\n        val paren_groups_with_parens_max_count_index_minus_eleven = paren_groups_with_parens_max_count_index\
    \ - 11\n        val paren_groups_with_parens_max_count_index_minus_twelve = paren_groups_with_parens_max_count_index\
    \ - 12\n        val paren_groups_with_parens_max_count_index_minus_thirteen =\
    \ paren_group\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj0r_6zql.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_max_count_index\e\
    [0m = paren_groups_with_parens_max_count_index.toLong\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_parens_max_count_index is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_with_parens_max_count_index\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpj0r_6zql.scala:14:80 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_max_count\e[0m = paren_groups_with_parens_count\
    \ / paren_groups_with_parens_sum\n\e[31m\e[31m   |\e[0m                      \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue / is not a member of (Int => Boolean) => Int, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpj0r_6zql.scala:30:70 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_max_count_index_minus_thirteen\e\
    [0m = paren_group\n\e[31m\e[31m   |\e[0m                                     \
    \                                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                                        Not found: paren_group\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj0r_6zql.scala:31:5 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long"
  stdout: ''
  timestamp: 1659798156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val max_level = paren_groups.foldLeft(0l) { (max_level, paren_group) => \n\
    \            val max_level_of_group = paren_group.foldLeft(0l) { (max_level_of_group,\
    \ paren_group) => \n                if (paren_group == 0)\n                  \
    \  max_level_of_group\n                else\n                    max_level_of_group\
    \ + paren_group\n            }\n            if (max_level_of_group > max_level)\n\
    \                max_level\n            else\n                max_level_of_group\n\
    \        }\n        val max_level_of_paren_groups = paren_groups.foldLeft(0l)\
    \ { (max_level_of_paren_groups, paren_group) => \n            if (paren_group\
    \ == 0)\n                max_level_of_paren_groups\n            else\n       \
    \         max_level_of_paren_groups + paren_group\n        }\n        val max_level_of_paren_groups_plus_one\
    \ = max_level_of_paren_groups + 1\n        val max_level_of_paren_groups_plus_two\
    \ = max_level_of_paren_groups + 2\n        val max_level_of_paren_groups_plus_three\
    \ = max_level_of_paren_groups + 3\n        val max_level_of_paren_groups_plus_four\
    \ = max_level_of_paren_groups + 4\n        val max_level_of_paren_groups_plus_five\
    \ = max_level_of_paren_groups + 5\n        val max_level_of_paren_groups_plus_six\
    \ = max_level_of_paren_groups + 6\n        val max_level_of_paren_groups_plus_seven\
    \ = max_level_of_paren_groups + 7\n        val max_level_of_paren_groups_plus_eight\
    \ = max_level_of_paren_groups + 8\n        val max_level_of_paren_groups_plus_nine\
    \ = max_level_of_paren_groups + 9\n        val max_level_of_paren_groups_plus_ten\
    \ = max_level_of_paren_groups + 10\n        val max_level_of_paren_groups_plus_eleven\
    \ = max_level_of_paren_groups + 11\n        val max_level_of_paren_groups_plus_twelve\
    \ = max_level_of_paren_groups + 12\n        val max_level_of_paren_groups_plus_thirteen\
    \ = max_level_of_paren_groups + 13\n        val max_level_of_paren_groups_plus_fourteen\
    \ = max_level_of_paren_groups + 14\n        val max_level_of_paren_groups_plus_fifteen\
    \ = max_level_of_paren_groups + 15\n        val max_level_of_paren_groups_plus_sixteen\
    \ = max_level_of_paren_groups + 16\n        val max_level_of_paren_\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprg1v686w.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprg1v686w.scala:12:49\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmax_level_of_group\e[0m = paren_group.foldLeft(\e[31m0l\e[0m) { (\e[36mmax_level_of_group\e\
    [0m, \e[36mparen_group\e[0m) => \n\e[31m\e[31m   |\e[0m                      \
    \               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \               value foldLeft is not a member of Long\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmprg1v686w.scala:46:5 ---------------------\e[0m\e\
    [0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_size\
    \ = paren_groups.size\n        val paren_groups_map = paren_groups.map(x => x.toLong).toMap\n\
    \        val paren_groups_map_size = paren_groups_map.size\n        val paren_groups_map_keys\
    \ = paren_groups_map.keys\n        val paren_groups_map_values = paren_groups_map.values\n\
    \        val paren_groups_map_keys_size = paren_groups_map_keys.size\n       \
    \ val paren_groups_map_values_size = paren_groups_map_values.size\n        val\
    \ paren_groups_map_values_max_size = paren_groups_map_values_size - 1\n      \
    \  val paren_groups_map_values_max_key = paren_groups_map_keys.get(paren_groups_map_values_max_size)\n\
    \        val paren_groups_map_values_max_value = paren_groups_map_values.get(paren_groups_map_values_max_size)\n\
    \        val paren_groups_map_values_max_key_size = paren_groups_map_values_max_key.size\n\
    \        val paren_groups_map_values_max_value_size = paren_groups_map_values_max_value.size\n\
    \        val paren_groups_map_values_max_key_size_plus_1 = paren_groups_map_values_max_key_size\
    \ + 1\n        val paren_groups_map_values_max_value_size_plus_1 = paren_groups_map_values_max_value_size\
    \ + 1\n        val paren_groups_map_values_max_key_plus_1 = paren_groups_map_keys.get(paren_groups_map_values_max_key_plus_1)\n\
    \        val paren_groups_map_values_max_value_plus_1 = paren_groups_map_values.get(paren_groups_map_values_max_value_plus_1)\n\
    \        val paren_groups_map_values_max_key_plus_1_size = paren_groups_map_values_max_key_plus_1.size\n\
    \        val paren_groups_map_values_max_value_plus_1_size = paren_groups_map_values_max_value_plus_1.size\n\
    \        val paren_groups_map_values_max_key_plus_1_plus_1 = paren_groups_map_keys.get(paren_groups_map_values_max_key_plus_1_plus_1)\n\
    \        val paren_groups_map_values_max_value_plus_1_plus_1 = paren_groups_map_values.get(paren_groups_map_values_max_value_plus_1_plus_1)\n\
    \        val paren_groups_map_values_max_key_plus_1_plus_1_size = paren_groups_map_values_max_key_plus_1_plus_1.size\n\
    \        val paren_groups_map_values_max_value_plus_1_plus_1_size = paren_groups_map_values_max_value_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfzf9j220.scala:12:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_map\e[0m =\
    \ paren_groups.map(\e[36mx\e[0m => x.toLong).toMap\n\e[31m\e[31m   |\e[0m    \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzf9j220.scala:32:67\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_map_values_max_value_plus_1_plus_1_size\e[0m = paren_groups_map_values_max_value_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                  Not found: paren_groups_map_values_max_value_\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfzf9j220.scala:33:5 ---------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_counts\
    \ = paren_groups.map(x => x.split(\"(\").map(y => y.split(\")\").map(z => z.length.toLong).max).toList)\n\
    \        val paren_groups_with_max_count = paren_groups_with_counts.max\n    \
    \    val paren_groups_with_max_count_with_parens = paren_groups_with_counts.map(x\
    \ => x.toLong).max\n        val paren_groups_with_max_count_with_parens_without_parens\
    \ = paren_groups_with_max_count_with_parens - 1\n        val paren_groups_with_max_count_with_parens_without_parens_with_parens\
    \ = paren_groups_with_max_count_with_parens - 2\n        val paren_groups_with_max_count_with_parens_without_parens_with_parens_without_parens\
    \ = paren_groups_with_max_count_with_parens - 3\n        val paren_groups_with_max_count_with_parens_without_parens_with_parens_without_parens_without_parens\
    \ = paren_groups_with_max_count_with_parens - 4\n        val paren_groups_with_max_count_with_parens_without_parens_with_parens_without_parens_without_parens_without_parens\
    \ = paren_groups_with_max_count_with_parens - 5\n        val paren_groups_with_max_count_with_parens_without_parens_with_parens_without_parens_without_parens_without_parens_without_parens\
    \ = paren_groups_with_max_count_with_parens - 6\n        val paren_groups_with_max_count_with_parens_without_parens_with_parens_without_parens_without_parens_without_parens_without_parens_without_parens\
    \ = paren_groups_with_max_count_with_parens - 7\n        val paren_groups_with_max_count_with_parens_without_parens_with_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens\
    \ = paren_groups_with_max_count_with_parens - 8\n        val paren_groups_with_max_count_with_parens_without_parens_with_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens\
    \ = paren_groups_with_max_count_with_parens - 9\n        val paren_groups_with_max_count_with_parens_without_parens_with_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens\
    \ = paren_groups_with_max_count_with_parens - 10\n        val paren_groups_with_max_count_with_parens_without_parens_with_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens\
    \ = paren_groups_with_max_count_with_parens - 11\n        val paren_groups_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbv0a53s0.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbv0a53s0.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_max_count_with_parens_without_parens_with_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens\e\
    [0m = paren_groups_with_max_count_with_parens - \e[31m9\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_max_count_with_parens_without_parens_with_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_max_count_with_parens_without_parens_with_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpbv0a53s0.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_max_count_with_parens_without_parens_with_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens_without_parens\e\
    [0m = paren_groups_with_max_count_with_parens - \e[31m11\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_max_count_with_parens_without_parens_with_parens_without_parens_without_parens_without_pare"
  stdout: ''
  timestamp: 1659798156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \").toList\n        val paren_array_size\
    \ = paren_array.size\n        val paren_array_copy = paren_array.clone()\n   \
    \     val paren_array_copy_size = paren_array_copy.size\n        val paren_array_copy_index\
    \ = 0\n        val paren_array_copy_index2 = 0\n        val paren_array_copy_index3\
    \ = 0\n        val paren_array_copy_index4 = 0\n        val paren_array_copy_index5\
    \ = 0\n        val paren_array_copy_index6 = 0\n        val paren_array_copy_index7\
    \ = 0\n        val paren_array_copy_index8 = 0\n        val paren_array_copy_index9\
    \ = 0\n        val paren_array_copy_index10 = 0\n        val paren_array_copy_index11\
    \ = 0\n        val paren_array_copy_index12 = 0\n        val paren_array_copy_index13\
    \ = 0\n        val paren_array_copy_index14 = 0\n        val paren_array_copy_index15\
    \ = 0\n        val paren_array_copy_index16 = 0\n        val paren_array_copy_index17\
    \ = 0\n        val paren_array_copy_index18 = 0\n        val paren_array_copy_index19\
    \ = 0\n        val paren_array_copy_index20 = 0\n        val paren_array_copy_index21\
    \ = 0\n        val paren_array_copy_index22 = 0\n        val paren_array_copy_index23\
    \ = 0\n        val paren_array_copy_index24 = 0\n        val paren_array_copy_index25\
    \ = 0\n        val paren_array_copy_index26 = 0\n        val paren_array_copy_index27\
    \ = 0\n        val paren_array_copy_index28 = 0\n        val paren_array_copy_index29\
    \ = 0\n        val paren_array_copy_index30 = 0\n        val paren_array_copy_index31\
    \ = 0\n        val paren_array_copy_index32 = 0\n        val paren_array_copy_index33\
    \ = 0\n        val paren_array_copy_index34 = 0\n        val paren_array_copy_index35\
    \ = 0\n        val paren_array_copy_index36 = 0\n        val paren_array_copy_index37\
    \ = 0\n        val paren_array_copy_index38 = 0\n        val paren_array_copy_index39\
    \ = 0\n        val paren_array_copy_index40 = 0\n        val paren_array_copy_index41\
    \ = 0\n        val paren_array_copy_index42 = 0\n        val paren_array_copy_index43\
    \ = 0\n        val paren_array_copy_index44 = 0\n        val paren_array_copy_index45\
    \ = 0\n        val paren_array_copy_index46 = 0\n        val paren_array_copy\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9lgf19kg.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp9lgf19kg.scala:12:43\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m12 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_array_copy\e[0m = paren_array.clone()\n\e[31m\e[31m\
    \   |\e[0m                               ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m\e[33mmethod\e[0m \e[35mclone\e[0m in \e[33mclass\e[0m \e[35mObject\e[0m cannot\
    \ be accessed as a member of (paren_array : List[String]) from module class Problem$.\n\
    \e[31m   |\e[0m Access to protected \e[33mmethod\e[0m \e[35mclone\e[0m not permitted\
    \ because prefix type List[String]\n\e[31m   |\e[0m does not conform to \e[33mobject\e\
    [0m \e[35mProblem\e[0m where the access takes place\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp9lgf19kg.scala:61:5 ---------------------\e[0m\e[0m\n\
    \e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_queue\
    \ = mutable.Queue[Long]()\n        paren_string.split(\"\\\\s+\").foreach(x =>\
    \ {\n            val paren_level = paren_stack.size\n            if (paren_level\
    \ == 0) {\n                paren_queue += x.toLong\n            } else {\n   \
    \             val paren_level = paren_stack.last\n                if (paren_level\
    \ < x.toLong) {\n                    paren_stack += x.toLong\n               \
    \ } else {\n                    paren_queue += x.toLong\n                }\n \
    \           }\n        })\n        paren_queue.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp93zkhrl2.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp93zkhrl2.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_level_groups = mutable.ListBuffer[String]()\n        val\
    \ level = 0\n        paren_groups.foreach(x => {\n            val group_level\
    \ = x.count('(') - x.count(')')\n            if (group_level > max_level) {\n\
    \                max_level = group_level\n                max_level_groups = max_level_groups\
    \ :+ x\n            } else if (group_level == max_level) {\n                max_level_groups\
    \ = max_level_groups :+ x\n            }\n        })\n        val max_level_group_list\
    \ = max_level_groups.toList\n        val max_level_group_size = max_level_group_list.length\n\
    \        val max_level_group_list_size = max_level_group_list.length\n       \
    \ val max_level_group_index = max_level_group_list_size - 1\n        val max_level_group_value\
    \ = max_level_group_list.last\n        val max_level_group_list_value = max_level_group_list.last\n\
    \        val max_level_group_list_index = max_level_group_list.lastIndex\n   \
    \     val max_level_group_list_value = max_level_group_list.last\n        val\
    \ max_level_group_list_index = max_level_group_list.lastIndex\n        val max_level_group_list_value\
    \ = max_level_group_list.last\n        val max_level_group_list_index = max_level_group_list.lastIndex\n\
    \        val max_level_group_list_value = max_level_group_list.last\n        val\
    \ max_level_group_list_index = max_level_group_list.lastIndex\n        val max_level_group_list_value\
    \ = max_level_group_list.last\n        val max_level_group_list_index = max_level_group_list.lastIndex\n\
    \        val max_level_group_list_value = max_level_group_list.last\n        val\
    \ max_level_group_list_index = max_level_group_list.lastIndex\n        val max_level_group_list_value\
    \ = max_level_group_list.last\n        val max_level_group_list_index = max_level_group_list.lastIndex\n\
    \        val max_level_group_list_value = max_level_group_list.last\n        val\
    \ max_level_group_list_index = max_level_group_list.lastIndex\n        val max_level_group_list_value\
    \ = max_level_group_list.last\n        val max_level_group_list_index = max_level_group_list.lastIndex\n\
    \        val max_level_group_list_value = max_level_group_list.last\n        val\
    \ max_level_group_list_index = max_level_group_list.lastIndex\n        val max_level_group_list_value\
    \ = max_level_group_list.last\n        val max_level_group_list_index = max_level_group_list.lastIndex\n\
    \        val max_level_group_list_value = max_level_group_list.last\n        val\
    \ max_level_group_list_index = max_level_group_list.lastIndex\n        val max_level_group_list_value\
    \ = max_level_group_list.last\n        val max_level_group_list_index = max_level_group_list.lastIndex\n\
    \        val max_level_group_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5lotzlu6.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5lotzlu6.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_level_group_list_value\e[0m = max_level_group_list.last\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_group_list_value is already defined as \e[33mvalue\e\
    [0m \e[35mmax_level_group_list_value\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5lotzlu6.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmax_level_group_list_index\e\
    [0m = max_level_group_list.lastIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_group_list_index is already defined as \e[33mvalue\e\
    [0m \e[35mmax_level_group_list_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5lotzlu6.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmax_level_group_list_value\e\
    [0m = max_level_group_list.last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_group_list_value is already defined as \e[33mvalue\e\
    [0m \e[35mmax_level_group_list_value\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5lotzlu6.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmax_level_group_list_index\e\
    [0m = max_level_group_list.lastIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n"
  stdout: ''
  timestamp: 1659798157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_copy = paren_array.clone()\n \
    \       val paren_array_copy_size = paren_array_copy.length\n        val paren_array_copy_sorted\
    \ = paren_array_copy.sortWith(_ < _)\n        val paren_array_copy_sorted_size\
    \ = paren_array_copy_sorted.length\n        val paren_array_copy_sorted_sorted\
    \ = paren_array_copy_sorted.sortWith(_ < _)\n        val paren_array_copy_sorted_sorted_size\
    \ = paren_array_copy_sorted_sorted.length\n        val paren_array_copy_sorted_sorted_sorted\
    \ = paren_array_copy_sorted_sorted.sortWith(_ < _)\n        val paren_array_copy_sorted_sorted_sorted_size\
    \ = paren_array_copy_sorted_sorted_sorted.length\n        val paren_array_copy_sorted_sorted_sorted_sorted\
    \ = paren_array_copy_sorted_sorted_sorted.sortWith(_ < _)\n        val paren_array_copy_sorted_sorted_sorted_sorted_size\
    \ = paren_array_copy_sorted_sorted_sorted_sorted.length\n        val paren_array_copy_sorted_sorted_sorted_sorted_sorted\
    \ = paren_array_copy_sorted_sorted_sorted_sorted.sortWith(_ < _)\n        val\
    \ paren_array_copy_sorted_sorted_sorted_sorted_sorted_size = paren_array_copy_sorted_sorted_sorted_sorted_sorted.length\n\
    \        val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted = paren_array_copy_sorted_sorted_sorted_sorted_sorted.sortWith(_\
    \ < _)\n        val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_size\
    \ = paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted.length\n      \
    \  val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted = paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_\
    \ < _)\n        val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_size\
    \ = paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted.length\n\
    \        val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_\
    \ < _)\n        val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_size\
    \ = paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.length\n\
    \        val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_\
    \ < _)\n        val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_size\
    \ = paren_array_copy_sorted_sorted_sorted_sorted_sorted_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdz3pbk3w.scala:28:87 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\e\
    [0m = paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                                                \
    \                                       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mparen_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdz3pbk3w.scala:29:99\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_size\e\
    [0m = paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdz3pbk3w.scala:30:101\
    \ -----------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\e\
    [0m = paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                                                \
    \                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compili"
  stdout: ''
  timestamp: 1659798155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_counter\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_list = mutable.Stack[Long]()\n\
    \        val paren_stack_counter_list2 = mutable.Stack[Long]()\n        val paren_stack_counter_list3\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_list4 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter_list5 = mutable.Stack[Long]()\n        val paren_stack_counter_list6\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_list7 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter_list8 = mutable.Stack[Long]()\n        val paren_stack_counter_list9\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_list10 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter_list11 = mutable.Stack[Long]()\n        val paren_stack_counter_list12\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_list13 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter_list14 = mutable.Stack[Long]()\n        val paren_stack_counter_list15\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_list16 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter_list17 = mutable.Stack[Long]()\n        val paren_stack_counter_list18\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_list19 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter_list20 = mutable.Stack[Long]()\n        val paren_stack_counter_list21\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_list22 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter_list23 = mutable.Stack[Long]()\n        val paren_stack_counter_list24\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_list25 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter_list26 = mutable.Stack[Long]()\n        val paren_stack_counter_list27\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter_list28 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter_list29 = mutable.Stack[Long]()\n        val paren\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpja83vjcx.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpja83vjcx.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpja83vjcx.scala:11:34 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_counter\e[0m = mutable.Stack[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpja83vjcx.scala:12:39 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_counter_list\e\
    [0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpja83vjcx.scala:13:40 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_counter_list2\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                        Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpja83vjcx.scala:14:40\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_counter_list3\e[0m = mutable.Stack[\e[35mLong\e[0"
  stdout: ''
  timestamp: 1659798157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val max_level = paren_groups.foldLeft(0l) { (max_level, group) => if (group\
    \ > max_level) group else max_level }\n        val max_level_groups = paren_groups.filter(_.toLong\
    \ == max_level)\n        val max_level_group_size = max_level_groups.map(_.size).sum\n\
    \        val max_level_group_size_str = max_level_groups.map(_.size).map(_.toString).mkString(\"\
    ,\")\n        val max_level_group_size_long = max_level_groups.map(_.size).map(_.toLong).sum\n\
    \        val max_level_group_size_long_str = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\"\
    ,\")\n        val max_level_group_size_long_str = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\"\
    ,\")\n        val max_level_group_size_long_str = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\"\
    ,\")\n        val max_level_group_size_long_str = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\"\
    ,\")\n        val max_level_group_size_long_str = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\"\
    ,\")\n        val max_level_group_size_long_str = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\"\
    ,\")\n        val max_level_group_size_long_str = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\"\
    ,\")\n        val max_level_group_size_long_str = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\"\
    ,\")\n        val max_level_group_size_long_str = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\"\
    ,\")\n        val max_level_group_size_long_str = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\"\
    ,\")\n        val max_level_group_size_long_str = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\"\
    ,\")\n        val max_level_group_size_long_str = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\"\
    ,\")\n        val max_level_group_size_long_str = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\"\
    ,\")\n        val max_level_group_size_long_str = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\"\
    ,\")\n        val max_level_group_size_long_str = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp58dnm857.scala:30:105 ----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmax_level_group_size_long_str\e\
    [0m = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\"\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                                     unclosed string literal\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp58dnm857.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmax_level_group_size_long_str\e\
    [0m = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\e[31m\",\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_group_size_long_str is already defined as \e[33mvalue\e\
    [0m \e[35mmax_level_group_size_long_str\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp58dnm857.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmax_level_group_size_long_str\e\
    [0m = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\e[31m\",\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_group_size_long_str is already defined as \e[33mvalue\e\
    [0m \e[35mmax_level_group_size_long_str\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp58dnm857.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmax_level_group_size_long_str\e\
    [0m = max_level_groups.map(_.size).map(_.toLong.toString).mkString(\e[31m\",\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798159
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val max_level = paren_groups.foldLeft(0L) { (max_level, group) => if (group\
    \ > max_level) group else max_level }\n        val max_level_groups = paren_groups.map(_.toLong).take(max_level)\n\
    \        val max_level_groups_with_parens = max_level_groups.map(_.toLong).zipWithIndex.filter(_._2\
    \ == max_level).map(_._1)\n        val max_level_groups_with_parens_sorted = max_level_groups_with_parens.sortBy(_._1)\n\
    \        val max_level_groups_with_parens_sorted_with_parens = max_level_groups_with_parens_sorted.map(x\
    \ => if (x._2 == 0) \"(\" + x._1 + \"())\" else x._1 + \")\")\n        val max_level_groups_with_parens_sorted_with_parens_sorted\
    \ = max_level_groups_with_parens_sorted_with_parens.sortBy(_._1)\n        val\
    \ max_level_groups_with_parens_sorted_with_parens_sorted_with_parens = max_level_groups_with_parens_sorted_with_parens_sorted.map(x\
    \ => if (x._2 == 0) \"(\" + x._1 + \"())\" else x._1 + \")\")\n        val max_level_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted\
    \ = max_level_groups_with_parens_sorted_with_parens_sorted_with_parens.sortBy(_._1)\n\
    \        val max_level_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens\
    \ = max_level_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted.map(x\
    \ => if (x._2 == 0) \"(\" + x._1 + \"())\" else x._1 + \")\")\n        val max_level_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted\
    \ = max_level_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens.sortBy(_._1)\n\
    \        val max_level_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens\
    \ = max_level_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted.map(x\
    \ => if (x._2 == 0) \"(\" + x._1 + \"())\" else x._1 + \")\")\n        val max_level_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted\
    \ = max_level_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted.sortBy(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4a8bd6l6.scala:22:245 --------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax_level_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted\e\
    [0m = max_level_groups_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted.sortBy(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4a8bd6l6.scala:12:63 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_level_groups\e[0m =\
    \ paren_groups.map(_.toLong).take(max_level)\n\e[31m\e[31m   |\e[0m          \
    \                                                     ^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                            Found:    (max_level : Long)\n\
    \e[31m   |\e[0m                                            Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4a8bd6l6.scala:14:88 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmax_level_groups_with_parens_sorted\e\
    [0m = max_level_groups_with_parens.sortBy(_._1)\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \   ^^^^\e[0m\n\e[31m   |\e[0m                                        value _1\
    \ is not a member of Long\n\e[31m\e[31m-- Error: /tmp/tmp4a8bd6l6.scala:14:91\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmax_level_groups_with_parens_sorted\e[0m = max_level_groups_with_parens.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m               "
  stdout: ''
  timestamp: 1659798159
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_level_index = 0\n        val paren_groups_with_max_level\
    \ = new mutable.HashMap[String, List[Long]]()\n        for (i <- 0 until paren_groups.length)\
    \ {\n            val paren_group = paren_groups(i)\n            val paren_group_list\
    \ = paren_groups_with_max_level.getOrElse(paren_group, new mutable.ArrayBuffer[Long]())\n\
    \            val paren_group_list_with_max_level = paren_group_list\n        \
    \    val paren_group_list_with_max_level_length = paren_group_list_with_max_level.length\n\
    \            if (paren_group_list_with_max_level_length == max_level) {\n    \
    \            paren_groups_with_max_level.put(paren_group, paren_group_list_with_max_level)\n\
    \            } else {\n                val new_level = paren_group_list_with_max_level_length\
    \ + 1\n                paren_groups_with_max_level.put(paren_group, new mutable.ArrayBuffer[Long]())\n\
    \                paren_groups_with_max_level.get(paren_group).append(new_level)\n\
    \                paren_groups_with_max_level.get(paren_group).append(max_level)\n\
    \                max_level = new_level\n                max_level_index = i\n\
    \            }\n        }\n        val max_level_with_max_level_index = paren_groups_with_max_level.get(paren_groups(max_level_index))\n\
    \        val max_level_with_max_level_length = max_level_with_max_level_index.length\n\
    \        val max_level_with_max_level_max_level_length = max_level_with_max_level_length\n\
    \        if (max_level_with_max_level_length == max_level) {\n            return\
    \ max_level_with_max_level_index\n        } else {\n            val max_level_with_max_level_max_level_length\
    \ = max_level_with_max_level_length\n            val max_level_with_max_level_max_level_max_level_length\
    \ = max_level_with_max_level_max_level_length\n            val max_level_with_max_level_max_level_max_level_max_level_length\
    \ = max_level_with_max_level_max_level_length\n            val max_level_with_max_level_max_level_max_level_max_level_length\
    \ = max_level_with_max_level_max_level_max_level_length\n            val max_level_with_max_level_max_level_max_level_max_level_max_level_length\
    \ = max_level_with_max_level_max_level_max_level_max_level_length\n          \
    \  val max_level_with_max_level_max_level_max_level_max_level_max_level_max_level_length\
    \ = max_level_with_max_level_max_level_max_level_max_level_max_level_length\n\
    \            val max_level_with_max_level_max_level_max_level_max_level_max_level_max_level_length\
    \ = max_level_with_max_level_max_level_max_level_max_level_max_level_length\n\
    \            val max_level_with_max_level_max_level_max_level_max_level_max_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmr8_iqpo.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmr8_iqpo.scala:52:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpmr8_iqpo.scala:13:46 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_max_level\e[0m =\
    \ \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mList\e[0m[\e[35mLong\e\
    [0m]]()\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpmr8_iqpo.scala:26:26 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                max_level = new_level\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \       Reassignment to val max_level\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpmr8_iqpo.scala:27:32 -----------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                max_level_index = i\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val max_level_index\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmr8_iqpo.scala:39:16 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m            \e[33mval\e[0m \e[36mmax_level_with_max_level_max_level_max_level_max_level_length\e\
    [0m = max_level_with_max_level_max_level_max_level_length\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_level_with_max_level_max_level_max_lev"
  stdout: ''
  timestamp: 1659798162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val max_level = 0\n        var max_level_index\
    \ = 0\n        var level = 0\n        var paren_level = 0\n        var paren_level_index\
    \ = 0\n        var paren_level_array = new Array[Long](paren_array_size)\n   \
    \     var paren_level_array_index = 0\n        var paren_level_array_size = 0\n\
    \        var paren_level_array_index = 0\n        var paren_level_array_size =\
    \ 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3zipm7f_.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_array_index\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level_array_index is already defined as \e[33mvariable\e\
    [0m \e[35mparen_level_array_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3zipm7f_.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_array_size\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level_array_size is already defined as \e[33mvariable\e\
    [0m \e[35mparen_level_array_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3zipm7f_.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_array_index\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level_array_index is already defined as \e[33mvariable\e\
    [0m \e[35mparen_level_array_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3zipm7f_.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_array_size\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_level_array_size is already defined as \e[33mvariable\e\
    [0m \e[35mparen_level_array_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3zipm7f_.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mparen_level_array_index\e\
    [0m = \e[31m0\e[0m\n\e"
  stdout: ''
  timestamp: 1659798164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_set = mutable.Set[Long]()\n\
    \        val paren_stack_map_list = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_list_list = mutable.ListBuffer[Long]()\n\
    \        val paren_stack_map_list_list_set = mutable.Set[Long]()\n        val\
    \ paren_stack_map_list_list_list = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_list_list_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_list_list_list_list = mutable.ListBuffer[Long]()\n\
    \        val paren_stack_map_list_list_list_list_set = mutable.Set[Long]()\n \
    \       val paren_stack_map_list_list_list_list_list = mutable.ListBuffer[Long]()\n\
    \        val paren_stack_map_list_list_list_list_list_set = mutable.Set[Long]()\n\
    \        val paren_stack_map_list_list_list_list_list_list = mutable.ListBuffer[Long]()\n\
    \        val paren_stack_map_list_list_list_list_list_list_set = mutable.Set[Long]()\n\
    \        val paren_stack_map_list_list_list_list_list_list_list = mutable.ListBuffer[Long]()\n\
    \        val paren_stack_map_list_list_list_list_list_list_list_set = mutable.Set[Long]()\n\
    \        val paren_stack_map_list_list_list_list_list_list_list_list = mutable.ListBuffer[Long]()\n\
    \        val paren_stack_map_list_list_list_list_list_list_list_list_set = mutable.Set[Long]()\n\
    \        val paren_stack_map_list_list_list_list_list_list_list_list_list = mutable.ListBuffer[Long]()\n\
    \        val paren_stack_map_list_list_list_list_list_list_list_list_list_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_list_list_list_list_list_list_list_list_list_list\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_list_list_list_list_list_list_list_list_list_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_list_list_list_list_list_list_list_list_list_list_list_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_list_list_list_list_list_list_list_list_list_list_list_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1l07yqpq.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1l07yqpq.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_map_list_list_list_list_list_list_list_list_list_list_list_set\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_map_list_list_list_list_list_list_list_list_list_list_list_set\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_map_list_list_list_list_list_list_list_list_list_list_list_set\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp1l07yqpq.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1l07yqpq.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1l07yqpq.scala:12:34\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_map_set\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    ["
  stdout: ''
  timestamp: 1659798163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => if (x == \"(\") 1 else 0)\n        val paren_groups_with_paren_sum\
    \ = paren_groups_with_paren.sum\n        val paren_groups_with_paren_length =\
    \ paren_groups_with_paren_sum.toLong\n        val paren_groups_with_paren_length_sorted\
    \ = paren_groups_with_paren.sortWith(_ < _)\n        val paren_groups_with_paren_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted.length\n        val paren_groups_with_paren_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted.sortWith(_ < _)\n        val paren_groups_with_paren_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted.length\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted.length\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted.length\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.length\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.length\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.length\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc05cxi3x.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\e\
    [0m = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpc05cxi3x.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\e\
    [0m = paren_groups_with_\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpc05cxi3x.scala:18:87 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m  "
  stdout: ''
  timestamp: 1659798165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_counts\
    \ = paren_groups.map(paren_group => {\n            val paren_group_with_counts\
    \ = paren_group.split(\"(\")\n            val paren_group_with_counts_count =\
    \ paren_group_with_counts.length\n            paren_group_with_counts_count.toLong\n\
    \        })\n        val paren_groups_with_counts_sorted = paren_groups_with_counts.sortBy(_)\n\
    \        val paren_groups_with_counts_sorted_with_max_count = paren_groups_with_counts_sorted.takeWhile(_\
    \ < paren_groups_with_counts_sorted.last)\n        val paren_groups_with_counts_sorted_with_max_count_sorted\
    \ = paren_groups_with_counts_sorted_with_max_count.sortBy(_)\n        val paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_sorted.takeWhile(_ < paren_groups_with_counts_sorted_with_max_count.last)\n\
    \        val paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted\
    \ = paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count.sortBy(_)\n\
    \        val paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted.takeWhile(_\
    \ < paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count.last)\n\
    \        val paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted\
    \ = paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count.sortBy(_)\n\
    \        val paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted.takeWhile(_\
    \ < paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count.last)\n\
    \        val paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted\
    \ = paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count.sortBy(_)\n\
    \        val paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted\
    \ = paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi69b_bq7.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi69b_bq7.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted\e\
    [0m = paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted.\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmpi69b_bq7.scala:16:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_counts_sorted\e\
    [0m = paren_groups_with_counts.sortBy(_)\n\e[31m\e[31m   |\e[0m              \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0mNo implicit Ordering defined for Any..\n\e[31m   |\e[0mI found:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[Any].\n\e[31m\e[31m-- [E081] Type\
    \ Error: /tmp/tmpi69b_bq7.scala:18:122 -----------"
  stdout: ''
  timestamp: 1659798166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_max_depth\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_with_max_depth_with_paren_groups\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_with_max_depth_with_paren_groups_with_max_depth\
    \ = mutable.ListBuffer[Long]()\n        for (paren_group <- paren_groups) {\n\
    \            val paren_group_with_max_depth = paren_group.split(\"(\").length\n\
    \            paren_groups_with_max_depth += paren_group_with_max_depth\n     \
    \       if (paren_group.length() > paren_group_with_max_depth) {\n           \
    \     val paren_group_with_max_depth_with_paren_groups = paren_group.split(\"\
    (\").map(x => x.split(\")\").length).max\n                paren_groups_with_max_depth_with_paren_groups\
    \ += paren_group_with_max_depth_with_paren_groups\n                if (paren_group_with_max_depth_with_paren_groups\
    \ > paren_group_with_max_depth) {\n                    val paren_group_with_max_depth_with_paren_groups_with_max_depth\
    \ = paren_group.split(\"(\").map(x => x.split(\")\").map(x => x.split(\")\").length).max\n\
    \                    paren_groups_with_max_depth_with_paren_groups_with_max_depth\
    \ += paren_group_with_max_depth_with_paren_groups_with_max_depth\n           \
    \     }\n            }\n        }\n        paren_groups_with_max_depth.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf45b1zi2.scala:22:143 --------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    paren_groups_with_max_depth_with_paren_groups_with_max_depth\
    \ += paren_group_with_max_depth_with_paren_groups_with_max_depth\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                            ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpf45b1zi2.scala:11:42 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_max_depth\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                                          Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf45b1zi2.scala:12:60\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_max_depth_with_paren_groups\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf45b1zi2.scala:13:75 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_max_depth_with_paren_groups_with_max_depth\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                                                                ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `"
  stdout: ''
  timestamp: 1659798165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_top\
    \ = paren_stack.empty\n        val paren_stack_bottom = paren_stack.empty\n  \
    \      val paren_stack_top = paren_stack.empty\n        val paren_stack_bottom\
    \ = paren_stack.empty\n        val paren_stack_top = paren_stack.empty\n     \
    \   val paren_stack_bottom = paren_stack.empty\n        val paren_stack_top =\
    \ paren_stack.empty\n        val paren_stack_bottom = paren_stack.empty\n    \
    \    val paren_stack_top = paren_stack.empty\n        val paren_stack_bottom =\
    \ paren_stack.empty\n        val paren_stack_top = paren_stack.empty\n       \
    \ val paren_stack_bottom = paren_stack.empty\n        val paren_stack_top = paren_stack.empty\n\
    \        val paren_stack_bottom = paren_stack.empty\n        val paren_stack_top\
    \ = paren_stack.empty\n        val paren_stack_bottom = paren_stack.empty\n  \
    \      val paren_stack_top = paren_stack.empty\n        val paren_stack_bottom\
    \ = paren_stack.empty\n        val paren_stack_top = paren_stack.empty\n     \
    \   val paren_stack_bottom = paren_stack.empty\n        val paren_stack_top =\
    \ paren_stack.empty\n        val paren_stack_bottom = paren_stack.empty\n    \
    \    val paren_stack_top = paren_stack.empty\n        val paren_stack_bottom =\
    \ paren_stack.empty\n        val paren_stack_top = paren_stack.empty\n       \
    \ val paren_stack_bottom = paren_stack.empty\n        val paren_stack_top = paren_stack.empty\n\
    \        val paren_stack_bottom = paren_stack.empty\n        val paren_stack_top\
    \ = paren_stack.empty\n        val paren_stack_bottom = paren_stack.empty\n  \
    \      val paren_stack_top = paren_stack.empty\n        val paren_stack_bottom\
    \ = paren_stack.empty\n        val paren_stack_top = paren_stack.empty\n     \
    \   val paren_stack_bottom = paren_stack.empty\n        val paren_stack_top =\
    \ paren_stack.empty\n        val paren_stack_bottom = paren_stack.empty\n    \
    \    val paren_stack_top = paren_stack.empty\n        val paren_stack_bottom =\
    \ paren_stack.empty\n        val paren_stack_top = paren_stack.empty\n       \
    \ val paren_stack_bottom = paren_stack.empty\n        val paren_stack_top = paren_stack.empty\n\
    \        val paren_stack_bottom = paren_stack.empty\n        val paren_stack_top\
    \ = paren_stack.empty\n        val paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqpx436tq.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqpx436tq.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top\e[0m = paren_stack.empty\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_stack_top\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqpx436tq.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_bottom\e[0m = paren_stack.empty\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_stack_bottom\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_bottom\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqpx436tq.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top\e[0m = paren_stack.empty\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mparen_stack_top is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqpx436tq.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_bottom\e[0m = paren_stack.empty\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_stack_bottom is already defined as \e[33mvalue\e[0m \e[35mparen_stack_bottom\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m"
  stdout: ''
  timestamp: 1659798165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\"\\\\s+\")\n        val paren_groups_with_parens\
    \ = paren_groups.map(x => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n   \
    \     val paren_groups_with_parens_map = paren_groups_with_parens.map(x => x.split(\"\
    \\\\)\"))\n        val paren_groups_with_parens_map_with_parens = paren_groups_with_parens_map.map(x\
    \ => x.map(y => y.replace(\"(\", \"(\").replace(\")\", \")\")))\n        val paren_groups_with_parens_map_with_parens_map\
    \ = paren_groups_with_parens_map_with_parens.map(x => x.map(y => y.map(z => z.split(\"\
    \\\\)\"))))\n        val paren_groups_with_parens_map_with_parens_map_with_parens\
    \ = paren_groups_with_parens_map_with_parens_map.map(x => x.map(y => y.map(z =>\
    \ z.map(w => w.split(\"\\\\)\")))))\n        val paren_groups_with_parens_map_with_parens_map_with_parens_map\
    \ = paren_groups_with_parens_map_with_parens_map_with_parens.map(x => x.map(y\
    \ => y.map(z => z.map(w => w.map(x => x.replace(\"(\", \"(\").replace(\")\", \"\
    )\")))))) \n        val paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens\
    \ = paren_groups_with_parens_map_with_parens_map_with_parens_map.map(x => x.map(y\
    \ => y.map(z => z.map(w => w.map(x => x.replace(\"(\", \"(\").replace(\")\", \"\
    )\")))))) \n        val paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens_map\
    \ = paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens.map(x\
    \ => x.map(y => y.map(z => z.map(w => w.map(x => x.replace(\"(\", \"(\").replace(\"\
    )\", \")\")))))) \n        val paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens_map_with_parens\
    \ = paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens_map.map(x\
    \ => x.map(y => y.map(z => z.map(w => w.map(x => x.replace(\"(\", \"(\").replace(\"\
    )\", \")\")))))) \n        val paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens_map_with_parens_map\
    \ = paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens_map_with_parens.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8yd24lei.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp8yd24lei.scala:14:133 -----------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_map_with_parens_map\e\
    [0m = paren_groups_with_parens_map_with_parens.map(\e[36mx\e[0m => x.map(\e[36my\e\
    [0m => y.map(\e[36mz\e[0m => z.split(\e[31m\"\\\\)\"\e[0m))))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                              ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     value split is not a member\
    \ of Char\n\e[31m\e[31m-- Error: /tmp/tmp8yd24lei.scala:14:147 ----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_map_with_parens_map\e\
    [0m = paren_groups_with_parens_map_with_parens.map(\e[36mx\e[0m => x.map(\e[36my\e\
    [0m => y.map(\e[36mz\e[0m => z.split(\e[31m\"\\\\)\"\e[0m))))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmp8yd24lei.scala:14:148\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e\
    [33mval\e[0m \e[36mparen_groups_with_parens_map_with_parens_map\e[0m = paren_groups_with_parens_map_with_parens.map(\e\
    [36mx\e[0m => x.map(\e[36my\e[0m => y.map(\e[36mz\e[0m => z.split(\e[31m\"\\\\\
    )\"\e[0m))))\n\e[31m\e[31m   |\e[0m                                          \
    \                                                                            \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \               No ClassTag available for Array[B]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m                "
  stdout: ''
  timestamp: 1659798167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_parentheses\
    \ = paren_groups.map(x => if (x == \"(\") 1 else 0)\n        val paren_groups_with_parentheses_sum\
    \ = paren_groups_with_parentheses.sum\n        val paren_groups_with_parentheses_product\
    \ = paren_groups_with_parentheses.product\n        val paren_groups_with_parentheses_product_sum\
    \ = paren_groups_with_parentheses_product.sum\n        val paren_groups_with_parentheses_product_product\
    \ = paren_groups_with_parentheses_product.product\n        val paren_groups_with_parentheses_product_product_sum\
    \ = paren_groups_with_parentheses_product_product.sum\n        val paren_groups_with_parentheses_product_product_product\
    \ = paren_groups_with_parentheses_product_product.product\n        val paren_groups_with_parentheses_product_product_product_sum\
    \ = paren_groups_with_parentheses_product_product_product.sum\n        val paren_groups_with_parentheses_product_product_product_product\
    \ = paren_groups_with_parentheses_product_product_product.product\n        val\
    \ paren_groups_with_parentheses_product_product_product_product_sum = paren_groups_with_parentheses_product_product_product_product.sum\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product\
    \ = paren_groups_with_parentheses_product_product_product_product.product\n  \
    \      val paren_groups_with_parentheses_product_product_product_product_product_sum\
    \ = paren_groups_with_parentheses_product_product_product_product_product.sum\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product\
    \ = paren_groups_with_parentheses_product_product_product_product_product.product\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_sum\
    \ = paren_groups_with_parentheses_product_product_product_product_product_product.sum\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_product\
    \ = paren_groups_with_parentheses_product_product_product_product_product_product.product\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_sum\
    \ = paren_groups_with_parentheses_product_product_product_product_product_product.sum\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_product\
    \ = paren_groups_with_parentheses_product_product_product_product_product_product.product\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_product_sum\
    \ = paren_groups_with_parentheses_product_product_product_product_product_product.sum\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_product_product\
    \ = paren_groups_with_parentheses_product_product_product_product_product_product.product\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_product_product_sum\
    \ = paren_groups_with_parentheses_product_product_product_product_product_product_product.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphzm_92v8.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphzm_92v8.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parentheses_product_product_product_product_product_product_sum\e\
    [0m = paren_groups_with_parentheses_product_product_product_product_product_product.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_parentheses_product_product_product_product_product_product_sum\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_parentheses_product_product_product_product_product_product_sum\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmphzm_92v8.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parentheses_product_product_product_product_product_product_product\e\
    [0m = paren_groups_with_parentheses_product_product_product_product_product_product.product\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_parentheses_product_product_product_product_product_product_product\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_parentheses_product_product_product_product_product_product_product\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmphzm_92v8.scala:14:94"
  stdout: ''
  timestamp: 1659798167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_flat = paren_array.flatMap(x =>\
    \ x.toLong)\n        val paren_array_sorted = paren_array_flat.sorted\n      \
    \  val paren_array_max_size = paren_array_sorted.take(paren_array_size).max\n\
    \        val paren_array_max_size_flat = paren_array_max_size.flatMap(x => x.toLong)\n\
    \        val paren_array_max_size_sorted = paren_array_max_size_flat.sorted\n\
    \        val paren_array_max_size_max_size = paren_array_max_size_sorted.take(paren_array_size).max\n\
    \        val paren_array_max_size_max_size_flat = paren_array_max_size_max_size.flatMap(x\
    \ => x.toLong)\n        val paren_array_max_size_max_size_sorted = paren_array_max_size_max_size_flat.sorted\n\
    \        val paren_array_max_size_max_size_max_size = paren_array_max_size_max_size_sorted.take(paren_array_size).max\n\
    \        val paren_array_max_size_max_size_max_size_flat = paren_array_max_size_max_size_max_size.flatMap(x\
    \ => x.toLong)\n        val paren_array_max_size_max_size_max_size_sorted = paren_array_max_size_max_size_max_size_flat.sorted\n\
    \        val paren_array_max_size_max_size_max_size_max_size = paren_array_max_size_max_size_max_size_sorted.take(paren_array_size).max\n\
    \        val paren_array_max_size_max_size_max_size_max_size_flat = paren_array_max_size_max_size_max_size_max_size.flatMap(x\
    \ => x.toLong)\n        val paren_array_max_size_max_size_max_size_max_size_sorted\
    \ = paren_array_max_size_max_size_max_size_max_size_flat.sorted\n        val paren_array_max_size_max_size_max_size_max_size_max_size\
    \ = paren_array_max_size_max_size_max_size_max_size_sorted.take(paren_array_size).max\n\
    \        val paren_array_max_size_max_size_max_size_max_size_max_size_flat = paren_array_max_size_max_size_max_size_max_size_max_size.flatMap(x\
    \ => x.toLong)\n        val paren_array_max_size_max_size_max_size_max_size_max_size_sorted\
    \ = paren_array_max_size_max_size_max_size_max_size_max_size_flat.sorted\n   \
    \     val paren_array_max_size_max_size_max_size_max_size_max_size_max_size =\
    \ paren_array_max_size_max_size_max_size_max_size_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpja6q0pum.scala:12:65 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_array_flat\e[0m =\
    \ paren_array.flatMap(\e[36mx\e[0m => x.toLong)\n\e[31m\e[31m   |\e[0m       \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0mno given instance of type Long => Iterable[B] was found for parameter asIterable\
    \ of \e[33mmethod\e[0m \e[35mflatMap\e[0m in \e[33mclass\e[0m \e[35mArrayOps\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:    B is a type variable\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpja6q0pum.scala:29:80 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size_max_size_max_size_max_size_max_size_max_size\e\
    [0m = paren_array_max_size_max_size_max_size_max_size_\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \           Not found: paren_array_max_size_max_size_max_size_max_size_\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpja6q0pum.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map\
    \ = mutable.Map[Long, Long]()\n        paren_string.split(\"\\\\s+\").foreach(x\
    \ => {\n            if (x.equals(\"(\")) {\n                paren_stack.push(paren_stack_map.getOrElse(paren_stack.last,\
    \ 0l))\n                paren_stack_map.put(paren_stack.last, paren_stack.last.toLong\
    \ + 1.toLong)\n            } else if (x.equals(\")\")) {\n                val\
    \ paren_level = paren_stack_map.getOrElse(paren_stack.last, 0l)\n            \
    \    paren_stack.last = (paren_stack.last - paren_level).toLong\n            \
    \    paren_stack_map.put(paren_stack.last, paren_stack.last.toLong)\n        \
    \    } else {\n                val paren_level = paren_stack_map.getOrElse(paren_stack.last,\
    \ 0l)\n                paren_stack.last = (paren_stack.last - paren_level).toLong\n\
    \                paren_stack_map.put(paren_stack.last, paren_stack.last.toLong\
    \ + 1.toLong)\n            }\n        })\n        val max_level = paren_stack_map.getOrElse(paren_stack.last,\
    \ 0l)\n        val max_level_map = paren_stack_map.filter(_._2 == max_level).toMap\n\
    \        val max_level_map_keys = max_level_map.keys\n        val max_level_map_values\
    \ = max_level_map.values\n        val max_level_map_keys_sorted = max_level_map_keys.sorted\n\
    \        val max_level_map_values_sorted = max_level_map_values.sorted\n     \
    \   val max_level_map_keys_sorted_with_paren = max_level_map_keys_sorted.map(x\
    \ => s\"(${x})\")\n        val max_level_map_values_sorted_with_paren = max_level_map_values_sorted.map(x\
    \ => s\"(${x})\")\n        val max_level_map_keys_sorted_with_paren_sorted = max_level_map_keys_sorted_with_paren.sorted\n\
    \        val max_level_map_values_sorted_with_paren_sorted = max_level_map_values_sorted_with_paren.sorted\n\
    \        val max_level_map_keys_sorted_with_paren_sorted_with_paren = max_level_map_keys_sorted_with_paren_sorted.map(x\
    \ => s\"(${x})\")\n        val max_level_map_values_sorted_with_paren_sorted_with_paren\
    \ = max_level_map_values_sorted_with_paren_sorted.map(x => s\"(${x})\")\n    \
    \    val max_level_map_keys_sorted_with_paren_sorted_with_paren_sorted = max_level_map_keys_sorted_with_paren_sorted_with_paren.sorted\n\
    \        val max_level_map_\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6akjosyg.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6akjosyg.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6akjosyg.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6akjosyg.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_len_len = mutable.Stack[Int]()\n\
    \        val paren_stack_len_len_len = mutable.Stack[Int]()\n        val paren_stack_len_len_len_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_len_len_len_len_len = mutable.Stack[Int]()\n\
    \        val paren_stack_len_len_len_len_len_len = mutable.Stack[Int]()\n    \
    \    val paren_stack_len_len_len_len_len_len_len = mutable.Stack[Int]()\n    \
    \    val paren_stack_len_len_len_len_len_len_len_len_len = mutable.Stack[Int]()\n\
    \        val paren_stack_len_len_len_len_len_len_len_len_len_len = mutable.Stack[Int]()\n\
    \        val paren_stack_len_len_len_len_len_len_len_len_len_len_len = mutable.Stack[Int]()\n\
    \        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len = mutable.Stack[Int]()\n\
    \        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len =\
    \ mutable.Stack[Int]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_len_len_len_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpja6z_t59.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpja6z_t59.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpja6z_t59.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_len\e[0m = mutable.Stack[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpja6z_t59.scala:12:34 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_len_len\e[0m\
    \ = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpja6z_t59.scala:13:38\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_len_len_len\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                      Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpja6z_t59.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_len_len_len_len\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m          "
  stdout: ''
  timestamp: 1659798166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_parens\
    \ = paren_groups.map(x => x.replaceAll(\"\\\\(\", \"(\").replaceAll(\"\\\\)\"\
    , \")\"))\n        val paren_groups_with_parens_map = paren_groups_with_parens.map(x\
    \ => x.split(\"\\\\(\"))\n        val paren_groups_with_parens_map_with_parens\
    \ = paren_groups_with_parens_map.map(x => x.map(y => y.replaceAll(\"\\\\)\", \"\
    )\"))\n        val paren_groups_with_parens_map_with_parens_map = paren_groups_with_parens_map_with_parens.map(x\
    \ => x.map(y => y.split(\"\\\\)\")))\n        val paren_groups_with_parens_map_with_parens_map_with_parens\
    \ = paren_groups_with_parens_map_with_parens_map.map(x => x.map(y => y.map(z =>\
    \ z.split(\"\\\\)\")))\n        val paren_groups_with_parens_map_with_parens_map_with_parens_map\
    \ = paren_groups_with_parens_map_with_parens_map_with_parens.map(x => x.map(y\
    \ => y.map(z => z.map(w => w.split(\"\\\\)\")))) \n        val paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens\
    \ = paren_groups_with_parens_map_with_parens_map_with_parens_map.map(x => x.map(y\
    \ => y.map(z => z.map(w => w.map(x => x.replaceAll(\"\\\\)\", \")\")))))\n   \
    \     val paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens_map\
    \ = paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens.map(x\
    \ => x.map(y => y.map(z => z.map(w => w.map(x => x.replaceAll(\"\\\\)\", \")\"\
    )))))\n        val paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens_map_with_parens\
    \ = paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens_map.map(x\
    \ => x.map(y => y.map(z => z.map(w => w.map(x => x.replaceAll(\"\\\\)\", \")\"\
    )))))\n        val paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens_map_with_parens_map\
    \ = paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens_map_with_parens.map(x\
    \ => x.map(y => y.map(z => z.map(w => w.map(x => x.replaceAll\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgwe03mc8.scala:14:8 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_map_with_parens_map\e\
    [0m = paren_groups_with_parens_map_with_parens.map(\e[36mx\e[0m => x.map(\e[36my\e\
    [0m => y.split(\e[31m\"\\\\)\"\e[0m)))\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\
    \e[31m   |\e[0m        ')' expected, but 'val' found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpgwe03mc8.scala:28:1 ---------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Int]()\n       \
    \ val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyeyrd3_c.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyeyrd3_c.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_top_top_top_top_top_top_top_top\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_top_top_top_top_top_top_top_top is already\
    \ defined as \e[33mvalue\e[0m \e[35mparen_stack_top_top_top_top_top_top_top_top_top\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyeyrd3_c.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpyeyrd3_c.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpyeyrd3_c.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1659798139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => x.replace(\"(\", \"( \").replace(\")\", \" ) \"))\n\
    \        val paren_groups_with_paren_length = paren_groups_with_paren.map(x =>\
    \ x.split(\" \").length)\n        val max_paren_groups_with_paren_length = paren_groups_with_paren_length.max\n\
    \        val max_paren_groups_with_paren = paren_groups_with_paren.max\n     \
    \   val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsjyz07r1.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmax_paren_groups_with_paren_length\e\
    [0m = max_paren_groups_with_paren_length.toLong\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_paren_length is already defined as \e\
    [33mvalue\e[0m \e[35mmax_paren_groups_with_paren_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsjyz07r1.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_paren_groups_with_paren_length\e[0m = max_paren_groups_with_paren_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_paren_length is already defined as \e\
    [33mvalue\e[0m \e[35mmax_paren_groups_with_paren_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsjyz07r1.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_paren_groups_with_paren_length\e[0m = max_paren_groups_with_paren_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_paren_length is already defined as \e\
    [33mvalue\e[0m \e[35mmax_paren_groups_with_paren_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsjyz07r1.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_paren_groups_with_paren_length\e[0m = max_paren_groups_with_paren_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_levels\
    \ = mutable.ListBuffer[Long]()\n        paren_string.split(\"\\\\s+\").foreach\
    \ { s =>\n            if (s.startsWith(\"(\")) {\n                paren_stack.push(0l)\n\
    \            } else if (s.startsWith(\")\")) {\n                val level = paren_stack.pop()\n\
    \                paren_levels += level\n            }\n        }\n        paren_levels\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24e_z1sb.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp24e_z1sb.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.Map[String, List[Long]]()\n        val paren_stack_map_keys = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values = mutable.Map[String, Long]()\n\
    \        paren_string.split(\"\\\\s+\").foreach(x => {\n            val paren_stack_map_keys\
    \ = paren_stack_map.getOrElse(x, 0)\n            val paren_stack_map_values =\
    \ paren_stack_map.getOrElse(x, 0)\n            paren_stack_map.put(x, paren_stack_map_keys\
    \ + 1l)\n            paren_stack_map_values.put(paren_stack_map_keys + 1l, x)\n\
    \        })\n        paren_stack_map.values.toList.sortBy(x => x).toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1s3rimvb.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1s3rimvb.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mList\e[0m[\e[35mLong\e[0m]]()\n\e[31m\e[31m   |\e[0m  \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1s3rimvb.scala:12:35 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map_keys\e[0m = mutable.Map[\e[35mString\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                               \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1s3rimvb.scala:13:37\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_map_values\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_queue\
    \ = mutable.Queue[Long]()\n        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0l)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0l)\n\
    \        paren_queue.enqueue(0l)\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1suwdc67.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1suwdc67.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_size\
    \ = paren_groups.size\n        val paren_groups_size_list = paren_groups.map(x\
    \ => x.toLong).toList\n        val paren_groups_size_list = paren_groups_size_list.sortWith(_\
    \ < _)\n        val paren_groups_size_list = paren_groups_size_list.drop(1)\n\
    \        val paren_groups_size_list = paren_groups_size_list.drop(1)\n       \
    \ val paren_groups_size_list = paren_groups_size_list.drop(1)\n        val paren_groups_size_list\
    \ = paren_groups_size_list.drop(1)\n        val paren_groups_size_list = paren_groups_size_list.drop(1)\n\
    \        val paren_groups_size_list = paren_groups_size_list.drop(1)\n       \
    \ val paren_groups_size_list = paren_groups_size_list.drop(1)\n        val paren_groups_size_list\
    \ = paren_groups_size_list.drop(1)\n        val paren_groups_size_list = paren_groups_size_list.drop(1)\n\
    \        val paren_groups_size_list = paren_groups_size_list.drop(1)\n       \
    \ val paren_groups_size_list = paren_groups_size_list.drop(1)\n        val paren_groups_size_list\
    \ = paren_groups_size_list.drop(1)\n        val paren_groups_size_list = paren_groups_size_list.drop(1)\n\
    \        val paren_groups_size_list = paren_groups_size_list.drop(1)\n       \
    \ val paren_groups_size_list = paren_groups_size_list.drop(1)\n        val paren_groups_size_list\
    \ = paren_groups_size_list.drop(1)\n        val paren_groups_size_list = paren_groups_size_list.drop(1)\n\
    \        val paren_groups_size_list = paren_groups_size_list.drop(1)\n       \
    \ val paren_groups_size_list = paren_groups_size_list.drop(1)\n        val paren_groups_size_list\
    \ = paren_groups_size_list.drop(1)\n        val paren_groups_size_list = paren_groups_size_list.drop(1)\n\
    \        val paren_groups_size_list = paren_groups_size_list.drop(1)\n       \
    \ val paren_groups_size_list = paren_groups_size_list.drop(1)\n        val paren_groups_size_list\
    \ = paren_groups_size_list.drop(1)\n        val paren_groups_size_list = paren_groups_size_list.drop(1)\n\
    \        val paren_groups_size_list = paren_groups_size_list.drop(1)\n       \
    \ val paren_groups_size_list = paren_groups_size_list.drop(1)\n        val paren_groups_size_list\
    \ = paren_groups_size_list.drop(1)\n        val paren_groups_size_list = paren_groups_size_list.drop(1)\n\
    \        val paren_groups_size_list = paren_groups_size_list.drop(1)\n       \
    \ val \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp974lyq2e.scala:44:11 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp974lyq2e.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e\
    [0m = paren_groups_size_list.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_list is already defined as \e[33mvalue\e\
    [0m \e[35mparen_groups_size_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp974lyq2e.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e\
    [0m = paren_groups_size_list.drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mparen_groups_size_list is already defined as \e[33mvalue\e[0m \e[35mparen_groups_size_list\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp974lyq2e.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e[0m = paren_groups_size_list.drop(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_list is already defined as \e[33mvalue\e\
    [0m \e[35mparen_groups_size_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp974lyq2e.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e\
    [0m = paren_groups_siz"
  stdout: ''
  timestamp: 1659798169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map\
    \ = mutable.HashMap[Long, Long]()\n        paren_string.split(\"\\\\s+\").foreach(x\
    \ => {\n            val paren_level = paren_stack_map.getOrElse(x, 0).toLong\n\
    \            paren_stack_map.put(x, paren_level + 1)\n            paren_stack\
    \ :+= paren_level\n        })\n        paren_stack.takeWhile(x => paren_stack_map.getOrElse(x,\
    \ 0) > 0).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptga6o6_5.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptga6o6_5.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_chars = paren_string.split(\" \").map(_.toChar)\n     \
    \   val paren_chars_count = paren_chars.map(c => if (c == '(') 1 else 0).sum\n\
    \        val paren_chars_count_max = paren_chars.map(c => if (c == '(') 1 else\
    \ 0).max\n        val paren_chars_count_min = paren_chars.map(c => if (c == '(')\
    \ 1 else 0).min\n        val paren_chars_count_sum = paren_chars.map(c => if (c\
    \ == '(') 1 else 0).sum\n        val paren_chars_count_product = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).product\n        val paren_chars_count_product2 =\
    \ paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product3\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product4\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product5\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product6\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product7\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product8\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product9\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product10\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product11\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product12\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product13\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product14\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product15\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).product\n        val paren_chars_count_product16\
    \ = paren_chars.map(c => if (c == '('\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc0cxfmmh.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc0cxfmmh.scala:10:56\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars\e[0m = paren_string.split(\e[31m\" \"\e[0m).map(_.toChar)\n\e\
    [31m\e[31m   |\e[0m                                                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmpc0cxfmmh.scala:10:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc0cxfmmh.scala:31:5 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqt7ptzwf.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqt7ptzwf.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpqt7ptzwf.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqt7ptzwf.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqt7ptzwf.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_top\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31"
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_level_paren_groups = mutable.ListBuffer[String]()\n   \
    \     paren_groups.foreach(paren_group => {\n            val paren_group_level\
    \ = getNestingLevel(paren_group)\n            if (paren_group_level > max_level)\
    \ {\n                max_level = paren_group_level\n                max_level_paren_groups\
    \ = paren_group_level\n            } else if (paren_group_level == max_level)\
    \ {\n                max_level_paren_groups += paren_group\n            }\n  \
    \      })\n        max_level_paren_groups.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40iz067z.scala:12:37 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_level_paren_groups\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m         \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp40iz067z.scala:14:36 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mparen_group_level\e[0m =\
    \ getNestingLevel(paren_group)\n\e[31m\e[31m   |\e[0m                        \
    \            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \         Not found: getNestingLevel\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp40iz067z.scala:16:26 -----------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m                max_level = paren_group_level\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val max_level\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp40iz067z.scala:17:39 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                max_level_paren_groups = paren_group_level\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val max_level_paren_groups\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCount\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountSize =\
    \ mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCount = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCount = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCountSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCountIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCountIndexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCount =\
    \ mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndex\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndexCount\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndexCountSize\
    \ = mutable.Stack[Long]()\n        val paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg9earq6x.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg9earq6x.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_count_indexCountIndexCountIndexCountIndexSize\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_count_indexCountIndexCountIndexCountIndexSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_count_indexCountIndexCountIndexCountIndexSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpg9earq6x.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg9earq6x.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg9earq6x.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_top\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m"
  stdout: ''
  timestamp: 1659798171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth = mutable.Stack[Int]()\n        val paren_stack_max_depth_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_length_count = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index2 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index3 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index4 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index5 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index6 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index7 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index8 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index9 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index10 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index11 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index12 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index13 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index14 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index15 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index16 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index17 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index18 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index19 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index20 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index21 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_length_count_index22 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8bki1z40.scala:37:56 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth_length_count_index22\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \        ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8bki1z40.scala:10:26 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8bki1z40.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8bki1z40.scala:12:35\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_max_size\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8bki1z40.scala:13:36 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_max_depth\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available w"
  stdout: ''
  timestamp: 1659798170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_count\
    \ = paren_groups.length\n        val paren_groups_with_parentheses = paren_groups.map(x\
    \ => if (x == \"(\") 1 else 0)\n        val paren_groups_with_parentheses_count\
    \ = paren_groups_with_parentheses.sum\n        val paren_groups_with_parentheses_count_with_parentheses\
    \ = paren_groups_with_parentheses_count + paren_groups_with_parentheses.last\n\
    \        val paren_groups_with_parentheses_count_with_parentheses_count = paren_groups_with_parentheses_count_with_parentheses.toLong\n\
    \        val paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses\
    \ = paren_groups_with_parentheses_count_with_parentheses_count + paren_groups_with_parentheses_count_with_parentheses.last\n\
    \        val paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count\
    \ = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses.toLong\n\
    \        val paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses\
    \ = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count\
    \ + paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses.last\n\
    \        val paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count\
    \ = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses.toLong\n\
    \        val paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses\
    \ = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count\
    \ + paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses.last\n\
    \        val paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count\
    \ = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses.toLong\n\
    \        val paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses\
    \ = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses.last\n\
    \        val paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count\
    \ = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parenthese\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6pte8aph.scala:16:204 -----------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parentheses_count_with_parentheses_count_with_parentheses\e\
    [0m = paren_groups_with_parentheses_count_with_parentheses_count + paren_groups_with_parentheses_count_with_parentheses.last\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       value last is not a\
    \ member of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6pte8aph.scala:22:159\
    \ --------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses\e\
    [0m = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses.last\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                           ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35m\n\e[31m   |\e[0m  paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6pte8aph.scala:23:165 -----------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count\e\
    [0m = paren_groups_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_with_parentheses_count_wit"
  stdout: ''
  timestamp: 1659798175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps5w4iswy.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps5w4iswy.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_size\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps5w4iswy.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps5w4iswy.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps5w4iswy.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_size is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_top_size\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1659798154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map\
    \ = mutable.Map[Long, Long]()\n        val paren_stack_map_list = mutable.ListBuffer[Long]()\n\
    \        val paren_stack_map_list_size = mutable.ListBuffer[Long]()\n        val\
    \ paren_stack_map_list_size_reset = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_reset_size\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_reset_size_reset\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_reset_size_reset_size\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_reset_size_reset_size_reset\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_reset_size_reset_size_reset_size\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_reset_size_reset_size_reset_size_reset\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_reset_size_reset_size_reset_size_reset_size\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_reset_size_reset_size_reset_size_reset_size_reset\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_reset_size_reset_size_reset_size_reset_size_reset_size\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_reset_size_reset_size_reset_size_reset_size_reset_size_reset\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_reset_size_reset_size_reset_size_reset_size_reset_size_reset_size\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_reset_size_reset_size_reset_size_reset_size_reset_size_reset_size_reset\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_reset_size_reset_size_reset_size_reset_size_reset_size_reset_size_reset_size\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_reset_size_reset_size_reset_size_reset_size_reset_size_reset_size_reset_size_reset\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_reset_size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8x8o28ru.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8x8o28ru.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8x8o28ru.scala:11:30 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8x8o28ru.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_map_list\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8x8o28ru.scala:13:40 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_map_list_size\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                        Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8x8o28ru.scala:14:46\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_map_list_size_reset\e[0m = mutable.ListBuffer[\e["
  stdout: ''
  timestamp: 1659798173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_map = paren_array.map(x => x.toLong)\n\
    \        val paren_array_map_size = paren_array_map.length\n        val paren_array_map_map\
    \ = paren_array_map.map(x => x.toLong)\n        val paren_array_map_map_size =\
    \ paren_array_map_map.length\n        val paren_array_map_map_map_size = paren_array_map_map_size\n\
    \        val paren_array_map_map_map_size = paren_array_map_map_map_size\n   \
    \     val paren_array_map_map_map_map_size = paren_array_map_map_map_map_size\n\
    \        val paren_array_map_map_map_map_map_size = paren_array_map_map_map_map_map_size\n\
    \        val paren_array_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map_size\n\
    \        val paren_array_map_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map_map_size\n\
    \        val paren_array_map_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map_map_size\n\
    \        val paren_array_map_map_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map_map_map_map_size\n\
    \        val paren_array_map_map_map_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map_map_map_map_map_size\n\
    \        val paren_array_map_map_map_map_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map_map_map_map_map_size\n\
    \        val paren_array_map_map_map_map_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map_map_map_map_map_map_size\n\
    \        val paren_array_map_map_map_map_map_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map_map_map_map_map_map_map_size\n\
    \        val paren_array_map_map_map_map_map_map_map_map_map_map_map_map_size\
    \ = paren_array_map_map_map_map_map_map_map_map_map_map_map_map_map_size\n   \
    \     val paren_array_map_map_map_map_map_map_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map_map_map_map_map_map_map_map_size\n\
    \        val paren_array_map_map_map_map_map_map_map_map_map_map_map_map_map_size\
    \ = paren_array_map_map_map_map_map_map_map_map_map_map_map_map_map_map_size\n\
    \        val paren_array_map_map_map_map_map_map_map_map_map_map_map_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1xulk9lx.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1xulk9lx.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_array_map_map_map_size\e[0m = paren_array_map_map_map_size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_map_map_map_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_array_map_map_map_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1xulk9lx.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_array_map_map_map_map_map_map_map_size\e\
    [0m = paren_array_map_map_map_map_map_map_map_size\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_map_map_map_map_map_map_map_size is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_array_map_map_map_map_map_map_map_size\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1xulk9lx.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_array_map_map_map_map_map_map_map_map_map_map_size\e\
    [0m = paren_array_map_map_map_map_map_map_map_map_map_map_map_size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_map_map_map_map_map_map_map_map_map_map_size is\
    \ already defined as \e[33mvalue\e[0m \e[35mparen_array_map_map_map_map_map_map_map_map_map_map_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel defi"
  stdout: ''
  timestamp: 1659798176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_index = mutable.Stack[Int]()\n        val paren_stack_top_count_index_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_index_count = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_index_count_size = mutable.Stack[Int]()\n \
    \       val paren_stack_top_count_index_count_index = mutable.Stack[Int]()\n \
    \       val paren_stack_top_count_index_count_index_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_index_count_index_count = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_index_count_index_count_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_index_count_index_count_index = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_index_count_index_count_index_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_index_count_index_count_index_count = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_index_count_index_count_index_count_size =\
    \ mutable.Stack[Int]()\n        val paren_stack_top_count_index_count_index_count_index_count_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_index_count_index_count_index_count_index_count_index_count_size\
    \ = mutable.Stack[Int]()\n        val paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjcm2o3zy.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjcm2o3zy.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpjcm2o3zy.scala:11:31 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m = mutable.Stack[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpjcm2o3zy.scala:12:30 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjcm2o3zy.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_top_size\e[0m\
    \ = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjcm2o3zy.scala:14:36\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_top_count\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                 "
  stdout: ''
  timestamp: 1659798176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_list_string = paren_string.trim\n        val paren_list_string_array\
    \ = paren_list_string.split(\" \")\n        val paren_list_string_array_length\
    \ = paren_list_string_array.length\n        val paren_list_string_array_length_with_paren\
    \ = paren_list_string_array_length + 1\n        val paren_list_string_array_length_with_paren_long\
    \ = paren_list_string_array_length_with_paren.toLong\n        val paren_list_string_array_length_with_paren_long_long\
    \ = paren_list_string_array_length_with_paren_long.toLong\n        val paren_list_string_array_length_with_paren_long_long_long\
    \ = paren_list_string_array_length_with_paren_long_long.toLong\n        val paren_list_string_array_length_with_paren_long_long_long_long\
    \ = paren_list_string_array_length_with_paren_long_long_long.toLong\n        val\
    \ paren_list_string_array_length_with_paren_long_long_long_long_long = paren_list_string_array_length_with_paren_long_long_long_long.toLong\n\
    \        val paren_list_string_array_length_with_paren_long_long_long_long_long_long\
    \ = paren_list_string_array_length_with_paren_long_long_long_long_long.toLong\n\
    \        val paren_list_string_array_length_with_paren_long_long_long_long_long_long_long\
    \ = paren_list_string_array_length_with_paren_long_long_long_long_long_long.toLong\n\
    \        val paren_list_string_array_length_with_paren_long_long_long_long_long_long_long_long\
    \ = paren_list_string_array_length_with_paren_long_long_long_long_long_long_long_long.toLong\n\
    \        val paren_list_string_array_length_with_paren_long_long_long_long_long_long_long_long_long_long\
    \ = paren_list_string_array_length_with_paren_long_long_long_long_long_long_long_long_long_long.toLong\n\
    \        val paren_list_string_array_length_with_paren_long_long_long_long_long_long_long_long_long_long_long\
    \ = paren_list_string_array_length_with_paren_long_long_long_long_long_long_long_long_long_long_long.toLong\n\
    \        val paren_list_string_array_length_with_paren_long_long_long_long_long_long_long_long_long_long_long_long\
    \ = paren_list_string_array_length_with_paren_long_long_long_long_long_long_long_long_long_long_long_long.toLong\n\
    \        val paren_list_string_array_length_with_paren_long_long_long_long_long_long_long_long_long_long_long_long_long_long\
    \ = paren_list_string_array_length_with_paren_long_long_long_long_long_long_long_long_long_long_long_long_long_long.toLong\n\
    \        val paren_list_string_array_length_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1806kb5m.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1806kb5m.scala:21:96\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_list_string_array_length_with_paren_long_long_long_long_long_long_long_long\e\
    [0m = paren_list_string_array_length_with_paren_long_long_long_long_long_long_long_long.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_list_string_array_length_with_paren_long_long_long_long_long_long_long_long\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp1806kb5m.scala:22:106 --------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_list_string_array_length_with_paren_long_long_long_long_long_long_long_long_long_long\e\
    [0m = paren_list_string_array_length_with_paren_long_long_long_long_long_long_long_long_long_long.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                  ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_list_string_array_length_with_paren_long_long_long_long_long_long_long_long_long_long\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp1806kb5m.scala:23:111 --------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_list_string_array_length_with_paren_long_long_long_long_long_long_long_long_long_long_long\e\
    [0m = paren_list_string_array_length_with_paren_long_long_long_long_long_long_long_long_long_long_long.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            "
  stdout: ''
  timestamp: 1659798176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_levels = mutable.ListBuffer[Long]()\n        for (paren_group\
    \ <- paren_groups) {\n            val levels = paren_group.count('(') - paren_group.count(')')\n\
    \            if (levels > max_level) {\n                max_level = levels\n \
    \               max_levels += levels\n            }\n        }\n        max_levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgr5c5aj.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqgr5c5aj.scala:14:43 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mlevels\e[0m = paren_group.count(\e\
    [31m'('\e[0m) - paren_group.count(\e[31m')'\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                                      ^^^\e[0m\n\e[31m   |\e[0m             \
    \                              Found:    (\e[31m'('\e[0m : Char)\n\e[31m   |\e\
    [0m                                           Required: Char => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqgr5c5aj.scala:14:68 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mlevels\e[0m = paren_group.count(\e\
    [31m'('\e[0m) - paren_group.count(\e[31m')'\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                                                               ^^^\e[0m\n\e[31m\
    \   |\e[0m                                               Found:    (\e[31m')'\e\
    [0m : Char)\n\e[31m   |\e[0m                                               Required:\
    \ Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpqgr5c5aj.scala:16:26\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                max_level\
    \ = levels\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Reassignment to val max_level\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_size\
    \ = paren_groups.length\n        val paren_groups_map = mutable.HashMap[String,\
    \ Long]()\n        val paren_groups_list_size = mutable.ArrayBuffer(paren_groups_size)\n\
    \        val paren_groups_list_map = mutable.ArrayBuffer.empty[Long]\n       \
    \ val paren_groups_list_map_index = 0\n        val paren_groups_list_map_size\
    \ = 0\n        val paren_groups_list_map_size_index = 0\n        val paren_groups_list_map_size_index_max\
    \ = paren_groups_list_map_size\n        val paren_groups_list_map_size_index_max_index\
    \ = paren_groups_list_map_size_index_max\n        val paren_groups_list_map_size_index_max_index_max\
    \ = paren_groups_list_map_size_index_max_index\n        val paren_groups_list_map_size_index_max_index_max_max\
    \ = paren_groups_list_map_size_index_max_index_max\n        val paren_groups_list_map_size_index_max_index_max_max_max\
    \ = paren_groups_list_map_size_index_max_index_max_max\n        val paren_groups_list_map_size_index_max_index_max_max_max_max\
    \ = paren_groups_list_map_size_index_max_index_max_max_max\n        val paren_groups_list_map_size_index_max_index_max_max_max_max\
    \ = paren_groups_list_map_size_index_max_index_max_max_max_max\n        val paren_groups_list_map_size_index_max_index_max_max_max_max_max\
    \ = paren_groups_list_map_size_index_max_index_max_max_max_max_max\n        val\
    \ paren_groups_list_map_size_index_max_index_max_max_max_max_max_max = paren_groups_list_map_size_index_max_index_max_max_max_max_max_max\n\
    \        val paren_groups_list_map_size_index_max_index_max_max_max_max_max_max_max\
    \ = paren_groups_list_map_size_index_max_index_max_max_max_max_max_max_max\n \
    \       val paren_groups_list_map_size_index_max_index_max_max_max_max_max_max_max\
    \ = paren_groups_list_map_size_index_max_index_max_max_max_max_max_max_max_max\n\
    \        val paren_groups_list_map_size_index_max_index_max_max_max_max_max_max_max_max\
    \ = paren_groups_list_map_size_index_max_index_max_max_max_max_max_max_max_max_max\n\
    \        val paren_groups_list_map_size_index_max_index_max_max_max_max_max_max_max_max_max\
    \ = paren_groups_list_map_size_index_max_index_max_max_max_max_max_max_max_max_max_max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp63usuapy.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_map_size_index_max_index_max_max_max_max\e\
    [0m = paren_groups_list_map_size_index_max_index_max_max_max_max\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_list_map_size_index_max_index_max_max_max_max\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_groups_list_map_size_index_max_index_max_max_max_max\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp63usuapy.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_map_size_index_max_index_max_max_max_max_max_max_max\e\
    [0m = paren_groups_list_map_size_index_max_index_max_max_max_max_max_max_max_max\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_list_map_size_index_max_index_max_max_max_max_max_max_max\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_groups_list_map_size_index_max_index_max_max_max_max_max_max_max\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp63usuapy.scala:12:31 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_map\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp63usuapy.scala:13:37\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[3"
  stdout: ''
  timestamp: 1659798177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_chars = paren_string.split(\" \").map(_.toChar)\n     \
    \   val paren_chars_count = paren_chars.map(_.length).sum\n        val paren_chars_count_with_paren\
    \ = paren_chars.map(_.length + 1).sum\n        val paren_chars_count_with_paren_plus_one\
    \ = paren_chars_count_with_paren + 1\n        val paren_chars_count_with_paren_plus_two\
    \ = paren_chars_count_with_paren_plus_one + 1\n        val paren_chars_count_with_paren_plus_three\
    \ = paren_chars_count_with_paren_plus_two + 1\n        val paren_chars_count_with_paren_plus_four\
    \ = paren_chars_count_with_paren_plus_three + 1\n        val paren_chars_count_with_paren_plus_five\
    \ = paren_chars_count_with_paren_plus_four + 1\n        val paren_chars_count_with_paren_plus_six\
    \ = paren_chars_count_with_paren_plus_five + 1\n        val paren_chars_count_with_paren_plus_seven\
    \ = paren_chars_count_with_paren_plus_six + 1\n        val paren_chars_count_with_paren_plus_eight\
    \ = paren_chars_count_with_paren_plus_seven + 1\n        val paren_chars_count_with_paren_plus_nine\
    \ = paren_chars_count_with_paren_plus_eight + 1\n        val paren_chars_count_with_paren_plus_ten\
    \ = paren_chars_count_with_paren_plus_nine + 1\n        val paren_chars_count_with_paren_plus_eleven\
    \ = paren_chars_count_with_paren_plus_ten + 1\n        val paren_chars_count_with_paren_plus_twelve\
    \ = paren_chars_count_with_paren_plus_eleven + 1\n        val paren_chars_count_with_paren_plus_thirteen\
    \ = paren_chars_count_with_paren_plus_twelve + 1\n        val paren_chars_count_with_paren_plus_fourteen\
    \ = paren_chars_count_with_paren_plus_thirteen + 1\n        val paren_chars_count_with_paren_plus_fifteen\
    \ = paren_chars_count_with_paren_plus_fourteen + 1\n        val paren_chars_count_with_paren_plus_sixteen\
    \ = paren_chars_count_with_paren_plus_fifteen + 1\n        val paren_chars_count_with_paren_plus_seventeen\
    \ = paren_chars_count_with_paren_plus_sixteen + 1\n        val paren_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6bj3meds.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6bj3meds.scala:10:56\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars\e[0m = paren_string.split(\e[31m\" \"\e[0m).map(_.toChar)\n\e\
    [31m\e[31m   |\e[0m                                                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmp6bj3meds.scala:10:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6bj3meds.scala:31:5 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_counts\
    \ = paren_groups.map(paren_group => {\n            val paren_group_list = paren_group.split(\"\
    \\\\(\")\n            val paren_groups_with_counts_string = paren_group_list.map(paren_group_string\
    \ => {\n                val paren_group_list = paren_group_string.split(\"\\\\\
    )\")\n                val paren_groups_with_counts_string = paren_group_list.map(paren_group_string\
    \ => {\n                    val paren_group_list = paren_group_string.split(\"\
    \\\\)\")\n                    val paren_groups_with_counts_string = paren_group_list.map(paren_group_string\
    \ => {\n                        val paren_group_list = paren_group_string.split(\"\
    \\\\)\")\n                        val paren_groups_with_counts_string = paren_group_list.map(paren_group_string\
    \ => {\n                            val paren_group_list = paren_group_string.split(\"\
    \\\\)\")\n                            val paren_groups_with_counts_string = paren_group_list.map(paren_group_string\
    \ => {\n                                val paren_group_list = paren_group_string.split(\"\
    \\\\)\")\n                                val paren_groups_with_counts_string\
    \ = paren_group_list.map(paren_group_string => {\n                           \
    \         val paren_group_list = paren_group_string.split(\"\\\\)\")\n       \
    \                             val paren_groups_with_counts_string = paren_group_list.map(paren_group_string\
    \ => {\n                                        val paren_group_list = paren_group_string.split(\"\
    \\\\)\")\n                                        val paren_groups_with_counts_string\
    \ = paren_group_list.map(paren_group_string => {\n                           \
    \                 val paren_group_list = paren_group_string.split(\"\\\\)\")\n\
    \                                            val paren_groups_with_counts_string\
    \ = paren_group_list.map(paren_group_string => {\n                           \
    \                     val paren_group_list = paren_group_string.split(\"\\\\)\"\
    )\n                                                val paren_groups_with_counts_string\
    \ = paren_group_list.map(paren_group_string => {\n                           \
    \                         val paren_group_list = paren_group_string.split(\"\\\
    \\)\")\n                                                    val paren_groups_with_counts_string\
    \ = paren_group_list.map(paren_group_string => {\n                           \
    \                             val paren_group_list = paren_group_string.split(\"\
    \\\\)\")\n                                                        val paren_groups_with_counts_string\
    \ = paren_group_list.map(paren_group_string => {\n                           \
    \                                 val paren_group_list = paren_group_string.split(\"\
    \\\\)\")\n                                                            val paren_groups_with_counts_string\
    \ = paren_group_list.map(paren_group_string => {\n                           \
    \                                     val paren_group_list = paren_group_string.split(\"\
    \\\\)\")\n                                                                val\
    \ paren_groups_with_counts_string = paren_group_list.map(paren\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptkqj3gcc.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptkqj3gcc.scala:41:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m41 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmptkqj3gcc.scala:48:0 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptkqj3gcc.scala:39:123\
    \ -----------------------\e[0m\e[0m\n\e[31m39 |\e[0m                         \
    \                                       \e[33mval\e[0m \e[36mparen_groups_with_counts_string\e\
    [0m = paren_group_list.map(paren\n\e[31m\e[31m   |\e[0m                      \
    \                                                                            \
    \                         ^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                                Not found: paren\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptkqj3gcc.scala:47:1 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659798178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_level_groups = mutable.ListBuffer.empty[String]\n     \
    \   val max_level_group_size = mutable.ListBuffer.empty[Long]\n        val paren_group_size\
    \ = mutable.ListBuffer.empty[Long]\n        val paren_group_level = mutable.ListBuffer.empty[Long]\n\
    \        for (paren_group <- paren_groups) {\n            val paren_group_level\
    \ = paren_group.count(\"(\") - paren_group.count(\")\")\n            paren_group_level\
    \ match {\n                case 0 => max_level_groups += paren_group\n       \
    \         case _ => {\n                    if (paren_group_level > max_level)\
    \ {\n                        max_level = paren_group_level\n                 \
    \       max_level_groups = paren_group\n                        max_level_group_size\
    \ = paren_group.size\n                        paren_group_size = paren_group.size\n\
    \                        paren_group_level = paren_group.count(\"(\") - paren_group.count(\"\
    )\")\n                    }\n                }\n            }\n        }\n   \
    \     max_level_groups.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2lp5q_t6.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_level_groups\e[0m =\
    \ mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m         \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2lp5q_t6.scala:13:35 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mmax_level_group_size\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2lp5q_t6.scala:14:31\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_size\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2lp5q_t6.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_group_level\e[0m =\
    \ mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m           \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2lp5q_t6.scala:17:54 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            \e[33mval\e[0m \e[36mparen_group_level\e[0m = paren_group.count(\e\
    [31m\"(\"\e[0m) - paren_group.count(\e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                                                     ^^^\e[0m\n\e[31m   |\e[0m\
    \                                               Found: "
  stdout: ''
  timestamp: 1659798178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_queue\
    \ = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n     \
    \   paren_stack.push(paren_queue.dequeue())\n        val paren_levels = mutable.Map[String,\
    \ Long]()\n        while(!paren_stack.isEmpty) {\n            val paren_string\
    \ = paren_stack.dequeue()\n            val paren_level = paren_levels(paren_string)\n\
    \            val paren_levels = paren_levels + (paren_string -> paren_level.toLong)\n\
    \            paren_string match {\n                case \"(\" => paren_stack.push(paren_queue.dequeue())\n\
    \                case \")\" => paren_stack.push(paren_queue.dequeue())\n     \
    \           case \")()\" => paren_stack.push(paren_queue.dequeue())\n        \
    \        case \")()()\" => paren_stack.push(paren_queue.dequeue())\n         \
    \       case \")()()()\" => paren_stack.push(paren_queue.dequeue())\n        \
    \        case \")()()()()\" => paren_stack.push(paren_queue.dequeue())\n     \
    \           case \")()()()()()\" => paren_stack.push(paren_queue.dequeue())\n\
    \                case \")()()()()()()\" => paren_stack.push(paren_queue.dequeue())\n\
    \                case \")()()()()()()()\" => paren_stack.push(paren_queue.dequeue())\n\
    \                case \")()()()()()()()()\" => paren_stack.push(paren_queue.dequeue())\n\
    \                case \")()()()()()()()()()\" => paren_stack.push(paren_queue.dequeue())\n\
    \                case \")()()()()()()()()()()\" => paren_stack.push(paren_queue.dequeue())\n\
    \                case \")()()()()()()()()()()()\" => paren_stack.push(paren_queue.dequeue())\n\
    \                case \")()()()()()()()()()()()\" => paren_stack.push(paren_queue.dequeue())\n\
    \                case \")()()()()()()()()()()()()\" => paren_stack.push(paren_queue.dequeue())\n\
    \                case \")()()()()()()()()()()()()\" => paren_stack.push(paren_queue.dequeue())\n\
    \                case \")()()()()()()()()()()()()()\" => paren_stack.push(paren_queue.dequeue())\n\
    \                case \")()()()()()()()()()()()()()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmhkod80y.scala:37:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                \e[33mcase\e[0m \")()()()()()()()()()()()()()\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpmhkod80y.scala:39:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m39 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpmhkod80y.scala:46:0 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmhkod80y.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack\e[0m = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmhkod80y.scala:11:26 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmhkod80y.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmhkod80y.scala:18:31\
    \ -----"
  stdout: ''
  timestamp: 1659798173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n   \
    \     val paren_groups_with_paren_length = paren_groups_with_paren.map(x => x.length)\n\
    \        val max_paren_groups_with_paren_length = paren_groups_with_paren_length.max\n\
    \        val max_paren_groups_with_paren = paren_groups_with_paren.max\n     \
    \   val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw7949sc7.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmax_paren_groups_with_paren_length\e\
    [0m = max_paren_groups_with_paren_length.toLong\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_paren_length is already defined as \e\
    [33mvalue\e[0m \e[35mmax_paren_groups_with_paren_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw7949sc7.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_paren_groups_with_paren_length\e[0m = max_paren_groups_with_paren_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_paren_length is already defined as \e\
    [33mvalue\e[0m \e[35mmax_paren_groups_with_paren_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw7949sc7.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_paren_groups_with_paren_length\e[0m = max_paren_groups_with_paren_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_paren_length is already defined as \e\
    [33mvalue\e[0m \e[35mmax_paren_groups_with_paren_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw7949sc7.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_paren_groups_with_paren_length\e[0m = max_paren_groups_with_paren_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val paren_groups_with_paren_groups = paren_groups.map(x => List(x, x))\n\
    \        val paren_groups_with_paren_groups_sorted = paren_groups_with_paren_groups.sortBy(_._1)\n\
    \        val paren_groups_with_paren_groups_sorted_with_paren_groups = paren_groups_with_paren_groups_sorted.map(x\
    \ => List(x, x))\n        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups.sortBy(_._1)\n   \
    \     val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted.map(x => List(x,\
    \ x))\n        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups.sortBy(_._1)\n\
    \        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted.map(x\
    \ => List(x, x))\n        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups.sortBy(_._1)\n\
    \        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted.map(x\
    \ => List(x, x))\n        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups.sortBy(_._1)\n\
    \        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted.map(x\
    \ => List(x, x))\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpviaegd5p.scala:12:92 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_groups_sorted\e\
    [0m = paren_groups_with_paren_groups.sortBy(_._1)\n\e[31m\e[31m   |\e[0m     \
    \                                                                            \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                                  value _1\
    \ is not a member of List[Long]\n\e[31m\e[31m-- Error: /tmp/tmpviaegd5p.scala:12:95\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m12 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_with_paren_groups_sorted\e[0m = paren_groups_with_paren_groups.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                       ^\e[0m\n\e[31m   |\e[0mambiguous given\
    \ instances: both \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mclass\e[0m \e[35mArrayOps\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpviaegd5p.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val max_level = paren_groups.foldLeft(0L) {\n            (maxLevel, group)\
    \ => if (group > maxLevel) group else maxLevel\n        }\n        paren_groups.map(_.toLong).take(max_level)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqfkarh3c.scala:14:40\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        paren_groups.map(_.toLong).take(max_level)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                        Found:    (max_level : Long)\n\
    \e[31m   |\e[0m                                        Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_level = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps81yux2i.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps81yux2i.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_level_limit\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_stack_level_limit is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_stack_level_limit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps81yux2i.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_limit\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_limit is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_level_limit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps81yux2i.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_limit\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_limit is already defined as \e[33mvalue\e\
    [0m \e[35mparen_stack_level_limit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps81yux2i.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_level_limit\e\
    [0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_level_limit is already defined as \e[33mva"
  stdout: ''
  timestamp: 1659798178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\"\\\\s+\")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => x.replaceAll(\"\\\\(\", \"(\").replaceAll(\"\\\\)\"\
    , \")\"))\n        val paren_groups_with_paren_length = paren_groups_with_paren.map(x\
    \ => x.length)\n        val max_paren_groups_with_paren_length = paren_groups_with_paren_length.max\n\
    \        val max_paren_groups_with_paren = paren_groups_with_paren.max\n     \
    \   val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpor30mq_2.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmax_paren_groups_with_paren_length\e\
    [0m = max_paren_groups_with_paren_length.toLong\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_paren_length is already defined as \e\
    [33mvalue\e[0m \e[35mmax_paren_groups_with_paren_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpor30mq_2.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_paren_groups_with_paren_length\e[0m = max_paren_groups_with_paren_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_paren_length is already defined as \e\
    [33mvalue\e[0m \e[35mmax_paren_groups_with_paren_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpor30mq_2.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_paren_groups_with_paren_length\e[0m = max_paren_groups_with_paren_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_paren_length is already defined as \e\
    [33mvalue\e[0m \e[35mmax_paren_groups_with_paren_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpor30mq_2.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_paren_groups_with_paren_length\e[0m = max_paren_groups_with_paren_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_counts\
    \ = paren_groups.map(paren_group => {\n            val paren_group_with_counts\
    \ = paren_group.split(\"(\")\n            val paren_group_with_counts_count =\
    \ paren_group_with_counts.length\n            paren_group_with_counts_count.toLong\n\
    \        })\n        val paren_groups_with_counts_sorted = paren_groups_with_counts.sortBy(_)\n\
    \        val max_paren_groups_with_counts_count = paren_groups_with_counts_sorted.last\n\
    \        val max_paren_groups_with_counts = paren_groups_with_counts_sorted.take(max_paren_groups_with_counts_count)\n\
    \        val max_paren_groups_with_counts_count = max_paren_groups_with_counts_count.toLong\n\
    \        val max_paren_groups_with_counts_sorted = max_paren_groups_with_counts.sortBy(_)\n\
    \        val max_paren_groups_with_counts_sorted = max_paren_groups_with_counts_sorted.last\n\
    \        val max_paren_groups_with_counts_sorted = max_paren_groups_with_counts_sorted.take(max_paren_groups_with_counts_count)\n\
    \        val max_paren_groups_with_counts_sorted = max_paren_groups_with_counts_sorted.toList\n\
    \        val max_paren_groups_with_counts_sorted = max_paren_groups_with_counts_sorted.map(_.toLong)\n\
    \        return max_paren_groups_with_counts_sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfrv4xw1x.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmax_paren_groups_with_counts_count\e\
    [0m = max_paren_groups_with_counts_count.toLong\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_counts_count is already defined as \e\
    [33mvalue\e[0m \e[35mmax_paren_groups_with_counts_count\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfrv4xw1x.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_paren_groups_with_counts_sorted\e[0m = max_paren_groups_with_counts_sorted.last\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_counts_sorted is already defined as\
    \ \e[33mvalue\e[0m \e[35mmax_paren_groups_with_counts_sorted\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfrv4xw1x.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_paren_groups_with_counts_sorted\e[0m = max_paren_groups_with_counts_sorted.take(max_paren_groups_with_counts_count)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_counts_sorted is already defined as\
    \ \e[33mvalue\e[0m \e[35mmax_paren_groups_with_counts_sorted\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfrv4xw1x.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_paren_groups_with_counts_sorted\e[0m = max_paren_groups_with_counts_sorted.toList\n\
    \e[31m\e"
  stdout: ''
  timestamp: 1659798180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_size\
    \ = paren_groups.length\n        val paren_groups_map = mutable.Map[Long, List[Long]]()\n\
    \        var paren_groups_count = 0\n        for (i <- 0 until paren_groups_size)\
    \ {\n            val paren_group = paren_groups(i)\n            val paren_group_length\
    \ = paren_group.length\n            val paren_group_count = paren_group_length\
    \ / 2\n            val paren_group_count_map = mutable.Map[Long, Long]()\n   \
    \         for (j <- 0 until paren_group_count) {\n                val paren_group_pair\
    \ = paren_group.substring(i * 2 + 1, i * 2 + 1 + 2)\n                val paren_group_pair_length\
    \ = paren_group_pair.length\n                val paren_group_pair_count_map =\
    \ mutable.Map[Long, Long]()\n                for (k <- 0 until paren_group_pair_length)\
    \ {\n                    val paren_group_pair_pair = paren_group_pair.substring(k\
    \ * 2 + 1, k * 2 + 1 + 2)\n                    val paren_group_pair_pair_length\
    \ = paren_group_pair_pair.length\n                    val paren_group_pair_pair_count_map\
    \ = mutable.Map[Long, Long]()\n                    for (l <- 0 until paren_group_pair_pair_length)\
    \ {\n                        val paren_group_pair_pair_pair = paren_group_pair_pair.substring(l\
    \ * 2 + 1, l * 2 + 1 + 2)\n                        val paren_group_pair_pair_pair_length\
    \ = paren_group_pair_pair_pair.length\n                        val paren_group_pair_pair_pair_count_map\
    \ = mutable.Map[Long, Long]()\n                        for (m <- 0 until paren_group_pair_pair_pair_length)\
    \ {\n                            val paren_group_pair_pair_pair_pair = paren_group_pair_pair_pair.substring(m\
    \ * 2 + 1, m * 2 + 1 + 2)\n                            val paren_group_pair_pair_pair_pair_length\
    \ = paren_group_pair_pair_pair_pair.length\n                            val paren_group_pair_pair_pair_pair_count_map\
    \ = mutable.Map[Long, Long]()\n                            for (n <- 0 until paren_group_pair_pair_pair_pair_length)\
    \ {\n                                val paren_group_pair_pair_pair_pair_pair\
    \ = paren_group_pair_pair_pair_pair.substring(n * 2 + 1, n * 2 + 1 + 2)\n    \
    \                            val paren_group_pair_pair_pair_pair_pair_length =\
    \ paren_group_pair_pair_pair_pair_pair.length\n                              \
    \  val paren_group_pair_pair_pair_pair_pair_count_map = mutable.Map[Long, Long]()\n\
    \                                for (o <- 0 until paren_group_pair_pair_pair_pair_pair_length)\
    \ {\n                                    val paren_group_pair_pair_pair_pair_pair_pair\
    \ = paren_group_pair_pair_pair_pair_pair.substring(o * 2 + \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9_l3_o_9.scala:40:138 --------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                                    \e[33mval\e[0m \e\
    [36mparen_group_pair_pair_pair_pair_pair_pair\e[0m = paren_group_pair_pair_pair_pair_pair.substring(o\
    \ * \e[31m2\e[0m + \n\e[31m\e[31m   |\e[0m                                   \
    \                                                                            \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \             expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp9_l3_o_9.scala:49:0 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_l3_o_9.scala:12:31\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_map\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mList\e[0m[\e[35mLong\e\
    [0m]]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_l3_o_9.scala:18:40 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mparen_group_count_map\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                                       ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9_l3_o_9.scala:22:49 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mparen_group_pair_count_map\e\
    [0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                                                ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                 Not fo"
  stdout: ''
  timestamp: 1659798178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\"\\\\s+\")\n        val max_level\
    \ = 0\n        val max_levels = mutable.ListBuffer[Long]()\n        for (paren_group\
    \ <- paren_groups) {\n            val paren_group_levels = paren_group.split(\"\
    \\\\(\").map(_.length.toLong)\n            if (paren_group_levels.max > max_level)\
    \ {\n                max_level = paren_group_levels.max\n                max_levels\
    \ += paren_group_levels.max\n            }\n        }\n        max_levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq0hr57kn.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq0hr57kn.scala:16:28 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                max_level = paren_group_levels.max\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            Found:    Long\n\e[31m   |\e[0m     \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[Long]()\n        val paren_queue\
    \ = mutable.Queue[Long]()\n        val paren_levels = mutable.Map[Long, Long]()\n\
    \        paren_string.split(\"\\\\s+\").foreach(s => {\n            val level\
    \ = paren_queue.size\n            paren_queue.enqueue(s.toLong)\n            paren_levels(s.toLong)\
    \ = level\n        })\n        paren_queue.dequeueAll.foreach(s => {\n       \
    \     paren_stack.push(s)\n            paren_queue.dequeueAll.foreach(t => {\n\
    \                val level = paren_levels(s)\n                val paren_level\
    \ = paren_levels(t)\n                if (paren_level > level) {\n            \
    \        paren_stack.push(s)\n                    paren_stack.push(t)\n      \
    \          }\n            })\n        })\n        paren_stack.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1wprfnf.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1wprfnf.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_queue\e[0m = mutable.Queue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1wprfnf.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_levels\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_max_depth\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_with_max_depth_with_paren_groups\
    \ = mutable.ListBuffer[Long]()\n        for (paren_group <- paren_groups) {\n\
    \            val paren_group_with_max_depth = paren_group.split(\"\\\\(\").length\n\
    \            paren_groups_with_max_depth += paren_group_with_max_depth\n     \
    \       val paren_group_with_max_depth_with_paren_groups = paren_group.split(\"\
    \\\\(\").map(x => x.split(\"\\\\)\").length).max\n            paren_groups_with_max_depth_with_paren_groups\
    \ += paren_group_with_max_depth_with_paren_groups\n        }\n        paren_groups_with_max_depth.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphuusf_7r.scala:11:42 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_max_depth\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphuusf_7r.scala:12:60 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_max_depth_with_paren_groups\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val paren_groups_with_parens = paren_groups.map(x => if (x == 0) 0 else x\
    \ + 1)\n        val paren_groups_with_parens_sorted = paren_groups_with_parens.sortBy(x\
    \ => x)\n        val max_level = paren_groups_with_parens_sorted.last\n      \
    \  val max_level_groups = paren_groups_with_parens_sorted.take(max_level)\n  \
    \      val max_level_groups_sorted = max_level_groups.sortBy(x => x)\n       \
    \ val max_level_groups_sorted_with_parens = max_level_groups_sorted.map(x => if\
    \ (x == 0) 0 else x + 1)\n        val max_level_groups_sorted_with_parens_sorted\
    \ = max_level_groups_sorted_with_parens.sortBy(x => x)\n        val max_level_groups_sorted_with_parens_sorted_with_parens\
    \ = max_level_groups_sorted_with_parens_sorted.map(x => if (x == 0) 0 else x +\
    \ 1)\n        val max_level_groups_sorted_with_parens_sorted_with_parens_sorted\
    \ = max_level_groups_sorted_with_parens_sorted_with_parens.sortBy(x => x)\n  \
    \      val max_level_groups_sorted_with_parens_sorted_with_parens_sorted_with_parens\
    \ = max_level_groups_sorted_with_parens_sorted_with_parens_sorted.map(x => if\
    \ (x == 0) 0 else x + 1)\n        val max_level_groups_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted\
    \ = max_level_groups_sorted_with_parens_sorted_with_parens_sorted_with_parens.sortBy(x\
    \ => x)\n        val max_level_groups_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens\
    \ = max_level_groups_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted.map(x\
    \ => if (x == 0) 0 else x + 1)\n        val max_level_groups_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted\
    \ = max_level_groups_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens.sortBy(x\
    \ => x)\n        val max_level_groups_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens\
    \ = max_level_groups_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens.map(x\
    \ => if (x == 0) 0 else x + 1)\n        val max_level_groups_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted\
    \ = max_level_groups_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted.sortBy(x\
    \ => \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprgkgwqka.scala:25:263 --------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmax_level_groups_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted\e\
    [0m = max_level_groups_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted.sortBy(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \                                                                            \
    \                                                                            \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprgkgwqka.scala:14:68\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmax_level_groups\e\
    [0m = paren_groups_with_parens_sorted.take(max_level)\n\e[31m\e[31m   |\e[0m \
    \                                                                   ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Found:    (max_level\
    \ : Long)\n\e[31m   |\e[0m                                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprgkgwqka.scala:24:126\
    \ --------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_level_groups_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens\e\
    [0m = max_level_groups_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens_sorted_with_parens.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \                                                                            \
    \             ^\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659798181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n   \
    \     val paren_groups_with_paren_length = paren_groups_with_paren.map(x => x.length)\n\
    \        val max_paren_groups_with_paren_length = paren_groups_with_paren_length.max\n\
    \        val max_paren_groups_with_paren = paren_groups_with_paren.max\n     \
    \   val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw7949sc7.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmax_paren_groups_with_paren_length\e\
    [0m = max_paren_groups_with_paren_length.toLong\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_paren_length is already defined as \e\
    [33mvalue\e[0m \e[35mmax_paren_groups_with_paren_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw7949sc7.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_paren_groups_with_paren_length\e[0m = max_paren_groups_with_paren_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_paren_length is already defined as \e\
    [33mvalue\e[0m \e[35mmax_paren_groups_with_paren_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw7949sc7.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_paren_groups_with_paren_length\e[0m = max_paren_groups_with_paren_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax_paren_groups_with_paren_length is already defined as \e\
    [33mvalue\e[0m \e[35mmax_paren_groups_with_paren_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw7949sc7.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax_paren_groups_with_paren_length\e[0m = max_paren_groups_with_paren_length.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Int]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Int]()\n       \
    \ val paren_stack_top_top_top_top_top = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkrvfp8_v.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkrvfp8_v.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\e[0m = mutable.Stack[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_stack_top_top_top_top_top_top_top_top_top_top_top_size\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkrvfp8_v.scala:10:26 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkrvfp8_v.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_stack_size\e[0m =\
    \ mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkrvfp8_v.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_stack_top\e[0m = mutable.Stack[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-"
  stdout: ''
  timestamp: 1659798181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size.toLong\n\
    \        val paren_array_max_size_long = paren_array_max_size.toLong\n       \
    \ val paren_array_max_size_long_inverse = paren_array_max_size_long.toLong\n \
    \       val paren_array_max_size_long_inverse_inverse = paren_array_max_size_long_inverse.toLong\n\
    \        val paren_array_max_size_long_inverse_inverse_inverse = paren_array_max_size_long_inverse_inverse.toLong\n\
    \        val paren_array_max_size_long_inverse_inverse_inverse_inverse = paren_array_max_size_long_inverse_inverse_inverse.toLong\n\
    \        val paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse\
    \ = paren_array_max_size_long_inverse_inverse_inverse_inverse.toLong\n       \
    \ val paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse = paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse.toLong\n\
    \        val paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse_inverse\
    \ = paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse.toLong\n\
    \        val paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse_inverse\
    \ = paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse.toLong\n\
    \        val paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse_inverse\
    \ = paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse.toLong\n\
    \        val paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse_inverse\
    \ = paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse.toLong\n\
    \        val paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse_inverse\
    \ = paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse.toLong\n\
    \        val paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse_inverse\
    \ = paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse.toLong\n\
    \        val paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse_inverse\
    \ = paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse.toLong\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpwr3f5epj.scala:27:11 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpwr3f5epj.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size_long_inverse_inverse_inverse_inverse_inverse\e\
    [0m = paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size_long_inverse_inverse_inverse_inverse_inverse\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_array_max_size_long_inverse_inverse_inverse_inverse_inverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwr3f5epj.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size_long_inverse_inverse_inverse_inverse_inverse_inverse\e\
    [0m = paren_array_max_size_long_inverse_inverse_inverse_inverse_inverse.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_array_max_size_long_inverse_inverse_inverse_inverse_inverse_inverse\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_array_max_size_long_inverse_inverse_inverse_inverse_inverse_inverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwr3f5epj.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_array_max_size_long_inverse_inverse_inve"
  stdout: ''
  timestamp: 1659798182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_chars = paren_string.chars\n        val paren_chars_size\
    \ = paren_chars.size\n        val paren_chars_map = paren_chars.toMap\n      \
    \  val paren_chars_map_size = paren_chars_map.size\n        val paren_chars_map_keys\
    \ = paren_chars_map.keys\n        val paren_chars_map_values = paren_chars_map.values\n\
    \        val paren_chars_map_values_size = paren_chars_map_values.size\n     \
    \   val paren_chars_map_values_size_min = paren_chars_map_values_size.min\n  \
    \      val paren_chars_map_values_size_max = paren_chars_map_values_size.max\n\
    \        val paren_chars_map_values_size_max_index = paren_chars_map_values_size.lastIndex\n\
    \        val paren_chars_map_values_size_max_index_min = paren_chars_map_values_size_max_index\
    \ - paren_chars_map_values_size_min\n        val paren_chars_map_values_size_max_index_max\
    \ = paren_chars_map_values_size_max_index - paren_chars_map_values_size_min\n\
    \        val paren_chars_map_values_size_max_index_max_min = paren_chars_map_values_size_max_index_max\
    \ - paren_chars_map_values_size_min\n        val paren_chars_map_values_size_max_index_max_min_min\
    \ = paren_chars_map_values_size_max_index_max_min - paren_chars_map_values_size_min\n\
    \        val paren_chars_map_values_size_max_index_max_min_min_max = paren_chars_map_values_size_max_index_max_min_min\
    \ - paren_chars_map_values_size_min\n        val paren_chars_map_values_size_max_index_max_min_min_max_max\
    \ = paren_chars_map_values_size_max_index_max_min_min_max - paren_chars_map_values_size_min\n\
    \        val paren_chars_map_values_size_max_index_max_min_min_max_max_max = paren_chars_map_values_size_max_index_max_min_min_max_max\
    \ - paren_chars_map_values_size_min\n        val paren_chars_map_values_size_max_index_max_min_min_max_max_max_max\
    \ = paren_chars_map_values_size_max_index_max_min_min_max_max_max - paren_chars_map_values_size_min\n\
    \        val paren_chars_map_values_size_max_index_max_min_min_max_max_max_max_max\
    \ = paren_chars_map_values_size_max_index_max_min_min_max_max_max_max - paren_chars_map_values_size_min\n\
    \        val paren_chars_map_values_size_max_index_max_min_min_max_max_max_max_max_max\
    \ = paren_chars_\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3m7qydau.scala:11:43 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_size\e[0m =\
    \ paren_chars.size\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream -\
    \ did you mean paren_chars.skip?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3m7qydau.scala:12:42\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars_map\e[0m = paren_chars.toMap\n\e[31m\e[31m   |\e[0m          \
    \                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value\
    \ toMap is not a member of java.util.stream.IntStream\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp3m7qydau.scala:29:88 ------------------------\e[0m\e[0m\n\
    \e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_map_values_size_max_index_max_min_min_max_max_max_max_max_max\e\
    [0m = paren_chars_\n\e[31m\e[31m   |\e[0m                                    \
    \                                                    ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                 Not found: paren_chars_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3m7qydau.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val max_levels = paren_groups.foldLeft(0)(_ + _)\n        val max_level =\
    \ paren_groups.foldLeft(0)(_ + _)\n        val max_level_paren_groups = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size = paren_groups.foldLeft(0)(_ +\
    \ _)\n        val max_level_paren_group_size_sum = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size_product = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size_product2 = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size_product3 = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size_product4 = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size_product5 = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size_product6 = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size_product7 = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size_product8 = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size_product9 = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size_product10 = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size_product11 = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size_product12 = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size_product13 = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size_product14 = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size_product15 = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size_product16 = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_level_paren_group_size_product17 = paren_groups.foldLeft(0)(_\
    \ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkd_o2_ig.scala:11:50\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmax_levels\e\
    [0m = paren_groups.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m      \
    \                                            ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                             Found:    Long\n\e[31m   |\e[0m\
    \                                                  Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkd_o2_ig.scala:12:49 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmax_level\e[0m = paren_groups.foldLeft(\e\
    [31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m                                    \
    \             ^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \             Found:    Long\n\e[31m   |\e[0m                                \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpkd_o2_ig.scala:13:62 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax_level_paren_groups\e[0m = paren_groups.foldLeft(\e\
    [31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m                                    \
    \                          ^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkd_o2_ig.scala:14:66 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmax_level_paren_group_size\e\
    [0m = paren_groups.foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m      \
    \                                                            ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                          Found:   \
    \ Long\n\e[31m   |\e[0m                                                      \
    \  "
  stdout: ''
  timestamp: 1659798184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_level_list: List[Long] = Nil\n        val paren_level_list:\
    \ List[Long] = Nil\n        for (paren_group <- paren_groups) {\n            val\
    \ paren_group_levels = paren_group.split(\"\\\\(\").length\n            if (paren_group_levels\
    \ > max_level) {\n                max_level = paren_group_levels\n           \
    \     max_level_list = paren_group\n                paren_level_list = paren_group_levels\n\
    \            }\n        }\n        max_level_list.map(_.toLong).reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp30uzodi2.scala:17:26 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                max_level = paren_group_levels\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val max_level\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp30uzodi2.scala:18:33 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                max_level_list = paren_group\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                 Found:    (paren_group : String)\n\e[31m   |\e\
    [0m                                 Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp30uzodi2.scala:19:35 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                paren_level_list = paren_group_levels\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (paren_group_levels\
    \ : Int)\n\e[31m   |\e[0m                                   Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_chars = paren_string.split(\" \").map(_.toChar)\n     \
    \   val paren_chars_count = paren_chars.map(_.length).sum\n        val paren_chars_count_with_paren\
    \ = paren_chars_count + paren_chars.map(_.toString.length).sum\n        val paren_chars_count_with_paren_without_paren\
    \ = paren_chars_count_with_paren - paren_chars.map(_.toString.length).sum\n  \
    \      val paren_chars_count_with_paren_without_paren_without_paren = paren_chars_count_with_paren_without_paren\
    \ - paren_chars.map(_.toString.length).sum\n        val paren_chars_count_with_paren_without_paren_without_paren_without_paren\
    \ = paren_chars_count_with_paren_without_paren_without_paren - paren_chars.map(_.toString.length).sum\n\
    \        val paren_chars_count_with_paren_without_paren_without_paren_without_paren_without_paren\
    \ = paren_chars_count_with_paren_without_paren_without_paren_without_paren - paren_chars.map(_.toString.length).sum\n\
    \        val paren_chars_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ = paren_chars_count_with_paren_without_paren_without_paren_without_paren_without_paren\
    \ - paren_chars.map(_.toString.length).sum\n        val paren_chars_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ = paren_chars_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ - paren_chars.map(_.toString.length).sum\n        val paren_chars_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ = paren_chars_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ - paren_chars.map(_.toString.length).sum\n        val paren_chars_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ = paren_chars_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ - paren_chars.map(_.toString.length).sum\n        val paren_chars_count_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8i7pr8sa.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8i7pr8sa.scala:10:56\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_chars\e[0m = paren_string.split(\e[31m\" \"\e[0m).map(_.toChar)\n\e\
    [31m\e[31m   |\e[0m                                                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmp8i7pr8sa.scala:10:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_chars\e[0m = paren_string.split(\e\
    [31m\" \"\e[0m).map(_.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8i7pr8sa.scala:18:127 --------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_chars_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\e\
    [0m = paren_chars_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ - paren_chars.map(_.toString.length).sum\n\e[31m\e[31m   |\e[0m            \
    \                                                                            \
    \                                       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_chars_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren_without_paren\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp8i7pr8sa.scala:19:141 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_chars_count_wit"
  stdout: ''
  timestamp: 1659798183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n    // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
    \ 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] =\
    \ {\n        val paren_groups = paren_string.split(\" \").map(_.toLong)\n    \
    \    val paren_groups_with_paren = paren_groups.zipWithIndex.filter(_._2 == 0)\n\
    \        val paren_groups_with_paren_with_depth = paren_groups_with_paren.map(x\
    \ => x._1 -> x._2.toLong)\n        val max_depth = paren_groups_with_paren_with_depth.maxBy(x\
    \ => x._2)._1\n        val max_depth_with_paren = paren_groups_with_paren_with_depth.maxBy(x\
    \ => x._2)._2\n        val max_depth_with_paren_with_depth = paren_groups_with_paren_with_depth.filter(x\
    \ => x._2 == max_depth_with_paren).map(x => x._1 -> x._2.toLong)\n        val\
    \ max_depth_with_paren_with_depth_with_depth = max_depth_with_paren_with_depth.maxBy(x\
    \ => x._2)._2\n        val max_depth_with_paren_with_depth_with_depth_with_depth\
    \ = max_depth_with_paren_with_depth_with_depth.maxBy(x => x._2)._2\n        val\
    \ max_depth_with_paren_with_depth_with_depth_with_depth_with_depth = max_depth_with_paren_with_depth_with_depth_with_depth.maxBy(x\
    \ => x._2)._2\n        val max_depth_with_paren_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = max_depth_with_paren_with_depth_with_depth_with_depth_with_depth.maxBy(x =>\
    \ x._2)._2\n        val max_depth_with_paren_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = max_depth_with_paren_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth.maxBy(x\
    \ => x._2)._2\n        val max_depth_with_paren_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = max_depth_with_paren_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth.maxBy(x\
    \ => x._2)._2\n        val max_depth_with_paren_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = max_depth_with_paren_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth.maxBy(x\
    \ => x._2)._2\n        val \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((List[Long](4l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpipnktl3a.scala:23:11 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpipnktl3a.scala:17:111 -----------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmax_depth_with_paren_with_depth_with_depth_with_depth\e\
    [0m = max_depth_with_paren_with_depth_with_depth.maxBy(\e[36mx\e[0m => x._2)._2\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                     value maxBy is not a member of Long\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpipnktl3a.scala:20:101 --------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax_depth_with_paren_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\e\
    [0m = max_depth_with_paren_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth.maxBy(\e\
    [36mx\e[0m => x._2)._2\n\e[31m\e[31m   |\e[0m                                \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  max_depth_with_paren_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpipnktl3a.scala:21:112 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax_depth_with_paren_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\e\
    [0m = max_depth_with_paren_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth.maxBy(\e\
    [36mx\e[0m => x._2)._2\n\e[31m\e[31m   |\e[0m                                \
    \                                                                            \
    \    ^\e[0m\n\e[31m   |\e[0mRe"
  stdout: ''
  timestamp: 1659798183
