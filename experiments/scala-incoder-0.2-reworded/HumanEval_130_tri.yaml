name: HumanEval_130_tri
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1)\
  \ = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n\
  \ - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 /\
  \ 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // =\
  \ 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have\
  \ to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n\
  \    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n    assert(tri((7l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n\
  \    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
  \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong,\
  \ 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n\
  \    assert(tri((0l)).equals((List[Long](1l.toLong))));\n    assert(tri((1l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong))));\n    }\n\n}\n"
completions: ["        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n\
    \        fibs += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1).map(_.toLong)",
  "        val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        else if (n == 1) list += 3\n        else list += tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n        list.toList", "        val list = new mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n\
    \        list.take(n + 1).foreach(x => list.add(x+list.get(n-1)))\n        list.toList",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last) / 2\n        fibs += (fibs.head + fibs.last + fibs.last)\
    \ / 2\n        fibs.take(n + 1)", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "      \
    \  val list = new mutable.ListBuffer[Long]()\n        list.add(3l)\n        list.add(1l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.take(n + 1).foreach(x\
    \ => list.add(tri(n - 1) + tri(n - 2) + tri(n + 1)))\n        list.toList", " \
    \       val fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n \
    \       fibonacci += (fibonacci.head + fibonacci.last) / 2\n        fibonacci\
    \ += (fibonacci.head + fibonacci.last + fibonacci.last) / 2\n        fibonacci.take(n\
    \ + 1)", "        val fibonacci = mutable.ListBuffer[Long]()\n        fibonacci\
    \ += 3\n        fibonacci += fibonacci.last\n        fibonacci += fibonacci.last\n\
    \        fibonacci += fibonacci.last\n        fibonacci.take(n+1).toList", " \
    \       val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        else if (n == 1) list += 3\n        else if (n % 2 == 0) list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2)\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        val a = 2l\n        val b = 3l\n        val c = a + b\n        val d\
    \ = c + a\n        val e = d + b\n        val f = e + c\n        val g = f + d\n\
    \        val h = g + e\n        val i = h + f\n        val j = i + g\n       \
    \ val k = j + h\n        val l = k + i\n        list += a\n        list += b\n\
    \        list += c\n        list += d\n        list += e\n        list += f\n\
    \        list += g\n        list += h\n        list += i\n        list += j\n\
    \        list += k\n        list += l\n        list.toList", "        val fibs\
    \ = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last + fibs.last\
    \ + fibs.last)\n        fibs.take(n + 1).map(_.toLong)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.drop(2).head).toLong\n        fibs.take(n\
    \ + 1).map(_.toLong)", "        val list = mutable.ListBuffer[Long]()\n      \
    \  list.add(3l)\n        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n\
    \        list.take(n+1).foreach(x => list.add(tri(list.last)(x)))\n        list.toList",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n        fibs +=\
    \ (fibs.head + fibs.last + fibs.dropRight(2).head).toLong\n        fibs.take(n\
    \ + 1).map(_.toLong)", "        val list = new mutable.ListBuffer[Long]()\n  \
    \      if (n <= 1l) list += n\n        else {\n            val a = tri(n - 1l)\n\
    \            val b = tri(n - 2l)\n            list += a(0l) + b(1l) + a(2l)\n\
    \        }\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n\
    \        list.take(n + 1).foreach(x => list.add(x.toLong + list.last))\n     \
    \   list.toList", "        val list = mutable.ListBuffer[Long]()\n        list.add(3l)\n\
    \        if (n % 2 == 0) {\n            list.add(1l)\n            list.add(n /\
    \ 2l)\n        } else {\n            list.add(tri(n - 1l) + tri(n - 2l) + tri(n\
    \ + 1l))\n        }\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "      \
    \  val list = mutable.ListBuffer[Long]()\n        val a = 2\n        val b = 3\n\
    \        val c = a + b\n        val d = c + a\n        val e = d + b\n       \
    \ val f = e + c\n        val g = f + d\n        val h = g + e\n        val i =\
    \ h + f\n        val j = i + g\n        val k = j + h\n        val l = k + i\n\
    \        list += a\n        list += b\n        list += c\n        list += d\n\
    \        list += e\n        list += f\n        list += g\n        list += h\n\
    \        list += i\n        list += j\n        list += k\n        list += l\n\
    \        list.toList", "        val a = 2l\n        val b = 3l\n        val c\
    \ = a + b\n        val d = c + a\n        val e = d + b\n        val f = e + c\n\
    \        val g = f + d\n        val h = g + e\n        val i = h + f\n       \
    \ val j = i + g\n        val k = j + h\n        val l = k + i\n        val m =\
    \ l + j\n        val n = m + k\n        val o = (n + m).toLong\n        List(1l.toLong,\
    \ 3l.toLong, o).reverse", "        val fibs = mutable.ListBuffer[Long]()\n   \
    \     fibs += 3\n        fibs += (fibs.last + fibs.last + fibs.last)\n       \
    \ fibs += (fibs.last + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).toList", "        val fib : mutable.MutableList[Long] = mutable.MutableList(1)\n\
    \        fib.add(3)\n        fib.add(fib.last.head + fib.last.tail.head + fib.last.tail.tail.head)\n\
    \        fib.add(fib.last.head + fib.last.tail.head + fib.last.tail.tail.tail.head\
    \ + fib.last.tail.tail.tail.tail.tail.head)\n        fib.add(fib.last.head + fib.last.tail.head\
    \ + fib.last.tail.tail.tail.head + fib.last.tail.tail.tail.tail.tail.tail.head\
    \ + fib.last.tail.tail.tail.tail.tail.tail.tail.tail.head)\n        fib.add(fib.last.head\
    \ + fib.last.tail.head + fib.last.tail.tail.tail.head + fib.last.tail.tail.tail.tail.tail.head\
    \ + fib.last.tail.tail.tail.tail.tail.tail.tail.head + fib.last.tail.tail.tail.tail.tail.tail.tail.tail.tail.head)\n\
    \        fib.add(fib.last.head + fib.last.tail.head + fib.last.tail.tail.tail.head\
    \ + fib.last.tail.tail.tail.tail.head + fib.last.tail.tail.tail.tail.tail.head\
    \ + fib.last.tail.tail.tail.tail.tail.tail.tail.head + fib.last.tail.tail.tail.tail.tail.tail.tail.tail.head)\n\
    \        fib.add(fib.last.head + fib.last.tail.head + fib.last.tail.tail.tail.head\
    \ + fib.last.tail.tail.tail.tail.head + fib.last.tail.tail.tail.tail.head + fib.last.tail.tail.tail.tail.head\
    \ + fib.last.tail.tail.tail.head + fib.last.tail.tail.head + fib.last.tail.head)\n\
    \        fib.add(fib.last.head + fib.last.tail.head + fib.last.tail.tail.head\
    \ + fib.last.tail.tail.head + fib.last.tail.tail.head + fib.last.", "        val\
    \ list = mutable.ListBuffer[Long]()\n        val a = 2l\n        val b = 3l\n\
    \        val c = a + b\n        val d = c + a\n        val e = d + b\n       \
    \ val f = e + c\n        val g = f + d\n        val h = g + e\n        val i =\
    \ h + f\n        val j = i + g\n        val k = j + h\n        val l = k + i\n\
    \        list += a\n        list += b\n        list += c\n        list += d\n\
    \        list += e\n        list += f\n        list += g\n        list += h\n\
    \        list += i\n        list += j\n        list += k\n        list += l\n\
    \        list.toList", "        val rec : PartialFunction[Long, List[Long]] =\
    \ {\n            case 0 => List(0l)\n            case 1 => List(1l)\n        \
    \    case n => \n                val a = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \                if (n % 2 == 0) a.head :: a\n                else a\n       \
    \ }\n        rec.apply(n)", "        val list = new mutable.ListBuffer[Long]()\n\
    \        val a = n.toLong\n        val b = n.toLong + 1\n        val c = n.toLong\
    \ + 2\n        list += a\n        list += b\n        list += c\n        list.toList",
  "        val list = mutable.ListBuffer[Long]()\n        val a = if (n % 2 == 0)\
    \ 3 else 1\n        val b = if (n % 2 == 0) 1 else 1\n        val c = if (n %\
    \ 2 == 0) 1 else 1\n        val d = if (n % 2 == 0) 1 else 1\n        val tri\
    \ = a + b + c + d\n        list += tri\n        list += tri\n        list += tri\n\
    \        list += tri\n        list += tri\n        list += tri\n        list +=\
    \ tri\n        list += tri\n        list += tri\n        list += tri\n       \
    \ list += tri\n        list += tri\n        list += tri\n        list += tri\n\
    \        list += tri\n        list += tri\n        list += tri\n        list +=\
    \ tri\n        list += tri\n        list += tri\n        list += tri\n       \
    \ list += tri\n        list += tri\n        list += tri\n        list += tri\n\
    \        list += tri\n        list += tri\n        list += tri\n        list +=\
    \ tri\n        list += tri\n        list += tri\n        list += tri\n       \
    \ list += tri\n        list += tri\n        list += tri\n        list += tri\n\
    \        list += tri\n        list += tri\n        list += tri\n        list +=\
    \ tri\n        list += tri\n        list += tri\n        list += tri\n       \
    \ list += tri\n        list += tri\n        list += tri\n        list += tri\n\
    \        list += tri\n        list += tri\n        list += tri\n        list +=\
    \ tri\n        list += tri\n        list += tri\n        list += tri\n       \
    \ list += tri\n        list += tri\n        list += tri\n        list += tri\n\
    \        list += tri\n        list += tri\n        list += tri\n        list +=\
    \ tri\n        list += tri\n        list += tri\n        list += tri\n       \
    \ list += tri\n        list += tri\n        list += tri\n        list += tri\n\
    \        list += tri\n        list += tri\n        list += tri\n        list +=\
    \ tri\n        list += tri\n        list += tri\n        list += tri\n       \
    \ list += tri\n        list += tri\n        list += tri\n        list += tri\n\
    \        list += tri\n        list += tri\n        list += tri\n        list +=\
    \ tri\n        list += tri\n        list += tri\n        list += tri\n       \
    \ list += tri\n        list += tri\n        list += tri", "        val fibs =\
    \ mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head +\
    \ fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last + fibs.last +\
    \ fibs.last)\n        fibs.take(n + 1).map(_.toLong)", "        val rec : PartialFunction[Long,\
    \ List[Long]] = {\n            case 0 => List(0l)\n            case 1 => List(1l)\n\
    \            case n => \n                val first = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n                first :: first\n        }\n        rec.apply(n)",
  "        val fib : List[Long] = List(0l, 1l, 2l)\n        val tri : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri_sum : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri_sum_index : List[Long] = List(0l, 1l, 2l)\n        val tri_sum_index2\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tri_sum_index3 : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tri_sum_index4 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri_sum_index5 : List[Long] = List(0l, 1l, 2l)\n        val tri_sum_index6\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tri_sum_index7 : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tri_sum_index8 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri_sum_index9 : List[Long] = List(0l, 1l, 2l)\n        val tri_sum_index10\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tri_sum_index11 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri_sum_index12 : List[Long] = List(0l, 1l, 2l)\n\
    \        val tri_sum_index13 : List[Long] = List(0l, 1l, 2l)\n        val tri_sum_index14\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tri_sum_index15 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri_sum_index16 : List[Long] = List(0l, 1l, 2l)\n\
    \        val tri_sum_index17 : List[Long] = List(0l, 1l, 2l)\n        val tri_sum_index18\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tri_sum_index19 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri_sum_index20 : List[Long] = List(0l, 1l, 2l)\n\
    \        val tri_sum_index21 : List[Long] = List(0l, 1l, 2l)\n        val tri_sum_index22\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tri_sum_index23 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri_sum_index24 : List[Long] = List(0l, 1l, 2l)\n\
    \        val tri_sum_index25 : List[Long] = List(0l, 1", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        list.add(1l)\n        list.add(nl.toLong)\n   \
    \     list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n      \
    \  list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n  \
    \      list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n     \
    \   list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n \
    \       list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n    \
    \    list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)", "        val fibs = mutable.ListBuffer[Long]()\n \
    \       fibs += 3\n        fibs += (fibs.head + fibs.last) / 2\n        fibs +=\
    \ (fibs.head + fibs.last + fibs.last) / 2\n        fibs.take(n + 1)", "      \
    \  val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last) / 2\n        fibs += (fibs.head + fibs.last + fibs.last) / 2\n\
    \        fibs.take(n + 1).map(_.toLong)", "        val rec : PartialFunction[Long,\
    \ List[Long]] = {\n            case 0 => List(0l)\n            case 1 => List(1l)\n\
    \            case n => \n                val a = tri(n - 1)\n                val\
    \ b = tri(n - 2)\n                val c = tri(n + 1)\n                a ::: b\
    \ ::: c\n        }\n        rec.apply(n)", "        val fib : List[Long] = List(1l,\
    \ 3l)\n        val tri : List[Long] = if (n % 2 == 0) fib else fib.tail.zip(fib.tail.tail).map\
    \ {\n            case (l, r) => l + r\n        }\n        tri.take(n + 1).map(_.toLong)",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last\
    \ + fibs.last + fibs.last)\n        fibs.take(n + 1).map(_.toLong).toList", " \
    \       val list = mutable.ListBuffer[Long]()\n        val tri1 = list.add(3l)\n\
    \        val tri2 = list.add(tri1.getOrElse(0l) + tri1.getOrElse(1l))\n      \
    \  val tri3 = list.add(tri2.getOrElse(0l) + tri2.getOrElse(1l) + tri2.getOrElse(2l))\n\
    \        val tri4 = list.add(tri3.getOrElse(0l) + tri3.getOrElse(1l) + tri3.getOrElse(2l)\
    \ + tri3.getOrElse(3l))\n        list += tri4\n        list.toList", "       \
    \ val list = new mutable.ListBuffer[Long]()\n        list.add(3l)\n        if\
    \ (n % 2 == 0) {\n            list.add(1l)\n            list.add(n / 2l)\n   \
    \     } else {\n            list.add(tri(n - 1l) + tri(n - 2l) + tri(n + 1l))\n\
    \        }\n        list.toList", "        val fibonacci = mutable.ListBuffer[Long]()\n\
    \        fibonacci += 3\n        fibonacci += (fibonacci.head + fibonacci.last)\
    \ / 2\n        fibonacci += (fibonacci.head + fibonacci.last + fibonacci.last)\
    \ / 2\n        fibonacci.take(n + 1).map(_.toLong)", "        val a = mutable.ListBuffer[Long]()\n\
    \        val b = mutable.ListBuffer[Long]()\n        val c = mutable.ListBuffer[Long]()\n\
    \        val d = mutable.ListBuffer[Long]()\n        val e = mutable.ListBuffer[Long]()\n\
    \        val f = mutable.ListBuffer[Long]()\n        val g = mutable.ListBuffer[Long]()\n\
    \        val h = mutable.ListBuffer[Long]()\n        val i = mutable.ListBuffer[Long]()\n\
    \        val j = mutable.ListBuffer[Long]()\n        val k = mutable.ListBuffer[Long]()\n\
    \        val l = mutable.ListBuffer[Long]()\n        val m = mutable.ListBuffer[Long]()\n\
    \        val n = mutable.ListBuffer[Long]()\n        val o = mutable.ListBuffer[Long]()\n\
    \        val p = mutable.ListBuffer[Long]()\n        val q = mutable.ListBuffer[Long]()\n\
    \        val r = mutable.ListBuffer[Long]()\n        val s = mutable.ListBuffer[Long]()\n\
    \        val t = mutable.ListBuffer[Long]()\n        val u = mutable.ListBuffer[Long]()\n\
    \        val v = mutable.ListBuffer[Long]()\n        val w = mutable.ListBuffer[Long]()\n\
    \        val x = mutable.ListBuffer[Long]()\n        val y = mutable.ListBuffer[Long]()\n\
    \        val z = mutable.ListBuffer[Long]()\n        val a = mutable.ListBuffer[Long]()\n\
    \        val b = mutable.ListBuffer[Long]()\n        val c = mutable.ListBuffer[Long]()\n\
    \        val d = mutable.ListBuffer[Long]()\n        val e = mutable.ListBuffer[Long]()\n\
    \        val f = mutable.ListBuffer[Long]()\n        val g = mutable.ListBuffer[Long]()\n\
    \        val h = mutable.ListBuffer[Long]()\n        val i = mutable.ListBuffer[Long]()\n\
    \        val j = mutable.ListBuffer[Long]()\n        val k = mutable.ListBuffer[Long]()\n\
    \        val l = mutable.ListBuffer[Long]()\n        val m = mutable.ListBuffer[Long]()\n\
    \        val n = mutable.ListBuffer[Long]()\n        val o = mutable.ListBuffer[Long]()\n\
    \        val p = mutable.ListBuffer[Long]()\n        val q = mutable.ListBuffer[",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.last + fibs.last\
    \ + fibs.head)\n        fibs.take(n + 1).map(_.toLong)", "        val list = new\
    \ mutable.ListBuffer[Long]()\n        list.add(3l)\n        list.add(1l)\n   \
    \     list.add(2l)\n        list.add(8l)\n        list.take(n + 1).foreach(x =>\
    \ list.add(x.toLong + list.last))\n        list.toList", "        val fib : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri2 : List[Long] = List(0l, 1l, 2l)\n        val tri3 : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tri4 : List[Long] = List(0l, 1l, 2l)\n        val tri5\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tri6 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri7 : List[Long] = List(0l, 1l, 2l)\n        val tri8 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri9 : List[Long] = List(0l, 1l, 2l)\n     \
    \   val tri10 : List[Long] = List(0l, 1l, 2l)\n        val tri11 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri12 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri13 : List[Long] = List(0l, 1l, 2l)\n        val tri14 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri15 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri16 : List[Long] = List(0l, 1l, 2l)\n        val tri17 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri18 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri19 : List[Long] = List(0l, 1l, 2l)\n        val tri20 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri21 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri22 : List[Long] = List(0l, 1l, 2l)\n        val tri23 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri24 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri25 : List[Long] = List(0l, 1l, 2l)\n        val tri26 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri27 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri28 : List[Long] = List(0l, 1l, 2l)\n        val tri29 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri30 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri31 : List[Long] = List(0l, 1l, 2l)\n        val tri32 : List[Long",
  "        val result = new mutable.ListBuffer[Long]()\n        val a = 2\n      \
    \  val b = 3\n        val c = a + b\n        val d = c + a\n        val e = d\
    \ + b\n        val f = e + c\n        val g = f + d\n        val h = g + e\n \
    \       val i = h + f\n        val j = i + g\n        val k = j + h\n        val\
    \ l = k + i\n        result += a\n        result += b\n        result += c\n \
    \       result += d\n        result += e\n        result += f\n        result\
    \ += g\n        result += h\n        result += i\n        result += j\n      \
    \  result += k\n        result += l\n        result.toList", "        val list\
    \ = mutable.ListBuffer[Long]()\n        if (n <= 1) list += n\n        else {\n\
    \            val a = tri(n - 1)\n            val b = tri(n - 2)\n            list\
    \ += a(0)\n            list += b(0)\n            list += a(0) + b(0)\n       \
    \ }\n        list.toList", "        val fibo = mutable.ListBuffer[Long]()\n  \
    \      fibo += 3\n        fibo += (fibo(1) + fibo(2))\n        fibo += (fibo(1)\
    \ + fibo(2) + fibo(3))\n        fibo.toList", "        val fibo = mutable.ListBuffer[Long]()\n\
    \        fibo += 3\n        fibo += (fibo(1) + fibo(2))\n        fibo += (fibo(1)\
    \ + fibo(2) + fibo(3))\n        fibo.toList", "        val rec : Long => List[Long]\
    \ = { \n            if (n == 0) List(1l.toLong)\n            else { \n       \
    \         val a = tri(n - 1); \n                val b = tri(n - 2); \n       \
    \         val c = tri(n - 3); \n                a ::: b ::: c ::: List(nl.toLong)\
    \ \n            } \n        }\n        rec(n)", "        val tri1 = (3l).toLong\n\
    \        val tri2 = tri1\n        val tri3 = tri2\n        val tri4 = tri3\n \
    \       val tri5 = tri4\n        val tri6 = tri5\n        val tri7 = tri6\n  \
    \      val tri8 = tri7\n        val tri9 = tri8\n        val tri10 = tri9\n  \
    \      val tri11 = tri10\n        val tri12 = tri11\n        val tri13 = tri12\n\
    \        val tri14 = tri13\n        val tri15 = tri14\n        val tri16 = tri15\n\
    \        val tri17 = tri16\n        val tri18 = tri17\n        val tri19 = tri18\n\
    \        val tri20 = tri19\n        val tri21 = tri20\n        val tri22 = tri21\n\
    \        val tri23 = tri22\n        val tri24 = tri23\n        val tri25 = tri24\n\
    \        val tri26 = tri25\n        val tri27 = tri26\n        val tri28 = tri27\n\
    \        val tri29 = tri28\n        val tri30 = tri29\n        val tri31 = tri30\n\
    \        val tri32 = tri31\n        val tri33 = tri32\n        val tri34 = tri33\n\
    \        val tri35 = tri34\n        val tri36 = tri35\n        val tri37 = tri36\n\
    \        val tri38 = tri37\n        val tri39 = tri38\n        val tri40 = tri39\n\
    \        val tri41 = tri40\n        val tri42 = tri41\n        val tri43 = tri42\n\
    \        val tri44 = tri43\n        val tri45 = tri44\n        val tri46 = tri45\n\
    \        val tri47 = tri46\n        val tri48 = tri47\n        val tri49 = tri48\n\
    \        val tri50 = tri49\n        val tri51 = tri50\n        val tri52 = tri51\n\
    \        val tri53 = tri52\n        val tri54 = tri53\n        val tri55 = tri54\n\
    \        val tri56 = tri55\n        val tri57 = tri56\n        val tri58 = tri57\n\
    \        val tri59 = tri58\n        val tri60 = tri59\n        val tri61 = tri60\n\
    \        val tri62 = tri61\n        val tri63 = tri62\n        val tri64 = tri63\n\
    \        val tri65 = tri64\n        val ", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        if (n % 2 == 0) {\n            list.add(1l)\n \
    \           list.add(n / 2l)\n        }\n        else {\n            list.add(tri(n\
    \ - 1l) + tri(n - 2l) + tri(n + 1l))\n        }\n        list.toList", "     \
    \   val result = new mutable.ListBuffer[Long]()\n        val a = tri(n - 1)\n\
    \        val b = tri(n - 2)\n        val c = tri(n + 1)\n        result ++= a\n\
    \        result ++= b\n        result ++= c\n        result.toList", "       \
    \ val list = new mutable.ListBuffer[Long]()\n        val a = tri(n - 1)\n    \
    \    val b = tri(n - 2)\n        val c = tri(n + 1)\n        list += a\n     \
    \   list += b\n        list += c\n        list.toList", "        val rec : PartialFunction[Long,\
    \ List[Long]] = {\n            case 0 => List(1l)\n            case 1 => List(3l)\n\
    \            case 2 => List(2l)\n            case n => tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n        }\n        rec.apply(n)", "        val fibonacci = mutable.ListBuffer[Long]()\n\
    \        fibonacci += 3\n        fibonacci += fibonacci.last\n        fibonacci\
    \ += fibonacci.last\n        fibonacci += fibonacci.last\n        fibonacci.take(n\
    \ + 1).toList", "        val list = new mutable.ListBuffer[Long]()\n        if\
    \ (n == 0) list += 0\n        if (n == 1) list += 3\n        if (n % 2 == 0) list\
    \ += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n        list.toList", "        val fibonacci\
    \ = mutable.ListBuffer[Long]()\n        fibonacci += 3\n        fibonacci += (fibonacci.head\
    \ + fibonacci.tail.head) / 2\n        fibonacci += (fibonacci.head + fibonacci.tail.tail.head)\
    \ / 2\n        fibonacci += (fibonacci.head + fibonacci.tail.tail.tail.head) /\
    \ 2\n        fibonacci.toList", "        val list = new mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        list.add(1l)\n        list.add(nl.toLong)\n   \
    \     list.add(2l)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(n",
  "        val list = mutable.ListBuffer[Long]()\n        val a = tri(n-1) + tri(n-2)\
    \ + tri(n+2)\n        list += a\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n\
    \        list.take(n + 1).foreach(x => list.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)))\n        list.toList", "        val ls = ListBuffer[Long]()\n       \
    \ if (n == 0) ls += 0\n        else if (n == 1) ls += 3\n        else if (n %\
    \ 2 == 0) ls += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else ls += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n / 2)\n        ls.toList", "        val\
    \ fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last + fibs.last\
    \ + fibs.last)\n        fibs.take(n + 1).map(_.toLong)", "        val a = mutable.ListBuffer[Long]()\n\
    \        val b = mutable.ListBuffer[Long]()\n        val c = mutable.ListBuffer[Long]()\n\
    \        val d = mutable.ListBuffer[Long]()\n        val e = mutable.ListBuffer[Long]()\n\
    \        val f = mutable.ListBuffer[Long]()\n        val g = mutable.ListBuffer[Long]()\n\
    \        val h = mutable.ListBuffer[Long]()\n        val i = mutable.ListBuffer[Long]()\n\
    \        val j = mutable.ListBuffer[Long]()\n        val k = mutable.ListBuffer[Long]()\n\
    \        val l = mutable.ListBuffer[Long]()\n        val m = mutable.ListBuffer[Long]()\n\
    \        val n = mutable.ListBuffer[Long]()\n        val o = mutable.ListBuffer[Long]()\n\
    \        val p = mutable.ListBuffer[Long]()\n        val q = mutable.ListBuffer[Long]()\n\
    \        val r = mutable.ListBuffer[Long]()\n        val s = mutable.ListBuffer[Long]()\n\
    \        val t = mutable.ListBuffer[Long]()\n        val u = mutable.ListBuffer[Long]()\n\
    \        val v = mutable.ListBuffer[Long]()\n        val w = mutable.ListBuffer[Long]()\n\
    \        val x = mutable.ListBuffer[Long]()\n        val y = mutable.ListBuffer[Long]()\n\
    \        val z = mutable.ListBuffer[Long]()\n        val a = mutable.ListBuffer[Long]()\n\
    \        val b = mutable.ListBuffer[Long]()\n        val c = mutable.ListBuffer[Long]()\n\
    \        val d = mutable.ListBuffer[Long]()\n        val e = mutable.ListBuffer[Long]()\n\
    \        val f = mutable.ListBuffer[Long]()\n        val g = mutable.ListBuffer[Long]()\n\
    \        val h = mutable.ListBuffer[Long]()\n        val i = mutable.ListBuffer[Long]()\n\
    \        val j = mutable.ListBuffer[Long]()\n        val k = mutable.ListBuffer[Long]()\n\
    \        val l = mutable.ListBuffer[Long]()\n        val m = mutable.ListBuffer[Long]()\n\
    \        val n = mutable.ListBuffer[Long]()\n        val o = mutable.ListBuffer[Long]()\n\
    \        val p = mutable.ListBuffer[Long]()\n        val q = mutable.ListBuffer[",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3l)\n        list.add(1l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.", "        val list = new mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        if (n == 1) list += 3\n        if (n %\
    \ 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n        list.toList", "       \
    \ val rec : Long => Long = { n =>\n            if (n <= 1L) 1L\n            else\
    \ (n / 2L) + tri(n - 1L) + tri(n - 2L) + tri(n + 1L)\n        }\n        val res\
    \ : List[Long] = List(rec(1L), rec(2L), rec(3L))\n        res", "        val rec\
    \ : PartialFunction[Long, List[Long]] = {\n            case 0 => List(1L)\n  \
    \          case 1 => List(3L)\n            case 2 => List(2L)\n            case\
    \ 3 => List(8L)\n            case 4 => List(3L, 2L, 1L, 8L)\n            case\
    \ 5 => List(5L, 3L, 7L, 5L, 3L, 2L, 1L, 8L)\n            case 6 => List(6L, 5L,\
    \ 8L, 6L, 5L, 3L, 7L, 5L, 3L, 2L, 1L, 8L)\n            case 7 => List(7L, 6L,\
    \ 8L, 7L, 6L, 5L, 8L, 6L, 5L, 3L, 7L, 5L, 3L, 2L, 1L, 8L)\n            case 8\
    \ => List(8L, 7L, 9L, 8L, 7L, 6L, 9L, 8L, 7L, 6L, 5L, 9L, 8L, 7L, 6L, 5L, 3L,\
    \ 2L, 1L, 8L)\n            case 9 => List(9L, 8L, 10L, 9L, 8L, 7L, 10L, 9L, 8L,\
    \ 7L, 6L, 10L, 9L, 8L, 7L, 6L, 5L, 10L, 9L, 8L, 7L, 6L, 5L, 3L, 2L, 1L, 8L)\n\
    \            case 10 => List(10L, 9L, 11L, 10L, 9L, 8L, 11L, 10L, 9L, 8L, 7L,\
    \ 11L, 10L, 9L, 8L, 7L, 6L, 11L, 10L, 9L, 8L, 7L, 6L, 5L, 11L, 10L, 9L, 8L, 7L,\
    \ 6L, 5L, 3L, 2L, 1L, 8L)\n            case 11 => List(11L, 10L, 12L, 11L, 10L,\
    \ 9L, 12L, 11L, 10L, 9L, 8L, 12L, 11L, 10L, 9L, 8L, 7L, 12L, 11L, 10L, 9L, 8L,\
    \ 7L, 6L, 12L, 11L, 10L, 9L, 8L, 7L, 6L, 5L, 12L, 11L, 10L, 9L, 8L, 7L, 6L, 5L,\
    \ 3L, 2L, 1L, 8L)\n            case 12 => List(12L, 11L, 13L, 12L, 11L, 10L, 13L,\
    \ 12L, 11L, 10L, 9L, 13L, 12L, 11L, 10L, 9L, 8L, 13L, 12L, 11L, 10L, 9L, 8L, 7L,\
    \ 13L, 12L, 11L, 10L, 9L, 8L, 7L, 6L, 13L, 12L, 11L, 10L, 9L, 8L, 7L, 6L, 5L,\
    \ 13L, 12L, 11L, 10L, 9L, 8", "        val fibs = mutable.ListBuffer.empty[Long]\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n+1).toList",
  "        val rec : PartialFunction[Long, List[Long]] = {\n            case 0 =>\
    \ List(0l)\n            case 1 => List(1l)\n            case n => \n         \
    \       val n1 = n - 1\n                val n2 = n - 2\n                val n3\
    \ = n + 1 \n                val n4 = n + 1\n                val n5 = n + 1\n \
    \               val n6 = n + 1\n                val n7 = n + 1\n             \
    \   val n8 = n + 1\n                val n9 = n + 1\n                val n10 =\
    \ n + 1\n                val n11 = n + 1\n                val n12 = n + 1\n  \
    \              val n13 = n + 1\n                val n14 = n + 1\n            \
    \    val n15 = n + 1\n                val n16 = n + 1\n                val n17\
    \ = n + 1\n                val n18 = n + 1\n                val n19 = n + 1\n\
    \                val n20 = n + 1\n                val n21 = n + 1\n          \
    \      val n22 = n + 1\n                val n23 = n + 1\n                val n24\
    \ = n + 1\n                val n25 = n + 1\n                val n26 = n + 1\n\
    \                val n27 = n + 1\n                val n28 = n + 1\n          \
    \      val n29 = n + 1\n                val n30 = n + 1\n                val n31\
    \ = n + 1\n                val n32 = n + 1\n                val n33 = n + 1\n\
    \                val n34 = n + 1\n                val n35 = n + 1\n          \
    \      val n36 = n + 1\n                val n37 = n + 1\n                val n38\
    \ = n + 1\n                val n39 = n + 1\n                val n40 = n + 1\n\
    \                val n41 = n + 1\n                val n42 = n + 1\n          \
    \      val n43 = n + 1\n                val n44 = n + 1\n                val n45\
    \ = n + 1\n                val n46 = n + 1\n                val n47 = n + 1\n\
    \                val n48 = n + 1\n                val n49 = n + 1\n          \
    \      val n50 = n + 1\n                val n51 = n + 1\n                val n52\
    \ = n + 1\n                val n53 = n + 1\n                val n54 = n + 1\n\
    \                val n55 = n + 1\n                val n56 = n + 1\n          \
    \      val n57 = n + 1\n                val n58 = n + 1\n                val n59\
    \ = n + 1\n                val n60 = n + 1\n                val n61 = n + 1\n\
    \                val n62 = n + 1\n                val n63 = n + 1\n          \
    \      val n64 = n + 1\n                val n65 = n + 1\n                val n66\
    \ = n + 1\n                val n67 = n", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.dropRight(2).head).toLong\n   \
    \     fibs.take(n + 1).toList", "        val fibonacci : List[Long] = List(1l,\
    \ 3l)\n        val tribonacci : List[Long] = fibonacci.take(n + 1).map(x => x\
    \ + x.toLong)\n        tribonacci", "        val fibo = mutable.ListBuffer[Long]()\n\
    \        fibo += 3\n        fibo.take(n + 1).foreach(x => fibo += x)\n       \
    \ fibo.take(n + 1).reverse", "        val fibonacci = mutable.ListBuffer[Long]()\n\
    \        fibonacci += 3\n        fibonacci += (fibonacci(1) + fibonacci(2))\n\
    \        fibonacci += (fibonacci(1) + fibonacci(2) + fibonacci(3))\n        fibonacci.toList",
  "        val list = mutable.ListBuffer[Long]()\n        val a = 2\n        val b\
    \ = 3\n        val c = a + b\n        val d = c + a\n        val e = d + b\n \
    \       val f = e + c\n        val g = f + d\n        val h = g + e\n        val\
    \ i = h + f\n        val j = i + g\n        val k = j + h\n        val l = k +\
    \ i\n        list += a\n        list += b\n        list += c\n        list +=\
    \ d\n        list += e\n        list += f\n        list += g\n        list +=\
    \ h\n        list += i\n        list += j\n        list += k\n        list +=\
    \ l\n        list.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val a = 2l\n        val b = 3l\n        val c = a + b\n        val d\
    \ = c + a\n        val e = d + b\n        val f = e + c\n        val g = f + d\n\
    \        val h = g + e\n        val i = h + f\n        val j = i + g\n       \
    \ val k = j + h\n        val l = k + i\n        result ++= List(a,b,c,d,e,f,g,h,i,j,k,l)\n\
    \        result.toList", "        val fibs = mutable.ListBuffer[Long]()\n    \
    \    fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.drop(2).head).toLong\n        fibs.take(n\
    \ + 1).toList", "        val list = new mutable.ListBuffer[Long]()\n        if\
    \ (n == 0) list += 0\n        else if (n == 1) list += 3\n        else list +=\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "        val fibs\
    \ = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last + fibs.last\
    \ + fibs.last)\n        fibs.take(n + 1).map(_.toLong)", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n\
    \        list.take(n+1).foreach(x => list.add(x+list.get(n-1)))\n        list.toList",
  "        val rec = new mutable.ListBuffer[Long]()\n        rec += 3\n        if\
    \ (n <= 1) rec\n        else {\n            val even = tri(n - 1)\n          \
    \  val odd = tri(n - 2) + tri(n + 1)\n            rec ++= even\n            rec\
    \ ++= odd\n        }", "        val list = new mutable.ListBuffer[Long]()\n  \
    \      list.+=(n)\n        if (n<2) list\n        else {\n            val a =\
    \ tri(n-1)\n            val b = tri(n-2)\n            val c = tri(n+1)\n     \
    \       list.+=(a+b+c)\n        }", "        val l1 = if (n % 2 == 0) 3l else\
    \ 1l\n        val l2 = if (n % 2 == 0) 1l else 3l\n        val l3 = if (n % 2\
    \ == 1) 1l else 3l\n        val l4 = if (n % 2 == 1) 3l else 1l\n        val l5\
    \ = if (n % 2 == 0) 3l else 2l\n        val l6 = if (n % 2 == 1) 3l else 2l\n\
    \        val l7 = if (n % 2 == 1) 2l else 1l\n        val l8 = if (n % 2 == 0)\
    \ 2l else 1l\n        val l9 = if (n % 2 == 1) 2l else 3l\n        val l10 = if\
    \ (n % 2 == 1) 3l else 2l\n        val l11 = if (n % 2 == 0) 2l else 3l\n    \
    \    val l12 = if (n % 2 == 1) 2l else 3l\n        val l13 = if (n % 2 == 1) 3l\
    \ else 2l\n        val l14 = if (n % 2 == 0) 2l else 3l\n        val l15 = if\
    \ (n % 2 == 1) 2l else 3l\n        val l16 = if (n % 2 == 1) 3l else 2l\n    \
    \    val l17 = if (n % 2 == 0) 2l else 3l\n        val l18 = if (n % 2 == 1) 2l\
    \ else 3l\n        val l19 = if (n % 2 == 1) 3l else 2l\n        val l20 = if\
    \ (n % 2 == 0) 2l else 3l\n        val l21 = if (n % 2 == 1) 2l else 3l\n    \
    \    val l22 = if (n % 2 == 1) 3l else 2l\n        val l23 = if (n % 2 == 0) 2l\
    \ else 3l\n        val l24 = if (n % 2 == 1) 2l else 3l\n        val l25 = if\
    \ (n % 2 == 1) 3l else 2l\n        val l26 = if (n % 2 == 0) 2l else 3l\n    \
    \    val l27 = if (n % 2 == 1) 2l else 3l\n        val l28 = if (n % 2 == 1) 3l\
    \ else 2l\n        val l29 = if (n % 2 == 0) 2l else 3l\n        val l30 = if\
    \ (n % 2 == 1) 2l else 3l\n        val l31 = if (n % 2 == 1) 3l else 2l\n    \
    \    val l32 = if (n % 2 == 0) 2l else 3l\n        val l33 = if (n % 2 == 1) 2l\
    \ else 3l\n        val l34 = if (n % 2 == 1) 3l else 2l\n        val l35 = if\
    \ (n % 2 == 0) 2l else 3l\n", "        val list = mutable.ListBuffer[Long]()\n\
    \        val a = 2\n        val b = 3\n        val c = a + b\n        val d =\
    \ c + a\n        val e = d + b\n        val f = e + c\n        list += a\n   \
    \     list += b\n        list += c\n        list += d\n        list += e\n   \
    \     list += f\n        list += a + b\n        list += c + d\n        list +=\
    \ e + f\n        list += a + b + c\n        list += d + e + f\n        list +=\
    \ a + b + c + d\n        list += e + f + a + b\n        list += f + e + a + b\n\
    \        list += f + e + a + b + c\n        list += f + e + a + b + c + d\n  \
    \      list += f + e + a + b + c + d + e\n        list += f + e + a + b + c +\
    \ d + e + f\n        list += f + e + a + b + c + d + e + f + a\n        list +=\
    \ f + e + a + b + c + d + e + f + a + b\n        list += f + e + a + b + c + d\
    \ + e + f + a + b + c\n        list += f + e + a + b + c + d + e + f + a + b +\
    \ c + d\n        list += f + e + a + b + c + d + e + f + a + b + c + d + e\n \
    \       list += f + e + a + b + c + d + e + f + a + b + c + d + e + f\n      \
    \  list += f + e + a + b + c + d + e + f + a + b + c + d + e + f + a + b\n   \
    \     list += f + e + a + b + c + d + e + f + a + b + c + d + e + f + a + b +\
    \ c\n        list += f + e + a + b + c + d + e + f + a + b + c + d + e + f + a\
    \ + b + c + d\n        list += f + e + a + b + c + d + e + f + a + b + c + d +\
    \ e + f + a + b + c + d + e\n        list += f + e + a + b + c + d + e + f + a\
    \ + b + c + d + e + f + a + b + c + d + e + f\n        list += f + e + a + b +\
    \ c + d + e + f + a + b + c + d + e + f + a + b + c + d + e + f ", "        val\
    \ fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last + fibs.last\
    \ + fibs.last)\n        fibs.take(n + 1).map(_.toLong)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).map(_.toLong)", "        val list = new mutable.ListBuffer[Long]()\n  \
    \      list.add(3l)\n        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n\
    \        list.take(n+1).foreach(x => list.add(list.last.last+x))\n        list.toList",
  "        val rec : PartialFunction[Long, List[Long]] = {\n            case 0 =>\
    \ List(0l)\n            case 1 => List(1l)\n            case n => \n         \
    \       val n1 = n - 1\n                val n2 = n + 1 \n                val n3\
    \ = n2 + 1\n                val n4 = n3 + 1\n                (n1 :: n2 :: n3 ::\
    \ n4) match {\n                    case 0 => List(nl.toLong)\n               \
    \     case 1 => List(nl.toLong)\n                    case n => List(nl.toLong,\
    \ nl.toLong, nl.toLong, nl.toLong)\n                }\n        }\n        rec.apply(n).reverse",
  "        val list = new mutable.ListBuffer[Long]()\n        if (n == 0) list +=\
    \ 0\n        if (n == 1) list += 3\n        if (n % 2 == 0) list += tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2)\n  \
    \      list.toList", "        val fibonacci : List[Long] = List(0l, 1l, 2l)\n\
    \        val tribonacci : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTail : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tribonacciTailTailTail : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tribonacciTailTailTailTail : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tribonacciTailTailTailTailTail : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tribonacciTailTailTailTailTailTail : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTail : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTail : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTail :\
    \ List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTailTail",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3l)\n        list.add(1l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.take(n + 1).foreach(x\
    \ => list.add((x + list.get(list.size - 1) + list.get(list.size - 2)).toLong))\n\
    \        list.toList", "        val list = mutable.ListBuffer[Long]()\n      \
    \  if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else if\
    \ (n % 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list\
    \ += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "        val\
    \ list = new mutable.ListBuffer[Long]()\n        if (n <= 1) list += n\n     \
    \   else tri(n - 1) + tri(n - 2) + tri(n + 1) match {\n            case 1 => list\
    \ += n\n            case _ => list += n\n        }\n        list.toList", "  \
    \      val list = new mutable.ListBuffer[Long]()\n        list.add(3l)\n     \
    \   list.add(1l)\n        list.add(2l)\n        list.add(8l)\n        list.take(n+1).foreach(x\
    \ => list.add(x+list.get(n-1)))\n        list.toList", "        val fib = mutable.ListBuffer[Long]()\n\
    \        fib.append(1)\n        fib.append(3)\n        fib.append(2)\n       \
    \ fib.append(8)\n        fib.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        val a = 2\n        val b = 3\n        val c = a + b\n        val d =\
    \ c + a\n        val e = d + b\n        val f = e + c\n        val g = f + d\n\
    \        val h = g + e\n        val i = h + f\n        val j = i + g\n       \
    \ val k = j + h\n        val l = k + i\n        list += a\n        list += b\n\
    \        list += c\n        list += d\n        list += e\n        list += f\n\
    \        list += g\n        list += h\n        list += i\n        list += j\n\
    \        list += k\n        list += l\n        list.toList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val a = n.toInt\n        val b = 2\n\
    \        val c = 1\n        val d = 1\n        val e = 1\n        val f = 1\n\
    \        val g = 1\n        val h = 1\n        val i = 2\n        val j = 1\n\
    \        val k = 1\n        val l = 1\n        val m = 1\n        val n = 2\n\
    \        val o = 1\n        val p = 1\n        val q = 1\n        val r = 1\n\
    \        val s = 1\n        val t = 1\n        val u = 1\n        val v = 1\n\
    \        val w = 1\n        val x = 1\n        val y = 1\n        val z = 1\n\
    \        val a = a + b\n        val b = c + d\n        val c = e + f\n       \
    \ val d = g + h\n        val e = i + j\n        val f = k + l\n        val g =\
    \ m + n\n        val h = o + p\n        val i = q + r\n        val j = s + t\n\
    \        val k = u + v\n        val l = w + x\n        val m = y + z\n       \
    \ val n = a + b\n        val o = c + d\n        val p = e + f\n        val q =\
    \ g + h\n        val r = i + j\n        val s = k + l\n        val t = m + n\n\
    \        val u = o + p\n        val v = q + r\n        val w = s + t\n       \
    \ val x = u + v\n        val y = w + x\n        val z = y + z\n        val a =\
    \ a + b\n        val b = c + d\n        val c = e + f\n        val d = g + h\n\
    \        val e = i + j\n        val f = k + l\n        val g = m + n\n       \
    \ val h = o + p\n        val i = q + r\n        val j = s + t\n        val k =\
    \ u + v\n        val l = w + x\n        val m = y + z\n        val n = a + b\n\
    \        val o = c + d\n        val p = e + f\n        val q = g + h\n       \
    \ val r = i + j\n        val s = k + l\n        val t = m + n\n        val u =\
    \ o + p\n        val v = q + r\n        val w = s + t\n        val x = u + v\n\
    \        val y = w + x\n        val z = y + z\n        val a = a + b\n       \
    \ val b = c + d\n        val c = e + f\n        val d = g + h\n        val e =\
    \ i + j\n", "        val fib : List[Long] = List(0l, 1l, 2l)\n        val tri\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tri2 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri3 : List[Long] = List(0l, 1l, 2l)\n        val tri4 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri5 : List[Long] = List(0l, 1l, 2l)\n     \
    \   val tri6 : List[Long] = List(0l, 1l, 2l)\n        val tri7 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri8 : List[Long] = List(0l, 1l, 2l)\n       \
    \ val tri9 : List[Long] = List(0l, 1l, 2l)\n        val tri10 : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tri11 : List[Long] = List(0l, 1l, 2l)\n        val tri12\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tri13 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri14 : List[Long] = List(0l, 1l, 2l)\n        val tri15 :\
    \ List[Long] = List(0l, 1l, 2l)\n        val tri16 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri17 : List[Long] = List(0l, 1l, 2l)\n        val tri18 :\
    \ List[Long] = List(0l, 1l, 2l)\n        val tri19 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri20 : List[Long] = List(0l, 1l, 2l)\n        val tri21 :\
    \ List[Long] = List(0l, 1l, 2l)\n        val tri22 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri23 : List[Long] = List(0l, 1l, 2l)\n        val tri24 :\
    \ List[Long] = List(0l, 1l, 2l)\n        val tri25 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri26 : List[Long] = List(0l, 1l, 2l)\n        val tri27 :\
    \ List[Long] = List(0l, 1l, 2l)\n        val tri28 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri29 : List[Long] = List(0l, 1l, 2l)\n        val tri30 :\
    \ List[Long] = List(0l, 1l, 2l)\n        val tri31 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri32 : List[Long", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n+1).map(_.toLong)",
  "        val result = new mutable.ListBuffer[Long]()\n        val first = (3l).toLong\n\
    \        val second = (1l).toLong\n        val third = (2l).toLong\n        val\
    \ fourth = (3l).toLong\n        val fifth = (1l).toLong\n        val sixth = (2l).toLong\n\
    \        val seventh = (3l).toLong\n        val eighth = (1l).toLong\n       \
    \ val nineth = (2l).toLong\n        val tenth = (3l).toLong\n        val eleventh\
    \ = (1l).toLong\n        val twelfth = (2l).toLong\n        val thirteenth = (3l).toLong\n\
    \        val fourteenth = (1l).toLong\n        val fifteenth = (2l).toLong\n \
    \       val sixteenth = (3l).toLong\n        val seventeenth = (1l).toLong\n \
    \       val eighteenth = (2l).toLong\n        val nineteenth = (3l).toLong\n \
    \       val twentieth = (1l).toLong\n        val twentyfirst = (2l).toLong\n \
    \       val twentysecond = (3l).toLong\n        val twentythird = (1l).toLong\n\
    \        val twentyfourth = (2l).toLong\n        val twentyfifth = (3l).toLong\n\
    \        val twentysixth = (1l).toLong\n        val twentyseventh = (2l).toLong\n\
    \        val twentyeighth = (3l).toLong\n        val twentyninth = (1l).toLong\n\
    \        val thirtieth = (2l).toLong\n        val thirtyfirst = (3l).toLong\n\
    \        val thirtysecond = (1l).toLong\n        val thirtythird = (2l).toLong\n\
    \        val thirtyfourth = (3l).toLong\n        val thirtyfifth = (1l).toLong\n\
    \        val thirtysixth = (2l).toLong\n        val thirtyseventh = (3l).toLong\n\
    \        val thirtyeighth = (1l).toLong\n        val thirtyninth = (2l).toLong\n\
    \        val fortieth = (3l).toLong\n        val fortyfirst = (1l).toLong\n  \
    \      val fortysecond = (2l).toLong\n        val fortythird = (3l).toLong\n \
    \       val fortyfourth = (1", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        if (n % 2 == 0) {\n            list.add(1l)\n \
    \           list.add(n / 2l)\n        } else {\n            list.add(tri(n - 1l)\
    \ + tri(n - 2l) + tri(n + 1l))\n        }\n        list.toList", "        val\
    \ res : List[Long] = List() \n        if (n == 0) res :+ 0\n        else if (n\
    \ == 1) res :+ 1\n        else if (n % 2 == 0) res :+ tri(n - 1) + tri(n - 2)\n\
    \        else res :+ tri(n - 1) + tri(n - 2) + tri(n + 1)", "        val tri =\
    \ mutable.ListBuffer[Long]()\n        tri += 3\n        tri += (tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        if (n % 2 == 0) tri += tri(n - 1) + tri(n - 2)\n\
    \        else tri += tri(n + 1)\n        tri.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n <= 1L) list += n\n        else {\n            val mid = (n + 1L)\
    \ / 2L\n            list += tri(mid)\n            list += tri(mid - 1L)\n    \
    \        list += tri(mid + 1L)\n        }\n        list.toList", "        val\
    \ a = mutable.ListBuffer[Long]()\n        val b = mutable.ListBuffer[Long]()\n\
    \        val c = mutable.ListBuffer[Long]()\n        val d = mutable.ListBuffer[Long]()\n\
    \        val e = mutable.ListBuffer[Long]()\n        val f = mutable.ListBuffer[Long]()\n\
    \        val g = mutable.ListBuffer[Long]()\n        val h = mutable.ListBuffer[Long]()\n\
    \        val i = mutable.ListBuffer[Long]()\n        val j = mutable.ListBuffer[Long]()\n\
    \        val k = mutable.ListBuffer[Long]()\n        val l = mutable.ListBuffer[Long]()\n\
    \        val m = mutable.ListBuffer[Long]()\n        val n = mutable.ListBuffer[Long]()\n\
    \        val o = mutable.ListBuffer[Long]()\n        val p = mutable.ListBuffer[Long]()\n\
    \        val q = mutable.ListBuffer[Long]()\n        val r = mutable.ListBuffer[Long]()\n\
    \        val s = mutable.ListBuffer[Long]()\n        val t = mutable.ListBuffer[Long]()\n\
    \        val u = mutable.ListBuffer[Long]()\n        val v = mutable.ListBuffer[Long]()\n\
    \        val w = mutable.ListBuffer[Long]()\n        val x = mutable.ListBuffer[Long]()\n\
    \        val y = mutable.ListBuffer[Long]()\n        val z = mutable.ListBuffer[Long]()\n\
    \        val a = mutable.ListBuffer[Long]()\n        val b = mutable.ListBuffer[Long]()\n\
    \        val c = mutable.ListBuffer[Long]()\n        val d = mutable.ListBuffer[Long]()\n\
    \        val e = mutable.ListBuffer[Long]()\n        val f = mutable.ListBuffer[Long]()\n\
    \        val g = mutable.ListBuffer[Long]()\n        val h = mutable.ListBuffer[Long]()\n\
    \        val i = mutable.ListBuffer[Long]()\n        val j = mutable.ListBuffer[Long]()\n\
    \        val k = mutable.ListBuffer[Long]()\n        val l = mutable.ListBuffer[Long]()\n\
    \        val m = mutable.ListBuffer[Long]()\n        val n = mutable.ListBuffer[Long]()\n\
    \        val o = mutable.ListBuffer[Long]()\n        val p = mutable.ListBuffer[Long]()\n\
    \        val q = mutable.ListBuffer[", "        val tri = mutable.ListBuffer[Long]()\n\
    \        tri += 3\n        tri += (tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     if (n % 2 == 0) tri += (tri(n - 1) + tri(n - 2))\n        tri.toList", " \
    \       val fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n \
    \       fibonacci += (fibonacci.head + fibonacci.last) / 2\n        fibonacci\
    \ += (fibonacci.head + fibonacci.last + fibonacci.last) / 2\n        fibonacci.take(n\
    \ + 1)", "        val list = mutable.ListBuffer[Long]()\n        val a = 2\n \
    \       val b = 3\n        val c = a + b\n        val d = c + a\n        val e\
    \ = d + b\n        val f = e + c\n        val g = f + d\n        val h = g + e\n\
    \        val i = h + f\n        val j = i + g\n        val k = j + h\n       \
    \ val l = k + i\n        list += a\n        list += b\n        list += c\n   \
    \     list += d\n        list += e\n        list += f\n        list += g\n   \
    \     list += h\n        list += i\n        list += j\n        list += k\n   \
    \     list += l\n        list.toList", "        val a = mutable.ListBuffer(3l)\n\
    \        val b = mutable.ListBuffer(1l)\n        val c = mutable.ListBuffer(2l)\n\
    \        val d = mutable.ListBuffer(8l)\n        val list = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while(i < n) {\n            a += b\n            c\
    \ += d\n            list += a.toList ++ c.toList\n            i += 2\n       \
    \ }\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n  \
    \      fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.drop(2).head).toLong\n        fibs.take(n\
    \ + 1).toList", "        val fibs = mutable.ListBuffer[Long]()\n        fibs +=\
    \ 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last)\n        fibs.take(n + 1).map(_.toLong)", "       \
    \ val fib : List[Long] = List(0l, 1l, 2l)\n        val tri : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tri2 : List[Long] = List(0l, 1l, 2l)\n        val tri3\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tri4 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri5 : List[Long] = List(0l, 1l, 2l)\n        val tri6 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri7 : List[Long] = List(0l, 1l, 2l)\n     \
    \   val tri8 : List[Long] = List(0l, 1l, 2l)\n        val tri9 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri10 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri11 : List[Long] = List(0l, 1l, 2l)\n        val tri12 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri13 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri14 : List[Long] = List(0l, 1l, 2l)\n        val tri15 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri16 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri17 : List[Long] = List(0l, 1l, 2l)\n        val tri18 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri19 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri20 : List[Long] = List(0l, 1l, 2l)\n        val tri21 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri22 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri23 : List[Long] = List(0l, 1l, 2l)\n        val tri24 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri25 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri26 : List[Long] = List(0l, 1l, 2l)\n        val tri27 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri28 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri29 : List[Long] = List(0l, 1l, 2l)\n        val tri30 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri31 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri32 : List[Long", "        val list = mutable.ListBuffer[Long]()\n  \
    \      if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ if (n % 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list\
    \ += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.take(n + 1).toList", " \
    \       val list = mutable.ListBuffer[Long]()\n        val a = 2\n        val\
    \ b = 3\n        val c = a + b\n        val d = c + a\n        val e = d + b\n\
    \        val f = e + c\n        val g = f + d\n        val h = g + e\n       \
    \ val i = h + f\n        val j = i + g\n        val k = j + h\n        val l =\
    \ k + i\n        list += a\n        list += b\n        list += c\n        list\
    \ += d\n        list += e\n        list += f\n        list += g\n        list\
    \ += h\n        list += i\n        list += j\n        list += k\n        list\
    \ += l\n        list.toList", "        val res : List[Long] = List(0l)\n     \
    \   val fib : List[Long] = List(0l, 1l, 2l)\n        var i : Long = 1\n      \
    \  while (i < n) {\n            res :+ fib(i) + fib(i + 1) + fib(i + 2)\n    \
    \        i += 3\n        }\n        res", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).toList", "        val fibs = mutable.ListBuffer[Long]()\n        fibs +=\
    \ 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n    \
    \    fibs += (fibs.head + fibs.last + fibs.drop(2).head).toLong\n        fibs\
    \ += (fibs.head + fibs.last + fibs.drop(3).head).toLong\n        fibs.take(n +\
    \ 1)", "        val triList = new mutable.ListBuffer[Long]()\n        triList.add(3l)\n\
    \        triList.add(1l)\n        triList.add(2l)\n        triList.add(8l)\n \
    \       triList.take(n+1).foreach(x => triList.add(x+triList.last))\n        triList.toList",
  "        val fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n  \
    \      fibonacci += (fibonacci.head + fibonacci.last) / 2\n        fibonacci +=\
    \ (fibonacci.head + fibonacci.last + fibonacci.last) / 2\n        fibonacci.take(n+1)",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n        fibs +=\
    \ (fibs.head + fibs.last + fibs.dropRight(2).head).toLong\n        fibs.take(n\
    \ + 1).toList", "        val fibs = mutable.ListBuffer.empty[Long]\n        fibs\
    \ += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.last\
    \ + fibs.last + fibs.last)\n        fibs.take(n + 1).toList", "        val fibs\
    \ = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last + fibs.last)\n\
    \        fibs.take(n + 1).map(_.toLong)", "        val a = mutable.ListBuffer[Long]()\n\
    \        val b = mutable.ListBuffer[Long]()\n        val c = mutable.ListBuffer[Long]()\n\
    \        val d = mutable.ListBuffer[Long]()\n        val e = mutable.ListBuffer[Long]()\n\
    \        val f = mutable.ListBuffer[Long]()\n        val g = mutable.ListBuffer[Long]()\n\
    \        val h = mutable.ListBuffer[Long]()\n        val i = mutable.ListBuffer[Long]()\n\
    \        val j = mutable.ListBuffer[Long]()\n        val k = mutable.ListBuffer[Long]()\n\
    \        val l = mutable.ListBuffer[Long]()\n        val m = mutable.ListBuffer[Long]()\n\
    \        val n = mutable.ListBuffer[Long]()\n        val o = mutable.ListBuffer[Long]()\n\
    \        val p = mutable.ListBuffer[Long]()\n        val q = mutable.ListBuffer[Long]()\n\
    \        val r = mutable.ListBuffer[Long]()\n        val s = mutable.ListBuffer[Long]()\n\
    \        val t = mutable.ListBuffer[Long]()\n        val u = mutable.ListBuffer[Long]()\n\
    \        val v = mutable.ListBuffer[Long]()\n        val w = mutable.ListBuffer[Long]()\n\
    \        val x = mutable.ListBuffer[Long]()\n        val y = mutable.ListBuffer[Long]()\n\
    \        val z = mutable.ListBuffer[Long]()\n        val a = mutable.ListBuffer[Long]()\n\
    \        val b = mutable.ListBuffer[Long]()\n        val c = mutable.ListBuffer[Long]()\n\
    \        val d = mutable.ListBuffer[Long]()\n        val e = mutable.ListBuffer[Long]()\n\
    \        val f = mutable.ListBuffer[Long]()\n        val g = mutable.ListBuffer[Long]()\n\
    \        val h = mutable.ListBuffer[Long]()\n        val i = mutable.ListBuffer[Long]()\n\
    \        val j = mutable.ListBuffer[Long]()\n        val k = mutable.ListBuffer[Long]()\n\
    \        val l = mutable.ListBuffer[Long]()\n        val m = mutable.ListBuffer[Long]()\n\
    \        val n = mutable.ListBuffer[Long]()\n        val o = mutable.ListBuffer[Long]()\n\
    \        val p = mutable.ListBuffer[Long]()\n        val q = mutable.ListBuffer[",
  "        val list = mutable.ListBuffer[Long]()\n        val a = 2\n        val b\
    \ = 3\n        val c = a + b\n        val d = c + a\n        val e = d + b\n \
    \       val f = e + c\n        val g = f + d\n        val h = g + e\n        val\
    \ i = h + f\n        val j = i + g\n        val k = j + h\n        val l = k +\
    \ i\n        list += a\n        list += b\n        list += c\n        list +=\
    \ d\n        list += e\n        list += f\n        list += g\n        list +=\
    \ h\n        list += i\n        list += j\n        list += k\n        list +=\
    \ l\n        list.toList", "        val fibo = mutable.ListBuffer[Long]()\n  \
    \      fibo += 3\n        fibo.take(n + 1).foreach(x => fibo += x)\n        fibo.toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3l)\n        list.add(1l)\n\
    \        list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3L)\n        list.add(1L)\n        list.add(2L)\n        list.add(8L)\n\
    \        list.add(n) match {\n            case x if x % 2 == 0 => list.add(tri(x\
    \ - 1) + tri(x - 2) + tri(x + 1))\n            case x if x % 2 == 1 => list.add(tri(x\
    \ - 1) + tri(x + 1) + tri(x + 2))\n        }\n        list.toList", "        val\
    \ rec : PartialFunction[Long, List[Long]] = {\n            case 0 => List(0l)\n\
    \            case 1 => List(1l)\n            case n => \n                val a\
    \ = tri(n - 1)\n                val b = tri(n - 2)\n                val c = tri(n\
    \ + 1)\n                a ::: b ::: c\n        }\n        rec.apply(n)", "   \
    \     val list = new mutable.ListBuffer[Long]()\n        list.add(3L)\n      \
    \  list.add(1L)\n        list.add(2L)\n        list.add(8L)\n        list.add(tri(n-1))\n\
    \        list.add(tri(n-2))\n        list.add(tri(n+1))\n        list.toList",
  "        val res : List[Long] = new mutable.ListBuffer[Long]()\n        if (n ==\
    \ 0) res ++= List(0l)\n        else if (n == 1) res ++= List(3l)\n        else\
    \ if (n % 2 == 0) res ++= tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else res\
    \ ++= tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n        res.toList",
  "        val list = mutable.ListBuffer[Long]()\n        val a = 2l\n        val\
    \ b = 3l\n        val c = a + b\n        val d = c + a\n        val e = d + b\n\
    \        val f = e + c\n        val g = f + d\n        val h = g + e\n       \
    \ list += a\n        list += b\n        list += c\n        list += d\n       \
    \ list += e\n        list += f\n        list += g\n        list += h\n       \
    \ list += a + b\n        list += c + d\n        list += e + f\n        list +=\
    \ g + h\n        list += a + b + c + d\n        list += e + f + g + h\n      \
    \  list.toList", "        val list = mutable.ListBuffer[Long]()\n        list.add(3l)\n\
    \        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n        list.take(n\
    \ + 1).foreach(x => list.add(x + list.get(list.size - 1)))\n        list.toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3l)\n        list.add(1l)\n\
    \        list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.", "        val fibs = mutable.ListBuffer.empty[Long]\n \
    \       fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.drop(2).head).toLong\n        fibs.take(n\
    \ + 1)", "        val a = mutable.ListBuffer[Long]()\n        val b = mutable.ListBuffer[Long]()\n\
    \        val c = mutable.ListBuffer[Long]()\n        val d = mutable.ListBuffer[Long]()\n\
    \        val e = mutable.ListBuffer[Long]()\n        val f = mutable.ListBuffer[Long]()\n\
    \        val g = mutable.ListBuffer[Long]()\n        val h = mutable.ListBuffer[Long]()\n\
    \        val i = mutable.ListBuffer[Long]()\n        val j = mutable.ListBuffer[Long]()\n\
    \        val k = mutable.ListBuffer[Long]()\n        val l = mutable.ListBuffer[Long]()\n\
    \        val m = mutable.ListBuffer[Long]()\n        val n = mutable.ListBuffer[Long]()\n\
    \        val o = mutable.ListBuffer[Long]()\n        val p = mutable.ListBuffer[Long]()\n\
    \        val q = mutable.ListBuffer[Long]()\n        val r = mutable.ListBuffer[Long]()\n\
    \        val s = mutable.ListBuffer[Long]()\n        val t = mutable.ListBuffer[Long]()\n\
    \        val u = mutable.ListBuffer[Long]()\n        val v = mutable.ListBuffer[Long]()\n\
    \        val w = mutable.ListBuffer[Long]()\n        val x = mutable.ListBuffer[Long]()\n\
    \        val y = mutable.ListBuffer[Long]()\n        val z = mutable.ListBuffer[Long]()\n\
    \        val a = mutable.ListBuffer[Long]()\n        val b = mutable.ListBuffer[Long]()\n\
    \        val c = mutable.ListBuffer[Long]()\n        val d = mutable.ListBuffer[Long]()\n\
    \        val e = mutable.ListBuffer[Long]()\n        val f = mutable.ListBuffer[Long]()\n\
    \        val g = mutable.ListBuffer[Long]()\n        val h = mutable.ListBuffer[Long]()\n\
    \        val i = mutable.ListBuffer[Long]()\n        val j = mutable.ListBuffer[Long]()\n\
    \        val k = mutable.ListBuffer[Long]()\n        val l = mutable.ListBuffer[Long]()\n\
    \        val m = mutable.ListBuffer[Long]()\n        val n = mutable.ListBuffer[Long]()\n\
    \        val o = mutable.ListBuffer[Long]()\n        val p = mutable.ListBuffer[Long]()\n\
    \        val q = mutable.ListBuffer[", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n\
    \        list.take(n + 1).foreach(x => list.add(x + list.get(list.size - 1)))\n\
    \        list.toList", "        val list = mutable.ListBuffer[Long]()\n      \
    \  val a = 2\n        val b = 3\n        val c = a + b\n        val d = c + a\n\
    \        val e = d + b\n        val f = e + c\n        list += a\n        list\
    \ += b\n        list += c\n        list += d\n        list += e\n        list\
    \ += f\n        list += a + b\n        list += c + d\n        list += e + f\n\
    \        list += a + b + c + d\n        list += e + f + a + b + c + d\n      \
    \  list.toList", "        val result = new mutable.ListBuffer[Long]()\n      \
    \  val a = 2\n        val b = 3\n        val c = a + b\n        val d = c + a\n\
    \        val e = d + b\n        val f = e + c\n        val g = f + d\n       \
    \ val h = g + e\n        val i = h + f\n        val j = i + g\n        val k =\
    \ j + h\n        val l = k + i\n        result ++= List(a, b, c, d, e, f, g, h,\
    \ i, j, k, l)\n        result.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n\
    \        list.take(n + 1).foreach(x => list.add(x+list.get(n-1)))\n        list.toList",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.last + fibs.last\
    \ + fibs.last)\n        fibs.take(n+1)", "        val rec : Long => List[Long]\
    \ = { \n            if (n == 0) List(1L) \n            else if (n % 2 == 0) List(1L,\
    \ 3L) \n            else List(1L, 3L, 2L, 8L) \n        }\n        val rec : Long\
    \ => List[Long] = { \n            if (n == 0) List(1L) \n            else if (n\
    \ % 2 == 0) List(1L, 3L) \n            else List(1L, 3L, 2L, 8L) \n        }\n\
    \        rec(n)", "        val fibs = mutable.ListBuffer[Long]()\n        fibs\
    \ += 3\n        fibs += (fibs.last + fibs.last + fibs.last)\n        fibs += (fibs.last\
    \ + fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1).map(_.toLong)",
  "        val list = mutable.ListBuffer[Long]()\n        val a = n.toLong\n     \
    \   val b = n.toLong + 1\n        val c = n.toLong + 2\n        list += a\n  \
    \      list += b\n        list += c\n        list.toList", "        val fibonacci\
    \ = mutable.ListBuffer[Long]()\n        fibonacci += 3\n        fibonacci += (fibonacci(1)\
    \ + fibonacci(2))\n        fibonacci += (fibonacci(1) - fibonacci(2) - fibonacci(3))\n\
    \        fibonacci.toList", "        val fibs = mutable.ListBuffer[Long]()\n \
    \       fibs += 3\n        fibs += (fibs.head + fibs.last) / 2\n        fibs +=\
    \ (fibs.head + fibs.last + fibs.last) / 2\n        fibs.take(n + 1).map(_.toLong)",
  "        val list = new mutable.ListBuffer[Long]()\n        if (n <= 0) list\n \
    \       else {\n            list.append (tri (n - 1))\n            list.append\
    \ (tri (n - 2) + tri (n + 1))\n        }\n        list.toList", "        val list\
    \ = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n        else if\
    \ (n == 1) list += 3\n        else list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \        list.toList", "        val rec : Long => List[Long] = { \n          \
    \  if (n == 0) List(1L) \n            else if (n % 2 == 0) List(3L) \n       \
    \     else { \n                val l1 = tri(n - 1); \n                val l2 =\
    \ tri(n - 2); \n                val l3 = tri(n - 3); \n                l1 :::\
    \ l2 ::: l3 ::: List(8L) \n            } \n        }\n        rec(n)", "     \
    \   val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n   \
    \     if (n == 1) list += 3\n        if (n % 2 == 0) list += tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n + 2)\n        list.take(n + 1).toList", "        val triList = new mutable.ListBuffer[Long]()\n\
    \        triList.add(3l)\n        triList.add(1l)\n        triList.add(2l)\n \
    \       triList.add(8l)\n        triList.take(n+1).foreach(triList.add)\n    \
    \    triList.toList", "        val fibs = mutable.ListBuffer[Long]()\n       \
    \ fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n+1)",
  "        val list = mutable.ListBuffer[Long]()\n        val a = tri(n - 1)\n   \
    \     val b = tri(n - 2)\n        val c = tri(n + 1)\n        list += a.head +\
    \ b.head + c.head\n        list.toList", "        val list = new mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n\
    \        list.take(n + 1).foreach(x => list.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)))\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1).toList",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n        fibs.take(n\
    \ + 1).map(_.toLong)", "        val list = mutable.ListBuffer[Long]()\n      \
    \  val a = 2\n        val b = 3\n        val c = a + b\n        val d = c + a\n\
    \        val e = d + b\n        val f = e + c\n        val g = f + d\n       \
    \ val h = g + e\n        val i = h + f\n        val j = i + g\n        val k =\
    \ j + h\n        val l = k + i\n        list += a\n        list += b\n       \
    \ list += c\n        list += d\n        list += e\n        list += f\n       \
    \ list += g\n        list += h\n        list += i\n        list += j\n       \
    \ list += k\n        list += l\n        list.toList", "        val triList = new\
    \ mutable.ListBuffer[Long]()\n        triList.add(3l)\n        triList.add(1l)\n\
    \        triList.add(2l)\n        triList.add(8l)\n        triList.take(n+1).foreach(x\
    \ => triList.add(triList.last.get + x))\n        triList.toList", "        val\
    \ list = new mutable.ListBuffer[Long]()\n        list.add(3l)\n        list.add(1l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.take(n+1).foreach(x\
    \ => list.add(tri(list.last)(x) + tri(list.last)(x-1) + tri(list.last)(x-2)))\n\
    \        list.toList", "        val fib : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri : List[Long] = List(0l, 1l, 2l)\n        val tri2 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri3 : List[Long] = List(0l, 1l, 2l)\n       \
    \ val tri4 : List[Long] = List(0l, 1l, 2l)\n        val tri5 : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tri6 : List[Long] = List(0l, 1l, 2l)\n        val tri7\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tri8 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri9 : List[Long] = List(0l, 1l, 2l)\n        val tri10 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri11 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri12 : List[Long] = List(0l, 1l, 2l)\n        val tri13 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri14 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri15 : List[Long] = List(0l, 1l, 2l)\n        val tri16 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri17 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri18 : List[Long] = List(0l, 1l, 2l)\n        val tri19 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri20 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri21 : List[Long] = List(0l, 1l, 2l)\n        val tri22 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri23 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri24 : List[Long] = List(0l, 1l, 2l)\n        val tri25 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri26 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri27 : List[Long] = List(0l, 1l, 2l)\n        val tri28 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri29 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri30 : List[Long] = List(0l, 1l, 2l)\n        val tri31 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri32 : List[Long", "        val list = new\
    \ mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n        else if (n\
    \ == 1) list += 3\n        else if (n % 2 == 0) list += tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\n        list.take(n + 1).toList", "        val rec : PartialFunction[Long,\
    \ List[Long]] = {\n            case 0 => List(1l)\n            case 1 => List(3l)\n\
    \            case 2 => List(2l)\n            case n => tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n        }\n        rec.apply(n)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).map(_.toLong).toList", "        val fibo = mutable.ListBuffer[Long]()\n\
    \        fibo += 3\n        fibo += fibo.lastOption + fibo.lastOption + fibo.lastOption\n\
    \        fibo += fibo.lastOption + fibo.lastOption + fibo.lastOption\n       \
    \ fibo.toList", "        val a = n.toLong\n        val b = n.toLong + 1\n    \
    \    val c = n.toLong + 2\n        val list = List(a, b, c).map(_.toLong)\n  \
    \      list.drop(1).reverse", "        val rec : PartialFunction[Long, List[Long]]\
    \ = {\n            case 0 => List(1l)\n            case 1 => List(3l)\n      \
    \      case n => \n                val first = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n                first :: first\n        }\n        rec.apply(n)", "  \
    \      val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last) / 2\n        fibs += (fibs.head + fibs.last + fibs.last)\
    \ / 2\n        fibs.take(n + 1).toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.drop(2).head).toLong\n        fibs.take(n\
    \ + 1).map(_.toLong)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        if (n <= 1L) result.append(1L)\n        else if (n <= 3L) result.append(1L).append(3L)\n\
    \        else tri(n - 1L).append(tri(n - 2L)).prepend(tri(n - 3L)).result", " \
    \       val list = new mutable.ListBuffer[Long]()\n        if (n == 0) list +=\
    \ 0\n        if (n == 1) list += 3\n        if (n % 2 == 0) list += tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n\
    \        list.take(n + 1).foreach(x => list.add(x + list.get(list.size - 1)))\n\
    \        list.toList", "        val list = mutable.ListBuffer[Long]()\n      \
    \  val a = n.toLong\n        val b = n.toLong + 1\n        val c = n.toLong +\
    \ 2\n        list += a\n        list += b\n        list += c\n        list.toList",
  "        val list = new mutable.ListBuffer[Long]()\n        list.add(3l)\n     \
    \   val even = if (n % 2 == 0) list.add(1l) else list.add(2l)\n        val odd\
    \ = if (n % 2 == 1) list.add(1l) else list.add(2l)\n        list.add(odd.toLong\
    \ + even.toLong + odd.toLong)\n        list.toList", "        val fibo = mutable.ListBuffer[Long]()\n\
    \        fibo += 3\n        fibo += (fibo(1) + fibo(2))\n        fibo += (fibo(1)\
    \ + fibo(2) + fibo(3))\n        fibo.toList", "        val rec = new mutable.ListBuffer[Long]()\n\
    \        rec += n\n        val even = if (n % 2 == 0) n / 2 else (n - 1) / 2\n\
    \        rec += even\n        val odd = if (n % 2 == 1) n / 2 else (n - 1) / 2\n\
    \        rec += odd\n        rec.toList", "        val rec = new mutable.ListBuffer[Long]()\n\
    \        rec += n\n        if (n <= 2) {\n            rec += n\n        }\n  \
    \      else {\n            rec += tri(n - 1) + tri(n - 2) + tri(n + 1)\n     \
    \   }\n        rec.toList", "        val list = mutable.ListBuffer[Long]()\n \
    \       val a = n.toLong\n        val b = n.toLong + 1\n        val c = n.toLong\
    \ + 2\n        list += a\n        list += b\n        list += c\n        list.toList",
  "        val list = new mutable.ListBuffer[Long]()\n        list.add(3l)\n     \
    \   list.add(1l)\n        list.add(2l)\n        list.add(8l)\n        list.take(n\
    \ + 1).foreach(x => list.add(tri(n - 1) + tri(n - 2) + tri(n + 1)))\n        list.toList",
  "        val a = mutable.ListBuffer[Long]()\n        val b = mutable.ListBuffer[Long]()\n\
    \        val c = mutable.ListBuffer[Long]()\n        val d = mutable.ListBuffer[Long]()\n\
    \        val e = mutable.ListBuffer[Long]()\n        val f = mutable.ListBuffer[Long]()\n\
    \        val g = mutable.ListBuffer[Long]()\n        val h = mutable.ListBuffer[Long]()\n\
    \        val i = mutable.ListBuffer[Long]()\n        val j = mutable.ListBuffer[Long]()\n\
    \        val k = mutable.ListBuffer[Long]()\n        val l = mutable.ListBuffer[Long]()\n\
    \        val m = mutable.ListBuffer[Long]()\n        val n = mutable.ListBuffer[Long]()\n\
    \        val o = mutable.ListBuffer[Long]()\n        val p = mutable.ListBuffer[Long]()\n\
    \        val q = mutable.ListBuffer[Long]()\n        val r = mutable.ListBuffer[Long]()\n\
    \        val s = mutable.ListBuffer[Long]()\n        val t = mutable.ListBuffer[Long]()\n\
    \        val u = mutable.ListBuffer[Long]()\n        val v = mutable.ListBuffer[Long]()\n\
    \        val w = mutable.ListBuffer[Long]()\n        val x = mutable.ListBuffer[Long]()\n\
    \        val y = mutable.ListBuffer[Long]()\n        val z = mutable.ListBuffer[Long]()\n\
    \        val a = mutable.ListBuffer[Long]()\n        val b = mutable.ListBuffer[Long]()\n\
    \        val c = mutable.ListBuffer[Long]()\n        val d = mutable.ListBuffer[Long]()\n\
    \        val e = mutable.ListBuffer[Long]()\n        val f = mutable.ListBuffer[Long]()\n\
    \        val g = mutable.ListBuffer[Long]()\n        val h = mutable.ListBuffer[Long]()\n\
    \        val i = mutable.ListBuffer[Long]()\n        val j = mutable.ListBuffer[Long]()\n\
    \        val k = mutable.ListBuffer[Long]()\n        val l = mutable.ListBuffer[Long]()\n\
    \        val m = mutable.ListBuffer[Long]()\n        val n = mutable.ListBuffer[Long]()\n\
    \        val o = mutable.ListBuffer[Long]()\n        val p = mutable.ListBuffer[Long]()\n\
    \        val q = mutable.ListBuffer[", "        val tri = mutable.ListBuffer.empty[Long]\n\
    \        tri += 3\n        tri += (tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     tri.toList", "        val list = mutable.ListBuffer[Long]()\n        list.add(3l)\n\
    \        if (n % 2 == 0) {\n            list.add(1l)\n            list.add(n /\
    \ 2l)\n        } else {\n            list.add(tri(n - 1l) + tri(n - 2l) + tri(n\
    \ + 1l))\n        }\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n\
    \        fibs.take(n + 1).toList", "        val tri = mutable.ListBuffer(3l.toLong)\n\
    \        val tri1 = mutable.ListBuffer(1l.toLong)\n        val tri2 = mutable.ListBuffer(2l.toLong)\n\
    \        val tri3 = mutable.ListBuffer(8l.toLong)\n        val tri4 = mutable.ListBuffer(3l.toLong)\n\
    \        val tri5 = mutable.ListBuffer(2l.toLong)\n        val tri6 = mutable.ListBuffer(1l.toLong)\n\
    \        val tri7 = mutable.ListBuffer(8l.toLong)\n        val tri8 = mutable.ListBuffer(3l.toLong)\n\
    \        val tri9 = mutable.ListBuffer(2l.toLong)\n        val tri10 = mutable.ListBuffer(1l.toLong)\n\
    \        val tri11 = mutable.ListBuffer(8l.toLong)\n        val tri12 = mutable.ListBuffer(3l.toLong)\n\
    \        val tri13 = mutable.ListBuffer(2l.toLong)\n        val tri14 = mutable.ListBuffer(1l.toLong)\n\
    \        val tri15 = mutable.ListBuffer(8l.toLong)\n        val tri16 = mutable.ListBuffer(3l.toLong)\n\
    \        val tri17 = mutable.ListBuffer(2l.toLong)\n        val tri18 = mutable.ListBuffer(1l.toLong)\n\
    \        val tri19 = mutable.ListBuffer(8l.toLong)\n        val tri20 = mutable.ListBuffer(3l.toLong)\n\
    \        val tri21 = mutable.ListBuffer(2l.toLong)\n        val tri22 = mutable.ListBuffer(1l.toLong)\n\
    \        val tri23 = mutable.ListBuffer(8l.toLong)\n        val tri24 = mutable.ListBuffer(3l.toLong)\n\
    \        val tri25 = mutable.ListBuffer(2l.toLong)\n        val tri26 = mutable.ListBuffer(1l.toLong)\n\
    \        val tri27 = mutable.ListBuffer(8l.toLong)\n        val tri28 = mutable.ListBuffer(3l.toLong)\n\
    \        val tri29 = mutable.ListBuffer(2l.toLong)\n        val tri30 = mutable.ListBuffer(1l.toLong)\n\
    \        val tri31 = mutable.ListBuffer(8l.toLong)\n        val tri32 = mutable.ListBuffer(3l.toLong)\n\
    \        val tri33 = mutable.ListBuffer(2l.toLong)\n        val tri34 = mutable.ListBuffer(1l.toLong)\n",
  "        val list = new mutable.ListBuffer[Long]()\n        if (n <= 0) list\n \
    \       else {\n            val a = tri(n - 1)\n            val b = tri(n - 2)\n\
    \            val c = tri(n + 1)\n            list += a(0)\n            list +=\
    \ b(0)\n            list += c(0)\n        }\n        list.toList", "        val\
    \ fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last + fibs.last\
    \ + fibs.last)\n        fibs.take(n + 1).toList", "        val fibonacci = mutable.ListBuffer[Long]()\n\
    \        fibonacci += 3\n        fibonacci += (fibonacci.head + fibonacci.last)\
    \ / 2\n        fibonacci += (fibonacci.head + fibonacci.last + fibonacci.last)\
    \ / 2\n        fibonacci.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        val a = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n\
    \ + 1)\n        list += a\n        list += b\n        list += c\n        list.toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.+=(n/3)\n        list.+=((n-1)/3)\n\
    \        list.+=((n+2)/3)\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        list.add(1l)\n        list.add(nl.toLong)\n   \
    \     list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n      \
    \  list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n  \
    \      list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n     \
    \   list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n \
    \       list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n    \
    \    list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)", "        val fib = mutable.ListBuffer[Long]()\n  \
    \      fib += 3\n        fib += (n / 2l).toLong\n        fib += (n / 2l).toLong\n\
    \        fib += (n / 2l).toLong\n        fib.toList", "        val list = new\
    \ mutable.ListBuffer[Long]()\n        list.+=(n+1l)\n        list.+=(n+2l)\n \
    \       list.+=(n+3l)\n        list.toList", "        val list = new mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "      \
    \  val fibo = mutable.ListBuffer[Long]()\n        fibo += 3\n        fibo.take(n\
    \ + 1).foreach(x => fibo += x)\n        fibo.toList", "        val fibs = mutable.ListBuffer.empty[Long]\n\
    \        fibs += 3\n        fibs += (fibs.last + fibs.last + fibs.last)\n    \
    \    fibs.take(n+1)", "        val result = new mutable.ListBuffer[Long]()\n \
    \       val a = 2\n        val b = 3\n        val c = a + b\n        val d = c\
    \ + a\n        val e = d + b\n        val f = e + c\n        val g = f + d\n \
    \       val h = g + e\n        val i = h + f\n        val j = i + g\n        val\
    \ k = j + h\n        val l = k + i\n        result += a\n        result += b\n\
    \        result += c\n        result += d\n        result += e\n        result\
    \ += f\n        result += g\n        result += h\n        result += i\n      \
    \  result += j\n        result += k\n        result += l\n        result.toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.+=(n+3l)\n        list.+=(n+1l)\n\
    \        list.+=(n+2l)\n        list.+=(n+3l)\n        list.+=(n+1l)\n       \
    \ list.+=(n+2l)\n        list.+=(n+3l)\n        list.+=(n+1l)\n        list.+=(n+2l)\n\
    \        list.+=(n+3l)\n        list.+=(n+1l)\n        list.+=(n+2l)\n       \
    \ list.+=(n+3l)\n        list.+=(n+1l)\n        list.+=(n+2l)\n        list.+=(n+3l)\n\
    \        list.+=(n+1l)\n        list.+=(n+2l)\n        list.+=(n+3l)\n       \
    \ list.+=(n+1l)\n        list.+=(n+2l)\n        list.+=(n+3l)\n        list.+=(n+1l)\n\
    \        list.+=(n+2l)\n        list.+=(n+3l)\n        list.+=(n+1l)\n       \
    \ list.+=(n+2l)\n        list.+=(n+3l)\n        list.+=(n+1l)\n        list.+=(n+2l)\n\
    \        list.+=(n+3l)\n        list.+=(n+1l)\n        list.+=(n+2l)\n       \
    \ list.+=(n+3l)\n        list.+=(n+1l)\n        list.+=(n+2l)\n        list.+=(n+3l)\n\
    \        list.+=(n+1l)\n        list.+=(n+2l)\n        list.+=(n+3l)\n       \
    \ list.+=(n+1l)\n        list.+=(n+2l)\n        list.+=(n+3l)\n        list.+=(n+1l)\n\
    \        list.+=(n+2l)\n        list.+=(n+3l)\n        list.+=(n+1l)\n       \
    \ list.+=(n+2l)\n        list.+=(n+3l)\n        list.+=(n+1l)\n        list.+=(n+2l)\n\
    \        list.+=(n+3l)\n        list.+=(n+1l)\n        list.+=(n+2l)\n       \
    \ list.+=(n+3l)\n        list.+=(n+1l)\n        list.+=(n+2l)\n        list.+=(n+3l)\n\
    \        list.+=(n+1l)\n        list.+=(n+2l)\n        list.+=(n+3l)\n       \
    \ list.+=(n+1l)\n        list.+=(n+2l)\n        list.+=(n+3l)\n        list.+=(n+1l)\n\
    \        list.", "        val list = new mutable.ListBuffer[Long]()\n        if\
    \ (n <= 1l) list += n\n        else {\n            val a = tri(n - 1l)\n     \
    \       val b = tri(n - 2l)\n            list += a(0l) + b(1l) + a(2l)\n     \
    \   }\n        list.toList", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        val a = mutable.ListBuffer(3l)\n        val b = mutable.ListBuffer(1l)\n\
    \        val c = mutable.ListBuffer(2l)\n        val d = mutable.ListBuffer(8l)\n\
    \        val list = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenodd = mutable.ListBuffer[Long]()\n\
    \        val eveneven = mutable.ListBuffer[Long]()\n        val evenoddodd = mutable.ListBuffer[Long]()\n\
    \        val evenevenodd = mutable.ListBuffer[Long]()\n        val eveneveneven\
    \ = mutable.ListBuffer[Long]()\n        val evenevenevenodd = mutable.ListBuffer[Long]()\n\
    \        val eveneveneveneven = mutable.ListBuffer[Long]()\n        val evenevenevenevenodd\
    \ = mutable.ListBuffer[Long]()\n        val eveneveneveneveneven = mutable.ListBuffer[Long]()\n\
    \        val evenevenevenevenevenodd = mutable.ListBuffer[Long]()\n        val\
    \ eveneveneveneveneveneven = mutable.ListBuffer[Long]()\n        val evenevenevenevenevenevenodd\
    \ = mutable.ListBuffer[Long]()\n        val eveneveneveneveneveneveneven = mutable.ListBuffer[Long]()\n\
    \        val evenevenevenevenevenevenodd = mutable.ListBuffer[Long]()\n      \
    \  val eveneveneveneveneveneveneven = mutable.ListBuffer[Long]()\n        val\
    \ evenevenevenevenevenevenevenodd = mutable.ListBuffer[Long]()\n        val eveneveneveneveneveneveneveneven\
    \ = mutable.ListBuffer[Long]()\n        val evenevenevenevenevenevenevenodd =\
    \ mutable.ListBuffer[Long]()\n        val eveneveneveneveneveneveneveneven = mutable.ListBuffer[Long]()\n\
    \        val evenevenevenevenevenevenevenevenodd = mutable.ListBuffer[Long]()\n\
    \        val eveneveneveneveneveneveneveneven = mutable.ListBuffer[Long]()\n \
    \       val evenevenevenevenevenevenevenevenodd = mutable.ListBuffer[Long]()\n\
    \        val eveneveneveneveneveneveneveneveneven = mutable.ListBuffer[Long]()\n\
    \        val eveneveneveneveneven", "        val a = mutable.ListBuffer[Long]()\n\
    \        val b = mutable.ListBuffer[Long]()\n        val c = mutable.ListBuffer[Long]()\n\
    \        val d = mutable.ListBuffer[Long]()\n        val e = mutable.ListBuffer[Long]()\n\
    \        val f = mutable.ListBuffer[Long]()\n        val g = mutable.ListBuffer[Long]()\n\
    \        val h = mutable.ListBuffer[Long]()\n        val i = mutable.ListBuffer[Long]()\n\
    \        val j = mutable.ListBuffer[Long]()\n        val k = mutable.ListBuffer[Long]()\n\
    \        val l = mutable.ListBuffer[Long]()\n        val m = mutable.ListBuffer[Long]()\n\
    \        val n = mutable.ListBuffer[Long]()\n        val o = mutable.ListBuffer[Long]()\n\
    \        val p = mutable.ListBuffer[Long]()\n        val q = mutable.ListBuffer[Long]()\n\
    \        val r = mutable.ListBuffer[Long]()\n        val s = mutable.ListBuffer[Long]()\n\
    \        val t = mutable.ListBuffer[Long]()\n        val u = mutable.ListBuffer[Long]()\n\
    \        val v = mutable.ListBuffer[Long]()\n        val w = mutable.ListBuffer[Long]()\n\
    \        val x = mutable.ListBuffer[Long]()\n        val y = mutable.ListBuffer[Long]()\n\
    \        val z = mutable.ListBuffer[Long]()\n        val a = mutable.ListBuffer[Long]()\n\
    \        val b = mutable.ListBuffer[Long]()\n        val c = mutable.ListBuffer[Long]()\n\
    \        val d = mutable.ListBuffer[Long]()\n        val e = mutable.ListBuffer[Long]()\n\
    \        val f = mutable.ListBuffer[Long]()\n        val g = mutable.ListBuffer[Long]()\n\
    \        val h = mutable.ListBuffer[Long]()\n        val i = mutable.ListBuffer[Long]()\n\
    \        val j = mutable.ListBuffer[Long]()\n        val k = mutable.ListBuffer[Long]()\n\
    \        val l = mutable.ListBuffer[Long]()\n        val m = mutable.ListBuffer[Long]()\n\
    \        val n = mutable.ListBuffer[Long]()\n        val o = mutable.ListBuffer[Long]()\n\
    \        val p = mutable.ListBuffer[Long]()\n        val q = mutable.ListBuffer[",
  "        val list = new mutable.ListBuffer[Long]()\n        if (n == 0) list +=\
    \ 0\n        else if (n == 1) list += 3\n        else list += tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n        list.toList", "        val fib : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tri : List[Long] = List(0l, 1l)\n        val tri2 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri3 : List[Long] = List(0l, 1l, 2l, 3l)\n \
    \       val tri4 : List[Long] = List(0l, 1l, 2l, 3l, 4l)\n        val tri5 : List[Long]\
    \ = List(0l, 1l, 2l, 3l, 4l, 5l)\n        val tri6 : List[Long] = List(0l, 1l,\
    \ 2l, 3l, 4l, 5l, 6l)\n        val tri7 : List[Long] = List(0l, 1l, 2l, 3l, 4l,\
    \ 5l, 6l, 7l)\n        val tri8 : List[Long] = List(0l, 1l, 2l, 3l, 4l, 5l, 6l,\
    \ 7l, 8l)\n        val tri9 : List[Long] = List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l,\
    \ 8l, 9l)\n        val tri10 : List[Long] = List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l,\
    \ 8l, 9l, 10l)\n        val tri11 : List[Long] = List(0l, 1l, 2l, 3l, 4l, 5l,\
    \ 6l, 7l, 8l, 9l, 10l, 11l)\n        val tri12 : List[Long] = List(0l, 1l, 2l,\
    \ 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l)\n        val tri13 : List[Long] =\
    \ List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l)\n        val\
    \ tri14 : List[Long] = List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l,\
    \ 12l, 13l, 14l)\n        val tri15 : List[Long] = List(0l, 1l, 2l, 3l, 4l, 5l,\
    \ 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l, 14l, 15l)\n        val tri16 : List[Long]\
    \ = List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l, 14l, 15l,\
    \ 16l)\n        val tri17 : List[Long] = List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l,\
    \ 8l, 9l, 10l, 11l, 12l, 13l, 14", "        val list = new mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n\
    \        list.take(n + 1).foreach(x => list.add(list.last() + x))\n        list.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val a = 2l\n     \
    \   val b = 3l\n        val c = a + b\n        val d = c + a\n        val e =\
    \ d + b\n        val f = e + c\n        val g = f + d\n        val h = g + e\n\
    \        val i = h + f\n        val j = i + g\n        val k = j + h\n       \
    \ val l = k + i\n        result += a\n        result += b\n        result += c\n\
    \        result += d\n        result += e\n        result += f\n        result\
    \ += g\n        result += h\n        result += i\n        result += j\n      \
    \  result += k\n        result += l\n        result.toList", "        val rec\
    \ : Long => Long = { n =>\n            if (n <= 1) 1\n            else (tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        }\n        val res : List[Long] = List(rec(n.toInt))\n\
    \        res"]
stop_tokens:
- "\n    }\n"
