name: HumanEval_4_mean_absolute_deviation
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given list of input numbers, calculate Mean Absolute Deviation\n \
  \   // around the mean of this dataset.\n    // Mean Absolute Deviation is the average\
  \ absolute difference between each\n    // element and a centerpoint (mean in this\
  \ case):\n    // MAD = average | x - x_mean |\n    // >>> meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def meanAbsoluteDeviation(numbers\
  \ : List[Float]) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
  \n}\n"
completions: ["        val n = numbers.size\n        val mean = numbers.sum / n\n\
    \        val sum = 0.0f\n        for (x <- numbers) sum += (x - mean) * (x - mean)\n\
    \        sum / n", "        val mean: Float = numbers.sum / numbers.length\n \
    \       val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.size\n     \
    \   val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val numberSet = numbers.toSet\n        val mean\
    \ = numberSet.iterator.next\n        val sum = 0.0f\n        numberSet.foreach(x\
    \ => sum += math.abs(x - mean))\n        sum / numberSet.size", "        val mean\
    \ = numbers.sum / numbers.size\n        val deviations = numbers.map(x => (x -\
    \ mean).abs)\n        deviations.sum / deviations.size", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ x - mean)\n        deviations.sum / n", "        val n = numbers.size\n    \
    \    val mean = numbers.sum / n\n        val deviations = numbers.map(x => (x\
    \ - mean) * (x - mean))\n        val mad = deviations.sum / n\n        mad", " \
    \       val numberSet = numbers.toSet\n        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map { x =>\n            math.abs(x - mean)\n\
    \        }\n        val average = deviations.sum / deviations.size\n        average",
  "        val mean: Float = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.length",
  "        val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => (x - mean).abs)\n        val mad = deviations.sum / n\n \
    \       mad", "        val mean: Float = numbers.sum / numbers.length\n      \
    \  val deviations = numbers.map(x => x - mean)\n        deviations.sum / deviations.length",
  "        val sum = 0.0f\n        numbers.foreach{ x => sum += abs(x - mean) }\n\
    \        sum / numbers.size", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum\
    \ / deviations.length", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n  \
    \      deviations.sum / n", "        val n = numbers.size\n        val mean =\
    \ numbers.sum / n\n        val deviations = numbers.map(x => (x - mean) * (x -\
    \ mean))\n        deviations.sum / n", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => x - mean)\n        deviations.sum /\
    \ deviations.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map { x => math.abs(x - mean) }\n    \
    \    deviations.sum / n", "        val sum = 0.0f\n        numbers.foreach(x =>\
    \ sum += math.abs(x - numbers.mean))\n        sum / numbers.size", "        val\
    \ mean: Float = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => (x - mean).abs)\n        deviations.sum / deviations.size", "        val\
    \ mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x =>\
    \ (x - mean).abs)\n        deviations.sum / deviations.size", "        val mean\
    \ = numbers.sum / numbers.size\n        val deviations = numbers.map(x => math.abs(x\
    \ - mean))\n        deviations.sum / deviations.size", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => x - mean)\n      \
    \  deviations.sum / deviations.size", "        val n = numbers.size\n        val\
    \ mean = numbers.sum / n\n        val sumOfDiffs = numbers.map(x => math.abs(x\
    \ - mean))\n        val mad = sumOfDiffs.sum / n\n        mad", "        val mean\
    \ = numbers.sum / numbers.size\n        numbers.map(x => (x - mean).abs).sum /\
    \ numbers.size", "        val mean = numbers.sum / numbers.length\n        val\
    \ deviations = numbers.map(x => x - mean)\n        deviations.sum / deviations.length",
  "        val n = numbers.size\n        val mean = numbers.sum / n\n        val sumOfDiffs\
    \ = numbers.map(x => math.abs(x - mean))\n        val sumOfDiffsSum = sumOfDiffs.sum\n\
    \        val MAD = sumOfDiffsSum / n\n        return MAD", "        val mean =\
    \ numbers.sum / numbers.size\n        val deviations = numbers.map(x => (x - mean).abs)\n\
    \        deviations.sum / deviations.size", "        val mean = numbers.sum /\
    \ numbers.size\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.size", "        val mean = numbers.sum /\
    \ numbers.size\n        numbers.map(x => (x - mean).abs).sum / numbers.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.length", "        val n =\
    \ numbers.size\n        val mean = numbers.sum / n\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / n", "        val mean: Float\
    \ = numbers.sum / numbers.length\n        val deviations = numbers.map(x => math.abs(x\
    \ - mean))\n        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => x - mean)\n    \
    \    deviations.sum / deviations.length", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val numberSet = numbers.toSet\n        val mean\
    \ = numberSet.iterator.next\n        val sum = 0.0f\n        numberSet.foreach(x\
    \ => sum += (x - mean) * (x - mean))\n        sum / numberSet.size", "       \
    \ val numberSet = numbers.toSet\n        val mean = numberSet.iterator.next\n\
    \        val sum = 0.0f\n        val count = numberSet.iterator.next\n       \
    \ for(number <- numberSet) {\n            sum += math.abs(number - mean)\n   \
    \         count += 1\n        }\n        sum / count", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.size", "        val sum = 0.0f\n        numbers.foreach(x\
    \ => sum += Math.abs(x - numbers.sum))\n        sum / numbers.size", "       \
    \ val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => (x - mean).abs)\n        deviations.sum / deviations.size // mean of deviations",
  "        val n = numbers.size\n        val mean = numbers.sum / n\n        val sumOfDiffs\
    \ = numbers.map(x => math.abs(x - mean)).sum\n        sumOfDiffs / n", "     \
    \   val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / n", "        val mean:\
    \ Float = numbers.sum / numbers.size\n        val deviations = numbers.map(x =>\
    \ (x - mean).abs)\n        deviations.sum / deviations.size", "        val n =\
    \ numbers.size\n        val mean = numbers.sum / n\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / n", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.size", "        val mean = numbers.sum /\
    \ numbers.size\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.size", "        val n = numbers.size\n  \
    \      val mean = numbers.sum / n\n        val deviations = numbers.map(x => (x\
    \ - mean).abs)\n        deviations.sum / n", "        val sum = 0.0f\n       \
    \ numbers.foreach(x => sum += math.abs(x - mean))\n        sum / numbers.size",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map((x\
    \ - mean) abs)\n        deviations.sum / deviations.length", "        val n =\
    \ numbers.size\n        val mean = numbers.sum / n\n        val deviations = numbers.map(x\
    \ => (x - mean) * (x - mean))\n        val mad = deviations.sum / n\n        mad",
  "        val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / n", "        val mean:\
    \ Float = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.length", "     \
    \   val mean = numbers.sum / numbers.length\n        val deviations = numbers.map((x\
    \ - mean).abs)\n        deviations.sum / deviations.length", "        val mean\
    \ = numbers.sum / numbers.length\n        numbers.map(x => (x - mean).abs).sum\
    \ / numbers.length", "        val mean = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map { x => math.abs(x - mean) }\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.size\n       \
    \ val deviations = numbers.map(x => x - mean)\n        deviations.sum / deviations.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => (x - mean) * (x - mean))\n        deviations.sum / deviations.size", "  \
    \      val mean = numbers.sum / numbers.size\n        numbers.map(x => math.abs(x\
    \ - mean)).sum / numbers.size", "        val n = numbers.size\n        val mean\
    \ = numbers.sum / n\n        val deviations = numbers.map(x => x - mean)\n   \
    \     deviations.sum / n", "        val mean = numbers.sum / numbers.size\n  \
    \      val deviations = numbers.map(x => x - mean)\n        deviations.sum / deviations.size",
  "        val sum = 0.0f\n        val mean = numbers.sum / numbers.size\n       \
    \ numbers.foreach(x => sum += math.abs(x - mean))\n        sum / numbers.size",
  "        val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / n", " \
    \       val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val numberSet = numbers.toSet\n        val mean = numberSet.sum / numberSet.size\n\
    \        val deviations = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.size\n       \
    \ val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum /\
    \ deviations.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => x - mean)\n        deviations.sum\
    \ / n", "        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.length",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.size", "        val sum =\
    \ 0.0f\n        numbers.foreach(x => sum += Math.abs(x - numbers.mean))\n    \
    \    sum / numbers.size", "        val mean = numbers.sum / numbers.size\n   \
    \     val deviations = numbers.map(x => x - mean)\n        deviations.sum / deviations.size",
  "        val sum = 0.0f\n        val mean = numbers.sum / numbers.size\n       \
    \ numbers.foreach(x => sum += math.abs(x - mean))\n        sum / numbers.size",
  "        val numberSet = numbers.toSet\n        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum\
    \ / numbers.size", "        val mean = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map { x => math.abs(x - mean) }\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.length\n     \
    \   val deviations = numbers.map(x => x - mean)\n        deviations.sum / deviations.length",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.length", "     \
    \   val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / n", " \
    \       val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => (x - mean).abs)\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x =>\
    \ math.abs(x - mean))\n        deviations.sum / deviations.size", "        val\
    \ mean = numbers.sum / numbers.size\n        val deviations = numbers.map { x\
    \ =>\n            math.abs(x - mean)\n        }\n        deviations.sum / deviations.size",
  "        val numberSet = numbers.toSet\n        val mean = numberSet.sum / numberSet.size\n\
    \        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.size\n       \
    \ val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.size\n       \
    \ val deviations = numbers.map(x => x - mean)\n        deviations.sum / deviations.size",
  "        val sum = 0.0f\n        val mean = numbers.sum / numbers.length\n     \
    \   numbers.foreach(x => sum += math.abs(x - mean))\n        sum / numbers.length",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val n = numbers.size\n        val mean = numbers.sum / n\n        val sumOfDiffs\
    \ = numbers.map(x => x - mean).sum\n        val absSumOfDiffs = math.abs(sumOfDiffs)\n\
    \        absSumOfDiffs / n", "        val mean: Float = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map { x => math.abs(x - mean) }\n        deviations.sum\
    \ / deviations.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        numbers.map(x => (x - mean).abs).sum / n", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ (x - mean).abs)\n        deviations.sum / n", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map { x => math.abs(x - mean)\
    \ }\n        deviations.sum / deviations.size", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.size\n        numbers.map(x => math.abs(x - mean)).sum / numbers.size",
  "        val sum = 0.0f\n        numbers.foreach{ x => sum += abs(x - mean) }\n\
    \        sum / numbers.size", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.length\n     \
    \   val deviations = numbers.map(x => x - mean)\n        deviations.sum / deviations.length",
  "        val mean: Float = numbers.sum / numbers.size\n        val deviations =\
    \ numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size",
  "        val n = numbers.size\n        val mean = numbers.sum / n\n        val diffs\
    \ = numbers.map(x => (x - mean))\n        val sumOfDiffs = diffs.sum\n       \
    \ val absSumOfDiffs = Math.abs(sumOfDiffs)\n        val absMeanOfDiffs = Math.abs(mean)\n\
    \        val MAD = absSumOfDiffs / absMeanOfDiffs\n        return MAD", "    \
    \    val numberSet = numbers.toSet\n        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.size\n       \
    \ val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.size\n       \
    \ val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum /\
    \ deviations.size", "        val mean = numbers.sum / numbers.size\n        numbers.map(x\
    \ => math.abs(x - mean)).sum / numbers.size", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => x - mean)\n    \
    \    deviations.sum / deviations.length", "        val n = numbers.size\n    \
    \    val mean = numbers.sum / n\n        val deviations = numbers.map(x => (x\
    \ - mean) * (x - mean))\n        deviations.sum / n", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.size", "        val sum = 0.0f\n        val\
    \ mean = numbers.sum / numbers.size\n        numbers.foreach(x => sum += math.abs(x\
    \ - mean))\n        sum / numbers.size", "        val sum = 0.0f\n        numbers.foreach(x\
    \ => sum += abs(x - mean))\n        sum / numbers.size", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => (x - mean).abs)\n\
    \        deviations.sum / deviations.size", "        val n = numbers.size\n  \
    \      val mean = numbers.sum / n\n        val deviations = numbers.map { x =>\
    \ math.abs(x - mean) }\n        val mad = deviations.sum / n\n        mad", " \
    \       val sum = 0.0f\n        val mean = numbers.sum / numbers.size\n      \
    \  numbers.foreach(x => sum += math.abs(x - mean))\n        sum / numbers.size",
  "        val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / n", " \
    \       val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.size", "        val mean =\
    \ numbers.sum / numbers.size\n        val deviations = numbers.map(x => (x - mean).abs)\n\
    \        deviations.sum / deviations.size", "        val numberSet = numbers.toSet\n\
    \        val mean = numberSet.iterator.next\n        val sum = 0.0f\n        numberSet.foreach\
    \ { x =>\n            sum += math.abs(x - mean)\n        }\n        sum / numberSet.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => (x - mean) * (x - mean))\n        deviations.sum / deviations.size // average\
    \ deviation", "        val sum = 0.0f\n        numbers.foreach(x => sum += math.abs(x\
    \ - numbers.mean))\n        sum / numbers.size", "        val sum = 0.0f\n   \
    \     numbers.foreach(x => sum += math.abs(x - numbers.mean))\n        sum / numbers.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => (x - mean).abs)\n        deviations.sum / deviations.size", "        val\
    \ n = numbers.size\n        val mean = numbers.sum / n\n        val sumOfDiffs\
    \ = numbers.map(x => math.abs(x - mean))\n        val mad = sumOfDiffs.sum / n\n\
    \        mad", "        val mean: Float = numbers.sum / numbers.size\n       \
    \ val deviations = numbers.map(x => x - mean)\n        deviations.sum / deviations.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map\
    \ { x => math.abs(x - mean) }\n        deviations.sum / deviations.size", "  \
    \      val mean: Float = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.length", " \
    \       val mean: Float = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.length", " \
    \       val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.length", "        val mean\
    \ = numbers.sum / numbers.size\n        val deviations = numbers.map(x => (x -\
    \ mean).abs)\n        deviations.sum / deviations.size", "        val mean: Float\
    \ = numbers.sum / numbers.length\n        val deviations = numbers.map(x => (x\
    \ - mean).abs)\n        deviations.sum / deviations.length", "        val n =\
    \ numbers.size\n        val mean = numbers.sum / n\n        val sumOfDiffs = numbers.map(x\
    \ => math.abs(x - mean)).sum\n        sumOfDiffs / n", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ math.abs(x - mean))\n        deviations.sum / n", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ (x - mean) * (x - mean))\n        deviations.sum / n", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        numbers.map { x => math.abs(x - mean)\
    \ }\n            .sum / n", "        val mean = numbers.sum / numbers.size\n \
    \       numbers.map(x => math.abs(x - mean)).sum / numbers.size", "        val\
    \ n = numbers.size\n        val mean = numbers.sum / n\n        val sumOfSquares\
    \ = numbers.map(x => Math.pow((x - mean), 2)).sum\n        val variance = sumOfSquares\
    \ / n\n        Math.sqrt(variance)", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => x - mean)\n        deviations.sum /\
    \ deviations.length", "        val sum = 0.0f\n        numbers.foreach(x => sum\
    \ += math.abs(x - mean))\n        sum / numbers.size", "        val mean = numbers.sum\
    \ / numbers.length\n        numbers.map(_ - mean).sum / numbers.length", "   \
    \     val sum = 0.0f\n        val mean = numbers.sum / numbers.size\n        numbers.foreach(x\
    \ => sum += math.abs(x - mean))\n        sum / numbers.size", "        val mean\
    \ = numbers.sum / numbers.size\n        val deviations = numbers.map(x => x -\
    \ mean)\n        deviations.sum / deviations.size", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map { x => math.abs(x - mean)\
    \ }\n        deviations.sum / deviations.size", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val sumOfDiffs = numbers.map(x =>\
    \ math.abs(x - mean)).sum\n        sumOfDiffs / n", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map { x => math.abs(x - mean)\
    \ }\n        deviations.sum / deviations.size", "        val mean = numbers.sum\
    \ / numbers.size\n        numbers.map(x => Math.abs(x - mean)).sum / numbers.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.size", "        val mean =\
    \ numbers.sum / numbers.size\n        val deviations = numbers.map(x => x - mean)\n\
    \        deviations.sum / deviations.size", "        val mean: Float = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => (x - mean).abs)\n\
    \        deviations.sum / deviations.length", "        val sum = 0.0f\n      \
    \  val count = 0.0f\n        numbers.foreach{x => sum += x; count += 1}\n    \
    \    val mean = sum / count\n        val deviations = numbers.map{x => (x - mean)}\n\
    \        deviations.map{x => math.abs(x)}.sum / deviations.size", "        val\
    \ mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x =>\
    \ (x - mean).abs)\n        deviations.sum / deviations.size", "        val n =\
    \ numbers.size\n        val mean = numbers.sum / n\n        val deviations = numbers.map(x\
    \ => (x - mean) * (x - mean))\n        deviations.sum / n", "        val mean:\
    \ Float = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.length", "     \
    \   val n = numbers.size\n        val mean = numbers.sum / n\n        val sumOfDiffs\
    \ = numbers.map(x => math.abs(x - mean)).sum\n        sumOfDiffs / n", "     \
    \   val numberSet = numbers.toSet\n        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / numbers.size", "        val mean = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.size",
  "        val mean: Float = numbers.sum / numbers.size\n        val deviations =\
    \ numbers.map(x => x - mean)\n        deviations.sum / deviations.size", "   \
    \     val sum = 0.0f\n        val mean = numbers.sum / numbers.size\n        numbers.foreach(x\
    \ => sum += math.abs(x - mean))\n        sum / numbers.size", "        val n =\
    \ numbers.size\n        val mean = numbers.sum / n\n        val deviations = numbers.map(x\
    \ => (x - mean) * (x - mean))\n        deviations.sum / n", "        val mean\
    \ = numbers.sum / numbers.size\n        val deviations = numbers.map(x => x -\
    \ mean)\n        deviations.sum / deviations.size // average deviation", "   \
    \     val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.length", "        val mean:\
    \ Float = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => (x - mean).abs)\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x =>\
    \ math.abs(x - mean))\n        deviations.sum / deviations.size", "        val\
    \ mean: Float = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.length", "     \
    \   val numberSet = numbers.toSet\n        val mean = numberSet.sum / numberSet.size\n\
    \        val deviations = numbers.map { x =>\n            math.abs(x - mean)\n\
    \        }\n        deviations.sum / numbers.size", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => x - mean)\n    \
    \    deviations.sum / deviations.length", "        val mean = numbers.sum / numbers.length\n\
    \        numbers.map(x => Math.abs(x - mean)).sum / numbers.length", "       \
    \ val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.length", "        val mean\
    \ = numbers.sum / numbers.length\n        val deviations = numbers.map(x => x\
    \ - mean)\n        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => x - mean)\n      \
    \  deviations.sum / deviations.size", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => x - mean)\n        deviations.sum /\
    \ deviations.length", "        val mean = numbers.sum / numbers.length\n     \
    \   val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map((x - mean).abs)\n        deviations.sum / deviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => (x - mean).abs)\n        deviations.sum / deviations.length", "        val\
    \ sum = 0.0f\n        val count = 0.0f\n        numbers.foreach(x => sum += x)\n\
    \        numbers.foreach(x => count += 1.0f)\n        math.abs(sum / count)",
  "        val mean: Float = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.length", "     \
    \   val mean: Float = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.length", "     \
    \   val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        val mad = deviations.sum\
    \ / n\n        mad", "        val mean: Float = numbers.sum / numbers.size\n \
    \       val deviations = numbers.map(x => x - mean)\n        deviations.sum /\
    \ deviations.size", "        val mean = numbers.sum / numbers.length\n       \
    \ val deviations = numbers.map(x => (x - mean).abs)\n        val mad = deviations.reduceLeft(_\
    \ + _) / numbers.length\n        mad", "        val mean = numbers.sum / numbers.size\n\
    \        numbers.map(x => math.abs(x - mean)).sum / numbers.size", "        val\
    \ mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x =>\
    \ math.abs(x - mean))\n        deviations.sum / deviations.size", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.length", "        val n =\
    \ numbers.size\n        val mean = numbers.sum / n\n        val deviations = numbers.map(x\
    \ => (x - mean) * (x - mean))\n        deviations.sum / n", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ (x - mean) * (x - mean))\n        deviations.sum / n", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => x - mean)\n    \
    \    deviations.sum / deviations.length", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val sum = 0.0f\n        val mean = numbers.sum\
    \ / numbers.size\n        numbers.foreach(x => sum += (x - mean) * (x - mean))\n\
    \        sum / numbers.size", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val sum = 0.0f\n        numbers.foreach(x =>\
    \ sum += math.abs(x - numbers.mean))\n        sum / numbers.size", "        val\
    \ numberSet = numbers.toSet\n        val mean = numberSet.iterator.next\n    \
    \    val sum = 0.0f\n        for (number <- numberSet) {\n            sum += math.abs(number\
    \ - mean)\n        }\n        sum / numberSet.size", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ (x - mean) * (x - mean))\n        val mad = deviations.sum / n\n        mad",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val numberSet = numbers.toSet\n        val mean = numberSet.sum / numberSet.size\n\
    \        val deviations = numbers.map { x =>\n            math.abs(x - mean)\n\
    \        }\n        deviations.sum / numbers.size", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.size", "        val sum = 0.0f\n        val\
    \ mean = numbers.sum / numbers.size\n        numbers.foreach(x => sum += math.abs(x\
    \ - mean))\n        sum / numbers.size", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum\
    \ / deviations.size", "        val mean: Float = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.length\n     \
    \   val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.size\n     \
    \   numbers.map(x => (x - mean).abs).sum / numbers.size", "        val sum = 0.0f\n\
    \        val mean = numbers.sum / numbers.size\n        numbers.foreach(x => sum\
    \ += (x - mean) * (x - mean))\n        sum / numbers.size", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map { x\
    \ =>\n            math.abs(x - mean)\n        }\n        deviations.sum / n",
  "        val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / n", "     \
    \   val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.length"]
stop_tokens:
- "\n    }\n"
