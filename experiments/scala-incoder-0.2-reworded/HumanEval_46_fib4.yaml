name: HumanEval_46_fib4
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    // fib4(2)\
  \ -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
  \ + fib4(n-4).\n    // Please write a function to efficiently compute the n-th element\
  \ of the fib4 number sequence.  Do not use recursion.\n    // >>> fib4((5l))\n \
  \   // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>> fib4((7l))\n    // (14l)\n\
  \    def fib4(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
  \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
  \ == (386l));\n    }\n\n}\n"
completions: ["        val fib4 = new mutable.MutableList[Long]()\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 +=\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val\
    \ fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n       \
    \ fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n     \
    \   fib4.put(4l, fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n\
    \        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n \
    \       fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 0l)\n  \
    \      fib4.put(6, 4l)\n        fib4.put(7, 8l)\n        fib4.put(8, 14l)\n  \
    \      fib4.put(9, 0l)\n        fib4.put(10, 0l)\n        fib4.put(11, 0l)\n \
    \       fib4.put(12, 0l)\n        fib4.put(13, 0l)\n        fib4.put(14, 0l)\n\
    \        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n\
    \        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n\
    \        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n\
    \        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n\
    \        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n\
    \        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n\
    \        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n\
    \        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n\
    \        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n\
    \        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n\
    \        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n\
    \        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n\
    \        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n\
    \        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n\
    \        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n\
    \        fib4.put(60, 0l)\n        fib4.", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl, fib4(n-1l) + fib4(n-2l)\
    \ + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)", "        val fib4 = new mutable.Array[Long](4L)\n\
    \        fib4(0) += 1\n        fib4(1) += 1\n        fib4(2) += 1\n        fib4(3)\
    \ += 1\n        fib4(n) += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n   \
    \     fib4(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n      \
    \  fib4 += 0l -> 0l\n        fib4 += 1l -> 0l\n        fib4 += 2l -> 2l\n    \
    \    fib4 += 3l -> 0l\n        fib4 += 4l -> 4l\n        fib4 += 5l -> 8l\n  \
    \      fib4 += 6l -> 14l\n        fib4 += 7l -> 20l\n        fib4 += 8l -> 34l\n\
    \        fib4 += 9l -> 50l\n        fib4 += 10l -> 70l\n        fib4 += 11l ->\
    \ 100l\n        fib4 += 12l -> 150l\n        fib4 += 13l -> 200l\n        fib4\
    \ += 14l -> 300l\n        fib4 += 15l -> 400l\n        fib4 += 16l -> 500l\n \
    \       fib4 += 17l -> 600l\n        fib4 += 18l -> 800l\n        fib4 += 19l\
    \ -> 1000l\n        fib4 += 20l -> 1200l\n        fib4 += 21l -> 1400l\n     \
    \   fib4 += 22l -> 1800l\n        fib4 += 23l -> 2200l\n        fib4 += 24l ->\
    \ 2700l\n        fib4 += 25l -> 3300l\n        fib4 += 26l -> 3900l\n        fib4\
    \ += 27l -> 4200l\n        fib4 += 28l -> 4700l\n        fib4 += 29l -> 5100l\n\
    \        fib4 += 30l -> 5700l\n        fib4 += 31l -> 6200l\n        fib4 += 32l\
    \ -> 6700l\n        fib4 += 33l -> 7300l\n        fib4 += 34l -> 7900l\n     \
    \   fib4 += 35l -> 8300l\n        fib4 += 36l -> 8900l\n        fib4 += 37l ->\
    \ 9300l\n        fib4 += 38l -> 9900l\n        fib4 += 39l -> 10300l\n       \
    \ fib4 += 40l -> 10800l\n        fib4 += 41l -> 11400l\n        fib4 += 42l ->\
    \ 11900l\n        fib4 += 43l -> 12400l\n        fib4 += 44l -> 12900l\n     \
    \   fib4 += 45l -> 13400l\n        fib4 += 46l -> 13900l\n        fib4 ", "  \
    \      val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(nl, fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n   \
    \     fib4.get(nl)", "        val fib4 = new mutable.Array[Long](n)\n        fib4(0)\
    \ = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3) = 0\n       \
    \ fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", " \
    \       val fib4 = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l, 0l)\n        fib4.put(8l,\
    \ 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l, 0l)\n        fib4.put(11l,\
    \ 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l, 0l)\n        fib4.put(14l,\
    \ 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l,\
    \ 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l,\
    \ 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l,\
    \ 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l,\
    \ 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l,\
    \ 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l,\
    \ 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l,\
    \ 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l,\
    \ 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l,\
    \ 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l,\
    \ 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l,\
    \ 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l,\
    \ 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l,\
    \ 0l)\n        fib4.put(54l, 0l)\n        fib", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l, 0l)\n        fib4.put(8l,\
    \ 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l, 0l)\n        fib4.put(11l,\
    \ 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l, 0l)\n        fib4.put(14l,\
    \ 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l,\
    \ 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l,\
    \ 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l,\
    \ 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l,\
    \ 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l,\
    \ 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l,\
    \ 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l,\
    \ 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l,\
    \ 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l,\
    \ 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l,\
    \ 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l,\
    \ 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l,\
    \ 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l,\
    \ 0l)\n        fib4.put(54l, 0l)\n        fib", "        if (n <= 0) 0\n     \
    \   else if (n <= 2) 1\n        else if (n <= 3) 2\n        else if (n <= 5) 3\n\
    \        else fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)", "      \
    \  val fib4 = new mutable.Array[Long](4L)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4 += 0l -> 0l\n        fib4 += 1l\
    \ -> 0l\n        fib4 += 2l -> 2l\n        fib4 += 3l -> 0l\n        fib4 += 4l\
    \ -> 0l\n        fib4 += 5l -> 4l\n        fib4 += 6l -> 8l\n        fib4 += 7l\
    \ -> 14l\n        fib4 += 8l -> 16l\n        fib4 += 9l -> 18l\n        fib4 +=\
    \ 10l -> 20l\n        fib4 += 11l -> 22l\n        fib4 += 12l -> 24l\n       \
    \ fib4 += 13l -> 26l\n        fib4 += 14l -> 28l\n        fib4 += 15l -> 30l\n\
    \        fib4 += 16l -> 32l\n        fib4 += 17l -> 34l\n        fib4 += 18l ->\
    \ 36l\n        fib4 += 19l -> 38l\n        fib4 += 20l -> 40l\n        fib4 +=\
    \ 21l -> 42l\n        fib4 += 22l -> 44l\n        fib4 += 23l -> 46l\n       \
    \ fib4 += 24l -> 48l\n        fib4 += 25l -> 50l\n        fib4 += 26l -> 52l\n\
    \        fib4 += 27l -> 54l\n        fib4 += 28l -> 56l\n        fib4 += 29l ->\
    \ 58l\n        fib4 += 30l -> 60l\n        fib4 += 31l -> 62l\n        fib4 +=\
    \ 32l -> 64l\n        fib4 += 33l -> 66l\n        fib4 += 34l -> 68l\n       \
    \ fib4 += 35l -> 70l\n        fib4 += 36l -> 72l\n        fib4 += 37l -> 74l\n\
    \        fib4 += 38l -> 76l\n        fib4 += 39l -> 78l\n        fib4 += 40l ->\
    \ 80l\n        fib4 += 41l -> 82l\n        fib4 += 42l -> 84l\n        fib4 +=\
    \ 43l -> 86l\n        fib4 += 44l -> 88l\n        fib4 += 45l -> 90l\n       \
    \ fib4 += 46l -> 92l\n        fib4 += 47l -> 94l\n        fib4 += 48l -> 96l\n\
    \        fib4 += 49l -> ", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n \
    \       fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 0l)\n  \
    \      fib4.put(6, 4l)\n        fib4.put(7, 8l)\n        fib4.put(8, 14l)\n  \
    \      fib4.put(9, 0l)\n        fib4.put(10, 0l)\n        fib4.put(11, 0l)\n \
    \       fib4.put(12, 0l)\n        fib4.put(13, 0l)\n        fib4.put(14, 0l)\n\
    \        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n\
    \        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n\
    \        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n\
    \        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n\
    \        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n\
    \        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n\
    \        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n\
    \        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n\
    \        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n\
    \        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n\
    \        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n\
    \        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n\
    \        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n\
    \        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n\
    \        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n\
    \        fib4.put(60, 0l)\n        fib4.", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l, 14l)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n\
    \        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n \
    \       fib4.put(4, 0l)\n        fib4.put(5, 4l)\n        fib4.put(6, 8l)\n  \
    \      fib4.put(7, 14l)\n        fib4.put(n, (fib4.get(n-1) + fib4.get(n-2) +\
    \ fib4.get(n-3) + fib4.get(n-4)))\n        fib4.get(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(4l, 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n\
    \        fib4.put(7l, 14l)\n        fib4.get(n)", "        val fib4 = new mutable.Array[Long](n)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l,\
    \ 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l,\
    \ 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l,\
    \ 0l)\n        fib4.put(7l, 0l)\n        fib4.put(8l, 8l)\n        fib4.put(9l,\
    \ 0l)\n        fib4.put(10l, 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l,\
    \ 12l)\n        fib4.put(13l, 0l)\n        fib4.put(14l, 14l)\n        fib4.put(15l,\
    \ 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l, 17l)\n        fib4.put(18l,\
    \ 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l, 20l)\n        fib4.put(21l,\
    \ 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l, 23l)\n        fib4.put(24l,\
    \ 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l, 26l)\n        fib4.put(27l,\
    \ 0l)\n        fib4.put(28l, 28l)\n        fib4.put(29l, 0l)\n        fib4.put(30l,\
    \ 30l)\n        fib4.put(31l, 0l)\n        fib4.put(32l, 32l)\n        fib4.put(33l,\
    \ 0l)\n        fib4.put(34l, 34l)\n        fib4.put(35l, 0l)\n        fib4.put(36l,\
    \ 36l)\n        fib4.put(37l, 0l)\n        fib4.put(38l, 38l)\n        fib4.put(39l,\
    \ 0l)\n        fib4.put(40l, 40l)\n        fib4.put(41l, 0l)\n        fib4.put(42l,\
    \ 42l)\n        fib4.put(43l, 0l)\n        fib4.put(44l, 44l)\n        fib4.put(45l,\
    \ 0l)\n        fib4.put(46l, 46l)\n        fib4.put(47l, 0l)\n        fib4.put(48l,\
    \ 48l)\n        fib4.put(49l, 0l)\n        fib4.put(50l, 50l)\n        fib4.put(51l,\
    \ 0l)\n        fib4.put(52l, 52l)\n        fib4.put(53l, 0l)\n        fib4.put(54l,\
    \ 54l)\n        fib", "        val fib4 = new mutable.HashSet[Long]()\n      \
    \  fib4.add(0)\n        fib4.add(1)\n        fib4.add(2)\n        fib4.add(3)\n\
    \        fib4.add(4)\n        fib4.add(5)\n        fib4.add(6)\n        fib4.add(7)\n\
    \        fib4.add(8)\n        fib4.add(9)\n        fib4.add(10)\n        fib4.add(11)\n\
    \        fib4.add(12)\n        fib4.add(13)\n        fib4.add(14)\n        fib4.add(15)\n\
    \        fib4.add(16)\n        fib4.add(17)\n        fib4.add(18)\n        fib4.add(19)\n\
    \        fib4.add(20)\n        fib4.add(21)\n        fib4.add(22)\n        fib4.add(23)\n\
    \        fib4.add(24)\n        fib4.add(25)\n        fib4.add(26)\n        fib4.add(27)\n\
    \        fib4.add(28)\n        fib4.add(29)\n        fib4.add(30)\n        fib4.add(31)\n\
    \        fib4.add(32)\n        fib4.add(33)\n        fib4.add(34)\n        fib4.add(35)\n\
    \        fib4.add(36)\n        fib4.add(37)\n        fib4.add(38)\n        fib4.add(39)\n\
    \        fib4.add(40)\n        fib4.add(41)\n        fib4.add(42)\n        fib4.add(43)\n\
    \        fib4.add(44)\n        fib4.add(45)\n        fib4.add(46)\n        fib4.add(47)\n\
    \        fib4.add(48)\n        fib4.add(49)\n        fib4.add(50)\n        fib4.add(51)\n\
    \        fib4.add(52)\n        fib4.add(53)\n        fib4.add(54)\n        fib4.add(55)\n\
    \        fib4.add(56)\n        fib4.add(57)\n        fib4.add(58)\n        fib4.add(59)\n\
    \        fib4.add(60)\n        fib4.add(61)\n        fib4.add(62)\n        fib4.add(63)\n\
    \        fib4.add(64)\n        fib4.add(65)\n        fib4.add(66)\n        fib4.add(67)\n\
    \        fib4.add(68)\n        fib4.add(69)\n        fib4.add(70)\n        fib4.add(71)\n\
    \        fib4.add(72)\n        fib4.add(73)\n        fib4.add(74)\n        fib4.add(",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(4l, fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n\
    \        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n\
    \        fib4.put(3l, 0l)\n        fib4.put(4l, fib4.get(3l) + fib4.get(2l) +\
    \ fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)", "        val fib4 = new\
    \ mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n\
    \        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l, 0l)\n\
    \        fib4.put(6l, 0l)\n        fib4.put(7l, 0l)\n        fib4.put(8l, 2l)\n\
    \        fib4.put(9l, 0l)\n        fib4.put(10l, 0l)\n        fib4.put(11l, 0l)\n\
    \        fib4.put(12l, 0l)\n        fib4.put(13l, 0l)\n        fib4.put(14l, 4l)\n\
    \        fib4.put(15l, 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l, 0l)\n\
    \        fib4.put(18l, 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l, 0l)\n\
    \        fib4.put(21l, 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l, 0l)\n\
    \        fib4.put(24l, 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l, 0l)\n\
    \        fib4.put(27l, 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l, 0l)\n\
    \        fib4.put(30l, 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l, 0l)\n\
    \        fib4.put(33l, 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l, 0l)\n\
    \        fib4.put(36l, 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l, 0l)\n\
    \        fib4.put(39l, 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l, 0l)\n\
    \        fib4.put(42l, 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l, 0l)\n\
    \        fib4.put(45l, 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l, 0l)\n\
    \        fib4.put(48l, 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l, 0l)\n\
    \        fib4.put(51l, 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l, 0l)\n\
    \        fib4.put(54l, 0l)\n        fib", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l, 0l)\n        fib4.put(8l,\
    \ 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l, 0l)\n        fib4.put(11l,\
    \ 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l, 0l)\n        fib4.put(14l,\
    \ 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l,\
    \ 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l,\
    \ 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l,\
    \ 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l,\
    \ 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l,\
    \ 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l,\
    \ 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l,\
    \ 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l,\
    \ 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l,\
    \ 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l,\
    \ 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l,\
    \ 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l,\
    \ 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l,\
    \ 0l)\n        fib4.put(54l, 0l)\n        fib", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4 += 0l -> 0l\n        fib4 += 1l -> 0l\n        fib4 +=\
    \ 2l -> 2l\n        fib4 += 3l -> 0l\n        fib4 += 4l -> 4l\n        fib4 +=\
    \ 5l -> 8l\n        fib4 += 6l -> 14l\n        fib4 += 7l -> 28l\n        fib4\
    \ += 8l -> 56l\n        fib4 += 9l -> 84l\n        fib4 += 10l -> 120l\n     \
    \   fib4 += 11l -> 184l\n        fib4 += 12l -> 240l\n        fib4 += 13l -> 336l\n\
    \        fib4 += 14l -> 420l\n        fib4 += 15l -> 508l\n        fib4 += 16l\
    \ -> 594l\n        fib4 += 17l -> 672l\n        fib4 += 18l -> 760l\n        fib4\
    \ += 19l -> 842l\n        fib4 += 20l -> 936l\n        fib4 += 21l -> 1040l\n\
    \        fib4 += 22l -> 1144l\n        fib4 += 23l -> 1248l\n        fib4 += 24l\
    \ -> 1352l\n        fib4 += 25l -> 1456l\n        fib4 += 26l -> 1568l\n     \
    \   fib4 += 27l -> 1680l\n        fib4 += 28l -> 1792l\n        fib4 += 29l ->\
    \ 1896l\n        fib4 += 30l -> 1992l\n        fib4 += 31l -> 2096l\n        fib4\
    \ += 32l -> 2184l\n        fib4 += 33l -> 2212l\n        fib4 += 34l -> 2224l\n\
    \        fib4 += 35l -> 2236l\n        fib4 += 36l -> 2248l\n        fib4 += 37l\
    \ -> 2252l\n        fib4 += 38l -> 2266l\n        fib4 += 39l -> 2272l\n     \
    \   fib4 += 40l -> 2288l\n        fib4 += 41l -> 2296l\n        fib4 += 42l ->\
    \ 2304l\n        fib4 += 43l -> 2312l\n        fib4 += 44l -> 2324l\n        fib4\
    \ += 45l -> 2336l\n        fib4 += ", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l, 14l)\n        fib4.put(nl,\
    \ fib4(nl-1l) + fib4(nl-2l) + fib4(nl-3l) + fib4(nl-4l))\n        fib4.get(nl)",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n\
    \        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n \
    \       fib4.put(4, 0l)\n        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n  \
    \      fib4.put(7, 8l)\n        fib4.put(8, 14l)\n        fib4.put(9, 0l)\n  \
    \      fib4.put(10, 0l)\n        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n\
    \        fib4.put(13, 0l)\n        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n\
    \        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n\
    \        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n\
    \        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n\
    \        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n\
    \        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n\
    \        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n\
    \        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n\
    \        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n\
    \        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n\
    \        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n\
    \        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n\
    \        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n\
    \        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n\
    \        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n\
    \        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n\
    \        fib4.", "        val fib4 = new mutable.HashMap[Long, Long]()\n     \
    \   fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n      \
    \  fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 0l)\n       \
    \ fib4.put(6, 4l)\n        fib4.put(7, 8l)\n        fib4.put(8, 14l)\n       \
    \ fib4.put(9, 0l)\n        fib4.put(10, 0l)\n        fib4.put(11, 0l)\n      \
    \  fib4.put(12, 0l)\n        fib4.put(13, 0l)\n        fib4.put(14, 0l)\n    \
    \    fib4.put(15, 0l)\n        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n  \
    \      fib4.put(18, 0l)\n        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n\
    \        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n\
    \        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n\
    \        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n\
    \        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n\
    \        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n\
    \        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n\
    \        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n\
    \        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n\
    \        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n\
    \        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n\
    \        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n\
    \        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n\
    \        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n\
    \        fib4.put(60, 0l)\n        fib4.", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl, fib4(n-1l) + fib4(n-2l)\
    \ + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2,\
    \ 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 4l)\n\
    \        fib4.put(6, 8l)\n        fib4.put(7, 14l)\n        fib4.get(n)", "  \
    \      val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(4l, 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n\
    \        fib4.put(7l, 14l)\n        fib4.get(n).asInstanceOf[Long]", "       \
    \ val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n   \
    \     fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n \
    \       fib4.put(4l, 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n\
    \        fib4.put(7l, 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n\
    \        fib4.put(10l, 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n\
    \        fib4.put(13l, 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n\
    \        fib4.put(16l, 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n\
    \        fib4.put(19l, 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n\
    \        fib4.put(22l, 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n\
    \        fib4.put(25l, 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n\
    \        fib4.put(28l, 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n\
    \        fib4.put(31l, 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n\
    \        fib4.put(34l, 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n\
    \        fib4.put(37l, 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n\
    \        fib4.put(40l, 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n\
    \        fib4.put(43l, 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n\
    \        fib4.put(46l, 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n\
    \        fib4.put(49l, 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n\
    \        fib4.put(52l, 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n\
    \        fib", "        val fib4 = new mutable.HashSet[Long]()\n        fib4.add(0)\n\
    \        fib4.add(1)\n        fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n\
    \        fib4.add(5)\n        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n\
    \        fib4.add(9)\n        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n\
    \        fib4.add(13)\n        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n\
    \        fib4.add(17)\n        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n\
    \        fib4.add(21)\n        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n\
    \        fib4.add(25)\n        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n\
    \        fib4.add(29)\n        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n\
    \        fib4.add(33)\n        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n\
    \        fib4.add(37)\n        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n\
    \        fib4.add(41)\n        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n\
    \        fib4.add(45)\n        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n\
    \        fib4.add(49)\n        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n\
    \        fib4.add(53)\n        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n\
    \        fib4.add(57)\n        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n\
    \        fib4.add(61)\n        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n\
    \        fib4.add(65)\n        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n\
    \        fib4.add(69)\n        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n\
    \        fib4.add(73)\n        fib4.add(74)\n        fib4.add(", "        val\
    \ fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n       \
    \ fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n     \
    \   fib4.put(4l, fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n\
    \        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n \
    \       fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 0l)\n  \
    \      fib4.put(6, 4l)\n        fib4.put(7, 8l)\n        fib4.put(8, 14l)\n  \
    \      fib4.put(9, 0l)\n        fib4.put(10, 0l)\n        fib4.put(11, 0l)\n \
    \       fib4.put(12, 0l)\n        fib4.put(13, 0l)\n        fib4.put(14, 0l)\n\
    \        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n\
    \        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n\
    \        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n\
    \        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n\
    \        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n\
    \        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n\
    \        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n\
    \        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n\
    \        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n\
    \        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n\
    \        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n\
    \        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n\
    \        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n\
    \        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n\
    \        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n\
    \        fib4.put(60, 0l)\n        fib4.", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl, fib4(n-1l) + fib4(n-2l)\
    \ + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)", "        if (n == 0) 0\n\
    \        else if (n == 1) 1\n        else if (n == 2) 2\n        else if (n ==\
    \ 3) 0\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", " \
    \       val fib4 = new mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n\
    \        fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n\
    \        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n\
    \        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n\
    \        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n\
    \        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n\
    \        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n\
    \        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n\
    \        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n\
    \        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n\
    \        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n\
    \        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n\
    \        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n\
    \        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n\
    \        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n\
    \        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n\
    \        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n\
    \        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n\
    \        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n\
    \        fib4.add(74)\n        fib4.add(", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l, 14l)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(nl, fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n   \
    \     fib4.get(nl)", "        val fib4 = new mutable.HashMap[Long, Long]()\n \
    \       fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n  \
    \      fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 0l)\n   \
    \     fib4.put(6, 4l)\n        fib4.put(7, 8l)\n        fib4.put(8, 14l)\n   \
    \     fib4.put(9, 0l)\n        fib4.put(10, 0l)\n        fib4.put(11, 0l)\n  \
    \      fib4.put(12, 0l)\n        fib4.put(13, 0l)\n        fib4.put(14, 0l)\n\
    \        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n\
    \        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n\
    \        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n\
    \        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n\
    \        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n\
    \        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n\
    \        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n\
    \        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n\
    \        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n\
    \        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n\
    \        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n\
    \        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n\
    \        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n\
    \        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n\
    \        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n\
    \        fib4.put(60, 0l)\n        fib4.", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl, fib4(n-1l) + fib4(n-2l)\
    \ + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl, fib4(n-1l) + fib4(n-2l)\
    \ + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l, 0l)\n        fib4.put(8l,\
    \ 8l)\n        fib4.put(9l, 0l)\n        fib4.put(10l, 0l)\n        fib4.put(11l,\
    \ 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l, 0l)\n        fib4.put(14l,\
    \ 14l)\n        fib4.put(15l, 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l,\
    \ 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l,\
    \ 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l,\
    \ 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l,\
    \ 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l,\
    \ 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l,\
    \ 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l,\
    \ 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l,\
    \ 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l,\
    \ 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l,\
    \ 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l,\
    \ 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l,\
    \ 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l,\
    \ 0l)\n        fib4.put(54l, 0l)\n        fib", "        if (n <= 0) 0\n     \
    \   else if (n <= 2) 1\n        else if (n <= 3) 2\n        else fib4(n - 1) +\
    \ fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl, fib4(n-1l) + fib4(n-2l)\
    \ + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)", "        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(4l, 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n\
    \        fib4.put(7l, 14l)\n        fib4.get(n).asInstanceOf[Long]", "       \
    \ val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n    \
    \    fib4.put(1, 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n     \
    \   fib4.put(4, 0l)\n        fib4.put(5, 4l)\n        fib4.put(6, 8l)\n      \
    \  fib4.put(7, 14l)\n        fib4.put(8, 20l)\n        fib4.put(9, 34l)\n    \
    \    fib4.put(10, 55l)\n        fib4.put(11, 89l)\n        fib4.put(12, 144l)\n\
    \        fib4.put(13, 233l)\n        fib4.put(14, 377l)\n        fib4.put(15,\
    \ 610l)\n        fib4.put(16, 987l)\n        fib4.put(17, 1597l)\n        fib4.put(18,\
    \ 2584l)\n        fib4.put(19, 4181l)\n        fib4.put(20, 6765l)\n        fib4.put(21,\
    \ 10946l)\n        fib4.put(22, 17711l)\n        fib4.put(23, 28657l)\n      \
    \  fib4.put(24, 46368l)\n        fib4.put(25, 75025l)\n        fib4.put(26, 121393l)\n\
    \        fib4.put(27, 196418l)\n        fib4.put(28, 317811l)\n        fib4.put(29,\
    \ 514229l)\n        fib4.put(30, 832040l)\n        fib4.put(31, 1346269l)\n  \
    \      fib4.put(32, 2178309l)\n        fib4.put(33, 3524578l)\n        fib4.put(34,\
    \ 5702887l)\n        fib4.put(35, 9227465l)\n        fib4.put(36, 14930352l)\n\
    \        fib4.put(37, 24157817l)\n        fib4.put(38, 39088169l)\n        fib4.put(39,\
    \ 63245986l)\n        fib4.put(40, 102334155l)\n        fib4.put(41, 165580141l)\n\
    \        fib4.put(42, 267914296l)\n        fib4.put(43, 433494437l)\n        fib4.put(44,\
    \ 701408733l)\n        fib4.put(45, 1134903170l)\n        fib4.put(46, 1836311903l)\n\
    \        fib4.put(47, 2971215073l)\n        fib4.put(48, 4984540113l)\n      \
    \  fib4.put(49, 8065155331l)\n        fib4.put(50, 13049695417l)\n        fib4.put(5",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n\
    \        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n \
    \       fib4.put(4, 0l)\n        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n  \
    \      fib4.put(7, 8l)\n        fib4.put(8, 14l)\n        fib4.put(9, 0l)\n  \
    \      fib4.put(10, 0l)\n        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n\
    \        fib4.put(13, 0l)\n        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n\
    \        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n\
    \        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n\
    \        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n\
    \        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n\
    \        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n\
    \        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n\
    \        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n\
    \        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n\
    \        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n\
    \        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n\
    \        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n\
    \        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n\
    \        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n\
    \        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n\
    \        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n\
    \        fib4.", "        val fib4 = new mutable.HashMap[Long, Long]()\n     \
    \   fib4 += (0l -> 0l)\n        fib4 += (1l -> 0l)\n        fib4 += (2l -> 2l)\n\
    \        fib4 += (3l -> 0l)\n        fib4 += (4l -> fib4.get(n - 4) + fib4.get(n\
    \ - 3) + fib4.get(n - 2) + fib4.get(n - 1))\n        fib4.get(n)", "        val\
    \ fib4 = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.Array[Long](4)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)", "        val fib4 = new mutable.HashSet[Long]()\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 0\n", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l, 14l)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(nl, fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n   \
    \     fib4.get(nl)", "        val fib4 = new mutable.HashMap[Long, Long]()\n \
    \       fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n\
    \        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l, 4l)\n\
    \        fib4.put(6l, 8l)\n        fib4.put(7l, 14l)\n        fib4.get(n)", " \
    \       val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(4l, 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n\
    \        fib4.put(7l, 14l)\n        fib4.get(n).asInstanceOf[Long]", "       \
    \ val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n   \
    \     fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n \
    \       fib4.put(4l, 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n\
    \        fib4.put(7l, 0l)\n        fib4.put(8l, 8l)\n        fib4.put(9l, 0l)\n\
    \        fib4.put(10l, 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n\
    \        fib4.put(13l, 0l)\n        fib4.put(14l, 14l)\n        fib4.put(15l,\
    \ 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l,\
    \ 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l,\
    \ 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l,\
    \ 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l,\
    \ 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l,\
    \ 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l,\
    \ 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l,\
    \ 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l,\
    \ 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l,\
    \ 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l,\
    \ 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l,\
    \ 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l,\
    \ 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l,\
    \ 0l)\n        fib", "        val fib4 = new mutable.HashMap[Long, Long]()\n \
    \       fib4 += (0l -> 0l)\n        fib4 += (1l -> 0l)\n        fib4 += (2l ->\
    \ 2l)\n        fib4 += (3l -> 0l)\n        fib4 += (4l -> 0l)\n        fib4 +=\
    \ (5l -> 4l)\n        fib4 += (6l -> 8l)\n        fib4 += (7l -> 14l)\n      \
    \  fib4 += (nl -> fib4(nl-1) + fib4(nl-2) + fib4(nl-3) + fib4(nl-4))\n       \
    \ fib4(nl)", "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l,\
    \ 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l,\
    \ 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l,\
    \ 0l)\n        fib4.put(7l, 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l,\
    \ 0l)\n        fib4.put(10l, 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l,\
    \ 0l)\n        fib4.put(13l, 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l,\
    \ 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l,\
    \ 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l,\
    \ 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l,\
    \ 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l,\
    \ 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l,\
    \ 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l,\
    \ 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l,\
    \ 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l,\
    \ 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l,\
    \ 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l,\
    \ 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l,\
    \ 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l,\
    \ 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l,\
    \ 0l)\n        fib", "        val fib4 = new mutable.HashMap[Long, Long]()\n \
    \       fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n\
    \        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l, 0l)\n\
    \        fib4.put(6l, 0l)\n        fib4.put(7l, 0l)\n        fib4.put(8l, 2l)\n\
    \        fib4.put(9l, 0l)\n        fib4.put(10l, 0l)\n        fib4.put(11l, 0l)\n\
    \        fib4.put(12l, 0l)\n        fib4.put(13l, 0l)\n        fib4.put(14l, 4l)\n\
    \        fib4.put(15l, 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l, 0l)\n\
    \        fib4.put(18l, 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l, 0l)\n\
    \        fib4.put(21l, 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l, 0l)\n\
    \        fib4.put(24l, 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l, 0l)\n\
    \        fib4.put(27l, 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l, 0l)\n\
    \        fib4.put(30l, 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l, 0l)\n\
    \        fib4.put(33l, 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l, 0l)\n\
    \        fib4.put(36l, 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l, 0l)\n\
    \        fib4.put(39l, 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l, 0l)\n\
    \        fib4.put(42l, 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l, 0l)\n\
    \        fib4.put(45l, 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l, 0l)\n\
    \        fib4.put(48l, 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l, 0l)\n\
    \        fib4.put(51l, 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l, 0l)\n\
    \        fib4.put(54l, 0l)\n        fib", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl, fib4(n-1l) + fib4(n-2l)\
    \ + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)", "        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(4l, 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n\
    \        fib4.put(7l, 14l)\n        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l, 14l)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(4l, 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n\
    \        fib4.put(7l, 14l)\n        fib4.get(n).asInstanceOf[Long]", "       \
    \ val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n   \
    \     fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n \
    \       fib4.put(4l, 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n\
    \        fib4.put(7l, 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n\
    \        fib4.put(10l, 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n\
    \        fib4.put(13l, 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n\
    \        fib4.put(16l, 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n\
    \        fib4.put(19l, 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n\
    \        fib4.put(22l, 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n\
    \        fib4.put(25l, 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n\
    \        fib4.put(28l, 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n\
    \        fib4.put(31l, 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n\
    \        fib4.put(34l, 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n\
    \        fib4.put(37l, 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n\
    \        fib4.put(40l, 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n\
    \        fib4.put(43l, 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n\
    \        fib4.put(46l, 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n\
    \        fib4.put(49l, 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n\
    \        fib4.put(52l, 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n\
    \        fib", "        val fib4 = new mutable.HashMap[Long, Long]()\n       \
    \ fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n        fib4.put(3,\
    \ 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 4l)\n        fib4.put(6, 8l)\n\
    \        fib4.put(7, 14l)\n        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, fib4.get(3l) + fib4.get(2l)\
    \ + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)", "        val fib4 = new\
    \ mutable.Array[Long](4L)\n        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2)\
    \ = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl, fib4(n-1l) + fib4(n-2l)\
    \ + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2,\
    \ 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 0l)\n\
    \        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n        fib4.put(8, 14l)\n\
    \        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n        fib4.put(11, 0l)\n\
    \        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n        fib4.put(14, 0l)\n\
    \        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n\
    \        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n\
    \        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n\
    \        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n\
    \        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n\
    \        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n\
    \        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n\
    \        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n\
    \        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n\
    \        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n\
    \        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n\
    \        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n\
    \        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n\
    \        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n\
    \        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n\
    \        fib4.put(60, 0l)\n        fib4.", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2,\
    \ 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 4l)\n\
    \        fib4.put(6, 8l)\n        fib4.put(7, 14l)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(4l, fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n\
    \        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n \
    \       fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 0l)\n  \
    \      fib4.put(6, 0l)\n        fib4.put(7, 0l)\n        fib4.put(8, 2l)\n   \
    \     fib4.put(9, 0l)\n        fib4.put(10, 0l)\n        fib4.put(11, 0l)\n  \
    \      fib4.put(12, 0l)\n        fib4.put(13, 0l)\n        fib4.put(14, 4l)\n\
    \        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n\
    \        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n        fib4.put(20, 8l)\n\
    \        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n\
    \        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n\
    \        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n\
    \        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n\
    \        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n\
    \        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n\
    \        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n\
    \        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n\
    \        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n\
    \        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n\
    \        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n\
    \        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n\
    \        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n\
    \        fib4.put(60, 0l)\n        fib4.", "        val fib4 = new mutable.Array[Long](n)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0,\
    \ 0l)\n        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n\
    \        fib4.put(4, 0l)\n        fib4.put(5, 4l)\n        fib4.put(6, 8l)\n \
    \       fib4.put(7, 14l)\n        fib4.get(n).asInstanceOf[Long]", "        val\
    \ fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n       \
    \ fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n     \
    \   fib4.put(4l, 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n   \
    \     fib4.put(7l, 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n \
    \       fib4.put(10l, 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n\
    \        fib4.put(13l, 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n\
    \        fib4.put(16l, 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n\
    \        fib4.put(19l, 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n\
    \        fib4.put(22l, 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n\
    \        fib4.put(25l, 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n\
    \        fib4.put(28l, 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n\
    \        fib4.put(31l, 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n\
    \        fib4.put(34l, 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n\
    \        fib4.put(37l, 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n\
    \        fib4.put(40l, 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n\
    \        fib4.put(43l, 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n\
    \        fib4.put(46l, 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n\
    \        fib4.put(49l, 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n\
    \        fib4.put(52l, 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n\
    \        fib", "        if (n == 0) 0\n        else if (n == 1) 1\n        else\
    \ if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l, 0l)\n        fib4.put(8l,\
    \ 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l, 0l)\n        fib4.put(11l,\
    \ 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l, 0l)\n        fib4.put(14l,\
    \ 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l,\
    \ 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l,\
    \ 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l,\
    \ 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l,\
    \ 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l,\
    \ 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l,\
    \ 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l,\
    \ 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l,\
    \ 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l,\
    \ 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l,\
    \ 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l,\
    \ 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l,\
    \ 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l,\
    \ 0l)\n        fib4.put(54l, 0l)\n        fib", "        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.Array[Long](n)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 8l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 14l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib", " \
    \       val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(4l, 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n\
    \        fib4.put(7l, 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n\
    \        fib4.put(10l, 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n\
    \        fib4.put(13l, 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n\
    \        fib4.put(16l, 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n\
    \        fib4.put(19l, 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n\
    \        fib4.put(22l, 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n\
    \        fib4.put(25l, 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n\
    \        fib4.put(28l, 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n\
    \        fib4.put(31l, 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n\
    \        fib4.put(34l, 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n\
    \        fib4.put(37l, 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n\
    \        fib4.put(40l, 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n\
    \        fib4.put(43l, 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n\
    \        fib4.put(46l, 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n\
    \        fib4.put(49l, 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n\
    \        fib4.put(52l, 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n\
    \        fib", "        val fib4 = new mutable.HashSet[Long]\n        fib4 +=\
    \ 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 +=\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val\
    \ fib4 = new mutable.HashSet[Long]\n        fib4 += 0\n        fib4 += 0\n   \
    \     fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l, 14l)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.Array[Long](n)\n        fib4(0) = 0\n        fib4(1)\
    \ = 0\n        fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)", " \
    \       val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(4l, 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n\
    \        fib4.put(7l, 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n\
    \        fib4.put(10l, 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n\
    \        fib4.put(13l, 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n\
    \        fib4.put(16l, 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n\
    \        fib4.put(19l, 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n\
    \        fib4.put(22l, 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n\
    \        fib4.put(25l, 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n\
    \        fib4.put(28l, 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n\
    \        fib4.put(31l, 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n\
    \        fib4.put(34l, 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n\
    \        fib4.put(37l, 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n\
    \        fib4.put(40l, 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n\
    \        fib4.put(43l, 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n\
    \        fib4.put(46l, 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n\
    \        fib4.put(49l, 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n\
    \        fib4.put(52l, 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n\
    \        fib", "        val fib4 = new mutable.HashMap[Long, Long]()\n       \
    \ fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n        fib4.put(3,\
    \ 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 4l)\n        fib4.put(6, 8l)\n\
    \        fib4.put(7, 14l)\n        fib4.put(8, 20l)\n        fib4.put(9, 34l)\n\
    \        fib4.put(10, 55l)\n        fib4.put(11, 89l)\n        fib4.put(12, 144l)\n\
    \        fib4.put(13, 233l)\n        fib4.put(14, 377l)\n        fib4.put(15,\
    \ 610l)\n        fib4.put(16, 987l)\n        fib4.put(17, 1597l)\n        fib4.put(18,\
    \ 2584l)\n        fib4.put(19, 4181l)\n        fib4.put(20, 6765l)\n        fib4.put(21,\
    \ 10946l)\n        fib4.put(22, 17711l)\n        fib4.put(23, 28657l)\n      \
    \  fib4.put(24, 46368l)\n        fib4.put(25, 75025l)\n        fib4.put(26, 121393l)\n\
    \        fib4.put(27, 196418l)\n        fib4.put(28, 317811l)\n        fib4.put(29,\
    \ 514229l)\n        fib4.put(30, 832040l)\n        fib4.put(31, 1346269l)\n  \
    \      fib4.put(32, 2178309l)\n        fib4.put(33, 3524578l)\n        fib4.put(34,\
    \ 5702887l)\n        fib4.put(35, 9227465l)\n        fib4.put(36, 14930352l)\n\
    \        fib4.put(37, 24157817l)\n        fib4.put(38, 39088169l)\n        fib4.put(39,\
    \ 63245986l)\n        fib4.put(40, 102334155l)\n        fib4.put(41, 165580141l)\n\
    \        fib4.put(42, 267914296l)\n        fib4.put(43, 433494437l)\n        fib4.put(44,\
    \ 701408733l)\n        fib4.put(45, 1134903170l)\n        fib4.put(46, 1836311903l)\n\
    \        fib4.put(47, 2971215073l)\n        fib4.put(48, 4984540113l)\n      \
    \  fib4.put(49, 8065155331l)\n        fib4.put(50, 13049695417l)\n        fib4.put(5",
  "        val fib4 = new mutable.MutableList[Long]\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4.add(0)\n        fib4.add(1)\n        fib4.add(2)\n        fib4.add(3)\n\
    \        fib4.add(4)\n        fib4.add(5)\n        fib4.add(6)\n        fib4.add(7)\n\
    \        fib4.add(8)\n        fib4.add(9)\n        fib4.add(10)\n        fib4.add(11)\n\
    \        fib4.add(12)\n        fib4.add(13)\n        fib4.add(14)\n        fib4.add(15)\n\
    \        fib4.add(16)\n        fib4.add(17)\n        fib4.add(18)\n        fib4.add(19)\n\
    \        fib4.add(20)\n        fib4.add(21)\n        fib4.add(22)\n        fib4.add(23)\n\
    \        fib4.add(24)\n        fib4.add(25)\n        fib4.add(26)\n        fib4.add(27)\n\
    \        fib4.add(28)\n        fib4.add(29)\n        fib4.add(30)\n        fib4.add(31)\n\
    \        fib4.add(32)\n        fib4.add(33)\n        fib4.add(34)\n        fib4.add(35)\n\
    \        fib4.add(36)\n        fib4.add(37)\n        fib4.add(38)\n        fib4.add(39)\n\
    \        fib4.add(40)\n        fib4.add(41)\n        fib4.add(42)\n        fib4.add(43)\n\
    \        fib4.add(44)\n        fib4.add(45)\n        fib4.add(46)\n        fib4.add(47)\n\
    \        fib4.add(48)\n        fib4.add(49)\n        fib4.add(50)\n        fib4.add(51)\n\
    \        fib4.add(52)\n        fib4.add(53)\n        fib4.add(54)\n        fib4.add(55)\n\
    \        fib4.add(56)\n        fib4.add(57)\n        fib4.add(58)\n        fib4.add(59)\n\
    \        fib4.add(60)\n        fib4.add(61)\n        fib4.add(62)\n        fib4.add(63)\n\
    \        fib4.add(64)\n        fib4.add(65)\n        fib4.add(66)\n        fib4.add(67)\n\
    \        fib4.add(68)\n        fib4.add(69)\n        fib4.add(70)\n        fib4.add(71)\n\
    \        fib4.add(72)\n        fib4.add(73)\n        fib4.add(74)\n        fib4.add(",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n\
    \        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n \
    \       fib4.put(4, 0l)\n        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n  \
    \      fib4.put(7, 8l)\n        fib4.put(8, 14l)\n        fib4.put(9, 0l)\n  \
    \      fib4.put(10, 0l)\n        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n\
    \        fib4.put(13, 0l)\n        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n\
    \        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n\
    \        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n\
    \        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n\
    \        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n\
    \        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n\
    \        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n\
    \        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n\
    \        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n\
    \        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n\
    \        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n\
    \        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n\
    \        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n\
    \        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n\
    \        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n\
    \        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n\
    \        fib4.", "        val fib4 = new mutable.HashMap[Long, Long]()\n     \
    \   fib4 += (0l -> 0l)\n        fib4 += (1l -> 0l)\n        fib4 += (2l -> 2l)\n\
    \        fib4 += (3l -> 0l)\n        fib4 += (4l -> fib4.get(n - 4) + fib4.get(n\
    \ - 3) + fib4.get(n - 2) + fib4.get(n - 1))\n        fib4.get(n)", "        val\
    \ fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n       \
    \ fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n     \
    \   fib4.put(4l, fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n\
    \        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n \
    \       fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 4l)\n  \
    \      fib4.put(6, 8l)\n        fib4.put(7, 14l)\n        fib4.put(n, (fib4.get(n-1)\
    \ + fib4.get(n-2) + fib4.get(n-3) + fib4.get(n-4)))\n        fib4.get(n)", " \
    \       val fib4 = new mutable.MutableList[Long]()\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)",
  "        val fib4 = new mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n\
    \        fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n\
    \        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n\
    \        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n\
    \        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n\
    \        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n\
    \        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n\
    \        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n\
    \        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n\
    \        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n\
    \        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n\
    \        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n\
    \        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n\
    \        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n\
    \        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n\
    \        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n\
    \        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n\
    \        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n\
    \        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n\
    \        fib4.add(74)\n        fib4.add(", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, fib4.get(3l) + fib4.get(2l)\
    \ + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l,\
    \ 14l)\n        fib4.get(n).asInstanceOf[Long]", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l, 0l)\n        fib4.put(8l,\
    \ 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l, 0l)\n        fib4.put(11l,\
    \ 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l, 0l)\n        fib4.put(14l,\
    \ 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l,\
    \ 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l,\
    \ 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l,\
    \ 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l,\
    \ 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l,\
    \ 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l,\
    \ 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l,\
    \ 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l,\
    \ 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l,\
    \ 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l,\
    \ 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l,\
    \ 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l,\
    \ 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l,\
    \ 0l)\n        fib4.put(54l, 0l)\n        fib", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l, 14l)\n        fib4.get(n)",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(4l, 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n\
    \        fib4.put(7l, 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n\
    \        fib4.put(10l, 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n\
    \        fib4.put(13l, 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n\
    \        fib4.put(16l, 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n\
    \        fib4.put(19l, 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n\
    \        fib4.put(22l, 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n\
    \        fib4.put(25l, 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n\
    \        fib4.put(28l, 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n\
    \        fib4.put(31l, 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n\
    \        fib4.put(34l, 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n\
    \        fib4.put(37l, 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n\
    \        fib4.put(40l, 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n\
    \        fib4.put(43l, 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n\
    \        fib4.put(46l, 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n\
    \        fib4.put(49l, 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n\
    \        fib4.put(52l, 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n\
    \        fib", "        val fib4 = new mutable.HashMap[Long, Long]()\n       \
    \ fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n        fib4.put(3,\
    \ 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n\
    \        fib4.put(7, 8l)\n        fib4.put(8, 14l)\n        fib4.put(9, 0l)\n\
    \        fib4.put(10, 0l)\n        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n\
    \        fib4.put(13, 0l)\n        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n\
    \        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n\
    \        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n\
    \        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n\
    \        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n\
    \        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n\
    \        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n\
    \        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n\
    \        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n\
    \        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n\
    \        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n\
    \        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n\
    \        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n\
    \        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n\
    \        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n\
    \        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n\
    \        fib4.", "        val fib4 = new mutable.HashMap[Long, Long]()\n     \
    \   fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n   \
    \     fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l, 0l)\n \
    \       fib4.put(6l, 0l)\n        fib4.put(7l, 0l)\n        fib4.put(8l, 2l)\n\
    \        fib4.put(9l, 0l)\n        fib4.put(10l, 0l)\n        fib4.put(11l, 0l)\n\
    \        fib4.put(12l, 0l)\n        fib4.put(13l, 0l)\n        fib4.put(14l, 4l)\n\
    \        fib4.put(15l, 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l, 0l)\n\
    \        fib4.put(18l, 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l, 0l)\n\
    \        fib4.put(21l, 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l, 0l)\n\
    \        fib4.put(24l, 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l, 0l)\n\
    \        fib4.put(27l, 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l, 0l)\n\
    \        fib4.put(30l, 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l, 0l)\n\
    \        fib4.put(33l, 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l, 0l)\n\
    \        fib4.put(36l, 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l, 0l)\n\
    \        fib4.put(39l, 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l, 0l)\n\
    \        fib4.put(42l, 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l, 0l)\n\
    \        fib4.put(45l, 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l, 0l)\n\
    \        fib4.put(48l, 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l, 0l)\n\
    \        fib4.put(51l, 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l, 0l)\n\
    \        fib4.put(54l, 0l)\n        fib", "        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "        val\
    \ fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n       \
    \ fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n     \
    \   fib4.put(4l, 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n   \
    \     fib4.put(7l, 0l)\n        fib4.put(8l, 8l)\n        fib4.put(9l, 0l)\n \
    \       fib4.put(10l, 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n\
    \        fib4.put(13l, 0l)\n        fib4.put(14l, 14l)\n        fib4.put(15l,\
    \ 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l,\
    \ 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l,\
    \ 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l,\
    \ 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l,\
    \ 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l,\
    \ 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l,\
    \ 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l,\
    \ 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l,\
    \ 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l,\
    \ 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l,\
    \ 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l,\
    \ 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l,\
    \ 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l,\
    \ 0l)\n        fib", "        val fib4 = new mutable.HashMap[Long, Long]()\n \
    \       fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n  \
    \      fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 4l)\n   \
    \     fib4.put(6, 8l)\n        fib4.put(7, 14l)\n        fib4.put(n, (fib4.get(n-1)\
    \ + fib4.get(n-2) + fib4.get(n-3) + fib4.get(n-4)))\n        fib4.get(n)", " \
    \       val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n\
    \        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n \
    \       fib4.put(4, 0l)\n        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n  \
    \      fib4.put(7, 8l)\n        fib4.put(8, 14l)\n        fib4.put(9, 0l)\n  \
    \      fib4.put(10, 0l)\n        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n\
    \        fib4.put(13, 0l)\n        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n\
    \        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n\
    \        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n\
    \        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n\
    \        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n\
    \        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n\
    \        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n\
    \        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n\
    \        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n\
    \        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n\
    \        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n\
    \        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n\
    \        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n\
    \        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n\
    \        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n\
    \        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n\
    \        fib4.", "        if (n <= 0) 0\n        else if (n <= 2) 2\n        else\
    \ if (n <= 4) 0\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)", "        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n\
    \ == 2) 2\n        else if (n == 3) 0\n        else fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2,\
    \ 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 0l)\n\
    \        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n        fib4.put(8, 14l)\n\
    \        fib4.put(9, 18l)\n        fib4.put(10, 24l)\n        fib4.put(11, 30l)\n\
    \        fib4.put(12, 36l)\n        fib4.put(13, 42l)\n        fib4.put(14, 48l)\n\
    \        fib4.put(15, 54l)\n        fib4.put(16, 60l)\n        fib4.put(17, 66l)\n\
    \        fib4.put(18, 72l)\n        fib4.put(19, 78l)\n        fib4.put(20, 84l)\n\
    \        fib4.put(21, 90l)\n        fib4.put(22, 96l)\n        fib4.put(23, 102l)\n\
    \        fib4.put(24, 108l)\n        fib4.put(25, 114l)\n        fib4.put(26,\
    \ 120l)\n        fib4.put(27, 126l)\n        fib4.put(28, 132l)\n        fib4.put(29,\
    \ 138l)\n        fib4.put(30, 144l)\n        fib4.put(31, 150l)\n        fib4.put(32,\
    \ 156l)\n        fib4.put(33, 162l)\n        fib4.put(34, 168l)\n        fib4.put(35,\
    \ 174l)\n        fib4.put(36, 180l)\n        fib4.put(37, 186l)\n        fib4.put(38,\
    \ 192l)\n        fib4.put(39, 198l)\n        fib4.put(40, 204l)\n        fib4.put(41,\
    \ 210l)\n        fib4.put(42, 216l)\n        fib4.put(43, 222l)\n        fib4.put(44,\
    \ 228l)\n        fib4.put(45, 234l)\n        fib4.put(46, 240l)\n        fib4.put(47,\
    \ 246l)\n        fib4.put(48, 252l)\n        fib4.put(49, 258l)\n        fib4.put(50,\
    \ 264l)\n        fib4.put(51, 270l)\n        fib4.put(52, 276l)\n        fib4.put(53,\
    \ 282l)\n        fib4.put(54, 288l)\n        fib4.put(55, 294l)\n        fib4.put(56,\
    \ 300l)\n        fib4.put(57, 306l)\n        fib4.put(58, 312l)\n        fib4.put(59,\
    \ 318l)\n        fib4.put(60, 324l)", "        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4 += 0l -> 0l\n\
    \        fib4 += 1l -> 0l\n        fib4 += 2l -> 2l\n        fib4 += 3l -> 0l\n\
    \        fib4 += 4l -> 4l\n        fib4 += 5l -> 8l\n        fib4 += 6l -> 14l\n\
    \        fib4 += 7l -> 24l\n        fib4 += 8l -> 34l\n        fib4 += 9l -> 56l\n\
    \        fib4 += 10l -> 84l\n        fib4 += 11l -> 120l\n        fib4 += 12l\
    \ -> 144l\n        fib4 += 13l -> 168l\n        fib4 += 14l -> 196l\n        fib4\
    \ += 15l -> 224l\n        fib4 += 16l -> 256l\n        fib4 += 17l -> 280l\n \
    \       fib4 += 18l -> 312l\n        fib4 += 19l -> 336l\n        fib4 += 20l\
    \ -> 360l\n        fib4 += 21l -> 392l\n        fib4 += 22l -> 416l\n        fib4\
    \ += 23l -> 440l\n        fib4 += 24l -> 484l\n        fib4 += 25l -> 516l\n \
    \       fib4 += 26l -> 536l\n        fib4 += 27l -> 560l\n        fib4 += 28l\
    \ -> 584l\n        fib4 += 29l -> 616l\n        fib4 += 30l -> 640l\n        fib4\
    \ += 31l -> 664l\n        fib4 += 32l -> 696l\n        fib4 += 33l -> 720l\n \
    \       fib4 += 34l -> 740l\n        fib4 += 35l -> 768l\n        fib4 += 36l\
    \ -> 800l\n        fib4 += 37l -> 832l\n        fib4 += 38l -> 864l\n        fib4\
    \ += 39l -> 896l\n        fib4 += 40l -> 928l\n        fib4 += 41l -> 960l\n \
    \       fib4 += 42l -> 992l\n        fib4 += 43l -> 1024l\n        fib4 += 44l\
    \ -> 1048l\n        fib4 += 45l -> 1072l\n        fib4 += 46l -> 1096l\n     \
    \   fib4 += 47l -> 1120l", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n\
    \        fib4.put(3l, 0l)\n        fib4.put(nl, fib4(n-1l) + fib4(n-2l) + fib4(n-3l)\
    \ + fib4(n-4l))\n        fib4.get(nl)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l, 0l)\n        fib4.put(8l,\
    \ 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l, 0l)\n        fib4.put(11l,\
    \ 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l, 0l)\n        fib4.put(14l,\
    \ 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l,\
    \ 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l,\
    \ 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l,\
    \ 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l,\
    \ 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l,\
    \ 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l,\
    \ 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l,\
    \ 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l,\
    \ 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l,\
    \ 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l,\
    \ 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l,\
    \ 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l,\
    \ 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l,\
    \ 0l)\n        fib4.put(54l, 0l)\n        fib", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l, 0l)\n        fib4.put(8l,\
    \ 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l, 0l)\n        fib4.put(11l,\
    \ 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l, 0l)\n        fib4.put(14l,\
    \ 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l,\
    \ 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l,\
    \ 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l,\
    \ 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l,\
    \ 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l,\
    \ 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l,\
    \ 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l,\
    \ 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l,\
    \ 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l,\
    \ 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l,\
    \ 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l,\
    \ 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l,\
    \ 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l,\
    \ 0l)\n        fib4.put(54l, 0l)\n        fib", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl, fib4(n-1l) + fib4(n-2l)\
    \ + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)", "        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n", "        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n\
    \        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n \
    \       fib4.put(4, 0l)\n        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n  \
    \      fib4.put(7, 8l)\n        fib4.put(8, 14l)\n        fib4.put(9, 0l)\n  \
    \      fib4.put(10, 0l)\n        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n\
    \        fib4.put(13, 0l)\n        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n\
    \        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n\
    \        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n\
    \        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n\
    \        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n\
    \        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n\
    \        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n\
    \        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n\
    \        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n\
    \        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n\
    \        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n\
    \        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n\
    \        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n\
    \        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n\
    \        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n\
    \        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n\
    \        fib4.", "        val fib4 = new mutable.HashMap[Long, Long]()\n     \
    \   fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n   \
    \     fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l, 0l)\n \
    \       fib4.put(6l, 0l)\n        fib4.put(7l, 0l)\n        fib4.put(8l, 8l)\n\
    \        fib4.put(9l, 0l)\n        fib4.put(10l, 0l)\n        fib4.put(11l, 0l)\n\
    \        fib4.put(12l, 0l)\n        fib4.put(13l, 0l)\n        fib4.put(14l, 14l)\n\
    \        fib4.put(15l, 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l, 0l)\n\
    \        fib4.put(18l, 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l, 0l)\n\
    \        fib4.put(21l, 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l, 0l)\n\
    \        fib4.put(24l, 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l, 0l)\n\
    \        fib4.put(27l, 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l, 0l)\n\
    \        fib4.put(30l, 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l, 0l)\n\
    \        fib4.put(33l, 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l, 0l)\n\
    \        fib4.put(36l, 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l, 0l)\n\
    \        fib4.put(39l, 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l, 0l)\n\
    \        fib4.put(42l, 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l, 0l)\n\
    \        fib4.put(45l, 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l, 0l)\n\
    \        fib4.put(48l, 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l, 0l)\n\
    \        fib4.put(51l, 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l, 0l)\n\
    \        fib4.put(54l, 0l)\n        fib", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2,\
    \ 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 4l)\n\
    \        fib4.put(6, 8l)\n        fib4.put(7, 14l)\n        fib4.get(n)", "  \
    \      val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n\
    \        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n \
    \       fib4.put(4, 0l)\n        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n  \
    \      fib4.put(7, 8l)\n        fib4.put(8, 14l)\n        fib4.put(9, 0l)\n  \
    \      fib4.put(10, 0l)\n        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n\
    \        fib4.put(13, 0l)\n        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n\
    \        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n\
    \        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n\
    \        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n\
    \        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n\
    \        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n\
    \        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n\
    \        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n\
    \        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n\
    \        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n\
    \        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n\
    \        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n\
    \        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n\
    \        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n\
    \        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n\
    \        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n\
    \        fib4.", "        val fib4 = new mutable.HashMap[Long, Long]()\n     \
    \   fib4 += 0l -> 0\n        fib4 += 1l -> 0\n        fib4 += 2l -> 2\n      \
    \  fib4 += 3l -> 0\n        fib4 += 4l -> fib4(3l) + fib4(2l) + fib4(1l) + fib4(0l)\n\
    \        fib4.getOrElse(n,0l)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2,\
    \ 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 4l)\n\
    \        fib4.put(6, 8l)\n        fib4.put(7, 14l)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(4l, 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n\
    \        fib4.put(7l, 14l)\n        fib4.get(n).asInstanceOf[Long]", "       \
    \ val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n    \
    \    fib4.put(1, 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n     \
    \   fib4.put(4, 0l)\n        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n      \
    \  fib4.put(7, 8l)\n        fib4.put(8, 14l)\n        fib4.put(9, 0l)\n      \
    \  fib4.put(10, 0l)\n        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n    \
    \    fib4.put(13, 0l)\n        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n  \
    \      fib4.put(16, 0l)\n        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n\
    \        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n\
    \        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n\
    \        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n\
    \        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n\
    \        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n\
    \        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n\
    \        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n\
    \        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n\
    \        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n\
    \        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n\
    \        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n\
    \        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n\
    \        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n\
    \        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n\
    \        fib4.", "        val fib4 = new mutable.HashSet[Long]()\n        fib4.add(0)\n\
    \        fib4.add(1)\n        fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n\
    \        fib4.add(5)\n        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n\
    \        fib4.add(9)\n        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n\
    \        fib4.add(13)\n        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n\
    \        fib4.add(17)\n        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n\
    \        fib4.add(21)\n        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n\
    \        fib4.add(25)\n        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n\
    \        fib4.add(29)\n        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n\
    \        fib4.add(33)\n        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n\
    \        fib4.add(37)\n        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n\
    \        fib4.add(41)\n        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n\
    \        fib4.add(45)\n        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n\
    \        fib4.add(49)\n        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n\
    \        fib4.add(53)\n        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n\
    \        fib4.add(57)\n        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n\
    \        fib4.add(61)\n        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n\
    \        fib4.add(65)\n        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n\
    \        fib4.add(69)\n        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n\
    \        fib4.add(73)\n        fib4.add(74)\n        fib4.add(", "        val\
    \ fib4 = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l, 0l)\n        fib4.put(8l,\
    \ 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l, 0l)\n        fib4.put(11l,\
    \ 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l, 0l)\n        fib4.put(14l,\
    \ 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l,\
    \ 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l,\
    \ 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l,\
    \ 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l,\
    \ 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l,\
    \ 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l,\
    \ 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l,\
    \ 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l,\
    \ 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l,\
    \ 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l,\
    \ 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l,\
    \ 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l,\
    \ 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l,\
    \ 0l)\n        fib4.put(54l, 0l)\n        fib", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2,\
    \ 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 0l)\n\
    \        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n        fib4.put(8, 14l)\n\
    \        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n        fib4.put(11, 0l)\n\
    \        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n        fib4.put(14, 0l)\n\
    \        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n\
    \        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n\
    \        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n\
    \        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n\
    \        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n\
    \        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n\
    \        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n\
    \        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n\
    \        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n\
    \        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n\
    \        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n\
    \        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n\
    \        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n\
    \        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n\
    \        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n\
    \        fib4.put(60, 0l)\n        fib4.", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2,\
    \ 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 0l)\n\
    \        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n        fib4.put(8, 14l)\n\
    \        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n        fib4.put(11, 0l)\n\
    \        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n        fib4.put(14, 0l)\n\
    \        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n\
    \        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n\
    \        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n\
    \        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n\
    \        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n\
    \        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n\
    \        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n\
    \        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n\
    \        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n\
    \        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n\
    \        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n\
    \        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n\
    \        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n\
    \        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n\
    \        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n\
    \        fib4.put(60, 0l)\n        fib4.", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l, 14l)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(4l, 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n\
    \        fib4.put(7l, 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n\
    \        fib4.put(10l, 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n\
    \        fib4.put(13l, 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n\
    \        fib4.put(16l, 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n\
    \        fib4.put(19l, 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n\
    \        fib4.put(22l, 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n\
    \        fib4.put(25l, 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n\
    \        fib4.put(28l, 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n\
    \        fib4.put(31l, 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n\
    \        fib4.put(34l, 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n\
    \        fib4.put(37l, 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n\
    \        fib4.put(40l, 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n\
    \        fib4.put(43l, 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n\
    \        fib4.put(46l, 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n\
    \        fib4.put(49l, 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n\
    \        fib4.put(52l, 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n\
    \        fib", "        val fib4 = new mutable.HashMap[Long, Long]()\n       \
    \ fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n     \
    \   fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l, 4l)\n   \
    \     fib4.put(6l, 8l)\n        fib4.put(7l, 14l)\n        fib4.get(n)", "   \
    \     val fib4 = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl, fib4(n-1l) + fib4(n-2l)\
    \ + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l, 0l)\n        fib4.put(8l,\
    \ 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l, 0l)\n        fib4.put(11l,\
    \ 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l, 0l)\n        fib4.put(14l,\
    \ 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l,\
    \ 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l,\
    \ 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l,\
    \ 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l,\
    \ 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l,\
    \ 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l,\
    \ 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l,\
    \ 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l,\
    \ 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l,\
    \ 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l,\
    \ 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l,\
    \ 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l,\
    \ 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l,\
    \ 0l)\n        fib4.put(54l, 0l)\n        fib", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl, fib4(n-1l) + fib4(n-2l)\
    \ + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)", "        val fib4 = new mutable.MutableList[Long]\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(4l, 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n\
    \        fib4.put(7l, 0l)\n        fib4.put(8l, 8l)\n        fib4.put(9l, 0l)\n\
    \        fib4.put(10l, 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n\
    \        fib4.put(13l, 0l)\n        fib4.put(14l, 14l)\n        fib4.put(15l,\
    \ 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l,\
    \ 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l,\
    \ 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l,\
    \ 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l,\
    \ 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l,\
    \ 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l,\
    \ 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l,\
    \ 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l,\
    \ 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l,\
    \ 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l,\
    \ 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l,\
    \ 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l,\
    \ 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l,\
    \ 0l)\n        fib", "        val fib4 = new mutable.HashMap[Long, Long]()\n \
    \       fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n\
    \        fib4.put(3l, 0l)\n        fib4.put(nl, fib4(n-1l) + fib4(n-2l) + fib4(n-3l)\
    \ + fib4(n-4l))\n        fib4.get(nl)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2,\
    \ 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 0l)\n\
    \        fib4.put(6, 0l)\n        fib4.put(7, 0l)\n        fib4.put(8, 2l)\n \
    \       fib4.put(9, 0l)\n        fib4.put(10, 0l)\n        fib4.put(11, 0l)\n\
    \        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n        fib4.put(14, 4l)\n\
    \        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n\
    \        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n\
    \        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n\
    \        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n\
    \        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n\
    \        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n\
    \        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n\
    \        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n\
    \        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n\
    \        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n\
    \        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n\
    \        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n\
    \        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n\
    \        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n\
    \        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n\
    \        fib4.put(60, 0l)\n        fib4.", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4 += (0l -> 0l)\n        fib4 += (1l -> 0l)\n        fib4\
    \ += (2l -> 2l)\n        fib4 += (3l -> 0l)\n        fib4 += (4l -> fib4.get(3l)\
    \ + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(nl)", "    \
    \    val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(nl, fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n   \
    \     fib4.get(nl)", "        val fib4 = new mutable.HashMap[Long, Long]()\n \
    \       fib4.put(0, 0l)\n        fib4.put(1, 0l)\n        fib4.put(2, 2l)\n  \
    \      fib4.put(3, 0l)\n        fib4.put(4, 0l)\n        fib4.put(5, 0l)\n   \
    \     fib4.put(6, 4l)\n        fib4.put(7, 8l)\n        fib4.put(8, 14l)\n   \
    \     fib4.put(9, 0l)\n        fib4.put(10, 0l)\n        fib4.put(11, 0l)\n  \
    \      fib4.put(12, 0l)\n        fib4.put(13, 0l)\n        fib4.put(14, 0l)\n\
    \        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n        fib4.put(17, 0l)\n\
    \        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n        fib4.put(20, 0l)\n\
    \        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n        fib4.put(23, 0l)\n\
    \        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n        fib4.put(26, 0l)\n\
    \        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n        fib4.put(29, 0l)\n\
    \        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n        fib4.put(32, 0l)\n\
    \        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n        fib4.put(35, 0l)\n\
    \        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n        fib4.put(38, 0l)\n\
    \        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n        fib4.put(41, 0l)\n\
    \        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n        fib4.put(44, 0l)\n\
    \        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n        fib4.put(47, 0l)\n\
    \        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n        fib4.put(50, 0l)\n\
    \        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n        fib4.put(53, 0l)\n\
    \        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n        fib4.put(56, 0l)\n\
    \        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n        fib4.put(59, 0l)\n\
    \        fib4.put(60, 0l)\n        fib4.", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l,\
    \ 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l, 0l)\n        fib4.put(8l,\
    \ 8l)\n        fib4.put(9l, 0l)\n        fib4.put(10l, 0l)\n        fib4.put(11l,\
    \ 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l, 0l)\n        fib4.put(14l,\
    \ 14l)\n        fib4.put(15l, 0l)\n        fib4.put(16l, 0l)\n        fib4.put(17l,\
    \ 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l, 0l)\n        fib4.put(20l,\
    \ 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l, 0l)\n        fib4.put(23l,\
    \ 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l, 0l)\n        fib4.put(26l,\
    \ 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l, 0l)\n        fib4.put(29l,\
    \ 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l, 0l)\n        fib4.put(32l,\
    \ 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l, 0l)\n        fib4.put(35l,\
    \ 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l, 0l)\n        fib4.put(38l,\
    \ 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l, 0l)\n        fib4.put(41l,\
    \ 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l, 0l)\n        fib4.put(44l,\
    \ 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l, 0l)\n        fib4.put(47l,\
    \ 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l, 0l)\n        fib4.put(50l,\
    \ 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l, 0l)\n        fib4.put(53l,\
    \ 0l)\n        fib4.put(54l, 0l)\n        fib", "        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 0\n        fib4 += 0\n", "        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n\
    \        fib4.put(3l, 0l)\n        fib4.put(4l, fib4.get(3l) + fib4.get(2l) +\
    \ fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)", "        val fib4 = new\
    \ mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l,\
    \ 14l)\n        fib4.get(n).asInstanceOf[Long]", "        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.MutableList[Long]()\n        fib4 += 0\n       \
    \ fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)", "        if (n <= 0) 0\n\
    \        else if (n <= 2) 1\n        else fib4(n - 1) + fib4(n - 2) + fib4(n -\
    \ 3) + fib4(n - 4)", "        val fib4 = new mutable.HashMap[Long, Long]()\n \
    \       fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n\
    \        fib4.put(3l, 0l)\n        fib4.put(4l, 0l)\n        fib4.put(5l, 4l)\n\
    \        fib4.put(6l, 8l)\n        fib4.put(7l, 14l)\n        fib4.get(n).asInstanceOf[Long]",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n\
    \        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n\
    \        fib4.put(4l, fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n\
    \        fib4.get(n)", "        val fib4 = new mutable.MutableList[Long]()\n \
    \       fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n \
    \       fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)",
  "        val fib4 = new mutable.HashMap[Long, Long]()\n        fib4 += 0l -> 0\n\
    \        fib4 += 1l -> 0\n        fib4 += 2l -> 2\n        fib4 += 3l -> 0\n \
    \       fib4 += 4l -> fib4(4l-1) + fib4(4l-2) + fib4(4l-3) + fib4(4l-4) \n   \
    \     fib4(n) ", "        val fib4 = new mutable.HashMap[Long, Long]()\n     \
    \   fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l, 2l)\n   \
    \     fib4.put(3l, 0l)\n        fib4.put(4l, fib4.get(3l) + fib4.get(2l) + fib4.get(1l)\
    \ + fib4.get(0l))\n        fib4.get(n)", "        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l, 0l)\n        fib4.put(2l,\
    \ 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l, fib4.get(3l) + fib4.get(2l)\
    \ + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)"]
stop_tokens:
- "\n    }\n"
