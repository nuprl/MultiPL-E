name: HumanEval_16_count_distinct_characters
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"))\n    // (3l)\n\
  \    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n    def countDistinctCharacters(string\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
  \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
  abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
  )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n\
  \    }\n\n}\n"
completions: ["        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower)\n        val\
    \ counts = chars.groupBy(identity).mapValues(_.length)\n        val distinctCount\
    \ = counts.map(_._2).sum\n        distinctCount", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.toSet.size + (chars.toSet - chars.toSet)", "        val chars =\
    \ string.map(_.toLower)\n        val distinctChars = chars.distinct\n        distinctChars.size",
  "        val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower).toSet\n        chars.size", "        val\
    \ chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val charCount = mutable.HashMap.empty[Char,\
    \ Long]\n        for (c <- chars) {\n            charCount(c) = charCount(c) +\
    \ 1\n        }\n        charCount.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.toList.distinct.length", "        val chars = string.map(_.toLower)\n\
    \        val counts = chars.groupBy(identity).mapValues(_.size)\n        counts.foldLeft(0L){\
    \ (sum, count) => sum + count }", "        val chars = string.map(_.toLower)\n\
    \        val uniqueChars = chars.distinct\n        uniqueChars.size", "      \
    \  val chars = string.map(_.toLower).toSet\n        chars.size", "        val\
    \ chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.toList.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower).toSet\n     \
    \   chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower)\n\
    \        val counts = chars.groupBy(identity).mapValues(_.size)\n        counts.foldLeft(0L)(_\
    \ + _)", "        val chars = string.map(_.toLower)\n        val counts = chars.groupBy(identity).mapValues(_.size)\n\
    \        val distinctCount = counts.map(_._2).sum\n        distinctCount", " \
    \       val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val charCount = chars.distinct.length\n        charCount", "        val\
    \ chars = string.map(_.toLower).toSet\n        chars.size", "        val chars\
    \ = string.map(_.toLower)\n        val charSet = chars.distinct\n        charSet.size",
  "        val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        var distinctCharacters = mutable.HashSet[Char]()\n\
    \        var charCount = 0\n        for (char <- string.toCharArray) {\n     \
    \       distinctCharacters += char\n            charCount += 1\n        }\n  \
    \      distinctCharacters.size", "        val chars = string.map(_.toLower)\n\
    \        val counts = chars.groupBy(identity).mapValues(_.size)\n        counts.foldLeft(0L){\
    \ (sum, count) => sum + count}", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val charSet = chars.distinct\n\
    \        charSet.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower).toSet\n   \
    \     chars.size", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.length", " \
    \       val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val charSet = chars.toSet\n   \
    \     charSet.size + 1", "        val chars = string.map(_.toLower)\n        val\
    \ counts = chars.groupBy(identity).mapValues(_.size)\n        counts.foldLeft(0L)(_\
    \ + _)", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val charsSet = chars.toSet\n        charsSet.size",
  "        val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size\
    \ + 1)", "        val chars = string.map(_.toLower)\n        val charSet = chars.distinct\n\
    \        charSet.size", "        val chars = string.map(_.toLower)\n        val\
    \ counts = chars.groupBy(identity).mapValues(_.length)\n        counts.foldLeft(0L)(_\
    \ + _)", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.toList.distinct.length", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower).toSet\n     \
    \   chars.size", "        val chars = string.map(_.toLower)\n        val charCount\
    \ = mutable.HashMap.empty[Char, Int]\n        chars.foreach(c => charCount(c)\
    \ += 1)\n        charCount.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower).toSet\n     \
    \   chars.size", "        val chars = string.map(_.toLower)\n        val uniqueChars\
    \ = chars.distinct\n        uniqueChars.size", "        val chars = string.map(_.toLower)\n\
    \        val counts = chars.groupBy(identity).mapValues(_.size)\n        val distinctCount\
    \ = counts.filter(_._2 > 1).size\n        distinctCount", "        val chars =\
    \ string.map(_.toLower).toSet\n        chars.size", "        val chars = string.map(_.toLower)\n\
    \        val counts = chars.groupBy(identity).mapValues(_.size)\n        val distinctCount\
    \ = counts.map(_._2).sum\n        distinctCount", "        val chars = string.map(_.toLower)\n\
    \        val charsSet = chars.toSet\n        charsSet.size // number of distinct\
    \ characters", "        val chars = string.map(_.toLower).toSet\n        chars.size",
  "        val chars = string.map(_.toLower).toSet\n        chars.size", "       \
    \ val chars = string.map(_.toLower).toSet\n        chars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toUpperCase).map(_.toLowerCase).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size * (chars.size + 1)", "   \
    \     val chars = string.map(_.toLower)\n        val uniqueChars = chars.distinct\n\
    \        uniqueChars.length", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val charSet = chars.toSet\n   \
    \     charSet.size + (chars.toSet diff charSet).toSet.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower).toSet\n   \
    \     chars.size", "        val chars = string.map(_.toLower).toSet\n        chars.toSeq.length",
  "        val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val charSet = chars.distinct\n        charSet.size", "        val chars\
    \ = string.map(_.toLower)\n        val counts = chars.groupBy(identity).mapValues(_.length)\n\
    \        counts.foldLeft(0L)(_ + _)", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val counts = chars.groupBy(identity).mapValues(_.size)\n        counts.foldLeft(0L)((acc,\
    \ x) => acc + x._2)", "        val chars = string.map(_.toLower).toSet\n     \
    \   chars.size", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower)\n\
    \        val uniqueChars = chars.distinct\n        uniqueChars.size", "      \
    \  val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val charsSet = chars.distinct\n        charsSet.length", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size * (chars.size + 1)", "   \
    \     val chars = string.map(_.toLower).toSet\n        chars.toList.distinct.length",
  "        val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val charSet = chars.distinct\n        charSet.size + 1", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower)\n        val\
    \ counts = chars.groupBy(identity).mapValues(_.size)\n        counts.foldLeft(0l)\
    \ { (sum, count) => sum + count }", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.toSet.size * (chars.toSet.size + 1)", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        var distinctCharacters = mutable.Set.empty[Char]\n\
    \        for (character <- string.toCharArray) {\n            distinctCharacters\
    \ += character\n        }\n        distinctCharacters.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size * (chars.size + 1)", "   \
    \     val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size * (chars.size + 1)", "        var distinctCharacters = mutable.Set.empty[Char]\n\
    \        for (character <- string) {\n            distinctCharacters += character\n\
    \        }\n        distinctCharacters.size", "        val chars = string.map(_.toLower)\n\
    \        val counts = chars.groupBy(identity).mapValues(_.size)\n        val distinctCount\
    \ = counts.map(_._2).sum\n        distinctCount", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower).toSet\n     \
    \   chars.size", "        val chars = string.map(_.toLower).toSet\n        chars.size\
    \ * (chars.size + 1)", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val charCount = mutable.HashMap[Char, Int]()\n\
    \        chars.foreach(c => charCount(c) += 1)\n        charCount.size", "   \
    \     val chars = string.map(_.toLower).toSet\n        chars.toSeq.length", " \
    \       val chars = string.map(_.toLower).toSet\n        chars.toSet.size + (chars.toSet\
    \ - chars).toSet.size", "        val chars = string.map(_.toLower)\n        val\
    \ charCount = mutable.HashMap.empty[Char, Int]\n        chars.foreach(c => charCount(c)\
    \ += 1)\n        charCount.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.toList.distinct.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.toList.distinct.length", "        var charCount = 1\n        var\
    \ charSet = Set[Char]()\n        for (c <- string) {\n            if (charSet.contains(c))\
    \ {\n                charCount += 1\n            } else {\n                charSet\
    \ += c\n            }\n        }\n        charCount", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   var distinctCharacters = mutable.Set[Char]()\n        var count = 0\n    \
    \    for (character <- string) {\n            distinctCharacters += character\n\
    \        }\n        distinctCharacters.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower).toSet\n     \
    \   chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.foldLeft(0L) { (acc, c) => acc + chars.count(_ == c) }", "    \
    \    val chars = string.map(_.toLower).toSet\n        chars.size", "        val\
    \ chars = string.map(_.toLower).toSet\n        chars.size * (chars.size + 1)",
  "        val chars = string.map(_.toUpperCase)\n        val counts = chars.groupBy(identity).mapValues(_.size)\n\
    \        counts.foldLeft(0l) { (sum, count) => sum + count }", "        var distinctCharacterCount\
    \ = 0\n        for(character <- string.toCharArray) {\n            distinctCharacterCount\
    \ += if(character.toLowerCase == character) 1 else 0\n        }\n        distinctCharacterCount",
  "        val chars = string.map(_.toLower).toSet\n        chars.toList.distinct.length",
  "        val chars = string.map(_.toLower).toSet\n        chars.size", "       \
    \ var distinctCharacters = 0\n        for (c <- string) {\n            distinctCharacters\
    \ += c.toLowerCase().count(_ == 'a')\n        }\n        distinctCharacters",
  "        val chars = string.map(_.toLower)\n        val charsSet = chars.toSet\n\
    \        charsSet.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower)\n        val\
    \ charSet = chars.distinct\n        charSet.size", "        val chars = string.map(_.toLower)\n\
    \        val uniqueChars = chars.distinct\n        uniqueChars.size", "      \
    \  val chars = string.map(_.toLower)\n        val charsSet = chars.toSet\n   \
    \     charsSet.size", "        val chars = string.map(_.toLower).toSet\n     \
    \   chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower)\n\
    \        val uniqueChars = chars.distinct\n        uniqueChars.size", "      \
    \  val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size\
    \ + 1)", "        val chars = string.map(_.toLower)\n        val charSet = chars.distinct\n\
    \        charSet.size * (charSet.size + 1)", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower).toSet\n        chars.size", "       \
    \ val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.length", "        val chars = string.map(_.toLower)\n \
    \       val charSet = chars.toSet\n        charSet.size", "        val chars =\
    \ string.map(_.toLower)\n        val distinctChars = chars.distinct\n        distinctChars.size",
  "        val chars = string.map(_.toLower).toSet\n        chars.size", "       \
    \ val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower)\n\
    \        val charsSet = chars.toSet\n        charsSet.size // number of distinct\
    \ characters", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower)\n\
    \        val charCount = mutable.HashMap[Char, Long]()\n        chars.foreach(c\
    \ => charCount(c) += 1)\n        charCount.size", "        val chars = string.map(_.toLower)\n\
    \        val counts = chars.groupBy(identity).mapValues(_.size)\n        val distinctCount\
    \ = counts.map(_._2).sum\n        distinctCount", "        val chars = string.map(_.toLower)\n\
    \        val counts = chars.groupBy(identity).mapValues(_.length)\n        val\
    \ distinctCount = counts.max\n        distinctCount", "        val chars = string.map(_.toLower)\n\
    \        val counts = chars.groupBy(identity).mapValues(_.size)\n        counts.foldLeft(0L){\
    \ (count, pair) => count + pair._2 }", "        val chars = string.map(_.toLower)\n\
    \        val charSet = chars.distinct\n        charSet.size"]
stop_tokens:
- "\n    }\n"
