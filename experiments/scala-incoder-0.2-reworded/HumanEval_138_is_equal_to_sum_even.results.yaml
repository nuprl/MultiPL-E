language: scala
name: HumanEval_138_is_equal_to_sum_even
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptgvc7ios.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptgvc7ios.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptgvc7ios.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.productIterator.toList\n\
    \        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4 = sumEvensSum\
    \ * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n        val sumEvensSum4Sum4\
    \ = sumEvensSum4Sum * 4\n        val sumEvensSum4Sum4Sum = sumEvensSum4Sum4.sum\n\
    \        val sumEvensSum4Sum4Sum4 = sumEvensSum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4.sum\n        val sumEvensSum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum *\
    \ 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4fyya169.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.productIterator.toList\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       value productIterator is not a member of Int\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4fyya169.scala:23:42 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msumEvensSum4Sum4Sum4Sum4Sum\e\
    [0m = sumEvensSum4Sum4Sum4Sum4Sum * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4fyya169.scala:24:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \        ^\e[0m\n\e[31m   |\e[0m              Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4fyya169.scala:25:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \            ^\e[0m\n\e[31m   |\e[0m          Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4fyya169.scala:26:54\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m          "
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa78xv7wg.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa78xv7wg.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpa78xv7wg.scala:24:72 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa78xv7wg.scala:29:92\
    \ -----"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.Set[Long]()\n        val sum = 0\n\
    \        for(i <- 0 until n){\n            val x = i\n            val y = n -\
    \ i\n            val z = x + y\n            val y = z - x\n            val x =\
    \ y - z\n            val y = x - y\n            val x = y - x\n            val\
    \ y = x - y\n            val x = y - x\n            val y = x - y\n          \
    \  val x = y - x\n            val y = x - y\n            val x = y - x\n     \
    \       val y = x - y\n            val x = y - x\n            val y = x - y\n\
    \            val x = y - x\n            val y = x - y\n            val x = y -\
    \ x\n            val y = x - y\n            val x = y - x\n            val y =\
    \ x - y\n            val x = y - x\n            val y = x - y\n            val\
    \ x = y - x\n            val y = x - y\n            val x = y - x\n          \
    \  val y = x - y\n            val x = y - x\n            val y = x - y\n     \
    \       val x = y - x\n            val y = x - y\n            val x = y - x\n\
    \            val y = x - y\n            val x = y - x\n            val y = x -\
    \ y\n            val x = y - x\n            val y = x - y\n            val x =\
    \ y - x\n            val y = x - y\n            val x = y - x\n            val\
    \ y = x - y\n            val x = y - x\n            val y = x - y\n          \
    \  val x = y - x\n            val y = x - y\n            val x = y - x\n     \
    \       val y = x - y\n            val x = y - x\n            val y = x - y\n\
    \            val x = y - x\n            val y = x - y\n            val x = y -\
    \ x\n            val y = x - y\n            val x = y - x\n            val y =\
    \ x - y\n            val x = y - x\n            val y = x - y\n            val\
    \ x = y - x\n            val y = x - y\n            val x = y - x\n          \
    \  val y = x - y\n            val x = y - x\n            val y = x - y\n     \
    \       val x = y - x\n            val y = x - y\n            val x = y - x\n\
    \            val y = x - y\n            val x = y - x\n            val y = x -\
    \ y\n            val x = y - x\n            val y = x - y\n            val x =\
    \ y - x\n            val y = x - y\n            val x = y - x\n            val\
    \ y = x - y\n            val x = y - x\n            val y = x - y\n          \
    \  val x = y - x\n            val y = x - y\n            val x = y - x\n\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp646kknm_.scala:111:0 ---------------------------\e\
    [0m\e[0m\n\e[31m111 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp646kknm_.scala:13:20\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp646kknm_.scala:15:25\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmp646kknm_.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = z - x\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0my is already defined\
    \ as \e[33mvalue\e[0m \e[35my\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp646kknm_.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mx\e[0m = y - z\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx is already defined\
    \ as \e[33mvalue\e[0m \e[35mx\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp646kknm_.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = x - y\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0my is already defined\
    \ as \e[33mvalue\e[0m \e[35my\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded method"
  stdout: ''
  timestamp: 1659799844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4\
    \ = sumEvensSum.toInt\n        val sumEvensSum4Sum = sumEvensSum4.toInt\n    \
    \    val sumEvensSum4Sum4 = sumEvensSum4Sum.toInt\n        val sumEvensSum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbbfzcwj4.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbbfzcwj4.scala:14:31\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36msumEvens\e[0m = sumEven.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       value filter is not a member of Int\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpbbfzcwj4.scala:19:34 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msumEvensSum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum.toInt\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                          Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbbfzcwj4.scala:20:38\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum.toInt\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   \
    \                   Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbbfzcwj4.scala:21:42\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum.toInt\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbbfzcwj4.scala:22:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Su"
  stdout: ''
  timestamp: 1659799842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val sumEvensRemainder = sumEven % 4\n        sumEvens == sumEvensRemainder\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbl6xeqht.scala:21)\n\tat Problem.main(tmpbl6xeqht.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        for(i <- 0 until n){\n            if(i % 2 == 0){\n           \
    \     evens += i\n            }\n            sum += i\n        }\n        evens.size\
    \ == 4\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpid30oe3w.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpid30oe3w.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpid30oe3w.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += i\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Int - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659799843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sum = mutable.ArrayBuffer.empty[Long]\n        for (i <- 0 until n) {\n    \
    \        if (i % 2 == 0) {\n                evens += i\n            }\n      \
    \      sum += i\n        }\n        evens.size == 4 && sum.size == 4\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmhq_dx4x.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmhq_dx4x.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpmhq_dx4x.scala:15:26 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainders\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp585tlgag.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp585tlgag.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp585tlgag.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that ove"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.Set[Long]()\n        val sum = 0\n\
    \        val remainder = n % 2\n        val remainder2 = (remainder + 1) / 2\n\
    \        val remainder3 = remainder + 2\n        val remainder4 = remainder +\
    \ 3\n        val remainder5 = remainder + 4\n        val remainder6 = remainder\
    \ + 5\n        val remainder7 = remainder + 6\n        val remainder8 = remainder\
    \ + 7\n        val remainder9 = remainder + 8\n        val remainder10 = remainder\
    \ + 9\n        val remainder11 = remainder + 10\n        val remainder12 = remainder\
    \ + 11\n        val remainder13 = remainder + 12\n        val remainder14 = remainder\
    \ + 13\n        val remainder15 = remainder + 14\n        val remainder16 = remainder\
    \ + 15\n        val remainder17 = remainder + 16\n        val remainder18 = remainder\
    \ + 17\n        val remainder19 = remainder + 18\n        val remainder20 = remainder\
    \ + 19\n        val remainder21 = remainder + 20\n        val remainder22 = remainder\
    \ + 21\n        val remainder23 = remainder + 22\n        val remainder24 = remainder\
    \ + 23\n        val remainder25 = remainder + 24\n        val remainder26 = remainder\
    \ + 25\n        val remainder27 = remainder + 26\n        val remainder28 = remainder\
    \ + 27\n        val remainder29 = remainder + 28\n        val remainder30 = remainder\
    \ + 29\n        val remainder31 = remainder + 30\n        val remainder32 = remainder\
    \ + 31\n        val remainder33 = remainder + 32\n        val remainder34 = remainder\
    \ + 33\n        val remainder35 = remainder + 34\n        val remainder36 = remainder\
    \ + 35\n        val remainder37 = remainder + 36\n        val remainder38 = remainder\
    \ + 37\n        val remainder39 = remainder + 38\n        val remainder40 = remainder\
    \ + 39\n        val remainder41 = remainder + 40\n        val remainder42 = remainder\
    \ + 41\n        val remainder43 = remainder + 42\n        val remainder44 = remainder\
    \ + 43\n        val remainder45 = remainder + 44\n        val remainder46 = remainder\
    \ + 45\n        val remain\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp93hl0txv.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp93hl0txv.scala:13:20\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp93hl0txv.scala:62:5\
    \ ---------------------\e[0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        while(n > 0) {\n            sum += n % 2\n            evens +=\
    \ n\n            n /= 2\n        }\n        evens.size == 4 && sum == evens.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfpkfcz50.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpfpkfcz50.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += n % \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfpkfcz50.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659799843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        sumEvens == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpytoazbq9.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ - sumEvensRemainders\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoi1abrel.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpoi1abrel.scala:27:92 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoi1abrel.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        while (n > 0) {\n            sum += n % 2\n            evens +=\
    \ n\n            n /= 2\n        }\n        evens.size == 4 && evens.forall(x\
    \ => x == sum)\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph6hxfnzj.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmph6hxfnzj.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += n % \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph6hxfnzj.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainders\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3c_99va2.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp3c_99va2.scala:24:72 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3c_99va2.scala:26:82\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3c_99va2.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Re"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemainders\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu83d0j5l.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu83d0j5l.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu83d0j5l.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu83d0j5l.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already de"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainder\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxaq71d6v.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaq71d6v.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpxaq71d6v.scala:31:5 ---------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = mutable.ArrayBuffer.empty[Long]\n       \
    \ val sumOdd = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sumEvenSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppkfuhws6.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd is\
    \ already defined as \e[33mvalue\e[0m \e[35msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppkfuhws6.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmppkfuhws6.scala:13:22 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumEven\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppkfuhws6.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumOdd\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n        sumEvensSum4Sum\
    \ == sumEven\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0uqk2ooi.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter is\
    \ not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(x\
    \ => x % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n        val\
    \ sumEvensSum4Sum4 = sumEvensSum4Sum * 4\n        val sumEvensSum4Sum4Sum = sumEvensSum4Sum4.sum\n\
    \        val sumEvensSum4Sum4Sum4 = sumEvensSum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4.sum\n        val sumEvensSum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum *\
    \ 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv6gfveb7.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value\
    \ filter is not a member of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv6gfveb7.scala:23:42\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum * \e[31m4\e\
    [0m\n\e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e\
    [31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv6gfveb7.scala:24:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \        ^\e[0m\n\e[31m   |\e[0m              Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv6gfveb7.scala:25:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \            ^\e[0m\n\e[31m   |\e[0m          Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv6gfveb7.scala:26:54\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        for(i <- 0 until n){\n            val x = n%i + 1\n           \
    \ if(x == 0){\n                evens.append(x)\n            }\n            sum\
    \ += x\n        }\n        evens.size == 4 && sum == n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ekrhe7y.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9ekrhe7y.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ekrhe7y.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            sum += x\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Int - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659799843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val remainder = sumEven % 4\n        sumEvens == remainder\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv0gj4i_u.scala:21)\n\tat Problem.main(tmpv0gj4i_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.Set[Long]()\n        val sum = 0\n\
    \        val remainder = n\n        val remainders = mutable.Set[Long]()\n   \
    \     val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuypyv05q.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainders is already defined as \e[33mvalue\e[0m \e[35mremainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuypyv05q.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mremainders is already defined as \e[33mvalue\e[0m \e[35mremainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuypyv05q.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mremainders is already defined as \e[33mvalue\e[0m \e[35mremainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuypyv05q.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mremainders is already defined as \e[33mvalue\e[0m \e[35mremainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuypyv05q.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e["
  stdout: ''
  timestamp: 1659799853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val remainder = sumEven % 4\n        sumEvens == remainder\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv0gj4i_u.scala:21)\n\tat Problem.main(tmpv0gj4i_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoliy66k7.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoliy66k7.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpoliy66k7.scala:25:82 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                                      ^"
  stdout: ''
  timestamp: 1659799852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(x\
    \ => x % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val\
    \ sumEvensSum4 = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.toInt\n\
    \        sumEvensSum4Sum == sumEven\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphxlvxtma.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \      value filter is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemain\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4v7o8kmc.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4v7o8kmc.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4v7o8kmc.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that ove"
  stdout: ''
  timestamp: 1659799853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSum2\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum3 = sumEvensSum * sumEvensSum\
    \ * sumEvensSum\n        val sumEvensSum4 = sumEvensSum * sumEvensSum * sumEvensSum\
    \ * sumEvensSum\n        sumEvensSum == sumEvensSum2\n        && sumEvensSum ==\
    \ sumEvensSum3\n        && sumEvensSum == sumEvensSum4\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyrccmijc.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter is\
    \ not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).sum\n        sumEvens == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp6x33o1h.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSum2\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum3 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum4 = sumEvensSum * sumEvensSum\n        val sumEvensSum5\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum6 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum7 = sumEvensSum * sumEvensSum\n        val sumEvensSum8\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum9 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum10 = sumEvensSum * sumEvensSum\n        val sumEvensSum11\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum12 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum13 = sumEvensSum * sumEvensSum\n        val sumEvensSum14\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum15 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum16 = sumEvensSum * sumEvensSum\n        val sumEvensSum17\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum18 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum19 = sumEvensSum * sumEvensSum\n        val sumEvensSum20\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum21 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum22 = sumEvensSum * sumEvensSum\n        val sumEvensSum23\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum24 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum25 = sumEvensSum * sumEvensSum\n        val sumEvensSum26\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum27 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum28 = sumEvensSum * sumEvensSum\n        val \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpgggyn09g.scala:43:11 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpgggyn09g.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter is\
    \ not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgggyn09g.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = mutable.ListBuffer[Long]()\n        for(i\
    \ <- 0 until n){\n            val x = i\n            val y = n - i\n         \
    \   val z = x + y\n            val q = z / 2\n            val r = z % 2\n    \
    \        if(q == r){\n                sumEven += q\n            }\n        }\n\
    \        sumEven.length == n\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqpz9mtq.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpyqpz9mtq.scala:14:25 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemain\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4v7o8kmc.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4v7o8kmc.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4v7o8kmc.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that ove"
  stdout: ''
  timestamp: 1659799853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = mutable.ListBuffer[Long]()\n        val sumEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddEven = mutable.ListBuffer[Long]()\n        val sumEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumOdd = mutable.ListBuffer[Long]()\n\
    \        val sumOddEven = mutable.ListBuffer[Long]()\n        val sumOddOdd =\
    \ mutable.ListBuffer[Long]()\n        val sumOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val sumEvenOddOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddOddOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val sumOddEvenOddOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumOddEvenOddOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n      \
    \  val sumEvenOddOddOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val\
    \ sumEvenOddOddOddOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val\
    \ sumEvenOddOddOddOddOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val\
    \ sumEvenOddOddOddOddOddOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n     \
    \   val sumEvenOddOddOddOddOddOddOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOddOddOddOddOddOddOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOddOddOddOddOddOddOddEvenOddEvenOdd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx6z66b0u.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx6z66b0u.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumOddEvenOddOddEvenOdd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumOddEvenOddOddEvenOdd is already defined as \e[33mvalue\e\
    [0m \e[35msumOddEvenOddOddEvenOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx6z66b0u.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpx6z66b0u.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvenEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpx6z66b0u.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msumEvenOdd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpx6z66b0u.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msumEvenOddEven\e[0m = mutable.ListBuf"
  stdout: ''
  timestamp: 1659799852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSumEven\
    \ = sumEvensSum.filter(_ % 2 == 0)\n        val sumEvensSumEvenSum = sumEvensSumEven.sum\n\
    \        val sumEvensSumEvenSumEven = sumEvensSumEvenSum.filter(_ % 2 == 0)\n\
    \        val sumEvensSumEvenSumEvenSum = sumEvensSumEvenSumEven.sum\n        val\
    \ sumEvensSumEvenSumEvenSumEven = sumEvensSumEvenSumEvenSumEven.sum\n        val\
    \ sumEvensSumEvenSumEvenSumEvenSum = sumEvensSumEvenSumEvenSumEvenSum.sum\n  \
    \      val sumEvensSumEvenSumEvenSumEvenSumEven = sumEvensSumEvenSumEvenSumEvenSumEven.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSum = sumEvensSumEvenSumEvenSumEvenSumEvenSum.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSumEven = sumEvensSumEvenSumEvenSumEvenSumEvenSumEven.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSum = sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSum.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEven = sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEven.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSum = sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEven.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSum = sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEven.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSum = sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSum.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSumEven = sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSumEven.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSum = sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphgqe3hp6.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSum\e\
    [0m = sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEven.sum\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSum is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphgqe3hp6.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36msumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSum\e\
    [0m = sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSum.sum\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSum is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmphgqe3hp6.scala:14:31 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_ %\
    \ \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value filter is not a member of Int\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphgqe3hp6.scala:20:44 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36msumEvensSumEvenSumEvenSumEven\e\
    [0m = sumEvensSumEvenSumEvenSumEven.sum\n\e[31m\e[31m   |\e[0m               \
    \                             ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35msumEvensSum"
  stdout: ''
  timestamp: 1659799855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = mutable.ListBuffer.empty[Long]\n        val\
    \ sumOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOdd = mutable.ListBuffer.empty[Long]\n        val\
    \ sumEvenSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn6rx1agw.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn6rx1agw.scala:13:22\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36msumEven\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn6rx1agw.scala:14:21\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36msumOdd\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn6rx1agw.scala:15:28\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36msumEvenSumOdd\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn6rx1agw.scala:16:34 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msumEvenSumOddSumOdd\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn6rx1agw.scala:17:40 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msumEvenSumOddSumOddSumOdd\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \                           "
  stdout: ''
  timestamp: 1659799853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0\n        for(i <- 0 until\
    \ n){\n            val x = i % 2\n            if(x == 0){\n                evens\
    \ += i\n            }else{\n                odds += i\n            }\n       \
    \ }\n        for(i <- 0 until evens.size){\n            sum += evens(i)\n    \
    \    }\n        for(i <- 0 until odds.size){\n            sum += odds(i)\n   \
    \     }\n        sum == n\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzb97pldt.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzb97pldt.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzb97pldt.scala:16:25 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzb97pldt.scala:25:16\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            sum += evens(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpzb97pldt.scala:28:16 ------------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m            sum += odds(i)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ sum.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1659799855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        for (i <- 0 until n) {\n            if (i % 2 == 0) {\n       \
    \         evens += i\n            }\n            sum += i\n        }\n       \
    \ evens.size == 4\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8vogn1zh.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8vogn1zh.scala:15:26 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8vogn1zh.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += i\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Int - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659799855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4cjvg1an.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4cjvg1an.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4cjvg1an.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainders\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainders is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4cjvg1an.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemainder"
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.productIterator.toList\n\
    \        val sumEvensSum = sumEvens.sum\n        val sumEvensSum2 = sumEvensSum\
    \ * sumEvensSum\n        val sumEvensSum3 = sumEvensSum2 * sumEvensSum\n     \
    \   val sumEvensSum4 = sumEvensSum3 * sumEvensSum\n        val sumEvensSum5 =\
    \ sumEvensSum4 * sumEvensSum\n        val sumEvensSum6 = sumEvensSum5 * sumEvensSum\n\
    \        val sumEvensSum7 = sumEvensSum6 * sumEvensSum\n        val sumEvensSum8\
    \ = sumEvensSum7 * sumEvensSum\n        val sumEvensSum9 = sumEvensSum8 * sumEvensSum\n\
    \        val sumEvensSum10 = sumEvensSum9 * sumEvensSum\n        val sumEvensSum11\
    \ = sumEvensSum10 * sumEvensSum\n        val sumEvensSum12 = sumEvensSum11 * sumEvensSum\n\
    \        val sumEvensSum13 = sumEvensSum12 * sumEvensSum\n        val sumEvensSum14\
    \ = sumEvensSum13 * sumEvensSum\n        val sumEvensSum15 = sumEvensSum14 * sumEvensSum\n\
    \        val sumEvensSum16 = sumEvensSum15 * sumEvensSum\n        val sumEvensSum17\
    \ = sumEvensSum16 * sumEvensSum\n        val sumEvensSum18 = sumEvensSum17 * sumEvensSum\n\
    \        val sumEvensSum19 = sumEvensSum18 * sumEvensSum\n        val sumEvensSum20\
    \ = sumEvensSum19 * sumEvensSum\n        val sumEvensSum21 = sumEvensSum20 * sumEvensSum\n\
    \        val sumEvensSum22 = sumEvensSum21 * sumEvensSum\n        val sumEvensSum23\
    \ = sumEvensSum22 * sumEvensSum\n        val sumEvensSum24 = sumEvensSum23 * sumEvensSum\n\
    \        val sumEvensSum25 = sumEvensSum24 * sumEvensSum\n        val sumEvensSum26\
    \ = sumEvensSum25 * sumEvensSum\n        val sumEvensSum27 = sumEvensSum26 * sumEvensSum\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpvig600ty.scala:42:11 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvig600ty.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.productIterator.toList\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       value productIterator is not a member of Int\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvig600ty.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4\
    \ = sumEvensSum.toInt\n        val sumEvensSum4Evens = sumEvensSum4.toInt\n  \
    \      val sumEvensSum4EvensSum = sumEvensSum4Evens.toInt\n        val sumEvensSum4EvensSum4\
    \ = sumEvensSum4EvensSum.toInt\n        val sumEvensSum4EvensSum4Evens = sumEvensSum4EvensSum4Evens.toInt\n\
    \        val sumEvensSum4EvensSum4EvensSum = sumEvensSum4EvensSum4EvensSum.toInt\n\
    \        val sumEvensSum4EvensSum4EvensSum4 = sumEvensSum4EvensSum4EvensSum4.toInt\n\
    \        val sumEvensSum4EvensSum4EvensSum4Evens = sumEvensSum4EvensSum4EvensSum4Evens.toInt\n\
    \        val sumEvensSum4EvensSum4EvensSum4EvensSum = sumEvensSum4EvensSum4EvensSum4EvensSum.toInt\n\
    \        val sumEvensSum4EvensSum4EvensSum4EvensSum4 = sumEvensSum4EvensSum4EvensSum4EvensSum4.toInt\n\
    \        val sumEvensSum4EvensSum4EvensSum4EvensSum4Evens = sumEvensSum4EvensSum4EvensSum4EvensSum4Evens.toInt\n\
    \        val sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum = sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum.toInt\n\
    \        val sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum4 = sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum4.toInt\n\
    \        val sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum4Evens = sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum4Evens.toInt\n\
    \        val sumEvensSum4EvensSum4EvensSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8_k6l14j.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8_k6l14j.scala:14:31\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36msumEvens\e[0m = sumEven.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       value filter is not a member of Int\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp8_k6l14j.scala:20:41 ---------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36msumEvensSum4EvensSum4Evens\e\
    [0m = sumEvensSum4EvensSum4Evens.toInt\n\e[31m\e[31m   |\e[0m                \
    \                         ^\e[0m\n\e[31m   |\e[0m                   Recursive\
    \ \e[33mvalue\e[0m \e[35msumEvensSum4EvensSum4Evens\e[0m needs type\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8_k6l14j.scala:21:44 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36msumEvensSum4EvensSum4EvensSum\e\
    [0m = sumEvensSum4EvensSum4EvensSum.toInt\n\e[31m\e[31m   |\e[0m             \
    \                               ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35msumEvensSum4EvensSum4EvensSum\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8_k6l14j.scala:22:45 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensSum4EvensSum4EvensSum4\e\
    [0m = sumEvensSum4EvensSum4EvensSum4.toInt\n\e[31m\e[31m   |\e[0m            \
    \                                 ^\e[0m\n\e[31m   |\e[0m               Recursive\
    \ \e[33mvalue\e[0m \e[35msumEvensSum4EvensSum4EvensSum4\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8_k6l14j.scala:23:50 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    "
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemain\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5g7n79q8.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5g7n79q8.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp5g7n79q8.scala:26:82 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5g7n79"
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        sumEvens == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpytoazbq9.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = mutable.Set[Long]()\n        val sumOdd =\
    \ mutable.Set[Long]()\n        val sumEvenSumOdd = mutable.Set[Long]()\n     \
    \   val sumEvenSumOddSumOdd = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n   \
    \     val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp24l9iid6.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24l9iid6.scala:13:22\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36msumEven\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m     \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24l9iid6.scala:14:21\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36msumOdd\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24l9iid6.scala:15:28\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36msumEvenSumOdd\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp24l9iid6.scala:16:34 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36msumEvenSumOddSumOdd\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24l9iid6.scala:17:40 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msumEvenSumOddSumOddSumOdd\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                        "
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = mutable.ListBuffer[Long]()\n        val sumEvenSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSum = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSum = mutable.ListBuffer[Long]()\n        val\
    \ sumEvenSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n     \
    \   val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n       \
    \ val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n        val\
    \ sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf0xoti8q.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf0xoti8q.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36msumEvenSumSumSumSum\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvenSumSumSumSum is already defined as \e[33mvalue\e[0m\
    \ \e[35msumEvenSumSumSumSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpf0xoti8q.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36msumEvenSumSumSumSumSumSum\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvenSumSumSumSumSumSum is already defined as \e[33mvalue\e\
    [0m \e[35msumEvenSumSumSumSumSumSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf0xoti8q.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msumEvenSumSumSumSumSumSumSum\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvenSumSumSumSumSumSumSum is already defined as \e[33mvalue\e\
    [0m \e[35msumEvenSumSumSumSumSumSumSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf0xoti8q.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvenSumSumSumSumSumSumSumSum\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoliy66k7.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoliy66k7.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpoliy66k7.scala:25:82 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                                      ^"
  stdout: ''
  timestamp: 1659799852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc93mpavr.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc93mpavr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpc93mpavr.scala:25:82 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                   "
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        val limit = math.max(math.abs(n), 4l) // limit the sum to 4 positive\
    \ even numbers\n        for(i <- 0 until limit) {\n            val x = math.abs(n)\
    \ - i\n            val y = math.abs(x) - i\n            val z = math.abs(y) -\
    \ i\n            val w = math.abs(z) - i\n            val a = math.abs(w) - i\n\
    \            val b = math.abs(a) - i\n            val c = math.abs(b) - i\n  \
    \          val d = math.abs(c) - i\n            val e = math.abs(d) - i\n    \
    \        val f = math.abs(e) - i\n            val g = math.abs(f) - i\n      \
    \      val h = math.abs(g) - i\n            val i = math.abs(h) - i\n        \
    \    val j = math.abs(i) - i\n            val k = math.abs(j) - i\n          \
    \  val l = math.abs(k) - i\n            val m = math.abs(l) - i\n            val\
    \ n = math.abs(m) - i\n            val o = math.abs(n) - i\n            val p\
    \ = math.abs(o) - i\n            val q = math.abs(p) - i\n            val r =\
    \ math.abs(q) - i\n            val s = math.abs(r) - i\n            val t = math.abs(s)\
    \ - i\n            val u = math.abs(t) - i\n            val v = math.abs(u) -\
    \ i\n            val w = math.abs(v) - i\n            val x = math.abs(w) - i\n\
    \            val y = math.abs(x) - i\n            val z = math.abs(y) - i\n  \
    \          val w = math.abs(z) - i\n            val a = math.abs(w) - i\n    \
    \        val b = math.abs(a) - i\n            val c = math.abs(b) - i\n      \
    \      val d = math.abs(c) - i\n            val e = math.abs(d) - i\n        \
    \    val f = math.abs(e) - i\n            val g = math.abs(f) - i\n          \
    \  val h = math.abs(g) - i\n            val i = math.abs(h) - i\n            val\
    \ j = math.abs(i) - i\n            val k = math.abs(j) - i\n            val l\
    \ = math.abs(k) - i\n            val m = math.abs(l) - i\n            val n =\
    \ math.abs(m) - i\n            val o = math.abs(n) - i\n            val p = math.abs(o)\
    \ - i\n            val q = math.abs(p) - i\n            val r = math.abs(q) -\
    \ i\n            val s = math.abs(r) - i\n            val t = math.abs(s) - i\n\
    \            val u = math.abs(\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsr3u31zz.scala:68:29 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m            \e[33mval\e[0m \e[36mu\e[0m = math.abs(\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsr3u31zz.scala:82:0 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsr3u31zz.scala:13:20\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsr3u31zz.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until limit) {\n\e[31m\e[31m   |\e[0m                         ^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    (limit : Long)\n\e[31m\
    \   |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E134] Type Error: /tmp/tmpsr3u31zz.scala:68:25 -----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m            \e[33mval\e[0m \e[36mu\e[0m = math.abs(\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35mabs\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e\
    [31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e\
    [0m (x: Int): Int\n\e[31m   |\e[0mmatch arguments (Null)\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpsr3u31zz.scala:81:1 ---------------------\e[0m\e\
    [0m\n\e[31m81 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Req"
  stdout: ''
  timestamp: 1659799856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ - sumEvensRemainders\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoi1abrel.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpoi1abrel.scala:27:92 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoi1abrel.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        for(i <- 0 until n){\n            val x = n%i + 1\n           \
    \ if(x == 0){\n                evens.append(x)\n            }\n            sum\
    \ += x\n        }\n        evens.size == 4 && sum == n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ekrhe7y.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9ekrhe7y.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ekrhe7y.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            sum += x\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Int - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659799843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val remainder = sumEven % 4\n        sumEvens == remainder\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv0gj4i_u.scala:21)\n\tat Problem.main(tmpv0gj4i_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwt5hhidy.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwt5hhidy.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwt5hhidy.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRema"
  stdout: ''
  timestamp: 1659799855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc93mpavr.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc93mpavr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpc93mpavr.scala:25:82 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                   "
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        sumEvens == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpytoazbq9.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4\
    \ = sumEvensSum.filter(_ % 4 == 0).length\n        sumEvensSum4 == sumEvens.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2ysvi4vu.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter is\
    \ not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4\
    \ = sumEvensSum == 4\n        val sumEvensSum4Sum = sumEvensSum * 4\n        val\
    \ sumEvensSum4Sum4 = sumEvensSum4Sum * 4\n        val sumEvensSum4Sum4Sum = sumEvensSum4Sum4\
    \ * 4\n        val sumEvensSum4Sum4Sum4 = sumEvensSum4Sum4Sum * 4\n        val\
    \ sumEvensSum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4 * 4\n        val sumEvensSum4Sum4Sum4Sum4\
    \ = sumEvensSum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqa2gdswp.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqa2gdswp.scala:23:42\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum * \e[31m4\e\
    [0m\n\e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e\
    [31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqa2gdswp.scala:24:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \        ^\e[0m\n\e[31m   |\e[0m              Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqa2gdswp.scala:29:66\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35msumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqa2gdswp.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required: "
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1udqjz47.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = mutable.ListBuffer[Long]()\n        for (i\
    \ <- 0 until n) {\n            if (i % 2 == 0) {\n                sumEven.append(i)\n\
    \            }\n        }\n        sumEven.size == 4\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsvwzs_7j.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpsvwzs_7j.scala:14:26 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemainder\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpodejphtg.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpodejphtg.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpodejphtg.scala:28:92 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpodejphtg.scala:29:102 --------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemain"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evenSum = n.toInt\n        val evenSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount2\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount3 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount4 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount5\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount6 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount7 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount8\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount9 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount10 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount11\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount12 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount13 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount14\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount15 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount16 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount17\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount18 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount19 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount20\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount21 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount22 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount23\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount24 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount25 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount26\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount27 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount28 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount29\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount30 = mut\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8z6suu9.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenSums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpg8z6suu9.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenSumsCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8z6suu9.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevenSumsCount2\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8z6suu9.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mevenSumsCount3\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8z6suu9.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevenSumsCount4\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Err"
  stdout: ''
  timestamp: 1659799865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ - sumEvensRemainders\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj2qqb9cr.scala:27:92 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e\
    [31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpj2qqb9cr.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.productIterator.toList\n\
    \        val sumEvensSum = sumEvens.sum\n        val sumEvensSumEvens = sumEvensSum.productIterator.toList\n\
    \        val sumEvensSumEvensSum = sumEvensSumEvens.sum\n        val sumEvensSumEvensSumEvens\
    \ = sumEvensSumEvensSum.productIterator.toList\n        val sumEvensSumEvensSumEvensSum\
    \ = sumEvensSumEvensSumEvens.sum\n        val sumEvensSumEvensSumEvensSumEvens\
    \ = sumEvensSumEvensSumEvensSum.productIterator.toList\n        val sumEvensSumEvensSumEvensSumEvensSum\
    \ = sumEvensSumEvensSumEvensSumEvens.sum\n        val sumEvensSumEvensSumEvensSumEvensSumEvens\
    \ = sumEvensSumEvensSumEvensSumEvensSum.productIterator.toList\n        val sumEvensSumEvensSumEvensSumEvensSumEvensSum\
    \ = sumEvensSumEvensSumEvensSumEvensSumEvens.sum\n        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvens\
    \ = sumEvensSumEvensSumEvensSumEvensSumEvensSum.productIterator.toList\n     \
    \   val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.productIterator.toList\n\
    \        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvens = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvens.productIterator.toList\n\
    \        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.productIterator.toList\n\
    \        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum\
    \ = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.productIterator.toList\n\
    \        val sumEvensSumEvensSumEvensSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpioo2qcxr.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpioo2qcxr.scala:14:31\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36msumEvens\e[0m = sumEven.productIterator.toList\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           value productIterator is not a member of Int\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpioo2qcxr.scala:25:66 ---------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum\e\
    [0m = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.productIterator.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35msumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpioo2qcxr.scala:26:71\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvens\e[0m = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvens.productIterator.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35msumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvens\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpioo2qcxr.scala:27:74\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum\e[0m = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.productIterator.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                  ^\e[0m\n"
  stdout: ''
  timestamp: 1659799865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evenSums = mutable.Set[Long]()\n        val sums =\
    \ mutable.Set[Long]()\n        val evenSumsSet = mutable.Set[Long]()\n       \
    \ val sumsSet = mutable.Set[Long]()\n        val evenSumsSet2 = mutable.Set[Long]()\n\
    \        val sumsSet2 = mutable.Set[Long]()\n        val evenSumsSet3 = mutable.Set[Long]()\n\
    \        val sumsSet3 = mutable.Set[Long]()\n        val evenSumsSet4 = mutable.Set[Long]()\n\
    \        val sumsSet4 = mutable.Set[Long]()\n        val evenSumsSet5 = mutable.Set[Long]()\n\
    \        val sumsSet5 = mutable.Set[Long]()\n        val evenSumsSet6 = mutable.Set[Long]()\n\
    \        val sumsSet6 = mutable.Set[Long]()\n        val evenSumsSet7 = mutable.Set[Long]()\n\
    \        val sumsSet7 = mutable.Set[Long]()\n        val evenSumsSet8 = mutable.Set[Long]()\n\
    \        val sumsSet8 = mutable.Set[Long]()\n        val evenSumsSet9 = mutable.Set[Long]()\n\
    \        val sumsSet9 = mutable.Set[Long]()\n        val evenSumsSet10 = mutable.Set[Long]()\n\
    \        val sumsSet10 = mutable.Set[Long]()\n        val evenSumsSet11 = mutable.Set[Long]()\n\
    \        val sumsSet11 = mutable.Set[Long]()\n        val evenSumsSet12 = mutable.Set[Long]()\n\
    \        val sumsSet12 = mutable.Set[Long]()\n        val evenSumsSet13 = mutable.Set[Long]()\n\
    \        val sumsSet13 = mutable.Set[Long]()\n        val evenSumsSet14 = mutable.Set[Long]()\n\
    \        val sumsSet14 = mutable.Set[Long]()\n        val evenSumsSet15 = mutable.Set[Long]()\n\
    \        val sumsSet15 = mutable.Set[Long]()\n        val evenSumsSet16 = mutable.Set[Long]()\n\
    \        val sumsSet16 = mutable.Set[Long]()\n        val evenSumsSet17 = mutable.Set[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjzlwuwuk.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenSums\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpjzlwuwuk.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjzlwuwuk.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenSumsSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpjzlwuwuk.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msumsSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpjzlwuwuk.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mevenSumsSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpjzlwuwuk.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36msumsSet2\e[0m ="
  stdout: ''
  timestamp: 1659799866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        sumEvensSum4 == n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuaehy23i.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter is\
    \ not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val evenSum\
    \ = 0\n        for(i <- 0 until n){\n            if(i % 2 == 0){\n           \
    \     evenSum += i\n                evens += i\n            }\n        }\n   \
    \     evenSum == n\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn3a87148.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpn3a87148.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn3a87148.scala:17:24\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                evenSum +=\
    \ i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \           value += is not a member of Int - did you mean evenSum.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainders\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoe21xndw.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoe21xndw.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoe21xndw.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n"
  stdout: ''
  timestamp: 1659799865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sum\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwcgxxz1l.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwcgxxz1l.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwcgxxz1l.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwcgxxz1l.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e"
  stdout: ''
  timestamp: 1659799866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = mutable.ListBuffer[Long]()\n        sumEven.+=(n/4)\n\
    \        sumEven.+=(n/4)\n        sumEven.+=(n/4)\n        sumEven.+=(n/4)\n \
    \       sumEven.foreach(x => if (x%2==0) return false)\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkh3qvh52.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n        sumEvensSum4Sum\
    \ == sumEven\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0uqk2ooi.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter is\
    \ not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = mutable.ListBuffer[Long]()\n        for(i\
    \ <- 0 until n){\n            sumEven.append(i)\n        }\n        sumEven.forall(i\
    \ => i % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd4hvg_wt.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpd4hvg_wt.scala:14:25 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc93mpavr.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc93mpavr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpc93mpavr.scala:25:82 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                   "
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n        val\
    \ sumEvensSum4Sum4 = sumEvensSum4Sum * 4\n        val sumEvensSum4Sum4Sum = sumEvensSum4Sum4.sum\n\
    \        val sumEvensSum4Sum4Sum4 = sumEvensSum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4.sum\n        val sumEvensSum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum *\
    \ 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgbsocnyi.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter is\
    \ not a member of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgbsocnyi.scala:23:42\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum * \e[31m4\e\
    [0m\n\e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e\
    [31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgbsocnyi.scala:24:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \        ^\e[0m\n\e[31m   |\e[0m              Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgbsocnyi.scala:25:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \            ^\e[0m\n\e[31m   |\e[0m          Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgbsocnyi.scala:26:54\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m              "
  stdout: ''
  timestamp: 1659799867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val remainder = sumEven % 4\n        sumEvens == remainder\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv0gj4i_u.scala:21)\n\tat Problem.main(tmpv0gj4i_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ArrayBuffer(2l, 4l, 6l, 8l)\n     \
    \   val sum = evens.sum\n        val remainder = sum % n\n        if (remainder\
    \ == 0)\n            true\n        else\n            false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdkpnqjjy.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m, \e[31m4l\e[0m, \e[31m6l\e[0m, \e[31m8l\e[0m)\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(x\
    \ => x % 2 == 0).length\n        val sumEvensLessThan4 = sumEvens - 4\n      \
    \  sumEvensLessThan4 > 0\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp53vuhizp.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \      value filter is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).sum\n        sumEvens == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp6x33o1h.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = mutable.ListBuffer.empty[Long]\n        val\
    \ sumOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOdd = mutable.ListBuffer.empty[Long]\n        val\
    \ sumEvenSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjvmtxi07.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd is\
    \ already defined as \e[33mvalue\e[0m \e[35msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjvmtxi07.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpjvmtxi07.scala:13:22 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumEven\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpjvmtxi07.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumOdd\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e"
  stdout: ''
  timestamp: 1659799866
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val sumEvensRemainder = sumEven % 4\n        sumEvens == sumEvensRemainder\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbl6xeqht.scala:21)\n\tat Problem.main(tmpbl6xeqht.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1udqjz47.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemainder\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpodejphtg.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpodejphtg.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpodejphtg.scala:28:92 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpodejphtg.scala:29:102 --------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemain"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = mutable.ArrayBuffer.empty[Long]\n       \
    \ val sumOdd = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sumEvenSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppkfuhws6.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd is\
    \ already defined as \e[33mvalue\e[0m \e[35msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppkfuhws6.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmppkfuhws6.scala:13:22 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumEven\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppkfuhws6.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumOdd\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1udqjz47.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppsdo9p70.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppsdo9p70.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppsdo9p70.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that ove"
  stdout: ''
  timestamp: 1659799867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evenSums = mutable.ListBuffer[Long]()\n        for\
    \ (i <- 0 until n) {\n            if (i % 2 == 0) {\n                evenSums\
    \ += i\n            }\n        }\n        evenSums.size == 4\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphpvwmxn_.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenSums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmphpvwmxn_.scala:14:26 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val remainder = sumEven % 4\n        sumEvens == remainder\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv0gj4i_u.scala:21)\n\tat Problem.main(tmpv0gj4i_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc93mpavr.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc93mpavr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpc93mpavr.scala:25:82 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                   "
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.toInt\n      \
    \  sumEvensSum4Sum == sumEven\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt9x7fq22.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4cjvg1an.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4cjvg1an.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4cjvg1an.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainders\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainders is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4cjvg1an.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemainder"
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        sumEvensSum == sumEven\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa3d2d2n1.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter is\
    \ not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val sumEvensRemainder = sumEven % 4\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 4\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 4\n        sumEvens == sumEvensRemainders && sumEvens == sumEvensRemaindersRemainder\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv1xkfs1v.scala:23)\n\tat Problem.main(tmpv1xkfs1v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        for(i <- 0 until n){\n            if(i % 2 == 0){\n           \
    \     evens += i\n            }\n            sum += i\n        }\n        evens.size\
    \ == 4 && sum == n\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5npdwcfv.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5npdwcfv.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5npdwcfv.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += i\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Int - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659799874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = mutable.ListBuffer[Long]()\n        val evenSum = mutable.ListBuffer[Long]()\n\
    \        val evenSums = mutable.ListBuffer[Long]()\n        val evenSumsSum =\
    \ mutable.ListBuffer[Long]()\n        val evenSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSum = mutable.ListBuffer[Long]()\n        val evenSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSums = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n      \
    \  val evenSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n        val\
    \ evenSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj2d65zu7.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpj2d65zu7.scala:13:20 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpj2d65zu7.scala:14:18 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpj2d65zu7.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenSum\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpj2d65zu7.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevenSums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpj2d65zu7.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mevenSumsSum\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m "
  stdout: ''
  timestamp: 1659799873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc93mpavr.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc93mpavr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpc93mpavr.scala:25:82 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                   "
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ - sumEvensRemainders\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj2qqb9cr.scala:27:92 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e\
    [31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpj2qqb9cr.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).sum\n        sumEvens == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp6x33o1h.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val remainder = sumEven % 4\n        sumEvens == remainder\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv0gj4i_u.scala:21)\n\tat Problem.main(tmpv0gj4i_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1udqjz47.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        sumEvens.size == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp99gd43u6.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter is\
    \ not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemainder\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpodejphtg.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpodejphtg.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpodejphtg.scala:28:92 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpodejphtg.scala:29:102 --------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemain"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = mutable.ListBuffer.empty[Long]\n        val\
    \ sumOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOdd = mutable.ListBuffer.empty[Long]\n        val\
    \ sumEvenSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8ps26ble.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ps26ble.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd is\
    \ already defined as \e[33mvalue\e[0m \e[35msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp8ps26ble.scala:13:22 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumEven\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8ps26ble.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumOdd\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8ps26ble.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msumEvenSumOdd\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Er"
  stdout: ''
  timestamp: 1659799876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemain\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnpl91sgq.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnpl91sgq.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnpl91sgq.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val evenSum\
    \ = 0\n        val evenSums = mutable.ListBuffer[Long]()\n        val evenSumsSum\
    \ = 0\n        val evenSumsSums = mutable.ListBuffer[Long]()\n        val evenSumsSumsSum\
    \ = 0\n        val evenSumsSumsSums = mutable.ListBuffer[Long]()\n        val\
    \ evenSumsSumsSumsSum = 0\n        val evenSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSum = 0\n        val evenSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSum = 0\n\
    \        val evenSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n     \
    \   val evenSumsSumsSumsSumsSumsSumsSum = 0\n        val evenSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSum\
    \ = 0\n        val evenSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum = 0\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = 0\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = 0\n        val\
    \ evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = 0\n       \
    \ val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprie36j01.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprie36j01.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenSums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprie36j01.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mevenSumsSums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprie36j01.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevenSumsSumsSums\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprie36j01.scala:21:35\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mevenSumsSumsSumsSums\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprie36j01.scala:"
  stdout: ''
  timestamp: 1659799876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val remainder = sumEven % 4\n        sumEvens == remainder\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv0gj4i_u.scala:21)\n\tat Problem.main(tmpv0gj4i_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        sumEvens == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpytoazbq9.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = mutable.Set[Long]()\n        val sumOdd =\
    \ mutable.Set[Long]()\n        val sumEvenSumOdd = mutable.Set[Long]()\n     \
    \   val sumEvenSumOddSumOdd = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n   \
    \     val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp24l9iid6.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24l9iid6.scala:13:22\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36msumEven\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m     \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24l9iid6.scala:14:21\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36msumOdd\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24l9iid6.scala:15:28\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36msumEvenSumOdd\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp24l9iid6.scala:16:34 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36msumEvenSumOddSumOdd\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24l9iid6.scala:17:40 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msumEvenSumOddSumOddSumOdd\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                        "
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        for (i <- 0 until n) {\n            if (i % 2 == 0) {\n       \
    \         even += i\n                evens += i\n            }\n        }\n  \
    \      val evenSum = evens.sum\n        val sumEvens = evens.toList.sum\n    \
    \    evenSum == sumEvens\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsgztb85.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprsgztb85.scala:15:26 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsgztb85.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                even += i\n\
    \e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m              \
    \  Not found: even\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1udqjz47.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        sumEvensSum == sumEven\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa3d2d2n1.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter is\
    \ not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppsdo9p70.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppsdo9p70.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppsdo9p70.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that ove"
  stdout: ''
  timestamp: 1659799867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        var sum\
    \ = 0\n        for(i <- 0 until n){\n            sum += i\n            if(sum\
    \ % 2 == 0){\n                evens += sum\n            }\n        }\n       \
    \ evens.size == 4\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplasyv0d_.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplasyv0d_.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5a7086kr.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5a7086kr.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5a7086kr.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5a7086kr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31"
  stdout: ''
  timestamp: 1659799877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        while(n > 0){\n            sum += n\n            evens += n\n \
    \           n -= 1\n        }\n        evens.size == 4\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd891isml.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpd891isml.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd891isml.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659799878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4\
    \ = sumEvensSum.toInt\n        val sumEvensSum4Sum = sumEvensSum4.toInt\n    \
    \    val sumEvensSum4Sum4 = sumEvensSum4Sum.toInt\n        val sumEvensSum4Sum4Sum\
    \ = sumEvensSum4Sum4.toInt\n        val sumEvensSum4Sum4Sum4 = sumEvensSum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4.toInt\n        val\
    \ sumEvensSum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppdegtnt9.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppdegtnt9.scala:23:42\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum.toInt\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppdegtnt9.scala:24:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m              Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppdegtnt9.scala:25:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m          Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppdegtnt9.scala:26:54\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \e[31m\e[31m   |\e[0m                                   "
  stdout: ''
  timestamp: 1659799878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4\
    \ = sumEvensSum == 4\n        val sumEvensSum4Sum = sumEvensSum.filter(_ % 4 ==\
    \ 0).length\n        val sumEvensSum4Sum4 = sumEvensSum4Sum == 4\n        sumEvensSum4Sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6ghe6kuk.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = mutable.ListBuffer[Long]()\n        val evenSum = mutable.ListBuffer[Long]()\n\
    \        val evenSums = mutable.ListBuffer[Long]()\n        val evenSumsSum =\
    \ mutable.ListBuffer[Long]()\n        val evenSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSum = mutable.ListBuffer[Long]()\n        val evenSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSums = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n      \
    \  val evenSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n        val\
    \ evenSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj2d65zu7.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpj2d65zu7.scala:13:20 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpj2d65zu7.scala:14:18 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpj2d65zu7.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenSum\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpj2d65zu7.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevenSums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpj2d65zu7.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mevenSumsSum\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m "
  stdout: ''
  timestamp: 1659799873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val sumEvensSum2\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum3 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum4 = sumEvensSum * sumEvensSum\n        val sumEvensSum5\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum6 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum7 = sumEvensSum * sumEvensSum\n        val sumEvensSum8\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum9 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum10 = sumEvensSum * sumEvensSum\n        val sumEvensSum11\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum12 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum13 = sumEvensSum * sumEvensSum\n        val sumEvensSum14\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum15 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum16 = sumEvensSum * sumEvensSum\n        val sumEvensSum17\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum18 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum19 = sumEvensSum * sumEvensSum\n        val sumEvensSum20\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum21 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum22 = sumEvensSum * sumEvensSum\n        val sumEvensSum23\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum24 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum25 = sumEvensSum * sumEvensSum\n        val sumEvensSum26\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum27 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum28 = sumEvensSum * sumEvensSum\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_7ftjpjp.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_7ftjpjp.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4\
    \ = sumEvensSum.toInt\n        val sumEvensSum4Sum = sumEvensSum4.toInt\n    \
    \    val sumEvensSum4Sum4 = sumEvensSum4Sum.toInt\n        val sumEvensSum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9kej8icp.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9kej8icp.scala:14:31\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36msumEvens\e[0m = sumEven.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       value filter is not a member of Int\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp9kej8icp.scala:19:34 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msumEvensSum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum.toInt\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                          Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9kej8icp.scala:20:38\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum.toInt\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   \
    \                   Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9kej8icp.scala:21:42\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum.toInt\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9kej8icp.scala:22:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Su"
  stdout: ''
  timestamp: 1659799878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val remainder = sumEven % 4\n        if (sumEvens == 4 && remainder\
    \ == 0) true\n        else false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb7uwvsjn.scala:22)\n\tat Problem.main(tmpb7uwvsjn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        while(n > 0){\n            val x = n % 2\n            sum += x\n\
    \            evens += x\n            n /= 2\n        }\n        evens.size ==\
    \ 4 && sum == 4\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp12oy612x.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp12oy612x.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            sum += x\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp12oy612x.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            n /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659799879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        for(i <- 0 until n){\n            val x = i\n            val y\
    \ = n - i\n            val z = x + y\n            val z2 = z * z\n           \
    \ val z3 = z2 * z\n            val z4 = z3 * z\n            val z5 = z4 * z\n\
    \            val z6 = z5 * z\n            val z7 = z6 * z\n            val z8\
    \ = z7 * z\n            val z9 = z8 * z\n            val z10 = z9 * z\n      \
    \      val z11 = z10 * z\n            val z12 = z11 * z\n            val z13 =\
    \ z12 * z\n            val z14 = z13 * z\n            val z15 = z14 * z\n    \
    \        val z16 = z15 * z\n            val z17 = z16 * z\n            val z18\
    \ = z17 * z\n            val z19 = z18 * z\n            val z20 = z19 * z\n  \
    \          val z21 = z20 * z\n            val z22 = z21 * z\n            val z23\
    \ = z22 * z\n            val z24 = z23 * z\n            val z25 = z24 * z\n  \
    \          val z26 = z25 * z\n            val z27 = z26 * z\n            val z28\
    \ = z27 * z\n            val z29 = z28 * z\n            val z30 = z29 * z\n  \
    \          val z31 = z30 * z\n            val z32 = z31 * z\n            val z33\
    \ = z32 * z\n            val z34 = z33 * z\n            val z35 = z34 * z\n  \
    \          val z36 = z35 * z\n            val z37 = z36 * z\n            val z38\
    \ = z37 * z\n            val z39 = z38 * z\n            val z40 = z39 * z\n  \
    \          val z41 = z40 * z\n            val z42 = z41 * z\n            val z43\
    \ = z42 * z\n            val z44 = z43 * z\n            val z45 = z44 * z\n  \
    \          val z46 = z45 * z\n            val z47 = z46 * z\n            val z48\
    \ = z47 * z\n            val z49 = z48 * z\n            val z50 = z\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptmf720bk.scala:81:0 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptmf720bk.scala:13:20\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptmf720bk.scala:15:25\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmptmf720bk.scala:80:1 ---------------------\e[0m\e\
    [0m\n\e[31m80 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmptmf720bk.scala:69:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m69 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmph62wqdnl.scala:31:11 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmph62wqdnl.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph62wqdnl.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph62wqdnl.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainder\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxaq71d6v.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaq71d6v.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpxaq71d6v.scala:31:5 ---------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc93mpavr.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc93mpavr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpc93mpavr.scala:25:82 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                   "
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo2rcy014.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo2rcy014.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo2rcy014.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val remainder = sumEven % 4\n        if (sumEvens == remainder)\n\
    \            true\n        else\n            false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6hal9sw.scala:24)\n\tat Problem.main(tmpb6hal9sw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val nums = mutable.ListBuffer(2l, 4l, 6l, 8l)\n       \
    \ val sum = nums.sum\n        if (sum == n)\n            true\n        else\n\
    \            false\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp23yqea22.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer(\e\
    [31m2l\e[0m, \e[31m4l\e[0m, \e[31m6l\e[0m, \e[31m8l\e[0m)\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpv12u5bdj.scala:30:11 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpv12u5bdj.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv12u5bdj.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpv12u5bdj.scala:31:5 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659799878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0l\n        for(i <- 0 until\
    \ n){\n            val x = i\n            val y = n - i\n            val z = x\
    \ + y\n            if(z % 2 == 0){\n                evens += z\n            }else{\n\
    \                odds += z\n            }\n            sum += z\n        }\n \
    \       evens.size == 4 && evens.forall(x => x % 2 == 0) && (sum % 4 == 0)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ygf6l9o.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4ygf6l9o.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4ygf6l9o.scala:16:25 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4ygf6l9o.scala:25:16\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            sum += z\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Long - did you mean sum.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659799880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        var sum\
    \ = 0\n        while (n > 0) {\n            sum += n\n            evens += n\n\
    \            n -= 2\n        }\n        evens.forall(x => x >= 0)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc9d25gnm.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpc9d25gnm.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc9d25gnm.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            n -= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659799885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoliy66k7.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoliy66k7.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpoliy66k7.scala:25:82 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                                      ^"
  stdout: ''
  timestamp: 1659799852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4cjvg1an.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4cjvg1an.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4cjvg1an.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainders\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainders is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4cjvg1an.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemainder"
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoliy66k7.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoliy66k7.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpoliy66k7.scala:25:82 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                                      ^"
  stdout: ''
  timestamp: 1659799852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1udqjz47.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = mutable.ListBuffer.empty[Long]\n        val\
    \ sumOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOdd = mutable.ListBuffer.empty[Long]\n        val\
    \ sumEvenSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8ps26ble.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ps26ble.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd is\
    \ already defined as \e[33mvalue\e[0m \e[35msumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp8ps26ble.scala:13:22 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumEven\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8ps26ble.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumOdd\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8ps26ble.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msumEvenSumOdd\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Er"
  stdout: ''
  timestamp: 1659799876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1udqjz47.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val remainder = sumEven % 4\n        sumEvens == remainder\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv0gj4i_u.scala:21)\n\tat Problem.main(tmpv0gj4i_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1udqjz47.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val sumEvensSumEven\
    \ = sumEvensSum.filter(_ % 2 == 0).length\n        val sumEvensSumEvens = sumEvensSumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSum = sumEvensSumEvens.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSumEven = sumEvensSumEvensSum.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSumEvens = sumEvensSumEvensSumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSumEvensSum = sumEvensSumEvensSumEvens.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSumEvensSumEven = sumEvensSumEvensSumEvensSum.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSumEvensSumEvens = sumEvensSumEvensSumEvensSumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSumEvensSumEvensSum = sumEvensSumEvensSumEvensSumEvens.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSumEvensSumEvensSumEven = sumEvensSumEvensSumEvensSumEvensSum.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSumEvensSumEvensSumEvens = sumEvensSumEvensSumEvensSumEvensSumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSumEvensSumEvensSumEvensSum =\
    \ sumEvensSumEvensSumEvensSumEvensSumEvens.filter(_ % 2 == 0).length\n       \
    \ val sumEvensSumEvensSumEvensSumEvensSumEvensSumEven = sumEvensSumEvensSumEvensSumEvensSumEvensSum.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvens\
    \ = sumEvensSumEvensSumEvensSumEvensSumEvensSumEven.filter(_ % 2 == 0).length\n\
    \        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum = \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpz73oynmw.scala:30:65 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36msumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpz73oynmw.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz73oynmw.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = mutable.ListBuffer[Long]()\n        val evenSum = mutable.ListBuffer[Long]()\n\
    \        val evenSum2 = mutable.ListBuffer[Long]()\n        val evenSum3 = mutable.ListBuffer[Long]()\n\
    \        val evenSum4 = mutable.ListBuffer[Long]()\n        val evenSum5 = mutable.ListBuffer[Long]()\n\
    \        val evenSum6 = mutable.ListBuffer[Long]()\n        val evenSum7 = mutable.ListBuffer[Long]()\n\
    \        val evenSum8 = mutable.ListBuffer[Long]()\n        val evenSum9 = mutable.ListBuffer[Long]()\n\
    \        val evenSum10 = mutable.ListBuffer[Long]()\n        val evenSum11 = mutable.ListBuffer[Long]()\n\
    \        val evenSum12 = mutable.ListBuffer[Long]()\n        val evenSum13 = mutable.ListBuffer[Long]()\n\
    \        val evenSum14 = mutable.ListBuffer[Long]()\n        val evenSum15 = mutable.ListBuffer[Long]()\n\
    \        val evenSum16 = mutable.ListBuffer[Long]()\n        val evenSum17 = mutable.ListBuffer[Long]()\n\
    \        val evenSum18 = mutable.ListBuffer[Long]()\n        val evenSum19 = mutable.ListBuffer[Long]()\n\
    \        val evenSum20 = mutable.ListBuffer[Long]()\n        val evenSum21 = mutable.ListBuffer[Long]()\n\
    \        val evenSum22 = mutable.ListBuffer[Long]()\n        val evenSum23 = mutable.ListBuffer[Long]()\n\
    \        val evenSum24 = mutable.ListBuffer[Long]()\n        val evenSum25 = mutable.ListBuffer[Long]()\n\
    \        val evenSum26 = mutable.ListBuffer[Long]()\n        val evenSum27 = mutable.ListBuffer[Long]()\n\
    \        val evenSum28 = mutable.ListBuffer[Long]()\n        val evenSum29 = mutable.ListBuffer[Long]()\n\
    \        val evenSum30 = mutable.ListBuffer[Long]()\n        val evenSum31 = mutable.ListBuffer[Long]()\n\
    \        val evenSum32 = mutable.ListBuffer[Long]()\n        val evenSum33 = mutable.ListBuffer[Long]()\n\
    \        val evenSum\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwjvcfgdt.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwjvcfgdt.scala:13:20\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwjvcfgdt.scala:14:18\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36msum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwjvcfgdt.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mevenSum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwjvcfgdt.scala:16:23\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mevenSum2\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwjvcfgdt.scala:17:23\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mevenSum3\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation "
  stdout: ''
  timestamp: 1659799885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val numsSum = mutable.ListBuffer[Long]()\n        val numsSumEven = mutable.ListBuffer[Long]()\n\
    \        val numsSumOdd = mutable.ListBuffer[Long]()\n        val numsSumEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsSumEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val numsSumEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsSumEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n  \
    \      val numsSumEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpets4__x0.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpets4__x0.scala:13:20\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpets4__x0.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpets4__x0.scala:16:19\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mnums\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpets4__x0.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpets4__x0.scala:18:26\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSumEven\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation "
  stdout: ''
  timestamp: 1659799885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc93mpavr.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc93mpavr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpc93mpavr.scala:25:82 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                   "
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = mutable.ListBuffer[Long]()\n        val sumOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenEven = mutable.ListBuffer[Long]()\n\
    \        val sumOddEven = mutable.ListBuffer[Long]()\n        val sumEvenOdd =\
    \ mutable.ListBuffer[Long]()\n        val sumOddOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenEvenEven = mutable.ListBuffer[Long]()\n        val sumOddEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val sumOddOddEven = mutable.ListBuffer[Long]()\n        val sumEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOdd = mutable.ListBuffer[Long]()\n        val sumEvenEvenEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val sumOddEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddEvenEven = mutable.ListBuffer[Long]()\n        val sumEvenEvenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val sumOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOddEven = mutable.ListBuffer[Long]()\n        val sumEvenEvenEvenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val sumOddEvenEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOddEvenEven = mutable.ListBuffer[Long]()\n        val sumEvenEvenOddOddEven\
    \ = mutable.ListBuffer[Long]()\n        val sumOddEvenEvenEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddEvenOddEvenEven = mutable.ListBuffer[Long]()\n        val\
    \ sumEvenEvenEvenOddOddEven = mutable.ListBuffer[Long]()\n        val sumOddEvenOddEvenEvenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenEvenOddEvenOddOddEven = mutable.ListBuffer[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx858to36.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpx858to36.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumOdd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpx858to36.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msumEvenEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpx858to36.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msumOddEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpx858to36.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msumEvenOdd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpx858to36.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0"
  stdout: ''
  timestamp: 1659799886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evenSum = n.toInt\n        val sumEven = evenSum.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemainder\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo15opuyz.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo15opuyz.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo15opuyz.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n"
  stdout: ''
  timestamp: 1659799886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1udqjz47.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ - sumEvensRemainders\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj2qqb9cr.scala:27:92 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e\
    [31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpj2qqb9cr.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val sumEvensRemainder = sumEven % 4\n        sumEvens == sumEvensRemainder\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbl6xeqht.scala:21)\n\tat Problem.main(tmpbl6xeqht.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = mutable.ListBuffer[Long]()\n        var sum\
    \ = 0\n        for(i <- 0 until n){\n            sum += i\n            if(sumEven.contains(sum)){\n\
    \                return false\n            }\n            sumEven.append(sum)\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuf_ysr98.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msumEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpuf_ysr98.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ - sumEvensRemainders\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj2qqb9cr.scala:27:92 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e\
    [31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpj2qqb9cr.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0\n        for(i <- 0 until\
    \ n) {\n            val x = i % 2\n            if(x != 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \       sum += i\n        }\n        val evenSum = evens.sum\n        val oddSum\
    \ = odds.sum\n        if(evenSum == sum && oddSum == sum) {\n            return\
    \ true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj7vv0ewb.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpj7vv0ewb.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpj7vv0ewb.scala:16:25 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7vv0ewb.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            sum += i\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Int - did you mean sum.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659799888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ - sumEvensRemainders\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj2qqb9cr.scala:27:92 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e\
    [31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpj2qqb9cr.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val sumEvensSumEvens\
    \ = sumEvensSum.toInt\n        val sumEvensSumEvensSum = sumEvensSumEvens.toInt\n\
    \        val sumEvensSumEvensSumEvens = sumEvensSumEvensSum.toInt\n        val\
    \ sumEvensSumEvensSumEvensSum = sumEvensSumEvensSumEvens.toInt\n        val sumEvensSumEvensSumEvensSumEvensSum\
    \ = sumEvensSumEvensSumEvensSumEvens.toInt\n        val sumEvensSumEvensSumEvensSumEvensSumEvens\
    \ = sumEvensSumEvensSumEvensSumEvensSum.toInt\n        val sumEvensSumEvensSumEvensSumEvensSumEvensSum\
    \ = sumEvensSumEvensSumEvensSumEvensSumEvensSum.toInt\n        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum\
    \ = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.toInt\n        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvens\
    \ = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.toInt\n        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum\
    \ = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.toInt\n      \
    \  val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvens = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.toInt\n\
    \        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum\
    \ = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.toInt\n\
    \        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvens\
    \ = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvens\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3rzi5uak.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3rzi5uak.scala:20:50\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36msumEvensSumEvensSumEvensSumEvensSum\e[0m = sumEvensSumEvensSumEvensSumEvens.toInt\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: sumEvensSumEvensSumEvensSumEvens\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3rzi5uak.scala:22:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSumEvensSumEvensSumEvensSumEvensSum\e[0m = sumEvensSumEvensSumEvensSumEvensSumEvensSum.toInt\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m  Recursive \e[33mvalue\e[0m \e[35msumEvensSumEvensSumEvensSumEvensSumEvensSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3rzi5uak.scala:23:66\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum\e[0m = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.toInt\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35msumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3rzi5uak.scala:25:74\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSumEvensSumEv"
  stdout: ''
  timestamp: 1659799888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val remainder = sumEven % 4\n        sumEvens == remainder\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv0gj4i_u.scala:21)\n\tat Problem.main(tmpv0gj4i_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val remainder = sumEven % 4\n        sumEvens == remainder\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv0gj4i_u.scala:21)\n\tat Problem.main(tmpv0gj4i_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemain\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5g7n79q8.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5g7n79q8.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp5g7n79q8.scala:26:82 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5g7n79"
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4cjvg1an.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4cjvg1an.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4cjvg1an.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainders\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainders is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4cjvg1an.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemainder"
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainders\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3c_99va2.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp3c_99va2.scala:24:72 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3c_99va2.scala:26:82\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3c_99va2.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Re"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensLessThanFour = sumEvens - 4\n        sumEvensLessThanFour\
    \ <= 0\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmjjt4avc.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val nums = mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        while(n > 0){\n            val x = n % 4\n            sum += x\n\
    \            nums += x\n            n /= 4\n        }\n        val sum = nums.sum\n\
    \        sum == n\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnicjpyt3.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = nums.sum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum is already\
    \ defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnicjpyt3.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpnicjpyt3.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            sum += x\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnicjpyt3.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            n /= \e[31m4\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean n.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659799888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.toInt\n      \
    \  sumEvensSum4Sum == sumEven\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt9x7fq22.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4cjvg1an.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4cjvg1an.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4cjvg1an.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainders\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainders is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4cjvg1an.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemainder"
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc93mpavr.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc93mpavr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpc93mpavr.scala:25:82 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                   "
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        sumEvens == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpytoazbq9.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemainder\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpodejphtg.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpodejphtg.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpodejphtg.scala:28:92 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpodejphtg.scala:29:102 --------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemain"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc93mpavr.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc93mpavr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpc93mpavr.scala:25:82 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                   "
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        while(n > 0) {\n            sum += n % 10\n            evens +=\
    \ n % 10\n            n /= 10\n        }\n        evens.size == 4 && sum == evens.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3fksceju.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp3fksceju.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += n % \e[31m10\e[0m\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3fksceju.scala:18:14 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value /= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensLessThanFour = sumEvens - 4\n        sumEvensLessThanFour\
    \ > 0\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbesj1grc.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc93mpavr.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc93mpavr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpc93mpavr.scala:25:82 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                   "
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.productIterator.toList\n\
    \        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4 = sumEvensSum\
    \ * 4\n        val sumEvensSum4IsEven = sumEvensSum4%2 == 0\n        sumEvensSum4IsEven\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpixrpnynk.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.productIterator.toList\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       value productIterator is not a member of Int\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvens\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpawtehmw6.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpawtehmw6.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpawtehmw6.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpawtehmw6.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e"
  stdout: ''
  timestamp: 1659799888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val remainder = sumEven % 4\n        sumEvens == remainder\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv0gj4i_u.scala:21)\n\tat Problem.main(tmpv0gj4i_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evenSums = mutable.Set[Long]()\n        val evenSumsCount\
    \ = mutable.Set[Long]()\n        val evenSumsCount2 = mutable.Set[Long]()\n  \
    \      val evenSumsCount3 = mutable.Set[Long]()\n        val evenSumsCount4 =\
    \ mutable.Set[Long]()\n        val evenSumsCount5 = mutable.Set[Long]()\n    \
    \    val evenSumsCount6 = mutable.Set[Long]()\n        val evenSumsCount7 = mutable.Set[Long]()\n\
    \        val evenSumsCount8 = mutable.Set[Long]()\n        val evenSumsCount9\
    \ = mutable.Set[Long]()\n        val evenSumsCount10 = mutable.Set[Long]()\n \
    \       val evenSumsCount11 = mutable.Set[Long]()\n        val evenSumsCount12\
    \ = mutable.Set[Long]()\n        val evenSumsCount13 = mutable.Set[Long]()\n \
    \       val evenSumsCount14 = mutable.Set[Long]()\n        val evenSumsCount15\
    \ = mutable.Set[Long]()\n        val evenSumsCount16 = mutable.Set[Long]()\n \
    \       val evenSumsCount17 = mutable.Set[Long]()\n        val evenSumsCount18\
    \ = mutable.Set[Long]()\n        val evenSumsCount19 = mutable.Set[Long]()\n \
    \       val evenSumsCount20 = mutable.Set[Long]()\n        val evenSumsCount21\
    \ = mutable.Set[Long]()\n        val evenSumsCount22 = mutable.Set[Long]()\n \
    \       val evenSumsCount23 = mutable.Set[Long]()\n        val evenSumsCount24\
    \ = mutable.Set[Long]()\n        val evenSumsCount25 = mutable.Set[Long]()\n \
    \       val evenSumsCount26 = mutable.Set[Long]()\n        val evenSumsCount27\
    \ = mutable.Set[Long]()\n        val evenSumsCount28 = mutable.Set[Long]()\n \
    \       val evenSumsCount29 = mutable.Set[Long]()\n        val evenSumsCount30\
    \ = mutable.Set[Long]()\n        val evenSumsCount31 = mutable.Set[Long]()\n \
    \       val evenSumsCount32 = mutable.Set[Long]()\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk9p457lw.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenSums\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpk9p457lw.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenSumsCount\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpk9p457lw.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenSumsCount2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk9p457lw.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevenSumsCount3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk9p457lw.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mevenSumsCount4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk9p457lw.scala:18:29 -----------------------"
  stdout: ''
  timestamp: 1659799888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        var sum\
    \ = 0\n        while (n > 0) {\n            sum += n\n            if (sum % 2\
    \ == 0) {\n                evens += sum\n            }\n            n -= 1\n \
    \       }\n        evens.size == 4\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp452kisgy.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp452kisgy.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp452kisgy.scala:20:14\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659799888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoliy66k7.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoliy66k7.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpoliy66k7.scala:25:82 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                                      ^"
  stdout: ''
  timestamp: 1659799852
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val remainder = sumEven % 4\n        if (sumEvens == remainder)\n\
    \            true\n        else\n            false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6hal9sw.scala:24)\n\tat Problem.main(tmpb6hal9sw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwt5hhidy.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwt5hhidy.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwt5hhidy.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRema"
  stdout: ''
  timestamp: 1659799855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ - sumEvensRemainders\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj2qqb9cr.scala:27:92 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e\
    [31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpj2qqb9cr.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.toInt\n      \
    \  val sumEvensSum4Sum4 = sumEvensSum4Sum * 4\n        val sumEvensSum4Sum4Sum\
    \ = sumEvensSum4Sum4.toInt\n        val sumEvensSum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4.toInt\n\
    \        sumEvensSum4Sum4Sum4Sum == sumEven\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9rwdieip.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9rwdieip.scala:20:38\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36msumEvensSum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4.toInt\n\e[31m\e[31m  \
    \ |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      Not found: sumEvensSum4Sum4Sum4\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        sumEvens == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpytoazbq9.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5a7086kr.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5a7086kr.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5a7086kr.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5a7086kr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31"
  stdout: ''
  timestamp: 1659799877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(x\
    \ => x % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n        val\
    \ sumEvensSum4Sum4 = sumEvensSum4Sum * 4\n        val sumEvensSum4Sum4Sum = sumEvensSum4Sum4.sum\n\
    \        val sumEvensSum4Sum4Sum4 = sumEvensSum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4.sum\n        val sumEvensSum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum *\
    \ 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv6gfveb7.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value\
    \ filter is not a member of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv6gfveb7.scala:23:42\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum * \e[31m4\e\
    [0m\n\e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e\
    [31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv6gfveb7.scala:24:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \        ^\e[0m\n\e[31m   |\e[0m              Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv6gfveb7.scala:25:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \            ^\e[0m\n\e[31m   |\e[0m          Recursive \e[33mvalue\e[0m \e[35msumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv6gfveb7.scala:26:54\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\e[0m = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        sumEvensSum4 == n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuaehy23i.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter is\
    \ not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt50oecl_.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt50oecl_.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt50oecl_.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e"
  stdout: ''
  timestamp: 1659799888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4cjvg1an.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4cjvg1an.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4cjvg1an.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainders\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainders is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4cjvg1an.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemainder"
  stdout: ''
  timestamp: 1659799854
