language: scala
name: HumanEval_41_car_race_collision
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.foldLeft(0)(_\
    \ + carsRight.foldLeft(0)(_ + collision(Vector.empty[Car], carsLeft.tail, carsRight.head)))\n\
    \        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8uff3mjq.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8uff3mjq.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8uff3mjq.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8uff3mjq.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8uff3mjq.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft"
  stdout: ''
  timestamp: 1659793140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n\
    \ / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgjed0p3y.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgjed0p3y.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcarsLeft\e[0m = Vector.fill(n / \e[31m2\e[0m)(Vector.zero)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcarsLeft is already defined as \e[33mvariable\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgjed0p3y.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mvar\e[0m \e[36mcarsRight\e[0m = Vector.fill(n / \e\
    [31m2\e[0m)(Vector.zero)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvariable\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgjed0p3y.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mvar\e[0m \e[36mcarsLeft\e[0m = Vector.fill(n / \e[31m2\e\
    [0m)(Vector.zero)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvariable\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgjed0p3y.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mvar\e[0m \e[36mcarsRight\e[0m = Vector.fill(n / \e\
    [31m2\e[0m)(Vector.zero)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvariable\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same gro"
  stdout: ''
  timestamp: 1659793140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val collisions = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsLeft = mutable.ListBuffer.empty[Long]\n        val collisionsRight\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsLeft = cars.foldLeft(0)((acc,\
    \ i) => {\n            if (i % 2 == 0) {\n                collisionsLeft.append(acc)\n\
    \                collisionsLeft.append(i)\n                collisionsLeft.append(cars(i))\n\
    \                collisionsLeft.append(cars(i + 1))\n                collisionsLeft.append(cars(i\
    \ + 2))\n                collisionsLeft.append(cars(i + 3))\n                collisionsLeft.append(cars(i\
    \ + 4))\n                collisionsLeft.append(cars(i + 5))\n                collisionsLeft.append(cars(i\
    \ + 6))\n                collisionsLeft.append(cars(i + 7))\n                collisionsLeft.append(cars(i\
    \ + 8))\n                collisionsLeft.append(cars(i + 9))\n                collisionsLeft.append(cars(i\
    \ + 10))\n                collisionsLeft.append(cars(i + 11))\n              \
    \  collisionsLeft.append(cars(i + 12))\n                collisionsLeft.append(cars(i\
    \ + 13))\n                collisionsLeft.append(cars(i + 14))\n              \
    \  collisionsLeft.append(cars(i + 15))\n                collisionsLeft.append(cars(i\
    \ + 16))\n                collisionsLeft.append(cars(i + 17))\n              \
    \  collisionsLeft.append(cars(i + 18))\n                collisionsLeft.append(cars(i\
    \ + 19))\n                collisionsLeft.append(cars(i + 20))\n              \
    \  collisionsLeft.append(cars(i + 21))\n                collisionsLeft.append(cars(i\
    \ + 22))\n                collisionsLeft.append(cars(i + 23))\n              \
    \  collisionsLeft.append(cars(i + 24))\n                collisionsLeft.append(cars(i\
    \ + 25))\n                collisionsLeft.append(cars(i + 26))\n              \
    \  collisionsLeft.append(cars(i + 27))\n                collisionsLeft.append(cars(i\
    \ + 28))\n                collisionsLeft.append(cars(i + 29))\n              \
    \  collisionsLeft.append(cars(i + 30))\n                collisionsLeft.append(cars(i\
    \ + 31))\n                collisionsLeft.append(cars(i + 32))\n              \
    \  collisionsLeft.append(cars(i + 33))\n                collisionsLeft.append(cars(i\
    \ + 34))\n                collisionsLeft.append(cars(i + \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoipdj2ck.scala:56:46 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m                collisionsLeft.append(cars(i + \n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoipdj2ck.scala:67:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m67 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpoipdj2ck.scala:13:35 --------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => i)\n\e[31m\e[31m   |\e[0m                                   ^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    (n : Long)\n\e\
    [31m   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpoipdj2ck.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpoipdj2ck.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcollisionsLeft\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpoipdj2ck.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcollisionsRight\e[0m = mutable.ListBuffer.empty[\e\
    [35mLo"
  stdout: ''
  timestamp: 1659793139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector(i, j)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n      \
    \  val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n       \
    \ val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqrzbwaqh.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqrzbwaqh.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqrzbwaqh.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqrzbwaqh.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e"
  stdout: ''
  timestamp: 1659793139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collided = mutable.Set[Car]()\n\
    \        val collisions = mutable.Set[Car]()\n        val collisionCount = 0\n\
    \        val collisionsSoFar = 0\n        val carsLeft = cars.takeRight(n)\n \
    \       val carsRight = cars.dropRight(n)\n        val carsLeft = carsLeft.zip(carsRight).map\
    \ { case (carLeft, carRight) => carLeft }\n        carsLeft.foreach(c => collided.add(c))\n\
    \        carsRight.foreach(c => collided.add(c))\n        carsLeft.foreach(c =>\
    \ {\n            collisionsSoFar += 1\n            collisionCount += carsLeft.count(c\
    \ => c.x == c.x && c.y == c.y)\n            collisionCount += carsRight.count(c\
    \ => c.x == c.x && c.y == c.y)\n        })\n        collisionsSoFar\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqk4eufnr.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = carsLeft.zip(carsRight).map\
    \ { \e[33mcase\e[0m (carLeft, carRight) => carLeft }\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpqk4eufnr.scala:13:35 --------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqk4eufnr.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqk4eufnr.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqk4eufnr.scala:13:74\
    \ -----"
  stdout: ''
  timestamp: 1659793140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.Set[Long]()\n\
    \        val cars = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppaj3l25d.scala:51:11 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmppaj3l25d.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppaj3l25d.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppaj3l25d.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppaj3l25d.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same grou"
  stdout: ''
  timestamp: 1659793137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = Vector.tabulate(n)(i\
    \ => cars(i))\n        val carsRight = Vector.tabulate(n)(i => cars(n))\n    \
    \    val collisions = mutable.ListBuffer[Long]()\n        val collisionsLeft =\
    \ mutable.ListBuffer[Long]()\n        val collisionsRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsLeft = carsLeft.zip(carsRight).filter(_._1.speed < _._1.speed).map(_._1).filter(_._2.speed\
    \ < _._2.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbje_werw.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbje_werw.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsLeft\e[0m = carsLeft.zip(carsRight).filter(_._1.speed\
    \ < _._1.speed).map(_._1).filter(_._2.speed < _._2.speed).map(_._2).filter(_._1.speed\
    \ == _._2.speed).map(_._1).filter(_._2.speed == _._1.speed).map(_._2).filter(_._1.speed\
    \ == _._2.speed).map(_._1).filter(_._2.speed == _._1.speed).map(_._2).filter(_._1.speed\
    \ == _._2.speed).map(_._1).filter(_._2.speed == _._1.speed).map(_._2).filter(_._1.speed\
    \ == _._2.speed).map(_._1).filter(_._2.speed == _._1.speed).map(_._2).filter(_._1.speed\
    \ == _._2.speed).map(_._1).filter(_._2.speed == _._1.speed).map(_._2).filter(_._1.speed\
    \ == _._2.speed).map(_._1).filter(_._2.speed == _._1.speed).map(_._2).filter(_._1.speed\
    \ == _._2.speed).map(_._1).filter(_._2.speed == _._1.speed).map(_._2).filter(_._1.speed\
    \ == _._2.speed).map(_._1).filter(_._2.speed == _._1.speed).map(_._2).filter(_._1.speed\
    \ == _._2.speed).map(_._1).filter(_._2.speed == _._1.speed).map(_._2).filter(_._1.speed\
    \ == _._2.speed).map(_._1).filter(_._2.speed == _._1.speed).map(_._2).filter(_._1.speed\
    \ == _._2.speed).map(_._1).filter(_._2.speed == _._1.speed).map(_._2).filter(_._1.speed\
    \ == _._2.speed).map(_._1).filter(_._2.speed == _._1.speed).map(_._2).\n\e[31m\e\
    [31m   |\e[0m
  stdout: ''
  timestamp: 1659793140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.tail\n     \
    \   val carsRight = cars.init\n        val carsCollisions = mutable.Set[Long]()\n\
    \        val collisions = mutable.Set[Long]()\n        val collisionsLeft = carsLeft.foldLeft(0)((acc,\
    \ car) => acc + (car.zip(collisions)(car => car._1.contains(car._2)).sum))\n \
    \       val collisionsRight = carsRight.foldLeft(0)((acc, car) => acc + (car.zip(collisions)(car\
    \ => car._1.contains(car._2)).sum))\n        val collisionsTotal = collisionsLeft\
    \ + collisionsRight\n        val collisionsCollisions = collisionsTotal.foldLeft(0)((acc,\
    \ car) => acc + (car.zip(collisions)(car => car._1.contains(car._2)).sum))\n \
    \       collisionsCollisions\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0zll63wr.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0zll63wr.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0zll63wr.scala:16:29\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcarsCollisions\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0zll63wr.scala:17:25 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmp0zll63wr.scala:18:91 -----------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcollisionsLeft\e[0m = carsLeft.foldLeft(\e\
    [31m0\e[0m)((\e[36macc\e[0m, \e[36"
  stdout: ''
  timestamp: 1659793139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = Vector.fill(n / 2)(Vector.zero)\n        cars(0) = Vector.unitX\n\
    \        cars(1) = Vector.unitY\n        cars(2) = Vector.unitZ\n        cars(3)\
    \ = Vector.unitX\n        cars(4) = Vector.unitY\n        cars(5) = Vector.unitZ\n\
    \        cars(6) = Vector.unitX\n        cars(7) = Vector.unitY\n        cars(8)\
    \ = Vector.unitZ\n        cars(9) = Vector.unitX\n        cars(10) = Vector.unitY\n\
    \        cars(11) = Vector.unitZ\n        cars(12) = Vector.unitX\n        cars(13)\
    \ = Vector.unitY\n        cars(14) = Vector.unitZ\n        cars(15) = Vector.unitX\n\
    \        cars(16) = Vector.unitY\n        cars(17) = Vector.unitZ\n        cars(18)\
    \ = Vector.unitX\n        cars(19) = Vector.unitY\n        cars(20) = Vector.unitZ\n\
    \        cars(21) = Vector.unitX\n        cars(22) = Vector.unitY\n        cars(23)\
    \ = Vector.unitZ\n        cars(24) = Vector.unitX\n        cars(25) = Vector.unitY\n\
    \        cars(26) = Vector.unitZ\n        cars(27) = Vector.unitX\n        cars(28)\
    \ = Vector.unitY\n        cars(29) = Vector.unitZ\n        cars(30) = Vector.unitX\n\
    \        cars(31) = Vector.unitY\n        cars(32) = Vector.unitZ\n        cars(33)\
    \ = Vector.unitX\n        cars(34) = Vector.unitY\n        cars(35) = Vector.unitZ\n\
    \        cars(36) = Vector.unitX\n        cars(37) = Vector.unitY\n        cars(38)\
    \ = Vector.unitZ\n        cars(39) = Vector.unitX\n        cars(40) = Vector.unitY\n\
    \        cars(41) = Vector.unitZ\n        cars(42) = Vector.unitX\n        cars(43)\
    \ = Vector.unitY\n        cars(44) = Vector.unitZ\n        cars(45) = Vector.unitX\n\
    \        cars(46) = Vector.unitY\n        cars(47) = Vector.unitZ\n        cars(48)\
    \ = Vector.unitX\n\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplzmy7zpm.scala:14:31\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcars\e\
    [0m = Vector.fill(n / \e[31m2\e[0m)(Vector.zero)\n\e[31m\e[31m   |\e[0m      \
    \                         ^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \       Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplzmy7zpm.scala:14:45\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e\
    [36mcars\e[0m = Vector.fill(n / \e[31m2\e[0m)(Vector.zero)\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ zero is not a member of object scala.collection.immutable.Vector - did you mean\
    \ Vector.from?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplzmy7zpm.scala:15:8\
    \ -------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        cars(\e[31m0\e[0m)\
    \ = Vector.unitX\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ update is not a member of Vector[Nothing] - did you mean Vector[Nothing].updated?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplzmy7zpm.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        cars(\e[31m0\e[0m) = Vector.unitX\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue unitX is not\
    \ a member of object scala.collection.immutable.Vector - did you mean Vector.wait?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplzmy7zpm.scala:16:8 -------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        cars(\e[31m1\e[0m) = Vector.unitY\n\e[31m\e[31m\
    \   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of Vector[Nothing]\
    \ - did you mean Vector[Nothing].updated?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmplzmy7zpm.scala:16:25 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        cars(\e[31m1\e[0m) = Vector.unitY\n\e[31m\e[31m   |\e[0m          \
    \        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue unitY is not a member of object\
    \ scala.collection.immutable.Vector - did you mean Vector.wait?\n\e[31m\e[3"
  stdout: ''
  timestamp: 1659793146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(2), Vector.random(2), Vector.zero))\n        val collides\
    \ = mutable.HashSet[Car]()\n        val collide = mutable.HashMap[Car, Car]()\n\
    \        val collisions = mutable.HashSet[Car]()\n        val collision = mutable.HashMap[Car,\
    \ Car]()\n        val collisions = mutable.HashSet[Car]()\n        val collision\
    \ = mutable.HashMap[Car, Car]()\n        val collisions = mutable.HashSet[Car]()\n\
    \        val collision = mutable.HashMap[Car, Car]()\n        val collisions =\
    \ mutable.HashSet[Car]()\n        val collision = mutable.HashMap[Car, Car]()\n\
    \        val collisions = mutable.HashSet[Car]()\n        val collision = mutable.HashMap[Car,\
    \ Car]()\n        val collisions = mutable.HashSet[Car]()\n        val collision\
    \ = mutable.HashMap[Car, Car]()\n        val collisions = mutable.HashSet[Car]()\n\
    \        val collision = mutable.HashMap[Car, Car]()\n        val collisions =\
    \ mutable.HashSet[Car]()\n        val collision = mutable.HashMap[Car, Car]()\n\
    \        val collisions = mutable.HashSet[Car]()\n        val collision = mutable.HashMap[Car,\
    \ Car]()\n        val collisions = mutable.HashSet[Car]()\n        val collision\
    \ = mutable.HashMap[Car, Car]()\n        val collisions = mutable.HashSet[Car]()\n\
    \        val collision = mutable.HashMap[Car, Car]()\n        val collisions =\
    \ mutable.HashSet[Car]()\n        val collision = mutable.HashMap[Car, Car]()\n\
    \        val collisions = mutable.HashSet[Car]()\n        val collision = mutable.HashMap[Car,\
    \ Car]()\n        val collisions = mutable.HashSet[Car]()\n        val collision\
    \ = mutable.HashMap[Car, Car]()\n        val collisions = mutable.HashSet[Car]()\n\
    \        val collision = mutable.HashMap[Car, Car]()\n        val collisions =\
    \ mutable.HashSet[Car]()\n        val collision = mutable.HashMap[Car, Car]()\n\
    \        val collisions = mutable.HashSet[Car]()\n        val collision = mutable.HashMap[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3ktvvs15.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3ktvvs15.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.HashSet[\e[35mCar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisions is already defined as \e[33mvalue\e[0m \e[35mcollisions\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3ktvvs15.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcollision\e[0m = mutable.HashMap[\e\
    [35mCar\e[0m, \e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollision is already defined as \e[33mvalue\e[0m \e[35mcollision\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3ktvvs15.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.HashSet[\e\
    [35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisions is already defined as \e[33mvalue\e[0m \e[35mcollisions\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3ktvvs15.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcollision\e[0m = mutable.HashMap[\e\
    [35mCar\e[0m, \e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollision is already defined as \e[33mvalue\e[0m \e[35mcollision\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel defin"
  stdout: ''
  timestamp: 1659793139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsCount = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyzqfq3pl.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts\e[0m =\
    \ mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCounts is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyzqfq3pl.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts\e[0m =\
    \ mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCounts is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyzqfq3pl.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts\e[0m =\
    \ mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCounts is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyzqfq3pl.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts\e[0m =\
    \ mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCounts is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyzqfq3pl.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCoun"
  stdout: ''
  timestamp: 1659793139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(2*n)(new\
    \ Car)\n        val collisions = mutable.ListBuffer[Long]()\n        val carsLeft\
    \ = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.takeLeft(n)\n\
    \        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n\
    \        val collisionsLeft = carsLeft.foldLeft(0)(_ + carsLeft.forall(_.collidesWith(_)))\n\
    \        val collisionsRight = carsRight.foldLeft(0)(_ + carsRight.forall(_.collidesWith(_)))\n\
    \        collisions += collisionsLeft\n        collisions += collisionsRight\n\
    \        collisions.sum\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy4nqapze.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = cars.takeRight(n)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpy4nqapze.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = cars.takeLeft(n)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcarsRight\
    \ is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy4nqapze.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcarsLeft\e[0m = carsLeft.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy4nqapze.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = carsRight.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpy4nqapze.scala:13:30 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Array.fill(\e[31m2\e[0m*n)(\e\
    [33mnew\e[0m \e[35mCar\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \    ^^^\e[0m\n\e[31m   |\e[0m                              Found:    Long\n\e\
    [31m   |\e[0m"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val collisions = mutable.ListBuffer.empty[Long]\n        val\
    \ carsLeft = cars.tail\n        val carsRight = cars.init\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.init\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = carsLeft.tail\n        val carsRight = carsRight.tail\n        val carsLeft\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9nlc8t1a.scala:57:22 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp9nlc8t1a.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = carsLeft.tail\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcarsLeft\
    \ is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9nlc8t1a.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcarsRight\e[0m = carsRight.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9nlc8t1a.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = carsLeft.tail\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcarsLeft\
    \ is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9nlc8t1a.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcarsRight\e[0m = carsRight.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of topleve"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount33 = \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpao2k_b00.scala:47:31 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount33\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpao2k_b00.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpao2k_b00.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpao2k_b00.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpao2k_b00.scala:15:30\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount\e[0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  \
    \ |"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount4 = mutable.ListBuffer.empty[Long]\n        val collisionsCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount7 = mutable.ListBuffer.empty[Long]\n        val collisionsCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount10 = mutable.ListBuffer.empty[Long]\n        val collisionsCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount13 = mutable.ListBuffer.empty[Long]\n        val collisionsCount14\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount15 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount16 = mutable.ListBuffer.empty[Long]\n        val collisionsCount17\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount18 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount19 = mutable.ListBuffer.empty[Long]\n        val collisionsCount20\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount21 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount22 = mutable.ListBuffer.empty[Long]\n        val collisionsCount23\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount24 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount25 = mutable.ListBuffer.empty[Long]\n        val collisionsCount26\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount27 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount28 = mutable.ListBuffer.empty[Long]\n        val collisionsCount29\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount30 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount3\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkc393rp7.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkc393rp7.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m                                 \
    \  ^\e[0m\n\e[31m   |\e[0m                                   Found:    (n : Long)\n\
    \e[31m   |\e[0m                                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkc393rp7.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkc393rp7.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkc393rp7.scala:15:30 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                              Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-e"
  stdout: ''
  timestamp: 1659793139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val cars = mutable.ListBuffer.fill(n)(new Car)\n        val carsRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsLeft = mutable.ListBuffer.fill(n)(new\
    \ Car)\n        val carsRightToLeft = mutable.ListBuffer.fill(n)(new Car)\n  \
    \      val carsLeftToRight = mutable.ListBuffer.fill(n)(new Car)\n        val\
    \ carsRightToLeftToRight = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeft\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeft\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeft\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeft\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeft\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpctfn1brz.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpctfn1brz.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpctfn1brz.scala:14:19 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer.fill(n)(\e[33mnew\e\
    [0m \e[35mCar\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpctfn1brz.scala:14:50 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer.fill(n)(\e\
    [33mnew\e[0m \e[35mCar\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                           \
    \                       Not found: type Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpctfn1brz.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer.fill(n)(\e\
    [33mnew\e[0m \e[35mCar\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpctfn1brz.scala:15:55 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer.fill(n)(\e\
    [33mnew\e[0m \e[35mCar\e[0m)\n\e[31m\e["
  stdout: ''
  timestamp: 1659793136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpijwllkua.scala:49:54 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ArrayBuffer.fill(n)(\n\
    \e[31m\e[31m   |\e[0m                                                      ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpijwllkua.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedLimits is already defined as \e[33mvalue\e[0m \e[35mspeedLimits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpijwllkua.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedLimits is already defined as \e[33mvalue\e[0m \e[35mspeedLimits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpijwllkua.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedLimits is already defined as \e[33mvalue\e[0m \e[35mspeedLimits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpijwllkua.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mspeedLimits\e[0m = mutable.ArrayBuffe"
  stdout: ''
  timestamp: 1659793136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => new Car(Vector.random(100), Vector.random(100)))\n        val collides =\
    \ mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n        val\
    \ collisionsCount = mutable.Set[Car]()\n        val collisionsCount2 = mutable.Set[Car]()\n\
    \        val collisionsCount3 = mutable.Set[Car]()\n        val collisionsCount4\
    \ = mutable.Set[Car]()\n        val collisionsCount5 = mutable.Set[Car]()\n  \
    \      val collisionsCount6 = mutable.Set[Car]()\n        val collisionsCount7\
    \ = mutable.Set[Car]()\n        val collisionsCount8 = mutable.Set[Car]()\n  \
    \      val collisionsCount9 = mutable.Set[Car]()\n        val collisionsCount10\
    \ = mutable.Set[Car]()\n        val collisionsCount11 = mutable.Set[Car]()\n \
    \       val collisionsCount12 = mutable.Set[Car]()\n        val collisionsCount13\
    \ = mutable.Set[Car]()\n        val collisionsCount14 = mutable.Set[Car]()\n \
    \       val collisionsCount15 = mutable.Set[Car]()\n        val collisionsCount16\
    \ = mutable.Set[Car]()\n        val collisionsCount17 = mutable.Set[Car]()\n \
    \       val collisionsCount18 = mutable.Set[Car]()\n        val collisionsCount19\
    \ = mutable.Set[Car]()\n        val collisionsCount20 = mutable.Set[Car]()\n \
    \       val collisionsCount21 = mutable.Set[Car]()\n        val collisionsCount22\
    \ = mutable.Set[Car]()\n        val collisionsCount23 = mutable.Set[Car]()\n \
    \       val collisionsCount24 = mutable.Set[Car]()\n        val collisionsCount25\
    \ = mutable.Set[Car]()\n        val collisionsCount26 = mutable.Set[Car]()\n \
    \       val collisionsCount27 = mutable.Set[Car]()\n        val collisionsCount28\
    \ = mutable.Set[Car]()\n        val collisionsCount29 = mutable.Set[Car]()\n \
    \       val collisionsCount30 = mutable.Set[Car]()\n        val collisionsCount31\
    \ = mutable.Set[Car]()\n        val collisionsCount32\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxmp8id0n.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxmp8id0n.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => \e\
    [33mnew\e[0m \e[35mCar\e[0m(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e\
    [0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxmp8id0n.scala:13:47 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => \e[33mnew\e[0m \e[35mCar\e[0m(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                       \
    \        ^^^\e[0m\n\e[31m   |\e[0m                                           \
    \    Not found: type Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxmp8id0n.scala:14:35 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mcollides\e[0m = mutable.Set[\e[35mCar\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e\
    [0m                                   Not found: type Car\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxmp8id0n.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollides\e[0m = mutable.Set[\e\
    [35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found"
  stdout: ''
  timestamp: 1659793139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speedLimit = mutable.ListBuffer[Double]()\n\
    \        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimit2\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit2s = mutable.ListBuffer[Double]()\n\
    \        val speedLimit3 = mutable.ListBuffer[Double]()\n        val speedLimit3s\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit4 = mutable.ListBuffer[Double]()\n\
    \        val speedLimit4s = mutable.ListBuffer[Double]()\n        val speedLimit5\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit5s = mutable.ListBuffer[Double]()\n\
    \        val speedLimit6 = mutable.ListBuffer[Double]()\n        val speedLimit6s\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit7 = mutable.ListBuffer[Double]()\n\
    \        val speedLimit7s = mutable.ListBuffer[Double]()\n        val speedLimit8\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit8s = mutable.ListBuffer[Double]()\n\
    \        val speedLimit9 = mutable.ListBuffer[Double]()\n        val speedLimit9s\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit10 = mutable.ListBuffer[Double]()\n\
    \        val speedLimit10s = mutable.ListBuffer[Double]()\n        val speedLimit11\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit11s = mutable.ListBuffer[Double]()\n\
    \        val speedLimit12 = mutable.ListBuffer[Double]()\n        val speedLimit12s\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit13 = mutable.ListBuffer[Double]()\n\
    \        val speedLimit13s = mutable.ListBuffer[Double]()\n        val speedLimit14\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit14s = mutable.ListBuffer[Double]()\n\
    \        val speedLimit15 = mutable.ListBuffer[Double]()\n        val speedLimit15s\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit16 = mutable.ListBuffer[Double]()\n\
    \        val speedLimit16s = mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3iqox241.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp3iqox241.scala:13:25 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3iqox241.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3iqox241.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp3iqox241.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mspeeds\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp3iqox241.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mspeedLimit\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m"
  stdout: ''
  timestamp: 1659793136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val collisions = carsLeft.zip(carsRight).count(_._1 == _._1)\n      \
    \  collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbcbq85he.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => i)\n\e[31m\e[31m   |\e[0m           \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \      Found:    (n : Long)\n\e[31m   |\e[0m                                 \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbcbq85he.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbcbq85he.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbcbq85he.scala:16:57\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = carsLeft.zip(carsRight).count(_._1 == _._1)\n\e[31m\e[31m\
    \   |\e[0m                                                       ^^^^\e[0m\n\e\
    [31m   |\e[0m                                         value _1 is not a member\
    \ of Int\n4 errors found\n"
  stdout: ''
  timestamp: 1659793139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount2 = mutable.Set.empty[Long]\n\
    \        val collisionsCount3 = mutable.Set.empty[Long]\n        val collisionsCount4\
    \ = mutable.Set.empty[Long]\n        val collisionsCount5 = mutable.Set.empty[Long]\n\
    \        val collisionsCount6 = mutable.Set.empty[Long]\n        val collisionsCount7\
    \ = mutable.Set.empty[Long]\n        val collisionsCount8 = mutable.Set.empty[Long]\n\
    \        val collisionsCount9 = mutable.Set.empty[Long]\n        val collisionsCount10\
    \ = mutable.Set.empty[Long]\n        val collisionsCount11 = mutable.Set.empty[Long]\n\
    \        val collisionsCount12 = mutable.Set.empty[Long]\n        val collisionsCount13\
    \ = mutable.Set.empty[Long]\n        val collisionsCount14 = mutable.Set.empty[Long]\n\
    \        val collisionsCount15 = mutable.Set.empty[Long]\n        val collisionsCount16\
    \ = mutable.Set.empty[Long]\n        val collisionsCount17 = mutable.Set.empty[Long]\n\
    \        val collisionsCount18 = mutable.Set.empty[Long]\n        val collisionsCount19\
    \ = mutable.Set.empty[Long]\n        val collisionsCount20 = mutable.Set.empty[Long]\n\
    \        val collisionsCount21 = mutable.Set.empty[Long]\n        val collisionsCount22\
    \ = mutable.Set.empty[Long]\n        val collisionsCount23 = mutable.Set.empty[Long]\n\
    \        val collisionsCount24 = mutable.Set.empty[Long]\n        val collisionsCount25\
    \ = mutable.Set.empty[Long]\n        val collisionsCount26 = mutable.Set.empty[Long]\n\
    \        val collisionsCount27 = mutable.Set.empty[Long]\n        val collisionsCount28\
    \ = mutable.Set.empty[Long]\n        val collisionsCount29 = mutable.Set.empty[Long]\n\
    \        val collisionsCount30 = mutable.Set.empty[Long]\n        val collisionsCount31\
    \ = mutable.Set.empty[Long]\n        val collisionsCount32 = \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2bfzslap.scala:47:31 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount32\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2bfzslap.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2bfzslap.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2bfzslap.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2bfzslap.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), V"
  stdout: ''
  timestamp: 1659793139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(Vector.zero), Vector.zero))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7_8dzjtj.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7_8dzjtj.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7_8dzjtj.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7_8dzjtj.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel def"
  stdout: ''
  timestamp: 1659793139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set.empty[Car]\n\
    \        val collide = mutable.Set.empty[Car]\n        val collide2 = mutable.Set.empty[Car]\n\
    \        val collide3 = mutable.Set.empty[Car]\n        val collide4 = mutable.Set.empty[Car]\n\
    \        val collide5 = mutable.Set.empty[Car]\n        val collide6 = mutable.Set.empty[Car]\n\
    \        val collide7 = mutable.Set.empty[Car]\n        val collide8 = mutable.Set.empty[Car]\n\
    \        val collide9 = mutable.Set.empty[Car]\n        val collide10 = mutable.Set.empty[Car]\n\
    \        val collide11 = mutable.Set.empty[Car]\n        val collide12 = mutable.Set.empty[Car]\n\
    \        val collide13 = mutable.Set.empty[Car]\n        val collide14 = mutable.Set.empty[Car]\n\
    \        val collide15 = mutable.Set.empty[Car]\n        val collide16 = mutable.Set.empty[Car]\n\
    \        val collide17 = mutable.Set.empty[Car]\n        val collide18 = mutable.Set.empty[Car]\n\
    \        val collide19 = mutable.Set.empty[Car]\n        val collide20 = mutable.Set.empty[Car]\n\
    \        val collide21 = mutable.Set.empty[Car]\n        val collide22 = mutable.Set.empty[Car]\n\
    \        val collide23 = mutable.Set.empty[Car]\n        val collide24 = mutable.Set.empty[Car]\n\
    \        val collide25 = mutable.Set.empty[Car]\n        val collide26 = mutable.Set.empty[Car]\n\
    \        val collide27 = mutable.Set.empty[Car]\n        val collide28 = mutable.Set.empty[Car]\n\
    \        val collide29 = mutable.Set.empty[Car]\n        val collide30 = mutable.Set.empty[Car]\n\
    \        val collide31 = mutable.Set.empty[Car]\n        val collide32 = mutable.Set.empty[Car]\n\
    \        val collide33 = mutable.Set.empty[Car]\n        val collide34 = mutable.Set.empty[Car]\n\
    \        val collide35 = mut\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp88lewpvr.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp88lewpvr.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp88lewpvr.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp88lewpvr.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp88lewpvr.scala:14:41\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollides"
  stdout: ''
  timestamp: 1659793152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val carsLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val carsRight = Array.fill(n / 2)(mutable.Queue[Int]())\n        val\
    \ collisions = mutable.Queue[Int]()\n        val speed = mutable.Queue[Int]()\n\
    \        val speedLeft = mutable.Queue[Int]()\n        val speedRight = mutable.Queue[Int]()\n\
    \        val collisionsLeft = mutable.Queue[Int]()\n        val collisionsRight\
    \ = mutable.Queue[Int]()\n        val speedLeft = mutable.Queue[Int]()\n     \
    \   val speedRight = mutable.Queue[Int]()\n        val collisionsLeft = mutable.Queue[Int]()\n\
    \        val collisionsRight = mutable.Queue[Int]()\n        val speedLeft = mutable.Queue[Int]()\n\
    \        val speedRight = mutable.Queue[Int]()\n        val collisionsLeft = mutable.Queue[Int]()\n\
    \        val collisionsRight = mutable.Queue[Int]()\n        val speedLeft = mutable.Queue[Int]()\n\
    \        val speedRight = mutable.Queue[Int]()\n        val collisionsLeft = mutable.Queue[Int]()\n\
    \        val collisionsRight = mutable.Queue[Int]()\n        val speedLeft = mutable.Queue[Int]()\n\
    \        val speedRight = mutable.Queue[Int]()\n        val collisionsLeft = mutable.Queue[Int]()\n\
    \        val collisionsRight = mutable.Queue[Int]()\n        val speedLeft = mutable.Queue[Int]()\n\
    \        val speedRight = mutable.Queue[Int]()\n        val collisionsLeft = mutable.Queue[Int]()\n\
    \        val collisionsRight = mutable.Queue[Int]()\n        val speedLeft = mutable.Queue[Int]()\n\
    \        val speedRight = mutable.Queue[Int]()\n        val collisionsLeft = mutable.Queue[Int]()\n\
    \        val collisionsRight = mutable.Queue[Int]()\n        val speedLeft = mutable.Queue[Int]()\n\
    \        val speedRight = mutable.Queue[Int]()\n        val collisionsLeft = mutable.Queue[Int]()\n\
    \        val collisionsRight = mutable.Queue[Int]()\n        val speedLeft = mutable.Queue[Int]()\n\
    \        val speed\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0mopw1qk.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0mopw1qk.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mspeedLeft\e[0m = mutable.Queue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mspeedLeft is\
    \ already defined as \e[33mvalue\e[0m \e[35mspeedLeft\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0mopw1qk.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mspeedRight\e[0m = mutable.Queue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mspeedRight\
    \ is already defined as \e[33mvalue\e[0m \e[35mspeedRight\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0mopw1qk.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsLeft\e[0m = mutable.Queue[\e[35mInt\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcollisionsLeft\
    \ is already defined as \e[33mvalue\e[0m \e[35mcollisionsLeft\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0mopw1qk.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsRight\e[0m = mutable.Queue[\e[35mInt\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcollisionsRight is already defined as \e[33mvalue\e[0m \e[35mcollisionsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E16"
  stdout: ''
  timestamp: 1659793152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mut\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpefbchi94.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpefbchi94.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpefbchi94.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpefbchi94.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpefbchi94.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [3"
  stdout: ''
  timestamp: 1659793149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp76_bktbo.scala:44:29 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFar\e[0m = \n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp76_bktbo.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFar is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsSoFar\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp76_bktbo.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFar is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsSoFar\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp76_bktbo.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFar is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsSoFar\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp76_bktbo.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   "
  stdout: ''
  timestamp: 1659793149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarIter\
    \ = collisionsSoFar.iterator\n        val collisionsSoFarIterIter = collisionsSoFarIter.iterator\n\
    \        val collisionsSoFarIterIterIter = collisionsSoFarIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIter = collisionsSoFarIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIter = collisionsSoFarIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter =\
    \ collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = collisionsSoFarIterIter\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_h5jozwv.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarIterIterIterIterIterIterIterIterIter\e\
    [0m = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarIterIterIterIterIterIterIterIterIter is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarIterIterIterIterIterIterIterIterIter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_h5jozwv.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarIterIterIterIterIterIterIterIterIterIter\e\
    [0m = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter.iterator\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarIterIterIterIterIterIterIterIterIterIter is\
    \ already defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarIterIterIterIterIterIterIterIterIterIter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_h5jozwv.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\e\
    [0m = collisionsSoFarIterIter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ is already defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined"
  stdout: ''
  timestamp: 1659793151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3_ncjor4.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mspeedsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsLeft is already defined as \e[33mvalue\e[0m \e[35mspeedsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mspeedsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsRight is already defined as \e[33mvalue\e[0m \e[35mspeedsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mspeedsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsLeft is already defined as \e[33mvalue\e[0m \e[35mspeedsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mspeedsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsRight is already defined as \e[33mvalue\e[0m \e[35mspeedsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mspeedsLeft\e[0m"
  stdout: ''
  timestamp: 1659793152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val collisions = mutable.Set[Long]()\n        val collisionsSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl01ty7m_.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl01ty7m_.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl01ty7m_.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is\
    \ already defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl01ty7m_.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is\
    \ already defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel"
  stdout: ''
  timestamp: 1659793151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collision = mutable.ListBuffer[Long]()\n\
    \        val car = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val car = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collision = mutable.ListBuffer[Long]()\n\
    \        val car = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val car = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collision = mutable.ListBuffer[Long]()\n\
    \        val car = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val car = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collision = mutable.ListBuffer[Long]()\n\
    \        val car = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mut\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwa3yak6b.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcars is already defined as \e[33mvalue\e[0m \e[35mcars\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwa3yak6b.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.ListBuffer[\e[35mDouble\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeed is already defined as \e[33mvalue\e[0m \e[35mspeed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwa3yak6b.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mspeeds\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeeds is already defined as \e[33mvalue\e[0m \e[35mspeeds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwa3yak6b.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mcollision\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollision is already defined as \e[33mvalue\e[0m \e[35mcollision\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwa3yak6b.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mcar\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e["
  stdout: ''
  timestamp: 1659793151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzvqfsutg.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzvqfsutg.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => Vector.tabulate(n)(\e[36mk\e[0m => Vector.tabulate(n)(\e[36ml\e\
    [0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e[36mn\e[0m => Vector.tabulate(n)(\e\
    [36mo\e[0m => Vector.tabulate(n)(\e[36mp\e[0m => Vector.tabulate(n)(\e[36mq\e\
    [0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e[36ms\e[0m => Vector.tabulate(n)(\e\
    [36mt\e[0m => Vector.tabulate(n)(\e[36mu\e[0m => Vector.tabulate(n)(\e[36mv\e\
    [0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e[36mx\e[0m => Vector.tabulate(n)(\e\
    [36my\e[0m => Vector.tabulate(n)(\e[36mz\e[0m => Vector.tabulate(n)(\e[36ma\e\
    [0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e[36mc\e[0m => Vector.tabulate(n)(\e\
    [36md\e[0m => Vector.tabulate(n)(\e[36me\e[0m => Vector.tabulate(n)(\e[36mf\e\
    [0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e[36mh\e[0m => Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.tabulate(n)(\e[36mk\e\
    [0m => Vector.tabulate(n)(\e[36ml\e[0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e\
    [36mn\e[0m => Vector.tabulate(n)(\e[36mo\e[0m => Vector.tabulate(n)(\e[36mp\e\
    [0m => Vector.tabulate(n)(\e[36mq\e[0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e\
    [36ms\e[0m => Vector.tabulate(n)(\e[36mt\e[0m => Vector.tabulate(n)(\e[36mu\e\
    [0m => Vector.tabulate(n)(\e[36mv\e[0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e\
    [36mx\e[0m => Vector.tabulate(n)(\e[36my\e[0m => Vector.tabulate(n)(\e[36mz\e\
    [0m => Vector.tabulate(n)(\e[36ma\e[0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e\
    [36mc\e[0m => Vector.tabulate(n)(\e[36md\e[0m => Vector.tabulate(n)(\e[36me\e\
    [0m => Vector.tabulate(n)(\e[36mf\e[0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e\
    [36mh"
  stdout: ''
  timestamp: 1659793155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.Set[Long]()\n\
    \        val cars = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppaj3l25d.scala:51:11 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmppaj3l25d.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppaj3l25d.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppaj3l25d.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppaj3l25d.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same grou"
  stdout: ''
  timestamp: 1659793137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(2), Vector.random(2)))\n        val collides = mutable.Set[Car]()\n\
    \        val collide = mutable.Set[Car]()\n        val collideLeft = mutable.Set[Car]()\n\
    \        val collideRight = mutable.Set[Car]()\n        val collideLeft = mutable.Set[Car]()\n\
    \        val collideRight = mutable.Set[Car]()\n        val collideLeft = mutable.Set[Car]()\n\
    \        val collideRight = mutable.Set[Car]()\n        val collideLeft = mutable.Set[Car]()\n\
    \        val collideRight = mutable.Set[Car]()\n        val collideLeft = mutable.Set[Car]()\n\
    \        val collideRight = mutable.Set[Car]()\n        val collideLeft = mutable.Set[Car]()\n\
    \        val collideRight = mutable.Set[Car]()\n        val collideLeft = mutable.Set[Car]()\n\
    \        val collideRight = mutable.Set[Car]()\n        val collideLeft = mutable.Set[Car]()\n\
    \        val collideRight = mutable.Set[Car]()\n        val collideLeft = mutable.Set[Car]()\n\
    \        val collideRight = mutable.Set[Car]()\n        val collideLeft = mutable.Set[Car]()\n\
    \        val collideRight = mutable.Set[Car]()\n        val collideLeft = mutable.Set[Car]()\n\
    \        val collideRight = mutable.Set[Car]()\n        val collideLeft = mutable.Set[Car]()\n\
    \        val collideRight = mutable.Set[Car]()\n        val collideLeft = mutable.Set[Car]()\n\
    \        val collideRight = mutable.Set[Car]()\n        val collideLeft = mutable.Set[Car]()\n\
    \        val collideRight = mutable.Set[Car]()\n        val collideLeft = mutable.Set[Car]()\n\
    \        val collideRight = mutable.Set[Car]()\n        val collideLeft = mutable.Set[Car]()\n\
    \        val collideRight = mutable.Set[Car]()\n        val collideLeft = mutable.Set[Car]()\n\
    \        val collideRight = mutable.Set[Car]()\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpktqddkqa.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcollideLeft\e[0m = mutable.Set[\e\
    [35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollideLeft is already defined as \e[33mvalue\e[0m \e[35mcollideLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpktqddkqa.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcollideRight\e[0m = mutable.Set[\e[35mCar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcollideRight is already defined as \e[33mvalue\e[0m \e[35mcollideRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpktqddkqa.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcollideLeft\e[0m = mutable.Set[\e[35mCar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcollideLeft is already defined as \e[33mvalue\e[0m \e[35mcollideLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpktqddkqa.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcollideRight\e[0m = mutable.Set[\e[35mCar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcollideRight is already defined as \e[33mvalue\e[0m \e[35mcollideRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpktqddkqa.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mcollideLeft\e[0m = mutable.Set[\e[35mCar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Int]()\n        val speed = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppsnn5b5u.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppsnn5b5u.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppsnn5b5u.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppsnn5b5u.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppsnn5b5u.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(10), Vector.random(10), Vector.random(10)))\n        val\
    \ carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n  \
    \      val collisions = carsLeft.zip(carsRight).filter(_._1.collidesWith(_._2)).length\n\
    \        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpenrplcpz.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m10\e[0m), Vector.random(\e\
    [31m10\e[0m), Vector.random(\e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m          \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \       Found:    (n : Long)\n\e[31m   |\e[0m                                \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpenrplcpz.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m10\e\
    [0m), Vector.random(\e[31m10\e[0m), Vector.random(\e[31m10\e[0m)))\n\e[31m\e[31m\
    \   |\e[0m                                           ^^^\e[0m\n\e[31m   |\e[0m\
    \                                           Not found: Car\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpenrplcpz.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m10\e[0m), Vector.random(\e[31m10\e[0m),\
    \ Vector.random(\e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m                      \
    \                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue random is not\
    \ a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpenrplcpz.scala:13:73 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m10\e[0m), Vector.random(\e[31m10\e[0m),\
    \ Vector.random(\e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m                      \
    \                                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue random is not a member of object scala.collection.immutable.Vector -\
    \ did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/t"
  stdout: ''
  timestamp: 1659793153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => Car(i, j)))\n        val\
    \ collisions = mutable.ListBuffer[Long]()\n        val collisionsLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsRight = mutable.ListBuffer[Long]()\n        val collisionsBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothRight = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBoth = mutable.ListBuffer[Long]()\n       \
    \ val collisionsBothBothBothBothLeft = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothRight\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbwg088nt.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbwg088nt.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothBothRight\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBothRight is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBothRight\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbwg088nt.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothBothBoth\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBothBoth is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBothBoth\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbwg088nt.scala:39:12 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothBothBothLeft\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBothBothLeft is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBothBothLeft\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbwg088nt.scala:13:19 ------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1659793152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n\
    \ / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgjed0p3y.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgjed0p3y.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcarsLeft\e[0m = Vector.fill(n / \e[31m2\e[0m)(Vector.zero)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcarsLeft is already defined as \e[33mvariable\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgjed0p3y.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mvar\e[0m \e[36mcarsRight\e[0m = Vector.fill(n / \e\
    [31m2\e[0m)(Vector.zero)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvariable\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgjed0p3y.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mvar\e[0m \e[36mcarsLeft\e[0m = Vector.fill(n / \e[31m2\e\
    [0m)(Vector.zero)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvariable\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgjed0p3y.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mvar\e[0m \e[36mcarsRight\e[0m = Vector.fill(n / \e\
    [31m2\e[0m)(Vector.zero)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvariable\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same gro"
  stdout: ''
  timestamp: 1659793140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.foldLeft(0)((acc,\
    \ car) => acc + (carsRight.exists(c => c.equals(car))))\n        collisions\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4lfekbjt.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4lfekbjt.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4lfekbjt.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4lfekbjt.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp4lfekbjt.scala:16:64\
    \ -------"
  stdout: ''
  timestamp: 1659793153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n\
    \        val collisions = mutable.ListBuffer[Int]()\n        val collisionsCount\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount2 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount3 = mutable.ListBuffer[Int]()\n        val collisionsCount4\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount5 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount6 = mutable.ListBuffer[Int]()\n        val collisionsCount7\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount8 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount9 = mutable.ListBuffer[Int]()\n        val collisionsCount10\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount11 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount12 = mutable.ListBuffer[Int]()\n        val collisionsCount13\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount14 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount15 = mutable.ListBuffer[Int]()\n        val collisionsCount16\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount17 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount18 = mutable.ListBuffer[Int]()\n        val collisionsCount19\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount20 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount21 = mutable.ListBuffer[Int]()\n        val collisionsCount22\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount23 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount24 = mutable.ListBuffer[Int]()\n        val collisionsCount25\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount26 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount27 = mutable.ListBuffer[Int]()\n        val collisionsCount28\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount29 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount30 = mutable.ListBuffer[Int]()\n        val collisionsCount31\
    \ = mutable.ListBuffer[Int]()\n        val collision\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptu61xu5g.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptu61xu5g.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptu61xu5g.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptu61xu5g.scala:15:30 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptu61xu5g.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount2\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptu61xu5g.scala:17:31\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount3\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     "
  stdout: ''
  timestamp: 1659793152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgkvxd9q8.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.i"
  stdout: ''
  timestamp: 1659793153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(2\
    \ * n)(0)\n        val collisions = mutable.ListBuffer[Long]()\n        val speed\
    \ = Array.fill(2 * n)(0)\n        val speeds = Array.fill(2 * n)(0)\n        val\
    \ speedsDiff = Array.fill(2 * n)(0)\n        val speedsDiffs = Array.fill(2 *\
    \ n)(0)\n        val speedsDiffsDiff = Array.fill(2 * n)(0)\n        val speedsDiffsDiffs\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiff = Array.fill(2 * n)(0)\n\
    \        val speedsDiffsDiffsDiffs = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiff\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffs = Array.fill(2\
    \ * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiff = Array.fill(2 * n)(0)\n\
    \        val speedsDiffsDiffsDiffsDiffsDiffs = Array.fill(2 * n)(0)\n        val\
    \ speedsDiffsDiffsDiffsDiffsDiffsDiff = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffs\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiff\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiffs\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiff\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffs\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiff\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffs\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiff\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffs\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiff\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi0ueplu5.scala:37:74 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mspeedsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiff\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi0ueplu5.scala:13:30 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Array.fill(\e\
    [31m2\e[0m * n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                              Found:    Long\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi0ueplu5.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi0ueplu5.scala:15:31 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mspeed\e[0m = Array.fill(\e\
    [31m2\e[0m * n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                               Found:    Long\n\
    \e[31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi0ueplu5.scala:16:32 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mspeeds\e[0m = Array.fill(\e\
    [31m2\e[0m * n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \       ^^^^^\e[0m\n\e[31m   |\e[0m     "
  stdout: ''
  timestamp: 1659793155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsLeft = carsLeft.foldLeft(0)((acc, car) => acc + (car.zip(collisions).find(_._1\
    \ == car._1).getOrElse(0)))\n        val collisionsRight = carsRight.foldLeft(0)((acc,\
    \ car) => acc + (car.zip(collisions).find(_._1 == car._1).getOrElse(0)))\n   \
    \     collisions += collisionsLeft + collisionsRight\n        collisions.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf7x2yjk3.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpf7x2yjk3.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf7x2yjk3.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf7x2yjk3.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf7x2yjk3.scala:16:25\
    \ --"
  stdout: ''
  timestamp: 1659793154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.ListBuffer.empty[Long]\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount3 = mutable.ListBuffer.empty[Long]\n        val collisionsCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount6 = mutable.ListBuffer.empty[Long]\n        val collisionsCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount9 = mutable.ListBuffer.empty[Long]\n        val collisionsCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount12 = mutable.ListBuffer.empty[Long]\n        val collisionsCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount14 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount15 = mutable.ListBuffer.empty[Long]\n        val collisionsCount16\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount17 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount18 = mutable.ListBuffer.empty[Long]\n        val collisionsCount19\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount20 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount21 = mutable.ListBuffer.empty[Long]\n        val collisionsCount22\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount23 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount24 = mutable.ListBuffer.empty[Long]\n        val collisionsCount25\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount26 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount27 = mutable.ListBuffer.empty[Long]\n        val collisionsCount28\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount29 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount30\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi4ukkzvk.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpi4ukkzvk.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi4ukkzvk.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpi4ukkzvk.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi4ukkzvk.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.i"
  stdout: ''
  timestamp: 1659793154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = 0\n        val collisionsCount2 = collisionsCount\n\
    \        val collisionsCount3 = collisionsCount2\n        val collisionsCount4\
    \ = collisionsCount3\n        val collisionsCount5 = collisionsCount4\n      \
    \  val collisionsCount6 = collisionsCount5\n        val collisionsCount7 = collisionsCount6\n\
    \        val collisionsCount8 = collisionsCount7\n        val collisionsCount9\
    \ = collisionsCount8\n        val collisionsCount10 = collisionsCount9\n     \
    \   val collisionsCount11 = collisionsCount10\n        val collisionsCount12 =\
    \ collisionsCount11\n        val collisionsCount13 = collisionsCount12\n     \
    \   val collisionsCount14 = collisionsCount13\n        val collisionsCount15 =\
    \ collisionsCount14\n        val collisionsCount16 = collisionsCount15\n     \
    \   val collisionsCount17 = collisionsCount16\n        val collisionsCount18 =\
    \ collisionsCount17\n        val collisionsCount19 = collisionsCount18\n     \
    \   val collisionsCount20 = collisionsCount19\n        val collisionsCount21 =\
    \ collisionsCount20\n        val collisionsCount22 = collisionsCount21\n     \
    \   val collisionsCount23 = collisionsCount22\n        val collisionsCount24 =\
    \ collisionsCount23\n        val collisionsCount25 = collisionsCount24\n     \
    \   val collisionsCount26 = collisionsCount25\n        val collisionsCount27 =\
    \ collisionsCount26\n        val collisionsCount28 = collisionsCount27\n     \
    \   val collisionsCount29 = collisionsCount28\n        val collisionsCount30 =\
    \ collisionsCount29\n        val collisionsCount31 = collisionsCount30\n     \
    \   val collisionsCount32 = collisionsCount31\n        val collisionsCount33 =\
    \ collisionsCount32\n        val collisionsCount34 = collisionsCount33\n     \
    \   val collisionsCount35 = collisionsCount34\n        val collisionsCount36 =\
    \ collisionsCount35\n        val collisionsCount37 = collisionsCount36\n     \
    \   val collisionsCount38 = collisionsCount37\n        val collisionsCount39 =\
    \ collisionsCount38\n        val collisionsCount40 = collisionsCount39\n     \
    \   val collisionsCount41 = collisionsCount40\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6psa2dfg.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp6psa2dfg.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6psa2dfg.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6psa2dfg.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr0rd04vy.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr0rd04vy.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr0rd04vy.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr0rd04vy.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr0rd04vy.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^"
  stdout: ''
  timestamp: 1659793153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.zip(carsRight).filter(_._1\
    \ == _._2).length\n        collisions\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpopa96pqk.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpopa96pqk.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpopa96pqk.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpopa96pqk.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpopa96pqk.scala:16:58\
    \ --"
  stdout: ''
  timestamp: 1659793155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(10), Vector.random(10)))\n        val carsLeft = cars.filter(_.p1.x\
    \ < _.p2.x)\n        val carsRight = cars.filter(_.p1.x > _.p2.x)\n        val\
    \ carsCollisions = carsLeft.filter(_.p1.x == _.p2.x).length + carsRight.filter(_.p1.x\
    \ == _.p2.x).length\n        carsCollisions\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8rviytuf.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m10\e[0m), Vector.random(\e\
    [31m10\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8rviytuf.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m10\e[0m), Vector.random(\e[31m10\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8rviytuf.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m10\e[0m), Vector.random(\e[31m10\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8rviytuf.scala:13:73\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m10\e\
    [0m), Vector.random(\e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m                  \
    \                                                ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp8rviytuf.scala:14:35\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcarsLeft\e[0m = ca"
  stdout: ''
  timestamp: 1659793161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.zip(carsRight).filter(_._1._1\
    \ == _._1._2).length\n        collisions\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl9tnosof.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpl9tnosof.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl9tnosof.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl9tnosof.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl9tnosof.scala:16:58\
    \ --"
  stdout: ''
  timestamp: 1659793165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.HashSet[Car]()\n\
    \        val collisions = mutable.HashSet[Car]()\n        val collisionsSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFar = mutable.HashSet[Car]()\n\
    \        val collisionsSoFarSoFarSoFar = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar =\
    \ mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuk7b_dm9.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.HashSet[\e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuk7b_dm9.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.HashSet[\e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuk7b_dm9.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.HashSet[\e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuk7b_dm9.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.HashSet[\e[35mCar\e"
  stdout: ''
  timestamp: 1659793165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzvqfsutg.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzvqfsutg.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => Vector.tabulate(n)(\e[36mk\e[0m => Vector.tabulate(n)(\e[36ml\e\
    [0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e[36mn\e[0m => Vector.tabulate(n)(\e\
    [36mo\e[0m => Vector.tabulate(n)(\e[36mp\e[0m => Vector.tabulate(n)(\e[36mq\e\
    [0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e[36ms\e[0m => Vector.tabulate(n)(\e\
    [36mt\e[0m => Vector.tabulate(n)(\e[36mu\e[0m => Vector.tabulate(n)(\e[36mv\e\
    [0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e[36mx\e[0m => Vector.tabulate(n)(\e\
    [36my\e[0m => Vector.tabulate(n)(\e[36mz\e[0m => Vector.tabulate(n)(\e[36ma\e\
    [0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e[36mc\e[0m => Vector.tabulate(n)(\e\
    [36md\e[0m => Vector.tabulate(n)(\e[36me\e[0m => Vector.tabulate(n)(\e[36mf\e\
    [0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e[36mh\e[0m => Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.tabulate(n)(\e[36mk\e\
    [0m => Vector.tabulate(n)(\e[36ml\e[0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e\
    [36mn\e[0m => Vector.tabulate(n)(\e[36mo\e[0m => Vector.tabulate(n)(\e[36mp\e\
    [0m => Vector.tabulate(n)(\e[36mq\e[0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e\
    [36ms\e[0m => Vector.tabulate(n)(\e[36mt\e[0m => Vector.tabulate(n)(\e[36mu\e\
    [0m => Vector.tabulate(n)(\e[36mv\e[0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e\
    [36mx\e[0m => Vector.tabulate(n)(\e[36my\e[0m => Vector.tabulate(n)(\e[36mz\e\
    [0m => Vector.tabulate(n)(\e[36ma\e[0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e\
    [36mc\e[0m => Vector.tabulate(n)(\e[36md\e[0m => Vector.tabulate(n)(\e[36me\e\
    [0m => Vector.tabulate(n)(\e[36mf\e[0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e\
    [36mh"
  stdout: ''
  timestamp: 1659793155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2nmsmzf.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel def"
  stdout: ''
  timestamp: 1659793164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp993_qrvx.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp993_qrvx.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFa"
  stdout: ''
  timestamp: 1659793166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var count = 0\n      \
    \  var cars = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9vwrvylu.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mcarsLeft\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvariable\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9vwrvylu.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mvar\e[0m \e[36mcarsRight\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvariable\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9vwrvylu.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mvar\e[0m \e[36mcarsLeft\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvariable\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9vwrvylu.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mvar\e[0m \e[36mcarsRight\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvariable\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9vwrvylu.scala:21:12 -------------"
  stdout: ''
  timestamp: 1659793165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsCount = mutable.Set[Long]()\n        val collisionsCount2\
    \ = mutable.Set[Long]()\n        val collisionsCount3 = mutable.Set[Long]()\n\
    \        val collisionsCount4 = mutable.Set[Long]()\n        val collisionsCount5\
    \ = mutable.Set[Long]()\n        val collisionsCount6 = mutable.Set[Long]()\n\
    \        val collisionsCount7 = mutable.Set[Long]()\n        val collisionsCount8\
    \ = mutable.Set[Long]()\n        val collisionsCount9 = mutable.Set[Long]()\n\
    \        val collisionsCount10 = mutable.Set[Long]()\n        val collisionsCount11\
    \ = mutable.Set[Long]()\n        val collisionsCount12 = mutable.Set[Long]()\n\
    \        val collisionsCount13 = mutable.Set[Long]()\n        val collisionsCount14\
    \ = mutable.Set[Long]()\n        val collisionsCount15 = mutable.Set[Long]()\n\
    \        val collisionsCount16 = mutable.Set[Long]()\n        val collisionsCount17\
    \ = mutable.Set[Long]()\n        val collisionsCount18 = mutable.Set[Long]()\n\
    \        val collisionsCount19 = mutable.Set[Long]()\n        val collisionsCount20\
    \ = mutable.Set[Long]()\n        val collisionsCount21 = mutable.Set[Long]()\n\
    \        val collisionsCount22 = mutable.Set[Long]()\n        val collisionsCount23\
    \ = mutable.Set[Long]()\n        val collisionsCount24 = mutable.Set[Long]()\n\
    \        val collisionsCount25 = mutable.Set[Long]()\n        val collisionsCount26\
    \ = mutable.Set[Long]()\n        val collisionsCount27 = mutable.Set[Long]()\n\
    \        val collisionsCount28 = mutable.Set[Long]()\n        val collisionsCount29\
    \ = mutable.Set[Long]()\n        val collisionsCount30 = mutable.Set[Long]()\n\
    \        val collisionsCount31 = mutable.Set[Long]()\n        val collisionsCount32\
    \ = mutable.Set[Long]()\n        val collisionsCount33 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphekmtgub.scala:47:31 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount33\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphekmtgub.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmphekmtgub.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphekmtgub.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphekmtgub.scala:15:30\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m    "
  stdout: ''
  timestamp: 1659793165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n      \
    \  val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n       \
    \ val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi9h605sj.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi9h605sj.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi9h605sj.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi9h605sj.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e"
  stdout: ''
  timestamp: 1659793166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = 0\n \
    \       val cars = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1\
    \ to n).map(j => new Car(i, j)))\n        val carsLeft = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => new Car(i, j)))\n      \
    \  val carsRight = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1\
    \ to n).map(j => new Car(i, j)))\n        val carsCollisions = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => new Car(i, j)))\n      \
    \  val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1\
    \ to n).map(j => new Car(i, j)))\n        val carsCollisionsRight = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => new Car(i, j)))\n      \
    \  val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1\
    \ to n).map(j => new Car(i, j)))\n        val carsCollisionsRight = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => new Car(i, j)))\n      \
    \  val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1\
    \ to n).map(j => new Car(i, j)))\n        val carsCollisionsRight = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => new Car(i, j)))\n      \
    \  val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1\
    \ to n).map(j => new Car(i, j)))\n        val carsCollisionsRight = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => new Car(i, j)))\n      \
    \  val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1\
    \ to n).map(j => new Car(i, j)))\n        val carsCollisionsRight = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => new Car(i, j)))\n      \
    \  val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1\
    \ to n).map(j => new Car(i, j)))\n        val carsCollisionsRight = mutable.ArrayBuffer(1\
    \ to n\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjjt885p7.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjjt885p7.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcarsCollisionsLeft\e[0m = mutable.ArrayBuffer(\e[31m1\e[0m to n).map(\e\
    [36mi\e[0m => mutable.ArrayBuffer(\e[31m1\e[0m to n).map(\e[36mj\e[0m => \e[33mnew\e\
    [0m \e[35mCar\e[0m(i, j)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsLeft is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjjt885p7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsRight\e[0m\
    \ = mutable.ArrayBuffer(\e[31m1\e[0m to n).map(\e[36mi\e[0m => mutable.ArrayBuffer(\e\
    [31m1\e[0m to n).map(\e[36mj\e[0m => \e[33mnew\e[0m \e[35mCar\e[0m(i, j)))\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsRight is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjjt885p7.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsLeft\e[0m\
    \ = mutable.ArrayBuffer(\e[31m1\e[0m to n).map(\e[36mi\e[0m => mutable.ArrayBuffer(\e\
    [31m1\e[0m to n).map(\e[36mj\e[0m => \e[33mnew\e[0m \e[35mCar\e[0m(i, j)))\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsLeft is already defined as \e[33mvalue\e[0"
  stdout: ''
  timestamp: 1659793165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = 0\n \
    \       val cars = mutable.ListBuffer(1 to n).reverse\n        val carsLeft =\
    \ mutable.ListBuffer(1 to n).reverse\n        val carsRight = mutable.ListBuffer(1\
    \ to n).reverse\n        val carsLeft = carsLeft.drop(1).take(n)\n        val\
    \ carsRight = carsRight.drop(1).take(n)\n        val carsLeft = carsLeft.take(n)\n\
    \        val carsRight = carsRight.take(n)\n        val carsLeft = carsLeft.take(n)\n\
    \        val carsRight = carsRight.take(n)\n        cars.foreach { car =>\n  \
    \          carsLeft.foreach { carLeft =>\n                carsRight.foreach {\
    \ carRight =>\n                    val distanceLeft = carLeft.x - car.x\n    \
    \                val distanceRight = carRight.x - car.x\n                    val\
    \ distanceDiff = distanceRight - distanceLeft\n                    val speedLeft\
    \ = carLeft.speed\n                    val speedRight = carRight.speed\n     \
    \               val speedDiff = speedRight - speedLeft\n                    val\
    \ speedDiffSquared = speedDiff * speedDiff\n                    val speedDiffSquaredDiff\
    \ = speedDiffSquared - speedDiff\n                    if (distanceDiff < 0 &&\
    \ speedDiffSquared < speedDiffSquaredDiff) {\n                        collisions\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \       collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvef19kkj.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = carsLeft.drop(\e\
    [31m1\e[0m).take(n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvef19kkj.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = carsRight.drop(\e[31m1\e\
    [0m).take(n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvef19kkj.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = carsLeft.take(n)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvef19kkj.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = carsRight.take(n)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcarsRight\
    \ is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvef19kkj.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcarsLeft\e[0m = carsLeft.take(n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e["
  stdout: ''
  timestamp: 1659793161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp76_bktbo.scala:44:29 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFar\e[0m = \n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp76_bktbo.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFar is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsSoFar\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp76_bktbo.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFar is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsSoFar\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp76_bktbo.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFar is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsSoFar\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp76_bktbo.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   "
  stdout: ''
  timestamp: 1659793149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgkvxd9q8.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.i"
  stdout: ''
  timestamp: 1659793153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n\
    \        val collisions = mutable.ListBuffer[Int]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mut\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphkc5xbk7.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisions is already defined as \e[33mvalue\e[0m \e[35mcollisions\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphkc5xbk7.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mspeeds\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeeds is already defined as \e[33mvalue\e[0m \e[35mspeeds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphkc5xbk7.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.ListBuffer[\e[35mDouble\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeed is already defined as \e[33mvalue\e[0m \e[35mspeed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphkc5xbk7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mspeeds\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeeds is already defined as \e[33mvalue\e[0m \e[35mspeeds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphkc5xbk7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val carsCollisions = carsLeft.foldLeft(0)((acc,\
    \ car) => acc + (carsRight.contains(car) ? 1 : 0))\n        carsCollisions\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi2q6bky0.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpi2q6bky0.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi2q6bky0.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi2q6bky0.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi2q6bky0.scala:16:95\
    \ --"
  stdout: ''
  timestamp: 1659793167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarIter\
    \ = collisionsSoFar.iterator\n        val collisionsSoFarIterIter = collisionsSoFarIter.iterator\n\
    \        val collisionsSoFarIterIterIter = collisionsSoFarIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIter = collisionsSoFarIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIter = collisionsSoFarIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter =\
    \ collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = collisionsSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpowubmthu.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarIterIterIterIterIterIterIterIterIter\e\
    [0m = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarIterIterIterIterIterIterIterIterIter is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarIterIterIterIterIterIterIterIterIter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpowubmthu.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarIterIterIterIterIterIterIterIterIterIter\e\
    [0m = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter.iterator\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarIterIterIterIterIterIterIterIterIterIter is\
    \ already defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarIterIterIterIterIterIterIterIterIterIter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpowubmthu.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\e\
    [0m = collisionsSoFar\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ is already defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same gro"
  stdout: ''
  timestamp: 1659793167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp08zquf6e.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp08zquf6e.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsLeft is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp08zquf6e.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsRight\e[0m\
    \ = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsRight is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp08zquf6e.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsLeft\e[0m\
    \ = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsLeft is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp08zquf6e.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsRight\e[0m\
    \ = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsRight is alre"
  stdout: ''
  timestamp: 1659793165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.zip(carsRight).count(_._1.x\
    \ == _._1.y)\n        collisions\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppe4koa7q.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppe4koa7q.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppe4koa7q.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppe4koa7q.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppe4koa7q.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft"
  stdout: ''
  timestamp: 1659793167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu98jxb5r.scala:15:4 ----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpu98jxb5r.scala:14:35 --------------------\e[0m\e[0m\n\e[31m14 |\e[0m\
    \        \e[33mvar\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => Vector.tabulate(n)(\e[36mk\e[0m => Vector.tabulate(n)(\e[36ml\e\
    [0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e[36mn\e[0m => Vector.tabulate(n)(\e\
    [36mo\e[0m => Vector.tabulate(n)(\e[36mp\e[0m => Vector.tabulate(n)(\e[36mq\e\
    [0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e[36ms\e[0m => Vector.tabulate(n)(\e\
    [36mt\e[0m => Vector.tabulate(n)(\e[36mu\e[0m => Vector.tabulate(n)(\e[36mv\e\
    [0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e[36mx\e[0m => Vector.tabulate(n)(\e\
    [36my\e[0m => Vector.tabulate(n)(\e[36mz\e[0m => Vector.tabulate(n)(\e[36ma\e\
    [0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e[36mc\e[0m => Vector.tabulate(n)(\e\
    [36md\e[0m => Vector.tabulate(n)(\e[36me\e[0m => Vector.tabulate(n)(\e[36mf\e\
    [0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e[36mh\e[0m => Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.tabulate(n)(\e[36mk\e\
    [0m => Vector.tabulate(n)(\e[36ml\e[0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e\
    [36mn\e[0m => Vector.tabulate(n)(\e[36mo\e[0m => Vector.tabulate(n)(\e[36mp\e\
    [0m => Vector.tabulate(n)(\e[36mq\e[0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e\
    [36ms\e[0m => Vector.tabulate(n)(\e[36mt\e[0m => Vector.tabulate(n)(\e[36mu\e\
    [0m => Vector.tabulate(n)(\e[36mv\e[0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e\
    [36mx\e[0m => Vector.tabulate(n)(\e[36my\e[0m => Vector.tabulate(n)(\e[36mz\e\
    [0m => Vector.tabulate(n)(\e[36ma\e[0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e\
    [36mc\e[0m => Vector.tabulate(n)(\e[36md\e[0m => Vector.tabulate(n)(\e[36me\e\
    [0m => Vector.tabulate(n)(\e[36mf\e[0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e\
    [36mh"
  stdout: ''
  timestamp: 1659793168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsCollision = mutable.ListBuffer[Long]()\n        val carsCollisionLeft\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionRight = mutable.ListBuffer[Long]()\n\
    \        val carsCollisionCollision = mutable.ListBuffer[Long]()\n        val\
    \ carsCollisionCollisionLeft = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionRight\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollision =\
    \ mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionLeft\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionRight\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollision\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionLeft\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionRight\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollision\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionLeft\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionRight\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollision\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionLeft\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionRight\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionCollision\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionCollisionLeft\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionCollisionRight\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionCollision\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionCollisionLeft\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionCollisionRight\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollision\
    \ = mutable.ListBuffer[Long]()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp95j7jso_.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionCollisionCollisionCollisionCollisionCollisionCollision\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionCollisionCollisionCollisionCollisionCollisionCollision\
    \ is already defined as \e[33mvalue\e[0m \e[35mcarsCollisionCollisionCollisionCollisionCollisionCollisionCollision\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp95j7jso_.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionCollisionCollisionCollisionCollisionCollisionCollisionLeft\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionCollisionCollisionCollisionCollisionCollisionCollisionLeft\
    \ is already defined as \e[33mvalue\e[0m \e[35mcarsCollisionCollisionCollisionCollisionCollisionCollisionCollisionLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp95j7jso_.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionCollisionCollisionCollisionCollisionCollisionCollisionRight\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionCollisionCollisionCollisionCollisionCollisionCollisionRight\
    \ is already defined as \e[33mvalue\e[0m \e[35mcarsCollisionCollisionCollisionCollisionCollisionCollisionCollisionRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded method"
  stdout: ''
  timestamp: 1659793165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val collisions = carsLeft.zip(carsRight).filter(_._1 == _._2).length\n\
    \        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaknxkyu9.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => i)\n\e[31m\e[31m   |\e[0m           \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \      Found:    (n : Long)\n\e[31m   |\e[0m                                 \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaknxkyu9.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaknxkyu9.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaknxkyu9.scala:16:58\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = carsLeft.zip(carsRight).filter(_._1 == _._2).length\n\e\
    [31m\e[31m   |\e[0m                                                        ^^^^\e\
    [0m\n\e[31m   |\e[0m                                         value _1 is not a\
    \ member of Int\n4 errors found\n"
  stdout: ''
  timestamp: 1659793168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val collisions = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuc1bv2fz.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuc1bv2fz.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuc1bv2fz.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuc1bv2fz.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuc1bv2fz.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collided = mutable.Set.empty[Car]\n\
    \        val collisions = mutable.Set.empty[Car]\n        val collisionCount =\
    \ 0\n        val carsLeft = cars.takeWhile(_ => !collided.contains(_))\n     \
    \   val carsRight = cars.dropWhile(_ => !collided.contains(_))\n        carsLeft.foreach(c\
    \ => collided += c)\n        carsRight.foreach(c => collided += c)\n        carsLeft.foreach(c\
    \ => {\n            collisions += c\n            collisionCount += 1\n       \
    \ })\n        carsRight.foreach(c => {\n            collisions += c\n        \
    \    collisionCount += 1\n        })\n        collisionCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkuk9u8l1.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkuk9u8l1.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkuk9u8l1.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkuk9u8l1.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkuk9u8l1.scala:14:41\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollided"
  stdout: ''
  timestamp: 1659793169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set.empty[Long]\n\
    \        val collide = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collision = mutable.Set.empty[Long]\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp63omhp0e.scala:54:11 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp63omhp0e.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisions is already defined as \e[33mvalue\e[0m \e[35mcollisions\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp63omhp0e.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcollision\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollision is already defined as \e[33mvalue\e[0m \e[35mcollision\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp63omhp0e.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisions is already defined as \e[33mvalue\e[0m \e[35mcollisions\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp63omhp0e.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcollision\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollision is already defined as \e[33mvalue\e[0m \e[35mcollision\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloa"
  stdout: ''
  timestamp: 1659793169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisions = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsBoth = mutable.ListBuffer[Int]()\n        val carsCollisionsBothLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsBothRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsBothBothLeft = mutable.ListBuffer[Int]()\n        val\
    \ carsCollisionsBothRight = mutable.ListBuffer[Int]()\n        val carsCollisionsBothLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsBothRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsBothRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsBothRight = mutable.ListBuffer[Int]()\n        val\
    \ carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsBothRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsBothRight = mutable.ListBuffer[Int]()\n        val\
    \ carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsBothRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsBothRight = mutable.ListBuffer[Int]()\n        val\
    \ carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsBothRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsBothRight = mutable.ListBuffer[Int]()\n        val\
    \ carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n        val \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpb4exv2n6.scala:43:11 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpb4exv2n6.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsBothRight\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsBothRight is already defined as \e[33mvalue\e\
    [0m \e[35mcarsCollisionsBothRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb4exv2n6.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsBothLeft\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsBothLeft is already defined as \e[33mvalue\e\
    [0m \e[35mcarsCollisionsBothLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb4exv2n6.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsBothRight\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsBothRight is already defined as \e[33mvalue\e\
    [0m \e[35mcarsCollisionsBothRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb4exv2n6.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsBothLeft\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1659793168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collided = mutable.Set.empty[Car]\n\
    \        val collisions = mutable.Set.empty[Car]\n        val collisionsCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvynvx89b.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts\e[0m =\
    \ mutable.Map.empty[\e[35mCar\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcollisionsCounts is already defined as \e[33mvalue\e[0m \e[35mcollisionsCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvynvx89b.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts\e[0m = mutable.Map.empty[\e\
    [35mCar\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCounts is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvynvx89b.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts\e[0m =\
    \ mutable.Map.empty[\e[35mCar\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcollisionsCounts is already defined as \e[33mvalue\e[0m \e[35mcollisionsCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvynvx89b.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts\e[0m = mutable.Map.empty[\e\
    [35mCar\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCounts is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvy"
  stdout: ''
  timestamp: 1659793170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.ListBuffer.empty[Long]\n\
    \        val collide = mutable.ListBuffer.empty[Long]\n        val collisions\
    \ = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgb25jgzl.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgb25jgzl.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionCounts\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionCounts is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgb25jgzl.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcollisionCounts\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionCounts is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgb25jgzl.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionCounts\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionCounts is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgb25jgzl.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcollisionCounts\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionCounts is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionCounts\e["
  stdout: ''
  timestamp: 1659793177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.Set[Long]()\n\
    \        val cars = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppaj3l25d.scala:51:11 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmppaj3l25d.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppaj3l25d.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppaj3l25d.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppaj3l25d.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same grou"
  stdout: ''
  timestamp: 1659793137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpehty5pjv.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpehty5pjv.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpehty5pjv.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpehty5pjv.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSo\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsqv7ok0k.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsqv7ok0k.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsqv7ok0k.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsqv7ok0k.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp08zquf6e.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp08zquf6e.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsLeft is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp08zquf6e.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsRight\e[0m\
    \ = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsRight is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp08zquf6e.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsLeft\e[0m\
    \ = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsLeft is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp08zquf6e.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsRight\e[0m\
    \ = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsRight is alre"
  stdout: ''
  timestamp: 1659793165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => new Car(i, j)))\n       \
    \ val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmsld3x21.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmsld3x21.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmsld3x21.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmsld3x21.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuff"
  stdout: ''
  timestamp: 1659793178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(new\
    \ Car)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(new Car)\n        val\
    \ carsRight = mutable.ArrayBuffer.fill(n)(new Car)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp9prx03tr.scala:48:11 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp9prx03tr.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcollisionsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsLeft is already defined as \e[33mvalue\e[0m \e[35mcollisionsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9prx03tr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcollisionsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsRight is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9prx03tr.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcollisionsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsLeft is already defined as \e[33mvalue\e[0m \e[35mcollisionsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9prx03tr.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m"
  stdout: ''
  timestamp: 1659793178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(2), Vector.random(2), Vector.random(2)))\n        val collided\
    \ = mutable.Set[Car]()\n        val colliding = mutable.Set[Car]()\n        val\
    \ collisions = mutable.Set[Car]()\n        val collisionsSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFar = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n      \
    \  val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n       \
    \ val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6sf6jtt4.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6sf6jtt4.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6sf6jtt4.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6sf6jtt4.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1659793180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount33 = \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpao2k_b00.scala:47:31 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount33\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpao2k_b00.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpao2k_b00.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpao2k_b00.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpao2k_b00.scala:15:30\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount\e[0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  \
    \ |"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp993_qrvx.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp993_qrvx.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFa"
  stdout: ''
  timestamp: 1659793166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(x => mutable.ListBuffer(1 to n).map(y => x + y))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val carsLeft = cars.takeWhile(_ => cars.forall(_.forall(_.head\
    \ < _.last)))\n        val carsRight = cars.takeWhile(_ => cars.forall(_.forall(_.last\
    \ > _.head)))\n        carsLeft.foreach(x => carsRight.foreach(y => if (x.head\
    \ < y.last) collisions += 1 ))\n        collisions.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf04apcgj.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n).map(\e[36mx\e[0m => mutable.ListBuffer(\e[31m1\e[0m to n).map(\e\
    [36my\e[0m => x + y))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpf04apcgj.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpovzziy13.scala:33:11 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpovzziy13.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpovzziy13.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in"
  stdout: ''
  timestamp: 1659793179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n\
    \ / 2)(true)\n        val collisions = mutable.ArrayBuffer.fill(n / 2)(false)\n\
    \        val speed = mutable.ArrayBuffer.fill(n / 2)(1.0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(false)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(false)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(false)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(false)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(false)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(false)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(false)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwlkk4m7k.scala:44:22 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpwlkk4m7k.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n\
    \ / \e[31m2\e[0m)(\e[31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwlkk4m7k.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n\
    \ / \e[31m2\e[0m)(\e[31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwlkk4m7k.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n\
    \ / \e[31m2\e[0m)(\e[31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwlkk4m7k.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n\
    \ / \e[31m2\e[0m)(\e[31mfalse\e[0m)\n"
  stdout: ''
  timestamp: 1659793177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptbuldrom.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptbuldrom.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptbuldrom.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptbuldrom.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptbuldrom.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of topl"
  stdout: ''
  timestamp: 1659793179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n      \
    \  val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n       \
    \ val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi9h605sj.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi9h605sj.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi9h605sj.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi9h605sj.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e"
  stdout: ''
  timestamp: 1659793166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptbuldrom.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptbuldrom.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptbuldrom.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptbuldrom.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptbuldrom.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of topl"
  stdout: ''
  timestamp: 1659793179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = cars.filter(_.p2.x\
    \ < cars.head.x)\n        val carsRight = cars.filter(_.p2.x > cars.last.x)\n\
    \        val collide = carsLeft.filter(car => carsRight.exists(car2 => car.collide(car2)))\n\
    \        carsLeft.length + collide.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp749ll96m.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp749ll96m.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp749ll96m.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp749ll96m.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp749ll96m.scala:14:37\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcarsLeft"
  stdout: ''
  timestamp: 1659793181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collided = mutable.Set[Car]()\n\
    \        val colliding = mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n\
    \        val collisionsCount = mutable.Set[Car]()\n        val collisionsCounts\
    \ = mutable.Set[Car]()\n        val collisionsCountOf = mutable.Set[Car]()\n \
    \       val collisionsCountOfs = mutable.Set[Car]()\n        val collisionsCountOfsOf\
    \ = mutable.Set[Car]()\n        val collisionsCountOfsOfs = mutable.Set[Car]()\n\
    \        val collisionsCountOfsOfsOf = mutable.Set[Car]()\n        val collisionsCountOfsOfsOfs\
    \ = mutable.Set[Car]()\n        val collisionsCountOfsOfsOfsOf = mutable.Set[Car]()\n\
    \        val collisionsCountOfsOfsOfsOfs = mutable.Set[Car]()\n        val collisionsCountOfsOfsOfsOfsOf\
    \ = mutable.Set[Car]()\n        val collisionsCountOfsOfsOfsOfsOfs = mutable.Set[Car]()\n\
    \        val collisionsCountOfsOfsOfsOfsOfsOf = mutable.Set[Car]()\n        val\
    \ collisionsCountOfsOfsOfsOfsOfsOfs = mutable.Set[Car]()\n        val collisionsCountOfsOfsOfsOfsOfsOf\
    \ = mutable.Set[Car]()\n        val collisionsCountOfsOfsOfsOfsOfsOfs = mutable.Set[Car]()\n\
    \        val collisionsCountOfsOfsOfsOfsOfsOfsOf = mutable.Set[Car]()\n      \
    \  val collisionsCountOfsOfsOfsOfsOfsOfsOfs = mutable.Set[Car]()\n        val\
    \ collisionsCountOfsOfsOfsOfsOfsOfsOf = mutable.Set[Car]()\n        val collisionsCountOfsOfsOfsOfsOfsOfsOfs\
    \ = mutable.Set[Car]()\n        val collisionsCountOfsOfsOfsOfsOfsOfsOf = mutable.Set\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp88jyz72f.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCountOfsOfsOfsOfsOfsOf\e\
    [0m = mutable.Set[\e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCountOfsOfsOfsOfsOfsOf is already defined as \e\
    [33mvalue\e[0m \e[35mcollisionsCountOfsOfsOfsOfsOfsOf\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp88jyz72f.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsCountOfsOfsOfsOfsOfsOfs\e[0m = mutable.Set[\e[35mCar\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCountOfsOfsOfsOfsOfsOfs is already defined as \e\
    [33mvalue\e[0m \e[35mcollisionsCountOfsOfsOfsOfsOfsOfs\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp88jyz72f.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsCountOfsOfsOfsOfsOfsOfsOf\e[0m = mutable.Set[\e[35mCar\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCountOfsOfsOfsOfsOfsOfsOf is already defined as\
    \ \e[33mvalue\e[0m \e[35mcollisionsCountOfsOfsOfsOfsOfsOfsOf\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp88jyz72f.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsCountOfsOfsOfsOfsOfsOfsOfs\e[0m = mutable.Set[\e[35mCar\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCountOfsOfsOfsOfsOfsOfsOfs is already defined as\
    \ \e[33mvalue\e[0m \e[35mcollisionsCountOfsOfsOfsOfsOfsO"
  stdout: ''
  timestamp: 1659793180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp993_qrvx.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp993_qrvx.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFa"
  stdout: ''
  timestamp: 1659793166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => new Car(Vector.random))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val carsLeft = carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n\
    \        carsLeft.foreach(c => collisions += c.collide(c))\n        carsRight.foreach(c\
    \ => collisions += c.collide(c))\n        collisions.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3phrspj6.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = carsLeft.zip(carsRight)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3phrspj6.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = carsRight.zip(carsLeft)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp3phrspj6.scala:13:35 --------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => \e[33mnew\e[0m \e[35mCar\e[0m(Vector.random))\n\e[31m\e[31m   |\e\
    [0m                                   ^\e[0m\n\e[31m   |\e[0m                \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3phrspj6.scala:13:47 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ \e[33mnew\e[0m \e[35mCar\e[0m(Vector.random))\n\e[31m\e[31m   |\e[0m       \
    \                                        ^^^\e[0m\n\e[31m   |\e[0m           \
    \                                    Not found: type Car\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3phrspj6.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31"
  stdout: ''
  timestamp: 1659793181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarIter\
    \ = collisionsSoFar.iterator\n        val collisionsSoFarIterIter = collisionsSoFarIter.iterator\n\
    \        val collisionsSoFarIterIterIter = collisionsSoFarIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIter = collisionsSoFarIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIter = collisionsSoFarIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter =\
    \ collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = collisionsSoFarIterIter\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_h5jozwv.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarIterIterIterIterIterIterIterIterIter\e\
    [0m = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarIterIterIterIterIterIterIterIterIter is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarIterIterIterIterIterIterIterIterIter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_h5jozwv.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarIterIterIterIterIterIterIterIterIterIter\e\
    [0m = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter.iterator\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarIterIterIterIterIterIterIterIterIterIter is\
    \ already defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarIterIterIterIterIterIterIterIterIterIter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_h5jozwv.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\e\
    [0m = collisionsSoFarIterIter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ is already defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined"
  stdout: ''
  timestamp: 1659793151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        var currentCar = 0\n        var previousCar = 0\n        var currentCollision\
    \ = 0\n        var previousCollision = 0\n        var currentCollisionCount =\
    \ 0\n        var previousCollisionCount = 0\n        var currentCollisionCount2\
    \ = 0\n        var previousCollisionCount2 = 0\n        var currentCollisionCount3\
    \ = 0\n        var previousCollisionCount3 = 0\n        var currentCollisionCount4\
    \ = 0\n        var previousCollisionCount4 = 0\n        var currentCollisionCount5\
    \ = 0\n        var previousCollisionCount5 = 0\n        var currentCollisionCount6\
    \ = 0\n        var previousCollisionCount6 = 0\n        var currentCollisionCount7\
    \ = 0\n        var previousCollisionCount7 = 0\n        var currentCollisionCount8\
    \ = 0\n        var previousCollisionCount8 = 0\n        var currentCollisionCount9\
    \ = 0\n        var previousCollisionCount9 = 0\n        var currentCollisionCount10\
    \ = 0\n        var previousCollisionCount10 = 0\n        var currentCollisionCount11\
    \ = 0\n        var previousCollisionCount11 = 0\n        var currentCollisionCount12\
    \ = 0\n        var previousCollisionCount12 = 0\n        var currentCollisionCount13\
    \ = 0\n        var previousCollisionCount13 = 0\n        var currentCollisionCount14\
    \ = 0\n        var previousCollisionCount14 = 0\n        var currentCollisionCount15\
    \ = 0\n        var previousCollisionCount15 = 0\n        var currentCollisionCount16\
    \ = 0\n        var previousCollisionCount16 = 0\n        var currentCollisionCount17\
    \ = 0\n        var previousCollisionCount17 = 0\n        var currentCollisionCount18\
    \ = 0\n        var previousCollisionCount18 = 0\n        var currentCollisionCount19\
    \ = 0\n        var previousCollisionCount19 = 0\n        var currentCollisionCount20\
    \ = 0\n        var previousCollisionCount20 = 0\n        var currentCollisionCount21\
    \ = 0\n        var previousCollisionCount21 = 0\n        var currentCollisionCount22\
    \ = 0\n        var previousCollisionCount22 = 0\n        var currentCollisionCount23\
    \ = 0\n        var previousCollisionCount23 = 0\n        var currentCollisionCount24\
    \ = 0\n        var previousCollisionCount24 = 0\n        var currentCollisionCount25\
    \ = 0\n        var previousCollisionCount25 = 0\n        var currentCollisionCount26\
    \ = 0\n        var previousCollisionCount26 = 0\n        var currentCollisionCount27\
    \ = 0\n        var previousCollisionCount27 = 0\n        var currentCollisionCount28\
    \ = 0\n        var previousCollisionCount28 = 0\n        var currentCollisionCount29\
    \ = 0\n        var previousCollisionCount29 = 0\n        var currentCollisionCount30\
    \ = 0\n        var previousCollisionCount30 = 0\n        var currentCollisionCount31\
    \ = 0\n        var previousCollisionCount31 = 0\n        var currentCollisionCount32\
    \ = 0\n        var previousCollisionCount32 = 0\n        var currentCollisionCount33\
    \ = 0\n        var previousCollisionCount33 = 0\n        var currentCollisionCount34\
    \ = 0\n        var previousCollisionCount34 = 0\n        var currentCollisionCount35\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa4f114qp.scala:87:4 ----------------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa4f114qp.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpa4f114qp.scala:87:5 ---------------------\e[0m\e[0m\n\e[31m87\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val carsCollisions = carsLeft.zip(\n\
    \            carsRight.zipWithIndex.filter(_._1 == _._2).map(_._2)\n        ).count(_\
    \ == 0)\n        carsCollisions\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_9bcgvt5.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_9bcgvt5.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_9bcgvt5.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_9bcgvt5.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_9bcgvt5.scala:17:44\
    \ --"
  stdout: ''
  timestamp: 1659793182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpovzziy13.scala:33:11 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpovzziy13.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpovzziy13.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in"
  stdout: ''
  timestamp: 1659793179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq1pcwnhv.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq1pcwnhv.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCount is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpq1pcwnhv.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCount is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpq1pcwnhv.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCount is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpq1pcwnhv.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCount is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCount\e["
  stdout: ''
  timestamp: 1659793181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSize = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n \
    \       val collisionsSoFarSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize =\
    \ mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSize\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4vfl79_z.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4vfl79_z.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSize\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4vfl79_z.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4vfl79_z.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of topl"
  stdout: ''
  timestamp: 1659793181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = scala.collection.mutable.ListBuffer.empty[Int]\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsRightToLeft\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsLeftToRight\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsLeftToRightToLeft\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsRightToLeftToRightToLeft\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeft\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq8_k_l94.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpq8_k_l94.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collision = mutable.ListBuffer[Long]()\n\
    \        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val collisions =\
    \ mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val collisions =\
    \ mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val collisions =\
    \ mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val collisions =\
    \ mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val collisions =\
    \ mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val collisions =\
    \ mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mut\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj4qpwm27.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisions is already defined as \e[33mvalue\e[0m \e[35mcollisions\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpj4qpwm27.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcars is already defined as \e[33mvalue\e[0m \e[35mcars\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj4qpwm27.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.ListBuffer[\e[35mDouble\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeed is already defined as \e[33mvalue\e[0m \e[35mspeed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpj4qpwm27.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mspeeds\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeeds is already defined as \e[33mvalue\e[0m \e[35mspeeds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpj4qpwm27.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mcollision\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.zip(carsRight).filter(_._1.collidesWith(_._2)).length\n\
    \        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsy7v5e2u.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsy7v5e2u.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsy7v5e2u.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsy7v5e2u.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsy7v5e2u.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft"
  stdout: ''
  timestamp: 1659793182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzvqfsutg.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzvqfsutg.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => Vector.tabulate(n)(\e[36mk\e[0m => Vector.tabulate(n)(\e[36ml\e\
    [0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e[36mn\e[0m => Vector.tabulate(n)(\e\
    [36mo\e[0m => Vector.tabulate(n)(\e[36mp\e[0m => Vector.tabulate(n)(\e[36mq\e\
    [0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e[36ms\e[0m => Vector.tabulate(n)(\e\
    [36mt\e[0m => Vector.tabulate(n)(\e[36mu\e[0m => Vector.tabulate(n)(\e[36mv\e\
    [0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e[36mx\e[0m => Vector.tabulate(n)(\e\
    [36my\e[0m => Vector.tabulate(n)(\e[36mz\e[0m => Vector.tabulate(n)(\e[36ma\e\
    [0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e[36mc\e[0m => Vector.tabulate(n)(\e\
    [36md\e[0m => Vector.tabulate(n)(\e[36me\e[0m => Vector.tabulate(n)(\e[36mf\e\
    [0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e[36mh\e[0m => Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.tabulate(n)(\e[36mk\e\
    [0m => Vector.tabulate(n)(\e[36ml\e[0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e\
    [36mn\e[0m => Vector.tabulate(n)(\e[36mo\e[0m => Vector.tabulate(n)(\e[36mp\e\
    [0m => Vector.tabulate(n)(\e[36mq\e[0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e\
    [36ms\e[0m => Vector.tabulate(n)(\e[36mt\e[0m => Vector.tabulate(n)(\e[36mu\e\
    [0m => Vector.tabulate(n)(\e[36mv\e[0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e\
    [36mx\e[0m => Vector.tabulate(n)(\e[36my\e[0m => Vector.tabulate(n)(\e[36mz\e\
    [0m => Vector.tabulate(n)(\e[36ma\e[0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e\
    [36mc\e[0m => Vector.tabulate(n)(\e[36md\e[0m => Vector.tabulate(n)(\e[36me\e\
    [0m => Vector.tabulate(n)(\e[36mf\e[0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e\
    [36mh"
  stdout: ''
  timestamp: 1659793155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(new\
    \ Car)\n        val collided = mutable.ArrayBuffer.fill(n)(0)\n        val collisions\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ collisionsSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSo\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4x09st8f.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4x09st8f.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4x09st8f.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is\
    \ already defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4x09st8f.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ is already defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659793182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpovzziy13.scala:33:11 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpovzziy13.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpovzziy13.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in"
  stdout: ''
  timestamp: 1659793179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(10), Vector.random(10)))\n        val collides = mutable.HashSet[Car]()\n\
    \        val collisions = mutable.HashSet[Car]()\n        cars.foreach(c => {\n\
    \            val collide = cars.find(cc => cc.x != c.x && cc.y != c.y && cc.x\
    \ + cc.y > c.x + c.y)\n            if (collide.isDefined) {\n                collides\
    \ += collide.get\n                collisions += c\n            }\n        })\n\
    \        collisions.size\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpng1cqwnp.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m10\e[0m), Vector.random(\e\
    [31m10\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpng1cqwnp.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m10\e[0m), Vector.random(\e[31m10\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpng1cqwnp.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m10\e[0m), Vector.random(\e[31m10\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpng1cqwnp.scala:13:73\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m10\e\
    [0m), Vector.random(\e[31m10\e[0m)))\n\e[31m\e[31m   |\e[0m                  \
    \                                                ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpng1cqwnp.scala:14:39\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollides\e[0m = mu"
  stdout: ''
  timestamp: 1659793184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp08zquf6e.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp08zquf6e.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsLeft is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp08zquf6e.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsRight\e[0m\
    \ = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsRight is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp08zquf6e.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsLeft\e[0m\
    \ = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsLeft is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp08zquf6e.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsRight\e[0m\
    \ = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsRight is alre"
  stdout: ''
  timestamp: 1659793165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzvqfsutg.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzvqfsutg.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => Vector.tabulate(n)(\e[36mk\e[0m => Vector.tabulate(n)(\e[36ml\e\
    [0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e[36mn\e[0m => Vector.tabulate(n)(\e\
    [36mo\e[0m => Vector.tabulate(n)(\e[36mp\e[0m => Vector.tabulate(n)(\e[36mq\e\
    [0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e[36ms\e[0m => Vector.tabulate(n)(\e\
    [36mt\e[0m => Vector.tabulate(n)(\e[36mu\e[0m => Vector.tabulate(n)(\e[36mv\e\
    [0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e[36mx\e[0m => Vector.tabulate(n)(\e\
    [36my\e[0m => Vector.tabulate(n)(\e[36mz\e[0m => Vector.tabulate(n)(\e[36ma\e\
    [0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e[36mc\e[0m => Vector.tabulate(n)(\e\
    [36md\e[0m => Vector.tabulate(n)(\e[36me\e[0m => Vector.tabulate(n)(\e[36mf\e\
    [0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e[36mh\e[0m => Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.tabulate(n)(\e[36mk\e\
    [0m => Vector.tabulate(n)(\e[36ml\e[0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e\
    [36mn\e[0m => Vector.tabulate(n)(\e[36mo\e[0m => Vector.tabulate(n)(\e[36mp\e\
    [0m => Vector.tabulate(n)(\e[36mq\e[0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e\
    [36ms\e[0m => Vector.tabulate(n)(\e[36mt\e[0m => Vector.tabulate(n)(\e[36mu\e\
    [0m => Vector.tabulate(n)(\e[36mv\e[0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e\
    [36mx\e[0m => Vector.tabulate(n)(\e[36my\e[0m => Vector.tabulate(n)(\e[36mz\e\
    [0m => Vector.tabulate(n)(\e[36ma\e[0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e\
    [36mc\e[0m => Vector.tabulate(n)(\e[36md\e[0m => Vector.tabulate(n)(\e[36me\e\
    [0m => Vector.tabulate(n)(\e[36mf\e[0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e\
    [36mh"
  stdout: ''
  timestamp: 1659793155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collided = mutable.Set[Car]()\n\
    \        val colliding = mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n\
    \        val collisionsSoFar = mutable.Set[Car]()\n        val collisionsSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSo\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_me0nxdu.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_me0nxdu.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.Set[\e[35mCar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_me0nxdu.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_me0nxdu.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_me0nxdu.sc"
  stdout: ''
  timestamp: 1659793184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        var collision = 0\n        cars.foreach{ car =>\n            val otherCars\
    \ = cars.filterNot(_ == car)\n            otherCars.foreach{ otherCar =>\n   \
    \             val collision = car.collidesWith(otherCar)\n                if (collision)\
    \ {\n                    collisions += collision\n                }\n        \
    \    }\n        }\n        collisions.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl08vyee3.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl08vyee3.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl08vyee3.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl08vyee3.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl08vyee3.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisio"
  stdout: ''
  timestamp: 1659793187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => new Car(Vector.random))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq4z7_sam.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq4z7_sam.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq4z7_sam.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq4z7_sam.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e"
  stdout: ''
  timestamp: 1659793190
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsLeft = mutable.ListBuffer[Long]()\n        val collisionsRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothLeft = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothRight = mutable.ListBuffer[Long]()\n      \
    \  val collisionsBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothRight =\
    \ mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothRight = mutable.ListBuffer[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphfxpzkoo.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothBoth\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBoth is already defined as \e\
    [33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBoth\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphfxpzkoo.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothBothBothLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBothLeft is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBothLeft\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphfxpzkoo.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothBothRight\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBothRight is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBothRight\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphfxpzkoo.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e\
    [0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m     \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \            Fo"
  stdout: ''
  timestamp: 1659793191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var speed = scala.collection.mutable.ListBuffer[Int]()\n        var speedLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var speedTotal = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ var speedTotalLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ speedTotalRight = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotal\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotal\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotal\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotal\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotalLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotalRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotal\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotalLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotalRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotalTotal\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotalLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotalRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotalTotal\
    \ = scala.collection.mutable.ListBuffer\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwzrtrfdx.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mvar\e[0m \e[36mspeedTotalTotalTotalTotalTotal\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedTotalTotalTotalTotalTotal is already defined as \e[33mvariable\e\
    [0m \e[35mspeedTotalTotalTotalTotalTotal\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwzrtrfdx.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mvar\e[0m \e[36mspeedTotalTotalTotalTotalTotalLeft\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedTotalTotalTotalTotalTotalLeft is already defined as \e\
    [33mvariable\e[0m \e[35mspeedTotalTotalTotalTotalTotalLeft\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwzrtrfdx.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mspeedTotalTotalTotalTotalTotalRight\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedTotalTotalTotalTotalTotalRight is already defined as\
    \ \e[33mvariable\e[0m \e[35mspeedTotalTotalTotalTotalTotalRight\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwzrtrfdx.scala:39:12 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        \e[33mvar\e[0m \e[36mspeedTotalTotalTotalTotalTotalLeft\e[0m =\
    \ scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisions = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsBoth = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsBothLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsBothRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsBothBoth = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n   \
    \     val carsCollisionsBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n     \
    \   val carsCollisionsBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsBothBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n      \
    \  val carsCollisionsBothBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsBothBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsBothBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsBothBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsBothBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsBothBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptvlnb5xb.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsBothBothBothLeft\e\
    [0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcarsCollisionsBothBothBothLeft is already defined as \e[33mvalue\e\
    [0m \e[35mcarsCollisionsBothBothBothLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptvlnb5xb.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsBothBothBothRight\e\
    [0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcarsCollisionsBothBothBothRight is already defined as \e[33mvalue\e\
    [0m \e[35mcarsCollisionsBothBothBothRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptvlnb5xb.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcarsCollisionsBothBothBothBoth\e[0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsBothBothBothBoth is already defined as \e[33mvalue\e\
    [0m \e[35mcarsCollisionsBothBothBothBoth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptvlnb5xb.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsBothBothBothBoth\e\
    [0m = mutable.ArrayBuffer.fill(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcarsCollisionsBothBothBothBoth is already defined as \e[33mvalu"
  stdout: ''
  timestamp: 1659793190
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = 0\n        val collisionsCountPerCar = mutable.Map.empty[Long,\
    \ Long]\n        val collisionsCountPerCarPerCar = mutable.Map.empty[Long, mutable.Map[Long,\
    \ Long]]\n        val collisionsCountPerCarPerCarPerCar = mutable.Map.empty[Long,\
    \ mutable.Map[Long, mutable.Map[Long, Long]]]\n        val collisionsCountPerCarPerCarPerCarPerCar\
    \ = mutable.Map.empty[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ Long]]]]\n        val collisionsCountPerCarPerCarPerCarPerCarPerCar = mutable.Map.empty[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, Long]]]]]\n\
    \        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Map.empty[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ Long]]]]]]\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Map.empty[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, Long]]]]]]]\n        val\
    \ collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Map.empty[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ mutable.Map[Long, mutable.Map[Long, Long]]]]]]]]\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Map.empty[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, Long]]]]]]]]\n\
    \        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Map.empty[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpufqvcyz7.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpufqvcyz7.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar\e\
    [0m = mutable.Map.empty[\e[35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e\
    [35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e\
    [35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]]]]]]]]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ is already defined as \e[33mvalue\e[0m \e[35mcollisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpufqvcyz7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar\e\
    [0m = mutable.Map.empty[\e[35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e\
    [35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e\
    [35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, mutable.Map[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]]]]]]]]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ is already defined as \e[33mvalue\e[0m \e[35mcollisionsCountPerCarPerCarPerCarPe"
  stdout: ''
  timestamp: 1659793193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.Set[Long]()\n\
    \        val cars = mutable.Set[Long]()\n        val speed = mutable.Set[Double]()\n\
    \        val collisionCount = 0\n        val carCount = 0\n        val speedCount\
    \ = 0\n        val speedLimit = 10000.0\n        val speedLimit2 = 10000.0\n \
    \       val speedLimit3 = 10000.0\n        val speedLimit4 = 10000.0\n       \
    \ val speedLimit5 = 10000.0\n        val speedLimit6 = 10000.0\n        val speedLimit7\
    \ = 10000.0\n        val speedLimit8 = 10000.0\n        val speedLimit9 = 10000.0\n\
    \        val speedLimit10 = 10000.0\n        val speedLimit11 = 10000.0\n    \
    \    val speedLimit12 = 10000.0\n        val speedLimit13 = 10000.0\n        val\
    \ speedLimit14 = 10000.0\n        val speedLimit15 = 10000.0\n        val speedLimit16\
    \ = 10000.0\n        val speedLimit17 = 10000.0\n        val speedLimit18 = 10000.0\n\
    \        val speedLimit19 = 10000.0\n        val speedLimit20 = 10000.0\n    \
    \    val speedLimit21 = 10000.0\n        val speedLimit22 = 10000.0\n        val\
    \ speedLimit23 = 10000.0\n        val speedLimit24 = 10000.0\n        val speedLimit25\
    \ = 10000.0\n        val speedLimit26 = 10000.0\n        val speedLimit27 = 10000.0\n\
    \        val speedLimit28 = 10000.0\n        val speedLimit29 = 10000.0\n    \
    \    val speedLimit30 = 10000.0\n        val speedLimit31 = 10000.0\n        val\
    \ speedLimit32 = 10000.0\n        val speedLimit33 = 10000.0\n        val speedLimit34\
    \ = 10000.0\n        val speedLimit35 = 10000.0\n        val speedLimit36 = 10000.0\n\
    \        val speedLimit37 = 10000.0\n        val speedLimit38 = 10000.0\n    \
    \    val speedLimit39 = 10000.0\n        val speedLimit40 = 10000.0\n        val\
    \ speedLimit41 = 10000.0\n        val speedLimit42 = 10000.0\n        val speedLimit43\
    \ = 10000.0\n        val speedLimit44 = 10000.0\n        val speedLimit45 = 10000.0\n\
    \        val speedLimit46 = 10000.0\n        val speedLimit47 = 10000.0\n    \
    \    val speedLimit48 = 10000.0\n        val speedLimit49 = 10000.0\n        val\
    \ speedLimit50 = 10000.0\n        val speedLimit51 = 10000.0\n        val speedLimit52\
    \ = 10000.0\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpnpxr8cew.scala:71:11 ---------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnpxr8cew.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnpxr8cew.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpnpxr8cew.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.Set[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpnpxr8cew.scala:72:5 ---------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793190
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = mutable.ListBuffer(1 to n)\n        var cars2 = mutable.ListBuffer(1\
    \ to n)\n        var cars3 = mutable.ListBuffer(1 to n)\n        var cars4 = mutable.ListBuffer(1\
    \ to n)\n        var cars5 = mutable.ListBuffer(1 to n)\n        var cars6 = mutable.ListBuffer(1\
    \ to n)\n        var cars7 = mutable.ListBuffer(1 to n)\n        var cars8 = mutable.ListBuffer(1\
    \ to n)\n        var cars9 = mutable.ListBuffer(1 to n)\n        var cars10 =\
    \ mutable.ListBuffer(1 to n)\n        var cars11 = mutable.ListBuffer(1 to n)\n\
    \        var cars12 = mutable.ListBuffer(1 to n)\n        var cars13 = mutable.ListBuffer(1\
    \ to n)\n        var cars14 = mutable.ListBuffer(1 to n)\n        var cars15 =\
    \ mutable.ListBuffer(1 to n)\n        var cars16 = mutable.ListBuffer(1 to n)\n\
    \        var cars17 = mutable.ListBuffer(1 to n)\n        var cars18 = mutable.ListBuffer(1\
    \ to n)\n        var cars19 = mutable.ListBuffer(1 to n)\n        var cars20 =\
    \ mutable.ListBuffer(1 to n)\n        var cars21 = mutable.ListBuffer(1 to n)\n\
    \        var cars22 = mutable.ListBuffer(1 to n)\n        var cars23 = mutable.ListBuffer(1\
    \ to n)\n        var cars24 = mutable.ListBuffer(1 to n)\n        var cars25 =\
    \ mutable.ListBuffer(1 to n)\n        var cars26 = mutable.ListBuffer(1 to n)\n\
    \        var cars27 = mutable.ListBuffer(1 to n)\n        var cars28 = mutable.ListBuffer(1\
    \ to n)\n        var cars29 = mutable.ListBuffer(1 to n)\n        var cars30 =\
    \ mutable.ListBuffer(1 to n)\n        var cars31 = mutable.ListBuffer(1 to n)\n\
    \        var cars32 = mutable.ListBuffer(1 to n)\n        var cars33 = mutable.ListBuffer(1\
    \ to n)\n        var cars34 = mutable.ListBuffer(1 to n)\n        var cars35 =\
    \ mutable.ListBuffer(1 to n)\n        var cars36 = mutable.ListBuffer(1 to n)\n\
    \        var cars37 = mutable.ListBuffer(1 to n)\n        var cars38 = mutable.ListBuffer(1\
    \ to n)\n        var cars39 = mutable.ListBuffer(1 to n)\n        var cars40 =\
    \ mutable.ListBuffer(1 to n)\n        var cars41 = mutable.ListBuffer(1 to n)\n\
    \        var cars42 = mutable.ListBuffer(1 to n)\n        var cars43 = mutable.ListBuffer(1\
    \ to n)\n        var cars44 = mutable.List\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5vroolne.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcars\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5vroolne.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mcars2\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5vroolne.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mcars3\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5vroolne.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mcars4\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5vroolne.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mcars5\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5vroolne.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mcars6\e[0m = mutable.ListBuffer(\e\
    ["
  stdout: ''
  timestamp: 1659793191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp26a46d2o.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mcarsLeft\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvariable\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp26a46d2o.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mvar\e[0m \e[36mcarsRight\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvariable\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp26a46d2o.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mvar\e[0m \e[36mcarsLeft\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvariable\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp26a46d2o.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mvar\e[0m \e[36mcarsRight\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvariable\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp26a46d2o.scala:21:12 -------------"
  stdout: ''
  timestamp: 1659793192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => new Car(i))\n        val carsLeft = cars.takeRight(n)\n        val carsRight\
    \ = cars.dropRight(n)\n        val carsCollisions = carsLeft.zip(carsRight).filter(_._1.collides(_._1)).length\n\
    \        carsCollisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0dvixkwj.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => \e[33mnew\e[0m \e[35mCar\e[0m(i))\n\e\
    [31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0dvixkwj.scala:13:47 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => \e[33mnew\e[0m \e[35mCar\e[0m(i))\n\e[31m\e[31m   |\e[0m       \
    \                                        ^^^\e[0m\n\e[31m   |\e[0m           \
    \                                    Not found: type Car\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0dvixkwj.scala:14:38 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = cars.takeRight(n)\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      Found:    (n : Long)\n\e[31m   |\e[0m\
    \                                      Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0dvixkwj.scala:15:39 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = cars.dropRight(n)\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       Found:    (n : Long)\n\e[31m   |\e[0m\
    \                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0dvixkwj.scala:16:65 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisions\e[0m = carsLeft.zip(carsRight).fi"
  stdout: ''
  timestamp: 1659793194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprmoyppsy.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprmoyppsy.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprmoyppsy.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprmoyppsy.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.emp"
  stdout: ''
  timestamp: 1659793193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var collisionsCount = 0\n        var collisionsCount2 = 0\n        var\
    \ collisionsCount3 = 0\n        var collisionsCount4 = 0\n        var collisionsCount5\
    \ = 0\n        var collisionsCount6 = 0\n        var collisionsCount7 = 0\n  \
    \      var collisionsCount8 = 0\n        var collisionsCount9 = 0\n        var\
    \ collisionsCount10 = 0\n        var collisionsCount11 = 0\n        var collisionsCount12\
    \ = 0\n        var collisionsCount13 = 0\n        var collisionsCount14 = 0\n\
    \        var collisionsCount15 = 0\n        var collisionsCount16 = 0\n      \
    \  var collisionsCount17 = 0\n        var collisionsCount18 = 0\n        var collisionsCount19\
    \ = 0\n        var collisionsCount20 = 0\n        var collisionsCount21 = 0\n\
    \        var collisionsCount22 = 0\n        var collisionsCount23 = 0\n      \
    \  var collisionsCount24 = 0\n        var collisionsCount25 = 0\n        var collisionsCount26\
    \ = 0\n        var collisionsCount27 = 0\n        var collisionsCount28 = 0\n\
    \        var collisionsCount29 = 0\n        var collisionsCount30 = 0\n      \
    \  var collisionsCount31 = 0\n        var collisionsCount32 = 0\n        var collisionsCount33\
    \ = 0\n        var collisionsCount34 = 0\n        var collisionsCount35 = 0\n\
    \        var collisionsCount36 = 0\n        var collisionsCount37 = 0\n      \
    \  var collisionsCount38 = 0\n        var collisionsCount39 = 0\n        var collisionsCount40\
    \ = 0\n        var collisionsCount41 = 0\n        var collisionsCount42 = 0\n\
    \        var collisionsCount43 = 0\n        var collisionsCount44 = 0\n      \
    \  var collisionsCount45 = 0\n        var collisionsCount46 = 0\n        var collisionsCount47\
    \ = 0\n        var collisionsCount48 = 0\n        var collisionsCount49 = 0\n\
    \        var collisionsCount50 = 0\n        var collisionsCount51 = 0\n      \
    \  var collisionsCount52 = 0\n        var collisionsCount53 = 0\n        var collisionsCount54\
    \ = 0\n        var collisionsCount55 = 0\n        var collisionsCount56 = 0\n\
    \        var collisionsCount57 = 0\n        var collisionsCount58 = 0\n      \
    \  var collisionsCount59 = 0\n        var collisionsCount60 = 0\n        var collisionsCount61\
    \ = 0\n        var collisionsCount62 = 0\n        var collisionsCount63 = 0\n\
    \        var collisionsCount64 = 0\n        var collisionsCount65 = 0\n      \
    \  var collisionsCount66 = 0\n        var collisionsCount67 = 0\n        var collisionsCount68\
    \ = 0\n        var collisionsCount69 = 0\n        var collisionsCount70 = 0\n\
    \        var collisionsCount71 = 0\n        var collisionsCount72 = 0\n      \
    \  var collisionsCount73\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp33c39ubq.scala:87:4 ----------------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp33c39ubq.scala:87:5 ---------------------\e[0m\e[0m\n\e[31m87 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSo\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr78u3mc2.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr78u3mc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr78u3mc2.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr78u3mc2.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ArrayBuffer(0)\n        val carsLeft = mutable.ArrayBuffer(1 to n).map(i\
    \ => i)\n        val carsRight = mutable.ArrayBuffer(1 to n).map(i => i)\n   \
    \     val carsLeft = carsLeft.zip(carsRight).map(x => x._1).distinct\n       \
    \ val carsRight = carsLeft.zip(carsRight).map(x => x._2).distinct\n        val\
    \ carsLeft = carsLeft.zip(carsRight).map(x => x._1).distinct\n        val carsRight\
    \ = carsLeft.zip(carsRight).map(x => x._2).distinct\n        val carsLeft = carsLeft.zip(carsRight).map(x\
    \ => x._1).distinct\n        val carsRight = carsLeft.zip(carsRight).map(x =>\
    \ x._2).distinct\n        val carsLeft = carsLeft.zip(carsRight).map(x => x._1).distinct\n\
    \        val carsRight = carsLeft.zip(carsRight).map(x => x._2).distinct\n   \
    \     val carsLeft = carsLeft.zip(carsRight).map(x => x._1).distinct\n       \
    \ val carsRight = carsLeft.zip(carsRight).map(x => x._2).distinct\n        val\
    \ carsLeft = carsLeft.zip(carsRight).map(x => x._1).distinct\n        val carsRight\
    \ = carsLeft.zip(carsRight).map(x => x._2).distinct\n        val carsLeft = carsLeft.zip(carsRight).map(x\
    \ => x._1).distinct\n        val carsRight = carsLeft.zip(carsRight).map(x =>\
    \ x._2).distinct\n        val carsLeft = carsLeft.zip(carsRight).map(x => x._1).distinct\n\
    \        val carsRight = carsLeft.zip(carsRight).map(x => x._2).distinct\n   \
    \     val carsLeft = carsLeft.zip(carsRight).map(x => x._1).distinct\n       \
    \ val carsRight = carsLeft.zip(carsRight).map(x => x._2).distinct\n        val\
    \ carsLeft = carsLeft.zip(carsRight).map(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpemalbjg8.scala:35:51 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = carsLeft.zip(carsRight).map(\n\
    \e[31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpemalbjg8.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcarsLeft\e[0m = carsLeft.zip(carsRight).map(\e[36mx\e[0m => x._1).distinct\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpemalbjg8.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = carsLeft.zip(carsRight).map(\e\
    [36mx\e[0m => x._2).distinct\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpemalbjg8.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = carsLeft.zip(carsRight).map(\e\
    [36mx\e[0m => x._1).distinct\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpemalbjg8.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e["
  stdout: ''
  timestamp: 1659793193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => new Car(Vector.random(100), Vector.random(100)))\n        val collisions\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjlw4xiwi.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjlw4xiwi.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjlw4xiwi.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjlw4xiwi.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFa"
  stdout: ''
  timestamp: 1659793194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar2\
    \ = mutable.Set[Long]()\n        val collisionsSoFar3 = mutable.Set[Long]()\n\
    \        val collisionsSoFar4 = mutable.Set[Long]()\n        val collisionsSoFar5\
    \ = mutable.Set[Long]()\n        val collisionsSoFar6 = mutable.Set[Long]()\n\
    \        val collisionsSoFar7 = mutable.Set[Long]()\n        val collisionsSoFar8\
    \ = mutable.Set[Long]()\n        val collisionsSoFar9 = mutable.Set[Long]()\n\
    \        val collisionsSoFar10 = mutable.Set[Long]()\n        val collisionsSoFar11\
    \ = mutable.Set[Long]()\n        val collisionsSoFar12 = mutable.Set[Long]()\n\
    \        val collisionsSoFar13 = mutable.Set[Long]()\n        val collisionsSoFar14\
    \ = mutable.Set[Long]()\n        val collisionsSoFar15 = mutable.Set[Long]()\n\
    \        val collisionsSoFar16 = mutable.Set[Long]()\n        val collisionsSoFar17\
    \ = mutable.Set[Long]()\n        val collisionsSoFar18 = mutable.Set[Long]()\n\
    \        val collisionsSoFar19 = mutable.Set[Long]()\n        val collisionsSoFar20\
    \ = mutable.Set[Long]()\n        val collisionsSoFar21 = mutable.Set[Long]()\n\
    \        val collisionsSoFar22 = mutable.Set[Long]()\n        val collisionsSoFar23\
    \ = mutable.Set[Long]()\n        val collisionsSoFar24 = mutable.Set[Long]()\n\
    \        val collisionsSoFar25 = mutable.Set[Long]()\n        val collisionsSoFar26\
    \ = mutable.Set[Long]()\n        val collisionsSoFar27 = mutable.Set[Long]()\n\
    \        val collisionsSoFar28 = mutable.Set[Long]()\n        val collisionsSoFar29\
    \ = mutable.Set[Long]()\n        val collisionsSoFar30 = mutable.Set[Long]()\n\
    \        val collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8q6pwx4g.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8q6pwx4g.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8q6pwx4g.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp8q6pwx4g.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8q6pwx4g.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.i"
  stdout: ''
  timestamp: 1659793195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val carsCollisions = carsLeft.zip(carsRight).filter(_._1._\
    \ == _._1._).length\n        carsCollisions\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2gt0ur8s.scala:16:65 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisions\e[0m = carsLeft.zip(carsRight).filter(_._1._\
    \ == _._1._).length\n\e[31m\e[31m   |\e[0m                                   \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \            an identifier expected, but '_' found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2gt0ur8s.scala:13:35 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2gt0ur8s.scala:13:59 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e\
    [0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m     \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2gt0ur8s.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2gt"
  stdout: ''
  timestamp: 1659793196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3_ncjor4.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mspeedsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsLeft is already defined as \e[33mvalue\e[0m \e[35mspeedsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mspeedsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsRight is already defined as \e[33mvalue\e[0m \e[35mspeedsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mspeedsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsLeft is already defined as \e[33mvalue\e[0m \e[35mspeedsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mspeedsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsRight is already defined as \e[33mvalue\e[0m \e[35mspeedsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mspeedsLeft\e[0m"
  stdout: ''
  timestamp: 1659793152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => new Car(Vector.random(100), Vector.random(100)))\n        val collisions\
    \ = mutable.ListBuffer.empty[Long]\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        carsLeft.foreach(c => carsRight.foreach(d\
    \ => {\n            val collision = c.collidesWith(d)\n            if (collision)\
    \ collisions += collision\n        }))\n        collisions.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkko4vqh4.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => \e[33mnew\e[0m \e[35mCar\e[0m(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkko4vqh4.scala:13:47\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => \e[33mnew\e[0m \e[35mCar\e\
    [0m(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m\
    \   |\e[0m                                               ^^^\e[0m\n\e[31m   |\e\
    [0m                                               Not found: type Car\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkko4vqh4.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkko4vqh4.scala:15:38 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = cars.takeRight(n)\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      Found:    (n : Long)\n\e[31m   |\e[0m\
    \                                      Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpkko4vqh4.scala:16:39 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcars"
  stdout: ''
  timestamp: 1659793195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2nmsmzf.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel def"
  stdout: ''
  timestamp: 1659793164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => Car(i, j)))\n        val\
    \ collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0u21mw0_.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0u21mw0_.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0u21mw0_.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0u21mw0_.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = mutable.ArrayBuffer(1 to n).map(x => mutable.ArrayBuffer(1\
    \ to n).map(y => 0))\n        cars.foreach(x => cars.foreach(y => cars(y) = cars(y)\
    \ + 1))\n        cars.foreach(x => cars.foreach(y => cars(y) = cars(y) - 1))\n\
    \        cars.foreach(x => cars.foreach(y => cars(y) = cars(y) * -1))\n      \
    \  cars.foreach(x => cars.foreach(y => cars(y) = cars(y) / 2))\n        cars.foreach(x\
    \ => cars.foreach(y => cars(y) = cars(y) * 2))\n        cars.foreach(x => cars.foreach(y\
    \ => cars(y) = cars(y) / 2))\n        cars.foreach(x => cars.foreach(y => cars(y)\
    \ = cars(y) * 2))\n        cars.foreach(x => cars.foreach(y => cars(y) = cars(y)\
    \ / 2))\n        cars.foreach(x => cars.foreach(y => cars(y) = cars(y) * 2))\n\
    \        cars.foreach(x => cars.foreach(y => cars(y) = cars(y) / 2))\n       \
    \ cars.foreach(x => cars.foreach(y => cars(y) = cars(y) * 2))\n        cars.foreach(x\
    \ => cars.foreach(y => cars(y) = cars(y) / 2))\n        cars.foreach(x => cars.foreach(y\
    \ => cars(y) = cars(y) * 2))\n        cars.foreach(x => cars.foreach(y => cars(y)\
    \ = cars(y) / 2))\n        cars.foreach(x => cars.foreach(y => cars(y) = cars(y)\
    \ * 2))\n        cars.foreach(x => cars.foreach(y => cars(y) = cars(y) / 2))\n\
    \        cars.foreach(x => cars.foreach(y => cars(y) = cars(y) * 2))\n       \
    \ cars.foreach(x => cars.foreach(y => cars(y) = cars(y) / 2))\n        cars.foreach(x\
    \ => cars.foreach(y => cars(y) = cars(y) * 2))\n        cars.foreach(x => cars.foreach(y\
    \ => cars(y) = cars(y) / 2))\n        cars.foreach(x => cars.foreach(y => cars(y)\
    \ = cars(y) * 2))\n\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxb64lcbb.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcars\e[0m = mutable.ArrayBuffer(\e\
    [31m1\e[0m to n).map(\e[36mx\e[0m => mutable.ArrayBuffer(\e[31m1\e[0m to n).map(\e\
    [36my\e[0m => \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793190
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzvqfsutg.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzvqfsutg.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => Vector.tabulate(n)(\e[36mk\e[0m => Vector.tabulate(n)(\e[36ml\e\
    [0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e[36mn\e[0m => Vector.tabulate(n)(\e\
    [36mo\e[0m => Vector.tabulate(n)(\e[36mp\e[0m => Vector.tabulate(n)(\e[36mq\e\
    [0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e[36ms\e[0m => Vector.tabulate(n)(\e\
    [36mt\e[0m => Vector.tabulate(n)(\e[36mu\e[0m => Vector.tabulate(n)(\e[36mv\e\
    [0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e[36mx\e[0m => Vector.tabulate(n)(\e\
    [36my\e[0m => Vector.tabulate(n)(\e[36mz\e[0m => Vector.tabulate(n)(\e[36ma\e\
    [0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e[36mc\e[0m => Vector.tabulate(n)(\e\
    [36md\e[0m => Vector.tabulate(n)(\e[36me\e[0m => Vector.tabulate(n)(\e[36mf\e\
    [0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e[36mh\e[0m => Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.tabulate(n)(\e[36mk\e\
    [0m => Vector.tabulate(n)(\e[36ml\e[0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e\
    [36mn\e[0m => Vector.tabulate(n)(\e[36mo\e[0m => Vector.tabulate(n)(\e[36mp\e\
    [0m => Vector.tabulate(n)(\e[36mq\e[0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e\
    [36ms\e[0m => Vector.tabulate(n)(\e[36mt\e[0m => Vector.tabulate(n)(\e[36mu\e\
    [0m => Vector.tabulate(n)(\e[36mv\e[0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e\
    [36mx\e[0m => Vector.tabulate(n)(\e[36my\e[0m => Vector.tabulate(n)(\e[36mz\e\
    [0m => Vector.tabulate(n)(\e[36ma\e[0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e\
    [36mc\e[0m => Vector.tabulate(n)(\e[36md\e[0m => Vector.tabulate(n)(\e[36me\e\
    [0m => Vector.tabulate(n)(\e[36mf\e[0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e\
    [36mh"
  stdout: ''
  timestamp: 1659793155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Car]()\n\
    \        val collisionCount = 0\n        val carsLeft = cars.takeRight(n)\n  \
    \      val carsRight = cars.dropRight(n)\n        val carsCollisions = carsLeft.zip(carsRight).filter(_._1.collidesWith(_._2))\n\
    \        carsCollisions.foreach { case (carLeft, carRight) => collisions += carLeft\
    \ }\n        collisionCount += collisions.size\n        collisionCount\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxphbbxec.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxphbbxec.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxphbbxec.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxphbbxec.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxphbbxec.scala:14:37\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisio"
  stdout: ''
  timestamp: 1659793197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(2\
    \ * n)(0)\n        val collisions = mutable.HashSet[Long]()\n        val collisionsCount\
    \ = mutable.HashMap[Long, Long]()\n        val collisionsCount2 = mutable.HashMap[Long,\
    \ Long]()\n        val collisionsCount3 = mutable.HashMap[Long, Long]()\n    \
    \    val collisionsCount4 = mutable.HashMap[Long, Long]()\n        val collisionsCount5\
    \ = mutable.HashMap[Long, Long]()\n        val collisionsCount6 = mutable.HashMap[Long,\
    \ Long]()\n        val collisionsCount7 = mutable.HashMap[Long, Long]()\n    \
    \    val collisionsCount8 = mutable.HashMap[Long, Long]()\n        val collisionsCount9\
    \ = mutable.HashMap[Long, Long]()\n        val collisionsCount10 = mutable.HashMap[Long,\
    \ Long]()\n        val collisionsCount11 = mutable.HashMap[Long, Long]()\n   \
    \     val collisionsCount12 = mutable.HashMap[Long, Long]()\n        val collisionsCount13\
    \ = mutable.HashMap[Long, Long]()\n        val collisionsCount14 = mutable.HashMap[Long,\
    \ Long]()\n        val collisionsCount15 = mutable.HashMap[Long, Long]()\n   \
    \     val collisionsCount16 = mutable.HashMap[Long, Long]()\n        val collisionsCount17\
    \ = mutable.HashMap[Long, Long]()\n        val collisionsCount18 = mutable.HashMap[Long,\
    \ Long]()\n        val collisionsCount19 = mutable.HashMap[Long, Long]()\n   \
    \     val collisionsCount20 = mutable.HashMap[Long, Long]()\n        val collisionsCount21\
    \ = mutable.HashMap[Long, Long]()\n        val collisionsCount22 = mutable.HashMap[Long,\
    \ Long]()\n        val collisionsCount23 = mutable.HashMap[Long, Long]()\n   \
    \     val collisionsCount24 = mutable.HashMap[Long, Long]()\n        val collisionsCount25\
    \ = mutable.HashMap[Long, Long]()\n        val collisionsCount26 = mutable.HashMap[Long,\
    \ Long]()\n        val collisionsCount27 = mutable.HashMap[Long, Long]()\n   \
    \     val collisionsCount28 = mutable.HashMap[Long, Long]()\n        val collisionsCount29\
    \ = mutable.HashMap[Long, Long]()\n        val collisionsCount30 = mut\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2cw9x0wj.scala:13:30\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Array.fill(\e[31m2\e[0m * n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \     Found:    Long\n\e[31m   |\e[0m                              Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2cw9x0wj.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2cw9x0wj.scala:15:30\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount\e[0m = mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2cw9x0wj.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount2\e[0m =\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2cw9x0wj.scala:17:31 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mcollisionsCount3\e[0m = mutable.HashMap[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer expl"
  stdout: ''
  timestamp: 1659793198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val carsCollisions = carsLeft.foldLeft(0)((acc,\
    \ car) => acc + carsRight.count(car.contains))\n        carsCollisions\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjcrmuqof.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpjcrmuqof.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjcrmuqof.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjcrmuqof.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        cars.foreach { car =>\n            car.foreach\
    \ { car =>\n                val collision = car.foldLeft(0)((acc, car) => acc\
    \ + (car.head == car.last))\n                collisions += collision\n       \
    \     }\n        }\n        collisions.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9jmt3n69.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n).map(\e[36mi\e[0m => mutable.ListBuffer(\e[31m1\e[0m to n).map(\e\
    [36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9jmt3n69.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsLeft = mutable.ListBuffer.empty[Long]\n        val collisionsRight\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothLeft = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBoth\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothRight = mutable.ListBuffer.empty[Long]\n      \
    \  val collisionsBothBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothRight =\
    \ mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzph0khec.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzph0khec.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothBothBoth\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBoth is already defined as \e\
    [33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBoth\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzph0khec.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothBothBothLeft\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBothLeft is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBothLeft\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzph0khec.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothBothRight\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBothRight is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBothRight\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzph0khec.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m     "
  stdout: ''
  timestamp: 1659793204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2nmsmzf.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel def"
  stdout: ''
  timestamp: 1659793164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector(i, j)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount33\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnek3634q.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpnek3634q.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => Vector(i, j)))\n\e[31m\e[31m   |\e[0m                          \
    \         ^\e[0m\n\e[31m   |\e[0m                                   Found:   \
    \ (n : Long)\n\e[31m   |\e[0m                                   Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnek3634q.scala:13:59\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector(i,\
    \ j)))\n\e[31m\e[31m   |\e[0m                                                \
    \           ^\e[0m\n\e[31m   |\e[0m                                          \
    \          Found:    (n : Long)\n\e[31m   |\e[0m                             \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnek3634q.scala:14:25 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnek3634q.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                              Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-e"
  stdout: ''
  timestamp: 1659793204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = Vector.fill(n / 2)(Vector.zero)\n        cars(0) = Vector(1.0,\
    \ 0.0)\n        cars(1) = Vector(-1.0, 0.0)\n        cars(2) = Vector(0.0, 1.0)\n\
    \        cars(3) = Vector(0.0, -1.0)\n        cars(4) = Vector(1.0, 1.0)\n   \
    \     cars(5) = Vector(-1.0, 1.0)\n        cars(6) = Vector(1.0, -1.0)\n     \
    \   cars(7) = Vector(-1.0, -1.0)\n        cars(8) = Vector(0.0, 0.0)\n       \
    \ cars(9) = Vector(0.0, 0.0)\n        cars(10) = Vector(1.0, 0.0)\n        cars(11)\
    \ = Vector(-1.0, 0.0)\n        cars(12) = Vector(0.0, 1.0)\n        cars(13) =\
    \ Vector(0.0, -1.0)\n        cars(14) = Vector(1.0, 1.0)\n        cars(15) = Vector(-1.0,\
    \ 1.0)\n        cars(16) = Vector(1.0, -1.0)\n        cars(17) = Vector(-1.0,\
    \ -1.0)\n        cars(18) = Vector(0.0, 0.0)\n        cars(19) = Vector(0.0, 0.0)\n\
    \        cars(20) = Vector(1.0, 0.0)\n        cars(21) = Vector(-1.0, 0.0)\n \
    \       cars(22) = Vector(0.0, 1.0)\n        cars(23) = Vector(0.0, -1.0)\n  \
    \      cars(24) = Vector(1.0, 1.0)\n        cars(25) = Vector(-1.0, 1.0)\n   \
    \     cars(26) = Vector(1.0, -1.0)\n        cars(27) = Vector(-1.0, -1.0)\n  \
    \      cars(28) = Vector(0.0, 0.0)\n        cars(29) = Vector(0.0, 0.0)\n    \
    \    cars(30) = Vector(1.0, 0.0)\n        cars(31) = Vector(-1.0, 0.0)\n     \
    \   cars(32) = Vector(0.0, 1.0)\n        cars(33) = Vector(0.0, -1.0)\n      \
    \  cars(34) = Vector(1.0, 1.0)\n        cars(35) = Vector(-1.0, 1.0)\n       \
    \ cars(36) = Vector(1.0, -1.0)\n        cars(37) = Vector(-1.0, -1.0)\n      \
    \  cars(38) = Vector(0.0, 0.0)\n        cars(39) = Vector(0.0, 0.0)\n        cars(40)\
    \ = Vector(1.0, 0.0)\n        cars(41) = Vector(-1.0, 0.0)\n        cars(42) =\
    \ Vector(0.0, 1.0)\n        cars(43) = Vector(0.0, -1.0)\n        cars(44) = Vector(1.0,\
    \ 1.0)\n        cars(45) = Vector(-1.0, 1.0)\n        cars(46) = Vector(1.0, -1.0)\n\
    \        cars(47) = Vector\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) ==\
    \ (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ohxy9nf.scala:14:31\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcars\e\
    [0m = Vector.fill(n / \e[31m2\e[0m)(Vector.zero)\n\e[31m\e[31m   |\e[0m      \
    \                         ^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \       Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ohxy9nf.scala:14:45\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e\
    [36mcars\e[0m = Vector.fill(n / \e[31m2\e[0m)(Vector.zero)\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ zero is not a member of object scala.collection.immutable.Vector - did you mean\
    \ Vector.from?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ohxy9nf.scala:15:8\
    \ -------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        cars(\e[31m0\e[0m)\
    \ = Vector(\e[31m1.0\e[0m, \e[31m0.0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^\e\
    [0m\n\e[31m   |\e[0mvalue update is not a member of Vector[Nothing] - did you\
    \ mean Vector[Nothing].updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ohxy9nf.scala:16:8\
    \ -------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        cars(\e[31m1\e[0m)\
    \ = Vector(-\e[31m1.0\e[0m, \e[31m0.0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^\e\
    [0m\n\e[31m   |\e[0mvalue update is not a member of Vector[Nothing] - did you\
    \ mean Vector[Nothing].updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ohxy9nf.scala:17:8\
    \ -------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        cars(\e[31m2\e[0m)\
    \ = Vector(\e[31m0.0\e[0m, \e[31m1.0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^\e\
    [0m\n\e[31m   |\e[0mvalue update is not a member of Vector[Nothing] - did you\
    \ mean Vector[Nothing].updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ohxy9nf.scala:18:8\
    \ -------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        cars(\e[31m3\e[0m)\
    \ = Vector(\e[31m0.0\e[0m, -\e[31m1.0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^\e\
    [0m\n\e[31m   |\e[0mvalue update is not a member of Vector[Nothing] - did you\
    \ mean Vec"
  stdout: ''
  timestamp: 1659793210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => new Car(i, j)))\n       \
    \ val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmsld3x21.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmsld3x21.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmsld3x21.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmsld3x21.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuff"
  stdout: ''
  timestamp: 1659793178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set[Car]()\n\
    \        val collide = mutable.Set[Car]()\n        val collide2 = mutable.Set[Car]()\n\
    \        val collide3 = mutable.Set[Car]()\n        val collide4 = mutable.Set[Car]()\n\
    \        val collide5 = mutable.Set[Car]()\n        val collide6 = mutable.Set[Car]()\n\
    \        val collide7 = mutable.Set[Car]()\n        val collide8 = mutable.Set[Car]()\n\
    \        val collide9 = mutable.Set[Car]()\n        val collide10 = mutable.Set[Car]()\n\
    \        val collide11 = mutable.Set[Car]()\n        val collide12 = mutable.Set[Car]()\n\
    \        val collide13 = mutable.Set[Car]()\n        val collide14 = mutable.Set[Car]()\n\
    \        val collide15 = mutable.Set[Car]()\n        val collide16 = mutable.Set[Car]()\n\
    \        val collide17 = mutable.Set[Car]()\n        val collide18 = mutable.Set[Car]()\n\
    \        val collide19 = mutable.Set[Car]()\n        val collide20 = mutable.Set[Car]()\n\
    \        val collide21 = mutable.Set[Car]()\n        val collide22 = mutable.Set[Car]()\n\
    \        val collide23 = mutable.Set[Car]()\n        val collide24 = mutable.Set[Car]()\n\
    \        val collide25 = mutable.Set[Car]()\n        val collide26 = mutable.Set[Car]()\n\
    \        val collide27 = mutable.Set[Car]()\n        val collide28 = mutable.Set[Car]()\n\
    \        val collide29 = mutable.Set[Car]()\n        val collide30 = mutable.Set[Car]()\n\
    \        val collide31 = mutable.Set[Car]()\n        val collide32 = mutable.Set[Car]()\n\
    \        val collide33 = mutable.Set[Car]()\n        val collide34 = mutable.Set[Car]()\n\
    \        val collide35 = mut\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2eu2ybt0.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2eu2ybt0.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2eu2ybt0.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2eu2ybt0.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2eu2ybt0.scala:14:35\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollides"
  stdout: ''
  timestamp: 1659793206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(10), Vector.random(10)))\n        val collides = mutable.Set.empty[Car]\n\
    \        val collisions = mutable.Set.empty[Car]\n        val collisionsCount\
    \ = mutable.Set.empty[Car]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuzj6el1m.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts\e[0m =\
    \ mutable.Map.empty[\e[35mCar\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcollisionsCounts is already defined as \e[33mvalue\e[0m \e[35mcollisionsCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuzj6el1m.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts\e[0m = mutable.Map.empty[\e\
    [35mCar\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCounts is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpuzj6el1m.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts\e[0m =\
    \ mutable.Map.empty[\e[35mCar\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcollisionsCounts is already defined as \e[33mvalue\e[0m \e[35mcollisionsCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuzj6el1m.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCounts\e[0m = mutable.Map.empty[\e\
    [35mCar\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsCounts is already defined as \e[33mvalue\e[0m \e\
    [35mcollisionsCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpuz"
  stdout: ''
  timestamp: 1659793206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount33 = \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpao2k_b00.scala:47:31 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount33\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpao2k_b00.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpao2k_b00.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpao2k_b00.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpao2k_b00.scala:15:30\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount\e[0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  \
    \ |"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr04vw5hl.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr04vw5hl.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr04vw5hl.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr04vw5hl.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^"
  stdout: ''
  timestamp: 1659793205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2nmsmzf.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel def"
  stdout: ''
  timestamp: 1659793164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu98jxb5r.scala:15:4 ----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpu98jxb5r.scala:14:35 --------------------\e[0m\e[0m\n\e[31m14 |\e[0m\
    \        \e[33mvar\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => Vector.tabulate(n)(\e[36mk\e[0m => Vector.tabulate(n)(\e[36ml\e\
    [0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e[36mn\e[0m => Vector.tabulate(n)(\e\
    [36mo\e[0m => Vector.tabulate(n)(\e[36mp\e[0m => Vector.tabulate(n)(\e[36mq\e\
    [0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e[36ms\e[0m => Vector.tabulate(n)(\e\
    [36mt\e[0m => Vector.tabulate(n)(\e[36mu\e[0m => Vector.tabulate(n)(\e[36mv\e\
    [0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e[36mx\e[0m => Vector.tabulate(n)(\e\
    [36my\e[0m => Vector.tabulate(n)(\e[36mz\e[0m => Vector.tabulate(n)(\e[36ma\e\
    [0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e[36mc\e[0m => Vector.tabulate(n)(\e\
    [36md\e[0m => Vector.tabulate(n)(\e[36me\e[0m => Vector.tabulate(n)(\e[36mf\e\
    [0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e[36mh\e[0m => Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.tabulate(n)(\e[36mk\e\
    [0m => Vector.tabulate(n)(\e[36ml\e[0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e\
    [36mn\e[0m => Vector.tabulate(n)(\e[36mo\e[0m => Vector.tabulate(n)(\e[36mp\e\
    [0m => Vector.tabulate(n)(\e[36mq\e[0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e\
    [36ms\e[0m => Vector.tabulate(n)(\e[36mt\e[0m => Vector.tabulate(n)(\e[36mu\e\
    [0m => Vector.tabulate(n)(\e[36mv\e[0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e\
    [36mx\e[0m => Vector.tabulate(n)(\e[36my\e[0m => Vector.tabulate(n)(\e[36mz\e\
    [0m => Vector.tabulate(n)(\e[36ma\e[0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e\
    [36mc\e[0m => Vector.tabulate(n)(\e[36md\e[0m => Vector.tabulate(n)(\e[36me\e\
    [0m => Vector.tabulate(n)(\e[36mf\e[0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e\
    [36mh"
  stdout: ''
  timestamp: 1659793168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ArrayBuffer(0)\n        val collisionsLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsRight = mutable.ArrayBuffer(0)\n        val collisionsBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothRight = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBoth = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothLeft\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothRight = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBoth = mutable.ArrayBuffer(0)\n       \
    \ val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n  \
    \      val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n     \
    \   val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n  \
    \      val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n     \
    \   val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBothLeft\
    \ = mutable.ArrayBuffer(0)\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp3_cp943o.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp3_cp943o.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothLeft\e\
    [0m = mutable.ArrayBuffer(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothLeft is already defined as \e\
    [33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothLeft\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3_cp943o.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothBothRight\e[0m = mutable.ArrayBuffer(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothRight is already defined as\
    \ \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothRight\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3_cp943o.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothBothBoth\e[0m = mutable.ArrayBuffer(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBoth is already defined as \e\
    [33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBoth\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3_cp943o.scala:36:12\
    \ ---------------------------"
  stdout: ''
  timestamp: 1659793202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(2), Vector.random(2), Vector.random(2)))\n        val carsLeft\
    \ = cars.filter(_._1.x < 0)\n        val carsRight = cars.filter(_._1.x > 0)\n\
    \        val carsCollisions = carsLeft.filter(_._2.intersects(_._1).nonEmpty).length\n\
    \        val carsCollisions2 = carsRight.filter(_._2.intersects(_._1).nonEmpty).length\n\
    \        carsCollisions + carsCollisions2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphqienkf7.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m2\e[0m), Vector.random(\e\
    [31m2\e[0m), Vector.random(\e[31m2\e[0m)))\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     Found:    (n : Long)\n\e[31m   |\e[0m                                  \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphqienkf7.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m2\e\
    [0m), Vector.random(\e[31m2\e[0m), Vector.random(\e[31m2\e[0m)))\n\e[31m\e[31m\
    \   |\e[0m                                           ^^^\e[0m\n\e[31m   |\e[0m\
    \                                           Not found: Car\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphqienkf7.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m2\e[0m), Vector.random(\e[31m2\e[0m), Vector.random(\e\
    [31m2\e[0m)))\n\e[31m\e[31m   |\e[0m                                         \
    \      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue random is not a member of object\
    \ scala.collection.immutable.Vector - did you mean Vector.range?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmphqienkf7.scala:13:72 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m2\e[0m), Vector.random(\e[31m2\e[0m), Vector.random(\e\
    [31m2\e[0m)))\n\e[31m\e[31m   |\e[0m                                         \
    \                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue random is not\
    \ a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphqienkf7.sc"
  stdout: ''
  timestamp: 1659793207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(2*n)(new\
    \ Car)\n        val collides = mutable.ListBuffer[Long]()\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount2 = mutable.ListBuffer[Long]()\n        val collisionsCount3\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount4 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount5 = mutable.ListBuffer[Long]()\n        val collisionsCount6\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount7 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount8 = mutable.ListBuffer[Long]()\n        val collisionsCount9\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount10 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount11 = mutable.ListBuffer[Long]()\n        val collisionsCount12\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount13 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount14 = mutable.ListBuffer[Long]()\n        val collisionsCount15\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount16 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount17 = mutable.ListBuffer[Long]()\n        val collisionsCount18\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount19 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount20 = mutable.ListBuffer[Long]()\n        val collisionsCount21\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount22 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount23 = mutable.ListBuffer[Long]()\n        val collisionsCount24\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount25 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount26 = mutable.ListBuffer[Long]()\n        val collisionsCount27\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount28 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount29 = mutable.ListBuffer[Long]()\n        val collisionsCount30\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5xcrr1q9.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5xcrr1q9.scala:13:30 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Array.fill(\e[31m2\e[0m*n)(\e[33mnew\e\
    [0m \e[35mCar\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    Long\n\e[31m   |\e\
    [0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5xcrr1q9.scala:13:39 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Array.fill(\e\
    [31m2\e[0m*n)(\e[33mnew\e[0m \e[35mCar\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                             ^^^\e[0m\n\e[31m   |\e[0m                      \
    \                 Not found: type Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp5xcrr1q9.scala:13:43 -----------------------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Array.fill(\e[31m2\e\
    [0m*n)(\e[33mnew\e[0m \e[35mCar\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \               No ClassTag available for T\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \                                          where:    T is a type variable\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5xcrr1q9.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollides\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5xcrr1q9.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e["
  stdout: ''
  timestamp: 1659793207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val cars = mutable.ListBuffer.fill(n)(new Car)\n        val carsLeft\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRight = mutable.ListBuffer.fill(n)(new\
    \ Car)\n        val carsLeft = cars.toList\n        val carsRight = cars.toList.reverse\n\
    \        val carsLeft = carsLeft.toList\n        val carsRight = carsRight.toList\n\
    \        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n\
    \        val carsLeft = carsLeft.takeWhile(_ => carsLeft.forall(_.speed > 0))\n\
    \        val carsRight = carsRight.takeWhile(_ => carsRight.forall(_.speed > 0))\n\
    \        val carsLeft = carsLeft.takeWhile(_ => carsLeft.forall(_.speed < 0))\n\
    \        val carsRight = carsRight.takeWhile(_ => carsRight.forall(_.speed < 0))\n\
    \        val carsLeft = carsLeft.takeWhile(_ => carsLeft.forall(_.speed > 0))\n\
    \        val carsRight = carsRight.takeWhile(_ => carsRight.forall(_.speed > 0))\n\
    \        val carsLeft = carsLeft.takeWhile(_ => carsLeft.forall(_.speed < 0))\n\
    \        val carsRight = carsRight.takeWhile(_ => carsRight.forall(_.speed < 0))\n\
    \        val carsLeft = carsLeft.takeWhile(_ => carsLeft.forall(_.speed > 0))\n\
    \        val carsRight = carsRight.takeWhile(_ => carsRight.forall(_.speed > 0))\n\
    \        val carsLeft = carsLeft.takeWhile(_ => carsLeft.forall(_.speed < 0))\n\
    \        val carsRight = carsRight.takeWhile(_ => carsRight.forall(_.speed < 0))\n\
    \        val carsLeft = carsLeft.takeWhile(_ => carsLeft.forall(_.speed > 0))\n\
    \        val carsRight = carsRight.takeWhile(_ => carsRight.forall(_.speed > 0))\n\
    \        val carsLeft = carsLeft.takeWhile(_ => carsLeft.forall(_.speed < 0))\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp49rgpr0i.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = cars.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcarsLeft\
    \ is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp49rgpr0i.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcarsRight\e[0m = cars.toList.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp49rgpr0i.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = carsLeft.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcarsLeft\
    \ is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp49rgpr0i.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcarsRight\e[0m = carsRight.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp49rgpr0i.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = carsLeft.reverse\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNo"
  stdout: ''
  timestamp: 1659793206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2nmsmzf.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel def"
  stdout: ''
  timestamp: 1659793164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        cars.foreach(c => {\n            c.foreach(d\
    \ => {\n                val collision = c.zip(d)\n                collision foreach\
    \ { case (c1, c2) => collisions += c1 }\n            })\n        })\n        collisions.toList.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpovl4ylud.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n).map(\e[36mi\e[0m => mutable.ListBuffer(\e[31m1\e[0m to n).map(\e\
    [36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpovl4ylud.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp993_qrvx.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp993_qrvx.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFa"
  stdout: ''
  timestamp: 1659793166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSize = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSize = mutable.Set[Long]()\n     \
    \   val collisionsSoFarSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n      \
    \  val collisionsSoFarSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n   \
    \     val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize =\
    \ mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf_ltaisz.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSizeSizeSizeSizeSize\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSizeSizeSizeSizeSize is already defined as\
    \ \e[33mvalue\e[0m \e[35mcollisionsSoFarSizeSizeSizeSizeSize\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf_ltaisz.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSizeSizeSizeSizeSizeSizeSizeSize\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSizeSizeSizeSizeSizeSizeSizeSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf_ltaisz.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSizeSizeSizeSizeSizeSizeSizeSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf_ltaisz.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        var carsLeft = n\n        var carsRight = n - 1\n        val speed =\
    \ 1.0;\n        val cars = mutable.ListBuffer[Car]()\n        val carsLeft = mutable.ListBuffer[Car]()\n\
    \        val carsRight = mutable.ListBuffer[Car]()\n        val carsCollisions\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsRight = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsRight = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsRight = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsRight = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsRight = mut\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn2qtkdnd.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvariable\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn2qtkdnd.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvariable\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn2qtkdnd.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsLeft\e[0m = mutable.ListBuffer[\e\
    [35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsLeft is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn2qtkdnd.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsRight\e[0m\
    \ = mutable.ListBuffer[\e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsRight is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn2qtkdnd.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36m"
  stdout: ''
  timestamp: 1659793206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq2nmsmzf.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq2nmsmzf.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel def"
  stdout: ''
  timestamp: 1659793164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val carsLeft = mutable.ArrayBuffer.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val carsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val collisions = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n \
    \       val collisionsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val\
    \ carsLeft = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n        val\
    \ carsRight = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n        val\
    \ collisions = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val collisions = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val collisions = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val collisions = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe94ihs0f.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpe94ihs0f.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n\
    \ / \e[31m2\e[0m)(mutable.Queue[\e[35mInt\e[0m]())\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe94ihs0f.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n\
    \ / \e[31m2\e[0m)(mutable.Queue[\e[35mInt\e[0m]())\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe94ihs0f.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ArrayBuffer.fill(n\
    \ / \e[31m2\e[0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisions is already defined as \e[33mvalue\e[0m \e[35mcollisions\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe94ihs0f.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsLeft\e[0m = mutable.ArrayBuffer.fill(n\
    \ / \e[31m2\e[0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcolli"
  stdout: ''
  timestamp: 1659793206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = List[Car]()\n        for( i <- 1 to n){\n            cars =\
    \ cars :+ new Car(math.random,math.random)\n        }\n        cars.foreach(c\
    \ => c.move())\n        cars.foreach(c => c.collide(cars))\n        cars.foreach(c\
    \ => collisions += c.collisions)\n        collisions\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2s2xvhxa.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcars\e[0m = List[\e[35mCar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                        ^^^\e[0m\n\e[31m   |\e[0m\
    \                        Not found: type Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2s2xvhxa.scala:15:23 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m( i <- \e[31m1\e[0m to n){\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2s2xvhxa.scala:16:31\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            cars = cars :+\
    \ \e[33mnew\e[0m \e[35mCar\e[0m(math.random,math.random)\n\e[31m\e[31m   |\e[0m\
    \                               ^^^\e[0m\n\e[31m   |\e[0m                    \
    \           Not found: type Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(Vector.zero), Vector.zero))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n      \
    \  val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n       \
    \ val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp752qmc1k.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp752qmc1k.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp752qmc1k.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp752qmc1k.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e"
  stdout: ''
  timestamp: 1659793209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.foldLeft(0)((acc,\
    \ car) => acc + (car.collide(carsRight)))\n        collisions\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ndyb_s9.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ndyb_s9.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7ndyb_s9.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7ndyb_s9.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ndyb_s9.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft"
  stdout: ''
  timestamp: 1659793210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsLeft = mutable.ListBuffer.empty[Long]\n        val collisionsRight\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothLeft = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBoth\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothRight = mutable.ListBuffer.empty[Long]\n      \
    \  val collisionsBothBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothRight =\
    \ mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBothBothRight = mut\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn0284z19.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpn0284z19.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn0284z19.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpn0284z19.scala:15:29 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mcollisionsLeft\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpn0284z19.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcollisionsRight\e[0m = mutable.ListBuffer.empty[\e"
  stdout: ''
  timestamp: 1659793210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsLeft = mutable.ListBuffer[Long]()\n        val collisionsRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothLeft = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothRight = mutable.ListBuffer[Long]()\n      \
    \  val collisionsBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothRight =\
    \ mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothRight = mutable.ListBuffer[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4cgqlpkt.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4cgqlpkt.scala:35:12 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothBoth\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBoth is already defined as \e\
    [33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBoth\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4cgqlpkt.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothBothBothLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBothLeft is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBothLeft\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4cgqlpkt.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothBothRight\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBothRight is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBothRight\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4cgqlpkt.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0"
  stdout: ''
  timestamp: 1659793210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit2 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit2s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit3\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit3s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit4 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit4s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit5 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit5s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit6\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit6s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit7 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit7s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit8 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit8s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit9\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit9s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit10 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit10s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit11 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit11s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit12\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit12s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit13 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit13s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit14 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit14s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit15\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit15s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit16 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit16s\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnag742xo.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpnag742xo.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnag742xo.scala:14:25 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnag742xo.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnag742xo.scala:16:21 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mspeeds\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpnag742xo.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mspeedLimit\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: mutable\n\e[31m"
  stdout: ''
  timestamp: 1659793209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSo\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsqv7ok0k.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsqv7ok0k.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsqv7ok0k.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsqv7ok0k.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = List[Car]()\n        var carsLeft = List[Car]()\n        var\
    \ carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight\
    \ = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n\
    \        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n   \
    \     var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n      \
    \  var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var\
    \ carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft\
    \ = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n\
    \        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n   \
    \     var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n      \
    \  var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var\
    \ carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight\
    \ = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n\
    \        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n   \
    \     var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n      \
    \  var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var\
    \ carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft\
    \ = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n\
    \        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n   \
    \     var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n      \
    \  var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var\
    \ carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight\
    \ = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n\
    \        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n   \
    \     var carsLeft = List[Car\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp23vaji65.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp23vaji65.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcarsLeft\e[0m = List[\e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvariable\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp23vaji65.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mvar\e[0m \e[36mcarsRight\e[0m = List[\e[35mCar\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcarsRight\
    \ is already defined as \e[33mvariable\e[0m \e[35mcarsRight\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp23vaji65.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcarsLeft\e[0m = List[\e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvariable\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp23vaji65.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mvar\e[0m \e[36mcarsRight\e[0m = List[\e[35mCar\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcarsRight\
    \ is already defined as \e[33mvariable\e[0m \e[35mcarsRight\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp23vaji65.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m "
  stdout: ''
  timestamp: 1659793209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3_ncjor4.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mspeedsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsLeft is already defined as \e[33mvalue\e[0m \e[35mspeedsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mspeedsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsRight is already defined as \e[33mvalue\e[0m \e[35mspeedsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mspeedsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsLeft is already defined as \e[33mvalue\e[0m \e[35mspeedsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mspeedsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsRight is already defined as \e[33mvalue\e[0m \e[35mspeedsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mspeedsLeft\e[0m"
  stdout: ''
  timestamp: 1659793152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(n\
    \ / 2)(math.random)\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val carsRightToLeft = carsRight.zip(carsLeft)\n        val carsLeftToRight\
    \ = carsLeft.zip(carsRight)\n        val carsRightToLeftAndLeftToRight = carsRightToLeft.zip(carsLeftToRight)\n\
    \        val carsRightToLeftAndLeftToRightAndLeftToRight = carsRightToLeftAndLeftToRight.zip(carsLeftToRightAndLeftToRight)\n\
    \        val carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRight = carsRightToLeftAndLeftToRightAndLeftToRight.zip(carsLeftToRightAndLeftToRightAndLeftToRight)\n\
    \        val carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight\
    \ = carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRight.zip(carsLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight)\n\
    \        val carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight\
    \ = carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight.zip(carsLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight)\n\
    \        val carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight\
    \ = carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight.zip(carsLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight)\n\
    \        val carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight\
    \ = carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftTo\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdlc0_kd4.scala:13:30\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Array.fill(n / \e[31m2\e[0m)(math.random)\n\e[31m\e[31m   |\e[0m       \
    \                       ^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \    Found:    Long\n\e[31m   |\e[0m                              Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdlc0_kd4.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdlc0_kd4.scala:15:38 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = cars.takeRight(n)\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   \
    \                                   Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdlc0_kd4.scala:16:39 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = cars.dropRight(n)\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       Found:    (n : Long)\n\e[31m   |\e[0m\
    \                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdlc0_kd4.scala:20:92 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRightToLeftAndLeftToRightAndLeftToRight\e\
    [0m = carsRightToLeftAndLeftToRight.zip(carsLeftToRightAndLeftToRight)\n\e[31m\e\
    [31m   |\e[0m            "
  stdout: ''
  timestamp: 1659793212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        cars.foreach { cars =>\n            cars.foreach\
    \ { car =>\n                cars.foreach { otherCar =>\n                    val\
    \ collision = car.zip(otherCar).forall { case (car1, car2) =>\n              \
    \          (car1._1 - car2._1) * (car1._2 - car2._2) < 0\n                   \
    \ }\n                    if (collision) collisions += car._1\n               \
    \ }\n            }\n        }\n        collisions.toList.size\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwdpnfuyu.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n).map(\e[36mi\e[0m => mutable.ListBuffer(\e[31m1\e[0m to n).map(\e\
    [36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwdpnfuyu.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.zip(carsRight).filter(_._1.collidesWith(_._2)).length\n\
    \        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsy7v5e2u.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e\
    [31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (n : Long)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsy7v5e2u.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsy7v5e2u.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsy7v5e2u.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsy7v5e2u.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft"
  stdout: ''
  timestamp: 1659793182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val collisions = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount4 = mutable.ListBuffer.empty[Long]\n        val collisionsCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount7 = mutable.ListBuffer.empty[Long]\n        val collisionsCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount10 = mutable.ListBuffer.empty[Long]\n        val collisionsCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount13 = mutable.ListBuffer.empty[Long]\n        val collisionsCount14\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount15 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount16 = mutable.ListBuffer.empty[Long]\n        val collisionsCount17\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount18 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount19 = mutable.ListBuffer.empty[Long]\n        val collisionsCount20\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount21 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount22 = mutable.ListBuffer.empty[Long]\n        val collisionsCount23\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount24 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount25 = mutable.ListBuffer.empty[Long]\n        val collisionsCount26\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount27 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount28 = mutable.ListBuffer.empty[Long]\n        val collisionsCount29\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount30 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount31 = mutable.ListBuffer.empty[Long]\n        \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jn6jb2w.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => i)\n\e[31m\e[31m   |\e[0m           \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \      Found:    (n : Long)\n\e[31m   |\e[0m                                 \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jn6jb2w.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_jn6jb2w.scala:15:30 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                              Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jn6jb2w.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount2\e[0m =\
    \ mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jn6jb2w.scala:17:31\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount3\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explana"
  stdout: ''
  timestamp: 1659793214
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgkvxd9q8.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgkvxd9q8.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgkvxd9q8.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.i"
  stdout: ''
  timestamp: 1659793153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set.empty[Long]\n\
    \        val collide = mutable.Set.empty[Long]\n        val collideLeft = mutable.Set.empty[Long]\n\
    \        val collideRight = mutable.Set.empty[Long]\n        val collideLeft =\
    \ mutable.Set.empty[Long]\n        val collideRight = mutable.Set.empty[Long]\n\
    \        val collideLeft = mutable.Set.empty[Long]\n        val collideRight =\
    \ mutable.Set.empty[Long]\n        val collideLeft = mutable.Set.empty[Long]\n\
    \        val collideRight = mutable.Set.empty[Long]\n        val collideLeft =\
    \ mutable.Set.empty[Long]\n        val collideRight = mutable.Set.empty[Long]\n\
    \        val collideLeft = mutable.Set.empty[Long]\n        val collideRight =\
    \ mutable.Set.empty[Long]\n        val collideLeft = mutable.Set.empty[Long]\n\
    \        val collideRight = mutable.Set.empty[Long]\n        val collideLeft =\
    \ mutable.Set.empty[Long]\n        val collideRight = mutable.Set.empty[Long]\n\
    \        val collideLeft = mutable.Set.empty[Long]\n        val collideRight =\
    \ mutable.Set.empty[Long]\n        val collideLeft = mutable.Set.empty[Long]\n\
    \        val collideRight = mutable.Set.empty[Long]\n        val collideLeft =\
    \ mutable.Set.empty[Long]\n        val collideRight = mutable.Set.empty[Long]\n\
    \        val collideLeft = mutable.Set.empty[Long]\n        val collideRight =\
    \ mutable.Set.empty[Long]\n        val collideLeft = mutable.Set.empty[Long]\n\
    \        val collideRight = mutable.Set.empty[Long]\n        val collideLeft =\
    \ mutable.Set.empty[Long]\n        val collideRight = mutable.Set.empty[Long]\n\
    \        val collideLeft = mutable.Set.empty[Long]\n        val collideRight =\
    \ mutable.Set.empty[Long]\n        val collideLeft = mutable.Set.empty[Long]\n\
    \        val collideRight = mutable.Set.empty[Long]\n        val collideLeft =\
    \ mutable.Set.empty[Long]\n        val collideRight = mutable.Set.empty[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw3o8ildr.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcollideLeft\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollideLeft is already defined as \e[33mvalue\e[0m \e[35mcollideLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw3o8ildr.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcollideRight\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollideRight is already defined as \e[33mvalue\e[0m \e[35mcollideRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw3o8ildr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcollideLeft\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollideLeft is already defined as \e[33mvalue\e[0m \e[35mcollideLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw3o8ildr.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcollideRight\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollideRight is already defined as \e[33mvalue\e[0m \e[35mcollideRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw3o8ildr.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mcollideLeft\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[3"
  stdout: ''
  timestamp: 1659793216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollision = mutable.ListBuffer[Int]()\n        val carsCollisionLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionRight\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_zhfs5yi.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_zhfs5yi.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcarsCollisionLeft\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcarsCollisionLeft is already defined as \e[33mvalue\e[0m \e[35mcarsCollisionLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_zhfs5yi.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionRight\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionRight is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_zhfs5yi.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionLeft\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionLeft is already defined as \e[33mvalue\e[0m \e\
    [35mcarsCollisionLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_zhfs5yi.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionRight\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionRight is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionRight\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1659793216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n      \
    \  val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n       \
    \ val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi9h605sj.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi9h605sj.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi9h605sj.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi9h605sj.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e"
  stdout: ''
  timestamp: 1659793166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit2 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit2s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit3\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit3s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit4 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit4s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit5 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit5s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit6\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit6s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit7 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit7s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit8 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit8s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit9\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit9s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit10 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit10s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit11 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit11s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit12\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit12s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit13 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit13s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit14 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit14s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit15\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit15s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit16 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit16s\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnag742xo.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpnag742xo.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnag742xo.scala:14:25 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnag742xo.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnag742xo.scala:16:21 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mspeeds\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpnag742xo.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mspeedLimit\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: mutable\n\e[31m"
  stdout: ''
  timestamp: 1659793209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collided = mutable.Set.empty[Car]\n\
    \        val colliding = mutable.Set.empty[Car]\n        val collisions = mutable.Set.empty[Car]\n\
    \        val collisionsSoFar = mutable.Set.empty[Car]\n        val collisionsSoFarSoFar\
    \ = mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n       \
    \ val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbl_2dtfs.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbl_2dtfs.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.Set.empty[\e[35mCar\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbl_2dtfs.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mCar\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbl_2dtfs.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mCar\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbl_2dtfs.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e"
  stdout: ''
  timestamp: 1659793217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp993_qrvx.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp993_qrvx.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp993_qrvx.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFa"
  stdout: ''
  timestamp: 1659793166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val cars = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n\
    \        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight\
    \ = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n\
    \        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight\
    \ = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n\
    \        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight\
    \ = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n\
    \        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight\
    \ = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n\
    \        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight\
    \ = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n\
    \        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb8lzr1ax.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpb8lzr1ax.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb8lzr1ax.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb8lzr1ax.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb8lzr1ax.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of topl"
  stdout: ''
  timestamp: 1659793215
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n      \
    \  val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n       \
    \ val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi9h605sj.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi9h605sj.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi9h605sj.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi9h605sj.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e"
  stdout: ''
  timestamp: 1659793166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collided = mutable.Set[Car]()\n\
    \        val colliding = mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n\
    \        val collisionsSoFar = mutable.Set[Car]()\n        val collisionsSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSo\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsoazljal.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsoazljal.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.Set[\e[35mCar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsoazljal.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsoazljal.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mCar\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsoazljal.sc"
  stdout: ''
  timestamp: 1659793217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsLeft = mutable.ListBuffer.empty[Long]\n        val collisionsRight\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothLeft = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBoth\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothRight = mutable.ListBuffer.empty[Long]\n      \
    \  val collisionsBothBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothRight =\
    \ mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBothRight = mutable.ListBuffer.empty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfk0oyt2s.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothBoth\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcollisionsBothBothBothBothBothBoth is already defined as \e[33mvalue\e\
    [0m \e[35mcollisionsBothBothBothBothBothBoth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfk0oyt2s.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsBothBothBothBothBothBothLeft\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBothLeft is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBothLeft\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpfk0oyt2s.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsBothBothBothBothBothBothRight\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsBothBothBothBothBothBothRight is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsBothBothBothBothBothBothRight\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfk0oyt2s.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e\
    [0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e\
    [31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659793218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpehty5pjv.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpehty5pjv.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpehty5pjv.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpehty5pjv.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = 0\n \
    \       val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n \
    \       val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val carsCollisions = carsLeft.zip(\n            carsRight\n        ).filter(_._1._1\
    \ == _._1._2).filter(_._1._2 == _._2._1).length\n        val carsCollisionsLeft\
    \ = carsLeft.zip(\n            carsRight\n        ).filter(_._1._1 == _._1._2).filter(_._1._2\
    \ == _._2._2).length\n        val carsCollisionsRight = carsRight.zip(\n     \
    \       carsLeft\n        ).filter(_._1._1 == _._1._2).filter(_._1._2 == _._2._1).length\n\
    \        collisions += carsCollisions\n        collisions += carsCollisionsLeft\n\
    \        collisions += carsCollisionsRight\n        collisions\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfp3lihqs.scala:14:35\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpfp3lihqs.scala:14:59 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfp3lihqs.scala:15:38\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfp3lihqs.scala:16:39\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfp3lihqs.scala:19:19\
    \ --"
  stdout: ''
  timestamp: 1659793218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsCount = mutable.Set[Long]()\n        val collisionsCount2\
    \ = mutable.Set[Long]()\n        val collisionsCount3 = mutable.Set[Long]()\n\
    \        val collisionsCount4 = mutable.Set[Long]()\n        val collisionsCount5\
    \ = mutable.Set[Long]()\n        val collisionsCount6 = mutable.Set[Long]()\n\
    \        val collisionsCount7 = mutable.Set[Long]()\n        val collisionsCount8\
    \ = mutable.Set[Long]()\n        val collisionsCount9 = mutable.Set[Long]()\n\
    \        val collisionsCount10 = mutable.Set[Long]()\n        val collisionsCount11\
    \ = mutable.Set[Long]()\n        val collisionsCount12 = mutable.Set[Long]()\n\
    \        val collisionsCount13 = mutable.Set[Long]()\n        val collisionsCount14\
    \ = mutable.Set[Long]()\n        val collisionsCount15 = mutable.Set[Long]()\n\
    \        val collisionsCount16 = mutable.Set[Long]()\n        val collisionsCount17\
    \ = mutable.Set[Long]()\n        val collisionsCount18 = mutable.Set[Long]()\n\
    \        val collisionsCount19 = mutable.Set[Long]()\n        val collisionsCount20\
    \ = mutable.Set[Long]()\n        val collisionsCount21 = mutable.Set[Long]()\n\
    \        val collisionsCount22 = mutable.Set[Long]()\n        val collisionsCount23\
    \ = mutable.Set[Long]()\n        val collisionsCount24 = mutable.Set[Long]()\n\
    \        val collisionsCount25 = mutable.Set[Long]()\n        val collisionsCount26\
    \ = mutable.Set[Long]()\n        val collisionsCount27 = mutable.Set[Long]()\n\
    \        val collisionsCount28 = mutable.Set[Long]()\n        val collisionsCount29\
    \ = mutable.Set[Long]()\n        val collisionsCount30 = mutable.Set[Long]()\n\
    \        val collisionsCount31 = mutable.Set[Long]()\n        val collisionsCount32\
    \ = mutable.Set[Long]()\n        val collisionsCount33 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphekmtgub.scala:47:31 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount33\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphekmtgub.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmphekmtgub.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphekmtgub.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphekmtgub.scala:15:30\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m    "
  stdout: ''
  timestamp: 1659793165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = mutable.ListBuffer[Int]()\n        var carsLeft = mutable.ListBuffer[Int]()\n\
    \        var carsRight = mutable.ListBuffer[Int]()\n        for( i <- 1 to n )\
    \ {\n            cars += i\n            carsLeft += i\n            carsRight +=\
    \ n\n        }\n        for( i <- 1 to n ) {\n            for( j <- 1 to n ) {\n\
    \                if( i != j ) {\n                    val collision = carsLeft.contains(j)\
    \ || carsRight.contains(i)\n                    if( collision ) {\n          \
    \              collisions += 1\n                    }\n                }\n   \
    \         }\n        }\n        collisions\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ig51ycm.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcars\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1ig51ycm.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1ig51ycm.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1ig51ycm.scala:17:23 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <- \e[31m1\e[0m to n ) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ig51ycm.scala:22:23\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1ig51ycm.scala:23:27 --------------------\e[0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659793218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollision = mutable.ListBuffer[Int]()\n        val carsCollisionCount\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionCount2 = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionCount3 = mutable.ListBuffer[Int]()\n        val carsCollisionCount4\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionCount5 = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionCount6 = mutable.ListBuffer[Int]()\n        val carsCollisionCount7\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionCount8 = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionCount9 = mutable.ListBuffer[Int]()\n        val carsCollisionCount10\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionCount11 = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionCount12 = mutable.ListBuffer[Int]()\n        val carsCollisionCount13\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionCount14 = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionCount15 = mutable.ListBuffer[Int]()\n        val carsCollisionCount16\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionCount17 = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionCount18 = mutable.ListBuffer[Int]()\n        val carsCollisionCount19\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionCount20 = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionCount21 = mutable.ListBuffer[Int]()\n        val carsCollisionCount22\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionCount23 = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionCount24 = mutable.ListBuffer[Int]()\n        val carsCollisionCount25\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionCount26 = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionCount27 = mutable.ListBuffer[Int]()\n        val carsCollisionCount28\
    \ = mut\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph4l43pci.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmph4l43pci.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmph4l43pci.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmph4l43pci.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcarsCollision\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmph4l43pci.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionCount\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmph4l43pci.scala:18:34 ------------------------\e["
  stdout: ''
  timestamp: 1659793217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(2\
    \ * n)(0)\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsCount\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount2 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount3 = mutable.ListBuffer[Long]()\n        val collisionsCount4\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount5 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount6 = mutable.ListBuffer[Long]()\n        val collisionsCount7\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount8 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount9 = mutable.ListBuffer[Long]()\n        val collisionsCount10\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount11 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount12 = mutable.ListBuffer[Long]()\n        val collisionsCount13\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount14 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount15 = mutable.ListBuffer[Long]()\n        val collisionsCount16\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount17 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount18 = mutable.ListBuffer[Long]()\n        val collisionsCount19\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount20 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount21 = mutable.ListBuffer[Long]()\n        val collisionsCount22\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount23 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount24 = mutable.ListBuffer[Long]()\n        val collisionsCount25\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount26 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount27 = mutable.ListBuffer[Long]()\n        val collisionsCount28\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount29 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount30 = mutable.ListBuffer[Long]()\n        val collisionsCount31\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkkj5t461.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkkj5t461.scala:13:30 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Array.fill(\e[31m2\e[0m * n)(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                              Found:    Long\n\e[31m   |\e[0m        \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpkkj5t461.scala:14:25 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkkj5t461.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkkj5t461.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount2\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkkj5t461.scala:17:31\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount3\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m"
  stdout: ''
  timestamp: 1659793218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var count = 0\n      \
    \  var cars = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]()\n\
    \        var carsRight = mutable.ListBuffer[Long]()\n        var carsLeft = mutable.ListBuffer[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp96r2m1wx.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvariable\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp96r2m1wx.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mvar\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvariable\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp96r2m1wx.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mvar\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvariable\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp96r2m1wx.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mvar\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvariable\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp96r2m1wx.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mvar\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1659793218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set.empty[Car]\n\
    \        val collisions = mutable.Set.empty[Car]\n        val collisionsCount\
    \ = 0\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        carsLeft.foreach(car => car.moveRight(1))\n        carsRight.foreach(car\
    \ => car.moveLeft(1))\n        carsLeft.foreach(car => car.collide(carsRight.find(_.x\
    \ == car.x)))\n        carsRight.foreach(car => car.collide(carsLeft.find(_.x\
    \ == car.x)))\n        carsLeft.foreach(car => car.collide(carsRight.find(_.x\
    \ == car.x)))\n        carsRight.foreach(car => car.collide(carsLeft.find(_.x\
    \ == car.x)))\n        carsLeft.foreach(car => car.collide(carsRight.find(_.x\
    \ == car.x)))\n        carsRight.foreach(car => car.collide(carsLeft.find(_.x\
    \ == car.x)))\n        carsLeft.foreach(car => car.collide(carsRight.find(_.x\
    \ == car.x)))\n        carsRight.foreach(car => car.collide(carsLeft.find(_.x\
    \ == car.x)))\n        carsLeft.foreach(car => car.collide(carsRight.find(_.x\
    \ == car.x)))\n        carsRight.foreach(car => car.collide(carsLeft.find(_.x\
    \ == car.x)))\n        carsLeft.foreach(car => car.collide(carsRight.find(_.x\
    \ == car.x)))\n        carsRight.foreach(car => car.collide(carsLeft.find(_.x\
    \ == car.x)))\n        carsLeft.foreach(car => car.collide(carsRight.find(_.x\
    \ == car.x)))\n        carsRight.foreach(car => car.collide(carsLeft.find(_.x\
    \ == car.x)))\n        carsLeft.foreach(car => car.collide(carsRight.find(_.x\
    \ == car.x)))\n        carsRight.foreach(car => car.collide(carsLeft.find(_.x\
    \ == \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4caawc0x.scala:36:65 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        carsRight.foreach(\e[36mcar\e[0m => car.collide(carsLeft.find(_.x\
    \ == \n\e[31m\e[31m   |\e[0m                                                 \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4caawc0x.scala:13:35 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4caawc0x.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4caawc0x.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4caawc0x.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = "
  stdout: ''
  timestamp: 1659793219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => new Car(Vector.random(100), Vector.random(100)))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphvojr7li.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphvojr7li.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphvojr7li.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphvojr7li.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount4 = mutable.ListBuffer.empty[Long]\n        val collisionsCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount7 = mutable.ListBuffer.empty[Long]\n        val collisionsCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount10 = mutable.ListBuffer.empty[Long]\n        val collisionsCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount13 = mutable.ListBuffer.empty[Long]\n        val collisionsCount14\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount15 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount16 = mutable.ListBuffer.empty[Long]\n        val collisionsCount17\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount18 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount19 = mutable.ListBuffer.empty[Long]\n        val collisionsCount20\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount21 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount22 = mutable.ListBuffer.empty[Long]\n        val collisionsCount23\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount24 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount25 = mutable.ListBuffer.empty[Long]\n        val collisionsCount26\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount27 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount28 = mutable.ListBuffer.empty[Long]\n        val collisionsCount29\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount30 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount3\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkc393rp7.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkc393rp7.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m                                 \
    \  ^\e[0m\n\e[31m   |\e[0m                                   Found:    (n : Long)\n\
    \e[31m   |\e[0m                                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkc393rp7.scala:13:59 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkc393rp7.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkc393rp7.scala:15:30 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                              Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-e"
  stdout: ''
  timestamp: 1659793139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val collisions = mutable.Set[Int]()\n        val collisionsCount\
    \ = mutable.Set[Int]()\n        val collisionsCount2 = mutable.Set[Int]()\n  \
    \      val collisionsCount3 = mutable.Set[Int]()\n        val collisionsCount4\
    \ = mutable.Set[Int]()\n        val collisionsCount5 = mutable.Set[Int]()\n  \
    \      val collisionsCount6 = mutable.Set[Int]()\n        val collisionsCount7\
    \ = mutable.Set[Int]()\n        val collisionsCount8 = mutable.Set[Int]()\n  \
    \      val collisionsCount9 = mutable.Set[Int]()\n        val collisionsCount10\
    \ = mutable.Set[Int]()\n        val collisionsCount11 = mutable.Set[Int]()\n \
    \       val collisionsCount12 = mutable.Set[Int]()\n        val collisionsCount13\
    \ = mutable.Set[Int]()\n        val collisionsCount14 = mutable.Set[Int]()\n \
    \       val collisionsCount15 = mutable.Set[Int]()\n        val collisionsCount16\
    \ = mutable.Set[Int]()\n        val collisionsCount17 = mutable.Set[Int]()\n \
    \       val collisionsCount18 = mutable.Set[Int]()\n        val collisionsCount19\
    \ = mutable.Set[Int]()\n        val collisionsCount20 = mutable.Set[Int]()\n \
    \       val collisionsCount21 = mutable.Set[Int]()\n        val collisionsCount22\
    \ = mutable.Set[Int]()\n        val collisionsCount23 = mutable.Set[Int]()\n \
    \       val collisionsCount24 = mutable.Set[Int]()\n        val collisionsCount25\
    \ = mutable.Set[Int]()\n        val collisionsCount26 = mutable.Set[Int]()\n \
    \       val collisionsCount27 = mutable.Set[Int]()\n        val collisionsCount28\
    \ = mutable.Set[Int]()\n        val collisionsCount29 = mutable.Set[Int]()\n \
    \       val collisionsCount30 = mutable.Set[Int]()\n        val collisionsCount31\
    \ = mutable.Set[Int]()\n        val collisionsCount32 = mutable.Set[Int]()\n \
    \       val collisionsCount33 = mutable.Set[Int]()\n        val collision\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp71gyk3rl.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp71gyk3rl.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => i)\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp71gyk3rl.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp71gyk3rl.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp71gyk3rl.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcollisionsCount2\e[0m =\
    \ mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp71gyk3rl.scala:17:31\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisionsCount3\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m     "
  stdout: ''
  timestamp: 1659793218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m\
    \ => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q\
    \ => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u\
    \ => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y\
    \ => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c\
    \ => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g\
    \ => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k\
    \ => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o\
    \ => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s\
    \ => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w\
    \ => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a\
    \ => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e\
    \ => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzvqfsutg.scala:14:4 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzvqfsutg.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e\
    [36mj\e[0m => Vector.tabulate(n)(\e[36mk\e[0m => Vector.tabulate(n)(\e[36ml\e\
    [0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e[36mn\e[0m => Vector.tabulate(n)(\e\
    [36mo\e[0m => Vector.tabulate(n)(\e[36mp\e[0m => Vector.tabulate(n)(\e[36mq\e\
    [0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e[36ms\e[0m => Vector.tabulate(n)(\e\
    [36mt\e[0m => Vector.tabulate(n)(\e[36mu\e[0m => Vector.tabulate(n)(\e[36mv\e\
    [0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e[36mx\e[0m => Vector.tabulate(n)(\e\
    [36my\e[0m => Vector.tabulate(n)(\e[36mz\e[0m => Vector.tabulate(n)(\e[36ma\e\
    [0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e[36mc\e[0m => Vector.tabulate(n)(\e\
    [36md\e[0m => Vector.tabulate(n)(\e[36me\e[0m => Vector.tabulate(n)(\e[36mf\e\
    [0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e[36mh\e[0m => Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => Vector.tabulate(n)(\e[36mk\e\
    [0m => Vector.tabulate(n)(\e[36ml\e[0m => Vector.tabulate(n)(\e[36mm\e[0m => Vector.tabulate(n)(\e\
    [36mn\e[0m => Vector.tabulate(n)(\e[36mo\e[0m => Vector.tabulate(n)(\e[36mp\e\
    [0m => Vector.tabulate(n)(\e[36mq\e[0m => Vector.tabulate(n)(\e[36mr\e[0m => Vector.tabulate(n)(\e\
    [36ms\e[0m => Vector.tabulate(n)(\e[36mt\e[0m => Vector.tabulate(n)(\e[36mu\e\
    [0m => Vector.tabulate(n)(\e[36mv\e[0m => Vector.tabulate(n)(\e[36mw\e[0m => Vector.tabulate(n)(\e\
    [36mx\e[0m => Vector.tabulate(n)(\e[36my\e[0m => Vector.tabulate(n)(\e[36mz\e\
    [0m => Vector.tabulate(n)(\e[36ma\e[0m => Vector.tabulate(n)(\e[36mb\e[0m => Vector.tabulate(n)(\e\
    [36mc\e[0m => Vector.tabulate(n)(\e[36md\e[0m => Vector.tabulate(n)(\e[36me\e\
    [0m => Vector.tabulate(n)(\e[36mf\e[0m => Vector.tabulate(n)(\e[36mg\e[0m => Vector.tabulate(n)(\e\
    [36mh"
  stdout: ''
  timestamp: 1659793155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        cars.foreach { car =>\n            car.foreach\
    \ { car =>\n                val collision = car.foldLeft(0) { (acc, car) =>\n\
    \                    val collisions = car.foldLeft(0) { (acc, car) =>\n      \
    \                  val collision = car.foldLeft(0) { (acc, car) =>\n         \
    \                   val collision = car.foldLeft(0) { (acc, car) =>\n        \
    \                        val collision = car.foldLeft(0) { (acc, car) =>\n   \
    \                                 val collision = car.foldLeft(0) { (acc, car)\
    \ =>\n                                        val collision = car.foldLeft(0)\
    \ { (acc, car) =>\n                                            val collision =\
    \ car.foldLeft(0) { (acc, car) =>\n                                          \
    \      val collision = car.foldLeft(0) { (acc, car) =>\n                     \
    \                               val collision = car.foldLeft(0) { (acc, car) =>\n\
    \                                                        val collision = car.foldLeft(0)\
    \ { (acc, car) =>\n                                                          \
    \  val collision = car.foldLeft(0) { (acc, car) =>\n                         \
    \                                       val collision = car.foldLeft(0) { (acc,\
    \ car) =>\n                                                                  \
    \  val collision = car.foldLeft(0) { (acc, car) =>\n                         \
    \                                               val collision = car.foldLeft(0)\
    \ { (acc, car) =>\n                                                          \
    \                  val collision = car.foldLeft(0) { (acc, car) =>\n         \
    \                                                                       val collision\
    \ = car.foldLeft(0) { (acc, car) =>\n                                        \
    \                                            val collision = car.foldLeft(0) {\
    \ (acc, car) =>\n                                                            \
    \                            val collision = car.foldLeft(0) { (acc, car) =>\n\
    \                                                                            \
    \                val collision = car.foldLeft(0) { (acc, car) =>\n           \
    \                                                                            \
    \         val collision = car.foldLeft(0) { (acc, car) =>\n                  \
    \                                                                            \
    \      val collision = car.foldLeft(0) { (acc, car) =>\n                     \
    \                                                                            \
    \       val collision = car.foldLeft(0) { (acc, car) =>\n                    \
    \                                                                            \
    \            val collision = car.foldLeft(0) { (acc, car) =>\n               \
    \                                                                            \
    \                     val collision = car.foldLeft(0) { (acc, car) =>\n      \
    \                                                                            \
    \                                  val collision = car.foldLeft(0) { (acc, \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnk1cd04a.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnk1cd04a.scala:53:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpnk1cd04a.scala:13:19 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n).map(\e[36mi\e[0m => mutable.ListBuffer(\e[31m1\e[0m to n).map(\e\
    [36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnk1cd04a.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- Warning: /tmp/tmpnk1cd04a.scala:44:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m44 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659793216
