name: HumanEval_56_correct_bracketing
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // brackets is a string of \"<\" and \">\".\n    // return true if every opening\
  \ bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
  <\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n \
  \   // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"\
  ><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
  <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n   \
  \ assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
  <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
  )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
  <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
  >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n    assert(correctBracketing((\"\
  <><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = bracketsArray.filter(_ == '<')\n        val closingBrackets = bracketsArray.filter(_\
    \ == '>')\n        openingBrackets.size == closingBrackets.size", "        val\
    \ bracketsArray = brackets.toCharArray\n        val bracketsArrayLength = bracketsArray.length\n\
    \        val openingBracketsArray = new Array[Int](bracketsArrayLength)\n    \
    \    val closingBracketsArray = new Array[Int](bracketsArrayLength)\n        var\
    \ openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n        var\
    \ openingBracketsCount = 0\n        var closingBracketsCount = 0\n        var\
    \ openingBracketsCount2 = 0\n        var closingBracketsCount2 = 0\n        var\
    \ openingBracketsCount3 = 0\n        var closingBracketsCount3 = 0\n        var\
    \ openingBracketsCount4 = 0\n        var closingBracketsCount4 = 0\n        var\
    \ openingBracketsCount5 = 0\n        var closingBracketsCount5 = 0\n        var\
    \ openingBracketsCount6 = 0\n        var closingBracketsCount6 = 0\n        var\
    \ openingBracketsCount7 = 0\n        var closingBracketsCount7 = 0\n        var\
    \ openingBracketsCount8 = 0\n        var closingBracketsCount8 = 0\n        var\
    \ openingBracketsCount9 = 0\n        var closingBracketsCount9 = 0\n        var\
    \ openingBracketsCount10 = 0\n        var closingBracketsCount10 = 0\n       \
    \ var openingBracketsCount11 = 0\n        var closingBracketsCount11 = 0\n   \
    \     var openingBracketsCount12 = 0\n        var closingBracketsCount12 = 0\n\
    \        var openingBracketsCount13 = 0\n        var closingBracketsCount13 =\
    \ 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBrackets", " \
    \       val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsArray = Array[Int](bracketsArrayLength)\n\
    \        val closingBracketsArray = Array[Int](bracketsArrayLength)\n        var\
    \ openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n        var\
    \ openingBracketsCount = 0\n        var closingBracketsCount = 0\n        var\
    \ currentOpeningBracket = 0\n        var currentClosingBracket = 0\n        var\
    \ currentOpeningBracketCount = 0\n        var currentClosingBracketCount = 0\n\
    \        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var current", "        val openingBrackets = brackets.split(\"\
    <\").map(_.trim).toSet\n        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n\
    \        openingBrackets.subsetOf(closingBrackets)", "        val bracketsArray\
    \ = brackets.toCharArray\n        val openingBracketsArray = bracketsArray.filter(c\
    \ => c == '<')\n        val closingBracketsArray = bracketsArray.filter(c => c\
    \ == '>')\n        openingBracketsArray.forall(c => closingBracketsArray.contains(c))",
  "        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketCount = 0\n        var closingBracketCount\
    \ = 0\n        var openingBracketIndex = 0\n        var closingBracketIndex =\
    \ 0\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracket = bracketsArray(0)\n        var closingBracket\
    \ = bracketsArray(0)\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var openingBracketFound = false\n        var closingBracketFound\
    \ = false\n        var opening", "        val openingBrackets = brackets.split(\"\
    <\")\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsCount = bracketsArray.count(_\
    \ == '<')\n        val closingBracketsCount = bracketsArray.count(_ == '>')\n\
    \        openingBracketsCount != closingBracketsCount", "        val bracketsArray\
    \ = brackets.toCharArray\n        val openingBracketsArray = Array(\"<\")\n  \
    \      val closingBracketsArray = Array(\">\")\n        val openingBracketsCount\
    \ = openingBracketsArray.length\n        val closingBracketsCount = closingBracketsArray.length\n\
    \        val openingBracketsIndex = 0\n        val closingBracketsIndex = 0\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArrayIterator\
    \ = openingBracketsArray.iterator\n        val closingBracketsArrayIterator =\
    \ closingBracketsArray.iterator\n        val openingBracketsArrayIteratorIndex\
    \ = openingBracketsArray.length\n        val closingBracketsArrayIteratorIndex\
    \ = closingBracketsArray.length\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val openingBracketsArrayIteratorIndex\
    \ = 0\n        val closingBracketsArrayIteratorIndex = 0\n        val opening",
  "        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets\
    \ = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.count(_\
    \ > 0)\n        val closingBracketsCount = closingBrackets.count(_ > 0)\n    \
    \    openingBracketsCount == closingBracketsCount", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentChar = bracketsArray(0)\n        var currentCharIsClosingBracket\
    \ = false\n        var currentCharIsOpeningBracket = false\n        var currentCharIsOpeningBracketOrClosingBracket\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqual = false\n\
    \        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrComma = false\n\
    \        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColon\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolon\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolonOrComma\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqual\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqualOrComma\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqualOrCommaOrColon\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqualOrCommaOrColonOrSemicolon\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqualOrCommaOrColonOrSemicolonOrComma\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqual\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqualOrCommaOrColonOrSemicolonOrCommaOrEqualOrComma\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrEqualOrCommaOrColonOr",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"<\", \">\")\n        val closingBracketsArray = Array(\"<\", \">\"\
    )\n        val openingBracketsCount = openingBracketsArray.length\n        val\
    \ closingBracketsCount = closingBracketsArray.length\n        val openingBracketsArrayIndex\
    \ = 0\n        val closingBracketsArrayIndex = 0\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val opening", "        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n\
    \        val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val\
    \ openingBracketsSet = Set(openingBrackets)\n        val closingBracketsSet =\
    \ Set(closingBrackets)\n        openingBracketsSet.subsetOf(closingBracketsSet)",
  "        val bracketsArray = brackets.toList\n        val openingBrackets = bracketsArray.filter(_.isLetter)\n\
    \        val closingBrackets = bracketsArray.filter(_.isLetter)\n        val openingBracketsCount\
    \ = openingBrackets.size\n        val closingBracketsCount = closingBrackets.size\n\
    \        openingBracketsCount == closingBracketsCount", "        val openingBrackets\
    \ = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets = brackets.split(\"\
    >\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.toSet.size\n\
    \        val closingBracketsCount = closingBrackets.toSet.size\n        openingBracketsCount\
    \ == closingBracketsCount", "        val bracketsArray = brackets.toCharArray\n\
    \        val bracketsArrayLength = bracketsArray.length\n        val openingBracketsArray\
    \ = Array.fill(\n            bracketsArrayLength\n        ){\n            false\n\
    \        }\n        val closingBracketsArray = Array.fill(\n            bracketsArrayLength\n\
    \        ){\n            false\n        }\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracketsArrayLength = closingBracketsArrayLength\n        val openingBracketsArrayLength\
    \ = openingBracketsArrayLength\n        val closingBracketsArrayLength = closingBracketsArrayLength\n\
    \        val openingBracketsArrayLength = openingBracketsArrayLength\n       \
    \ val closingBracket", "        val bracketsArray = brackets.toCharArray\n   \
    \     var openingBrackets = 0\n        var closingBrackets = 0\n        var currentChar\
    \ = 0\n        var currentCharIsOpeningBracket = false\n        var currentCharIsClosingBracket\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracket = false\n \
    \       var currentCharIsClosingBracketOrOpeningBracket = false\n        var currentCharIsOpeningBracketOrClosingBracketOrOpeningBracket\
    \ = false\n        var currentCharIsClosingBracketOrOpeningBracketOrClosingBracket\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracket\
    \ = false\n        var currentCharIsOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracket\
    \ = false\n        var currentCharIsClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracket\
    \ = false\n        var currentCharIsClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracket\
    \ = false\n        var currentCharIsClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracket\
    \ = false\n        var currentCharIsClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracket\
    \ = false\n        var currentCharIsClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracket\
    \ = false\n        var currentCharIsClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracket\
    \ = false\n        var currentCharIsClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketOrOpeningBra",
  "        val bracketsArray = brackets.toCharArray\n        var openingBrackets =\
    \ 0\n        var closingBrackets = 0\n        for(i <- 0 until bracketsArray.length){\n\
    \            if(bracketsArray(i) == '<'){\n                openingBrackets +=\
    \ 1\n            }\n            if(bracketsArray(i) == '>'){\n               \
    \ closingBrackets += 1\n            }\n        }\n        openingBrackets == closingBrackets",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '<')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == '>')\n        openingBracketsCount == closingBracketsCount", "        val\
    \ bracketsArray = brackets.toCharArray\n        val openingBracketsCount = bracketsArray.count(_\
    \ == '<')\n        val closingBracketsCount = bracketsArray.count(_ == '>')\n\
    \        openingBracketsCount == closingBracketsCount", "        val openingBrackets\
    \ = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets = brackets.split(\"\
    >\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.foldLeft(0)(_\
    \ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_ + _)\n\
    \        openingBracketsCount == closingBracketsCount", "        val openingBrackets\
    \ = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets = brackets.split(\"\
    >\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.foldLeft(0)(_\
    \ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_ + _)\n\
    \        openingBracketsCount == closingBracketsCount", "        val openingBrackets\
    \ = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets = brackets.split(\"\
    >\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.foldLeft(0)(_\
    \ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_ + _)\n\
    \        openingBracketsCount == closingBracketsCount", "        val bracketsArray\
    \ = brackets.toCharArray\n        val bracketsArrayLength = bracketsArray.length\n\
    \        var openingBracketCount = 0\n        var closingBracketCount = 0\n  \
    \      var currentChar = bracketsArray(0)\n        var currentCharCount = 0\n\
    \        var isOpeningBracket = true\n        var isClosingBracket = false\n \
    \       var isCurrentCharOpeningBracket = false\n        var isCurrentCharClosingBracket\
    \ = false\n        var isCurrentCharInsideBracket = false\n        var isCurrentCharInsideBrackets\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInsideBracketsArray\
    \ = false\n        var isCurrentCharInsideBracketsArray = false\n        var isCurrentCharInside",
  "        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCountInCurrentBracket = 0\n        var closingBracketsCountInCurrentBracket\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        var currentBracketCount\
    \ = 0\n        var currentBracketCountInCurrentBracket = 0\n        var currentBracketCountInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrent", "        val\
    \ openingBrackets = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\"\
    >\")\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.size\
    \ == closingBracketsSet.size && openingBracketsSet.size == openingBracketsCount\
    \ + closingBracketsCount", "        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = mutable.Map[String, Int]()\n        val closingBracketsMap\
    \ = mutable.Map[String, Int]()\n        openingBrackets.foreach(openingBracket\
    \ => {\n            val closingBracket = closingBrackets(openingBracketsCount\
    \ - openingBracketsMap.getOrElse(openingBracket, 0))\n            openingBracketsMap\
    \ += (openingBracket -> 1)\n            closingBracketsMap += (closingBracket\
    \ -> 1)\n        })\n        closingBracketsCount match {\n            case 0\
    \ => true\n            case _ => openingBracketsMap.toSeq == closingBracketsMap.toSeq\n\
    \        }", "        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n\
    \        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n     \
    \   openingBrackets.subsetOf(closingBrackets)", "        val openingBrackets =\
    \ brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\")\n\
    \        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        openingBracketsCount == closingBracketsCount\
    \ && openingBrackets.forall(x => closingBrackets.contains(x))", "        val bracketsArray\
    \ = brackets.toCharArray\n        var openingBrackets : List[Char] = Nil\n   \
    \     var closingBrackets : List[Char] = Nil\n        var openingBracketsCount\
    \ : Int = 0\n        var closingBracketsCount : Int = 0\n        for(i <- 0 until\
    \ bracketsArray.length){\n            if(bracketsArray(i) == '<'){\n         \
    \       openingBrackets = openingBrackets :+ bracketsArray(i)\n              \
    \  openingBracketsCount += 1\n            }\n            if(bracketsArray(i) ==\
    \ '>'){\n                closingBrackets = closingBrackets :+ bracketsArray(i)\n\
    \                closingBracketsCount += 1\n            }\n        }\n       \
    \ if(openingBracketsCount == closingBracketsCount){\n            true\n      \
    \  }else{\n            false\n        }", "        val bracketsArray = brackets.toCharArray\n\
    \        var openingBracketsCount = 0\n        var closingBracketsCount = 0\n\
    \        var openingBracketsCountArray = new Array[Int](bracketsArray.length)\n\
    \        var closingBracketsCountArray = new Array[Int](bracketsArray.length)\n\
    \        var openingBracketsCountArrayIndex = 0\n        var closingBracketsCountArrayIndex\
    \ = 0\n        var openingBracketsCountArrayIndex2 = 0\n        var closingBracketsCountArrayIndex2\
    \ = 0\n        var openingBracketsCountArrayIndex3 = 0\n        var closingBracketsCountArrayIndex3\
    \ = 0\n        var openingBracketsCountArrayIndex4 = 0\n        var closingBracketsCountArrayIndex4\
    \ = 0\n        var openingBracketsCountArrayIndex5 = 0\n        var closingBracketsCountArrayIndex5\
    \ = 0\n        var openingBracketsCountArrayIndex6 = 0\n        var closingBracketsCountArrayIndex6\
    \ = 0\n        var openingBracketsCountArrayIndex7 = 0\n        var closingBracketsCountArrayIndex7\
    \ = 0\n        var openingBracketsCountArrayIndex8 = 0\n        var closingBracketsCountArrayIndex8\
    \ = 0\n        var openingBracketsCountArrayIndex9 = 0\n        var closingBracketsCountArrayIndex9\
    \ = 0\n        var openingBracketsCountArrayIndex10 = 0\n        var closingBracketsCountArrayIndex10\
    \ = 0\n        var openingBracketsCountArrayIndex11 = 0\n        var closingBracketsCountArrayIndex11\
    \ = 0\n        var openingBracketsCountArrayIndex12 = 0\n        var closingBracketsCountArrayIndex12\
    \ = 0\n        var openingBracketsCountArrayIndex13 = 0\n        var closingBracketsCountArrayIndex13\
    \ = 0\n        var openingBracketsCountArrayIndex14 = 0\n        var closingBracketsCountArrayIndex14\
    \ = 0\n        var openingBracketsCountArrayIndex15 = 0\n        var closingBracketsCountArrayIndex15\
    \ = 0\n        var openingBracketsCountArrayIndex16 = 0\n        var closingBracketsCountArrayIndex16\
    \ = 0\n        var openingBracketsCountArrayIndex17 = 0\n        var closingBracketsCountArrayIndex17\
    \ = 0\n        var openingBracketsCountArrayIndex18 = 0\n        var closingBracketsCountArrayIndex18\
    \ = 0\n        var openingBracketsCountArrayIndex19 = 0\n        var closingBracketsCountArrayIndex19\
    \ = 0\n        var openingBracketsCount", "        val bracketsArray = brackets.toCharArray\n\
    \        val bracketsArrayLength = bracketsArray.length\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        var currentBracketsCount\
    \ = 0\n        var currentBracketsCount2 = 0\n        var currentBracketsCount3\
    \ = 0\n        var currentBracketsCount4 = 0\n        var currentBracketsCount5\
    \ = 0\n        var currentBracketsCount6 = 0\n        var currentBracketsCount7\
    \ = 0\n        var currentBracketsCount8 = 0\n        var currentBracketsCount9\
    \ = 0\n        var currentBracketsCount10 = 0\n        var currentBracketsCount11\
    \ = 0\n        var currentBracketsCount12 = 0\n        var currentBracketsCount13\
    \ = 0\n        var currentBracketsCount14 = 0\n        var currentBracketsCount15\
    \ = 0\n        var currentBracketsCount16 = 0\n        var currentBracketsCount17\
    \ = 0\n        var currentBracketsCount18 = 0\n        var currentBracketsCount19\
    \ = 0\n        var currentBracketsCount20 = 0\n        var currentBracketsCount21\
    \ = 0\n        var currentBracketsCount22 = 0\n        var currentBracketsCount23\
    \ = 0\n        var currentBracketsCount24 = 0\n        var currentBracketsCount25\
    \ = 0\n        var currentBracketsCount26 = 0\n        var currentBracketsCount27\
    \ = 0\n        var currentBracketsCount28 = 0\n        var currentBracketsCount29\
    \ = 0\n        var currentBracketsCount30 = 0\n        var currentBracketsCount31\
    \ = 0\n        var currentBracketsCount32 = 0\n        var currentBracketsCount33\
    \ = 0\n        var currentBracketsCount34 = 0\n        var currentBracketsCount35\
    \ = 0\n        var currentBracketsCount36 = 0\n        var currentBracketsCount37\
    \ = 0\n        var currentBracketsCount38 = 0\n        var currentBracketsCount39\
    \ = 0\n        var currentBracketsCount40 = 0\n        var currentBracketsCount41\
    \ = 0\n        var currentBracketsCount42 = 0\n        var currentBracketsCount43\
    \ = 0\n        var currentBracketsCount44 = 0\n        var currentBracketsCount45\
    \ = 0\n        var currentBracketsCount46 = 0\n        var currentBracketsCount47\
    \ = 0\n        var currentBracketsCount48 = 0\n        var currentBracketsCount49\
    \ = 0\n        var currentBracketsCount50 = 0\n        var currentBracketsCount51\
    \ = 0\n        var currentBracketsCount52 = 0\n        var currentBrackets", " \
    \       val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentChar = 0\n        var nextChar = 0\n        var currentBracket\
    \ = 0\n        var nextBracket = 0\n        var currentBracketIndex = 0\n    \
    \    var nextBracketIndex = 0\n        var currentBracketChar = 0\n        var\
    \ nextBracketChar = 0\n        var currentBracketCharIndex = 0\n        var nextBracketCharIndex\
    \ = 0\n        var currentBracketCharIndex = 0\n        var nextBracketCharIndex\
    \ = 0\n        var currentCharIndex = 0\n        var nextCharIndex = 0\n     \
    \   var currentCharIndex = 0\n        var nextCharIndex = 0\n        var currentCharIndex\
    \ = 0\n        var nextCharIndex = 0\n        var currentCharIndex = 0\n     \
    \   var nextCharIndex = 0\n        var currentCharIndex = 0\n        var nextCharIndex\
    \ = 0\n        var currentCharIndex = 0\n        var nextCharIndex = 0\n     \
    \   var currentCharIndex = 0\n        var nextCharIndex = 0\n        var currentCharIndex\
    \ = 0\n        var nextCharIndex = 0\n        var currentCharIndex = 0\n     \
    \   var nextCharIndex = 0\n        var currentCharIndex = 0\n        var nextCharIndex\
    \ = 0\n        var currentCharIndex = 0\n        var nextCharIndex = 0\n     \
    \   var currentCharIndex = 0\n        var nextCharIndex = 0\n        var currentCharIndex\
    \ = 0\n        var nextCharIndex = 0\n        var currentCharIndex = 0\n     \
    \   var nextCharIndex = 0\n        var currentCharIndex = 0\n        var nextCharIndex\
    \ = 0\n        var currentCharIndex = 0\n        var nextCharIndex = 0\n     \
    \   var currentCharIndex = 0\n        var nextCharIndex = 0\n        var currentCharIndex\
    \ = 0\n        var nextCharIndex = 0\n        var currentCharIndex = 0\n     \
    \   var nextCharIndex = 0\n        var currentCharIndex = 0\n        var nextCharIndex\
    \ = 0\n        var currentCharIndex = 0\n        var nextCharIndex = 0\n     \
    \   var currentCharIndex = 0\n        var nextCharIndex = 0\n        var currentCharIndex\
    \ = 0\n        var nextCharIndex = 0\n        var currentCharIndex = 0\n     \
    \   var nextCharIndex = 0\n        var currentCharIndex = 0\n        var nextCharIndex\
    \ = 0\n        var currentCharIndex = 0\n        var nextCharIndex = 0\n     \
    \   var currentCharIndex = 0\n        var nextCharIndex = 0\n        var currentCharIndex\
    \ = 0\n        var nextCharIndex = 0\n        var currentCharIndex = 0\n     \
    \   var nextCharIndex = 0\n        var currentCharIndex = 0\n        var nextCharIndex\
    \ = 0\n        var currentCharIndex = 0\n        var nextCharIndex = 0\n     \
    \   var currentCharIndex = 0\n        var nextCharIndex = 0\n        var currentCharIndex\
    \ = 0\n", "        val bracketsArray = brackets.toCharArray\n        val openingBrackets\
    \ = bracketsArray.filter(x => x == '<')\n        val closingBrackets = bracketsArray.filter(x\
    \ => x == '>')\n        openingBrackets.size == closingBrackets.size", "     \
    \   val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"<\")\n        val closingBracketsArray = Array(\">\")\n        val\
    \ openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        val openingBracketsIndex = 0\n      \
    \  val closingBracketsIndex = 0\n        var openingBracketsCountInCurrentBracket\
    \ = 0\n        var closingBracketsCountInCurrentBracket = 0\n        var currentBracket\
    \ = openingBracketsArray(0)\n        var currentBracketCount = 0\n        var\
    \ currentBracketCountInCurrentBracket = 0\n        var currentBracketIndex = openingBracketsIndex\n\
    \        var currentBracketIndexInCurrentBracket = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketIndexInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket",
  "        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets\
    \ = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.count(_\
    \ > 0)\n        val closingBracketsCount = closingBrackets.count(_ > 0)\n    \
    \    openingBracketsCount == closingBracketsCount", "        val bracketsArray\
    \ = brackets.toCharArray\n        val openingBrackets = mutable.HashSet[Char]()\n\
    \        val closingBrackets = mutable.HashSet[Char]()\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        for (i <- 0 until bracketsArray.length)\
    \ {\n            if (bracketsArray(i) == '<') {\n                openingBrackets\
    \ += bracketsArray(i).toChar\n                openingBracketsCount += 1\n    \
    \        } else if (bracketsArray(i) == '>') {\n                closingBrackets\
    \ += bracketsArray(i).toChar\n                closingBracketsCount += 1\n    \
    \        }\n        }\n        if (openingBracketsCount != closingBracketsCount)\
    \ {\n            return false\n        }\n        for (i <- 0 until openingBrackets.size)\
    \ {\n            if (!closingBrackets.contains(openingBrackets(i))) {\n      \
    \          return false\n            }\n        }\n        true", "        val\
    \ openingBrackets = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets\
    \ = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.toSet.size\
    \ // number of opening brackets\n        val closingBracketsCount = closingBrackets.toSet.size\
    \ // number of closing brackets\n        openingBracketsCount == closingBracketsCount",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '<')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == '>')\n        openingBracketsCount == closingBracketsCount", "        val\
    \ bracketsArray = brackets.toCharArray\n        val openingBracketsArray = bracketsArray.filter(c\
    \ => c == '<')\n        val closingBracketsArray = bracketsArray.filter(c => c\
    \ == '>')\n        openingBracketsArray.forall(c => closingBracketsArray.contains(c))",
  "        val bracketsArray = brackets.toCharArray\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        var openingBracketsCountArray\
    \ = new Array[Int](bracketsArray.length)\n        var closingBracketsCountArray\
    \ = new Array[Int](bracketsArray.length)\n        var openingBracketsCountArrayIndex\
    \ = 0\n        var closingBracketsCountArrayIndex = 0\n        var openingBracketsCountArrayIndex2\
    \ = 0\n        var closingBracketsCountArrayIndex2 = 0\n        var openingBracketsCountArrayIndex3\
    \ = 0\n        var closingBracketsCountArrayIndex3 = 0\n        var openingBracketsCountArrayIndex4\
    \ = 0\n        var closingBracketsCountArrayIndex4 = 0\n        var openingBracketsCountArrayIndex5\
    \ = 0\n        var closingBracketsCountArrayIndex5 = 0\n        var openingBracketsCountArrayIndex6\
    \ = 0\n        var closingBracketsCountArrayIndex6 = 0\n        var openingBracketsCountArrayIndex7\
    \ = 0\n        var closingBracketsCountArrayIndex7 = 0\n        var openingBracketsCountArrayIndex8\
    \ = 0\n        var closingBracketsCountArrayIndex8 = 0\n        var openingBracketsCountArrayIndex9\
    \ = 0\n        var closingBracketsCountArrayIndex9 = 0\n        var openingBracketsCountArrayIndex10\
    \ = 0\n        var closingBracketsCountArrayIndex10 = 0\n        var openingBracketsCountArrayIndex11\
    \ = 0\n        var closingBracketsCountArrayIndex11 = 0\n        var openingBracketsCountArrayIndex12\
    \ = 0\n        var closingBracketsCountArrayIndex12 = 0\n        var openingBracketsCountArrayIndex13\
    \ = 0\n        var closingBracketsCountArrayIndex13 = 0\n        var openingBracketsCountArrayIndex14\
    \ = 0\n        var closingBracketsCountArrayIndex14 = 0\n        var openingBracketsCountArrayIndex15\
    \ = 0\n        var closingBracketsCountArrayIndex15 = 0\n        var openingBracketsCountArrayIndex16\
    \ = 0\n        var closingBracketsCountArrayIndex16 = 0\n        var openingBracketsCountArrayIndex17\
    \ = 0\n        var closingBracketsCountArrayIndex17 = 0\n        var openingBracketsCountArrayIndex18\
    \ = 0\n        var closingBracketsCountArrayIndex18 = 0\n        var openingBracketsCountArrayIndex19\
    \ = 0\n        var closingBracketsCountArrayIndex19 = 0\n        var openingBracketsCount",
  "        val bracketsArray = brackets.toCharArray\n        val openingBrackets =\
    \ mutable.HashSet[Char]()\n        val closingBrackets = mutable.HashSet[Char]()\n\
    \        val openingBracketsCount = mutable.HashMap[Char, Int]()\n        val\
    \ closingBracketsCount = mutable.HashMap[Char, Int]()\n        val openingBracketsCountArray\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closingBracketsCountArray = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArray2 = mutable.ArrayBuffer.empty[Int]\n   \
    \     val closingBracketsCountArray2 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val openingBracketsCountArray3 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArray3 = mutable.ArrayBuffer.empty[Int]\n        val openingBracketsCountArray4\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closingBracketsCountArray4 = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArray5 = mutable.ArrayBuffer.empty[Int]\n   \
    \     val closingBracketsCountArray5 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val openingBracketsCountArray6 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArray6 = mutable.ArrayBuffer.empty[Int]\n        val openingBracketsCountArray7\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closingBracketsCountArray7 = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArray8 = mutable.ArrayBuffer.empty[Int]\n   \
    \     val closingBracketsCountArray8 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val openingBracketsCountArray9 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArray9 = mutable.ArrayBuffer.empty[Int]\n        val openingBracketsCountArray10\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closingBracketsCountArray10 =\
    \ mutable.ArrayBuffer.empty[Int]\n        val openingBracketsCountArray11 = mutable.ArrayBuffer.empty[Int]\n\
    \        val closingBracketsCountArray11 = mutable.ArrayBuffer.empty[Int]\n  \
    \      val openingBracketsCountArray12 = mutable.ArrayBuffer.empty[Int]\n    \
    \    val closingBracketsCountArray", "        val bracketsArray = brackets.toCharArray\n\
    \        val bracketsArrayLength = bracketsArray.length\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        var currentChar = 0\n   \
    \     var currentCharValue = 0\n        var currentCharValue2 = 0\n        var\
    \ currentCharValue3 = 0\n        var currentCharValue4 = 0\n        var currentCharValue5\
    \ = 0\n        var currentCharValue6 = 0\n        var currentCharValue7 = 0\n\
    \        var currentCharValue8 = 0\n        var currentCharValue9 = 0\n      \
    \  var currentCharValue10 = 0\n        var currentCharValue11 = 0\n        var\
    \ currentCharValue12 = 0\n        var currentCharValue13 = 0\n        var currentCharValue14\
    \ = 0\n        var currentCharValue15 = 0\n        var currentCharValue16 = 0\n\
    \        var currentCharValue17 = 0\n        var currentCharValue18 = 0\n    \
    \    var currentCharValue19 = 0\n        var currentCharValue20 = 0\n        var\
    \ currentCharValue21 = 0\n        var currentCharValue22 = 0\n        var currentCharValue23\
    \ = 0\n        var currentCharValue24 = 0\n        var currentCharValue25 = 0\n\
    \        var currentCharValue26 = 0\n        var currentCharValue27 = 0\n    \
    \    var currentCharValue28 = 0\n        var currentCharValue29 = 0\n        var\
    \ currentCharValue30 = 0\n        var currentCharValue31 = 0\n        var currentCharValue32\
    \ = 0\n        var currentCharValue33 = 0\n        var currentCharValue34 = 0\n\
    \        var currentCharValue35 = 0\n        var currentCharValue36 = 0\n    \
    \    var currentCharValue37 = 0\n        var currentCharValue38 = 0\n        var\
    \ currentCharValue39 = 0\n        var currentCharValue40 = 0\n        var currentCharValue41\
    \ = 0\n        var currentCharValue42 = 0\n        var currentCharValue43 = 0\n\
    \        var currentCharValue44 = 0\n        var currentCharValue45 = 0\n    \
    \    var currentCharValue46 = 0\n        var currentCharValue47 = 0\n        var\
    \ currentCharValue48 = 0\n        var currentCharValue49 = 0\n        var currentCharValue50\
    \ = 0\n        var currentCharValue51 = 0\n        var currentCharValue52 = 0\n\
    \        var currentCharValue53 = 0\n        var currentCharValue54 = 0\n    \
    \    var currentCharValue55 = 0\n        var currentCharValue56 = 0\n        var\
    \ currentCharValue57 = 0\n        var currentCharValue58 = 0\n        var currentCharValue59\
    \ = 0\n        var currentCharValue60 = 0\n        var currentCharValue61 = 0\n\
    \        var currentCharValue62 = 0\n        var currentCharValue63 = 0\n    \
    \    var currentCharValue64 = 0\n        var currentCharValue65 = 0\n        var\
    \ currentCharValue66 = 0\n        var currentCharValue67 = 0", "        val bracketsArray\
    \ = brackets.toCharArray\n        val openingBracketsArray = Array(\"<\", \">\"\
    )\n        val closingBracketsArray = Array(\"<\", \">\")\n        val openingBracketsCount\
    \ = openingBracketsArray.length\n        val closingBracketsCount = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArray\
    \ = openingBracketsArray.drop(openingBracketsArrayLength - 1)\n        val closingBracketsArray\
    \ = closingBracketsArray.drop(closingBracketsArrayLength - 1)\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArray = openingBracketsArray.drop(openingBracketsArrayLength\
    \ - 1)\n        val closingBracketsArray = closingBracketsArray.drop(closingBracketsArrayLength\
    \ - 1)\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArray = openingBracketsArray.drop(openingBracketsArrayLength\
    \ - 1)\n        val closingBracketsArray = closingBracketsArray.drop(closingBracketsArrayLength\
    \ - 1)\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArray = openingBracketsArray.drop(openingBracketsArrayLength\
    \ - 1)\n        val closingBracketsArray = closingBracketsArray.drop(closingBracketsArrayLength\
    \ - 1)\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArray = openingBracketsArray.drop(openingBracketsArrayLength\
    \ - 1)\n        val closingBracketsArray = closingBracketsArray.drop(closingBracketsArrayLength\
    \ - 1)\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val opening", "        val bracketsArray = brackets.toCharArray\n        val\
    \ openingBrackets = mutable.Set[Char]()\n        val closingBrackets = mutable.Set[Char]()\n\
    \        var openingBracketsCount = 0\n        var closingBracketsCount = 0\n\
    \        for(i <- 0 until bracketsArray.length){\n            if(bracketsArray(i)\
    \ == '<'){\n                openingBrackets += bracketsArray(i).toChar\n     \
    \           openingBracketsCount += 1\n            }\n            if(bracketsArray(i)\
    \ == '>'){\n                closingBrackets += bracketsArray(i).toChar\n     \
    \           closingBracketsCount += 1\n            }\n        }\n        if(openingBracketsCount\
    \ == closingBracketsCount){\n            false\n        }else{\n            true\n\
    \        }", "        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '<')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == '>')\n        openingBracketsCount != closingBracketsCount", "        val\
    \ openingBrackets = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets\
    \ = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.foldLeft(0)(_\
    \ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_ + _)\n\
    \        openingBracketsCount == closingBracketsCount", "        val openingBrackets\
    \ = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets = brackets.split(\"\
    >\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.foldLeft(0)(_\
    \ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_ + _)\n\
    \        openingBracketsCount == closingBracketsCount", "        val bracketsArray\
    \ = brackets.toCharArray\n        val bracketsArrayLength = bracketsArray.length\n\
    \        val bracketsArrayCopy = Array(bracketsArrayLength)\n        System.arraycopy(bracketsArray,\
    \ 0, bracketsArrayCopy, 0, bracketsArrayLength)\n        val openingBracketsArray\
    \ = Array(bracketsArrayLength)\n        val closingBracketsArray = Array(bracketsArrayLength)\n\
    \        val openingBracketsArrayCopy = Array(openingBracketsArray.length)\n \
    \       val closingBracketsArrayCopy = Array(closingBracketsArray.length)\n  \
    \      var openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n  \
    \      var openingBracketsCopyIndex = 0\n        var closingBracketsCopyIndex\
    \ = 0\n        var openingBracketsCopyIndex2 = 0\n        var closingBracketsCopyIndex2\
    \ = 0\n        var openingBracketsCopyIndex3 = 0\n        var closingBracketsCopyIndex3\
    \ = 0\n        var openingBracketsCopyIndex4 = 0\n        var closingBracketsCopyIndex4\
    \ = 0\n        var openingBracketsCopyIndex5 = 0\n        var closingBracketsCopyIndex5\
    \ = 0\n        var openingBracketsCopyIndex6 = 0\n        var closingBracketsCopyIndex6\
    \ = 0\n        var openingBracketsCopyIndex7 = 0\n        var closingBracketsCopyIndex7\
    \ = 0\n        var openingBracketsCopyIndex8 = 0\n        var closingBracketsCopyIndex8\
    \ = 0\n        var openingBracketsCopyIndex9 = 0\n        var closingBracketsCopyIndex9\
    \ = 0\n        var openingBracketsCopyIndex10 = 0\n        var closingBracketsCopyIndex10\
    \ = 0\n        var openingBracketsCopyIndex11 = 0\n        var closingBracketsCopyIndex11\
    \ = 0\n        var openingBracketsCopyIndex12 = 0\n        var closingBracketsCopyIndex12\
    \ = 0\n        var openingBracketsCopyIndex13 = 0\n        var closingBracketsCopyIndex13\
    \ = 0\n        var openingBracketsCopyIndex14 = 0\n        var closingBracketsCopyIndex14\
    \ = 0\n        var openingBracketsCopyIndex15 = 0\n        var closingBracketsCopyIndex15\
    \ = 0\n        var openingBracketsCopyIndex16 = 0\n        var closingBracketsCopyIndex16\
    \ = 0\n        var openingBracketsCopyIndex17 = 0\n        var closingBracketsCopyIndex17\
    \ = 0\n        var openingBracketsCopy", "        val bracketsArray = brackets.toCharArray\n\
    \        var openingBrackets : List[Char] = Nil\n        var closingBrackets :\
    \ List[Char] = Nil\n        var openingBracketsCount : Int = 0\n        var closingBracketsCount\
    \ : Int = 0\n        var openingBracketsIndex : Int = 0\n        var closingBracketsIndex\
    \ : Int = 0\n        while(openingBracketsIndex < bracketsArray.length) {\n  \
    \          val currentChar = bracketsArray(openingBracketsIndex)\n           \
    \ openingBracketsCount += 1\n            if(currentChar == '<') {\n          \
    \      openingBrackets = openingBrackets :+ currentChar\n                openingBracketsIndex\
    \ += 1\n            } else if(currentChar == '>') {\n                closingBrackets\
    \ = closingBrackets :+ currentChar\n                closingBracketsIndex += 1\n\
    \            } else {\n                assert(openingBracketsCount == closingBracketsCount)\n\
    \                assert(openingBracketsCount == 1)\n                assert(closingBracketsCount\
    \ == 1)\n                assert(openingBracketsIndex == 0)\n                assert(closingBracketsIndex\
    \ == 0)\n                assert(openingBrackets.size == closingBrackets.size)\n\
    \                assert(openingBrackets.size == 1)\n                assert(closingBrackets.size\
    \ == 1)\n                assert(openingBrackets.head == closingBrackets.head)\n\
    \                assert(openingBrackets.head == '<' || closingBrackets.head ==\
    \ '>')\n                assert(openingBrackets.head == '<')\n                assert(closingBrackets.head\
    \ == '>')\n                assert(closingBrackets.head == '>')\n             \
    \   assert(openingBrackets.tail == closingBrackets.tail)\n                assert(openingBrackets.tail\
    \ == Nil)\n                assert(closingBrackets.tail == Nil)\n             \
    \   assert(openingBrackets.size == closingBrackets.size)\n                assert(openingBrackets.size\
    \ == 1)\n                assert(closingBrackets.size == 1)\n                assert(openingBrackets.head\
    \ == closingBrackets.head)\n                assert(openingBrackets.head == '<'\
    \ || closingBrackets.head == '>')\n                assert(openingBrackets.head\
    \ == '<')\n                assert(closingBrackets.head == '>')\n             \
    \   assert(closingBrackets.head == '>')\n                assert(openingBrackets.tail\
    \ == closingBrackets.tail)\n                assert(openingBrackets.tail == Nil)\n\
    \                assert(closingBrackets.tail == ", "        val openingBrackets\
    \ = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets = brackets.split(\"\
    >\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.foldLeft(0)(_\
    \ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_ + _)\n\
    \        openingBracketsCount == closingBracketsCount", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        openingBracketsCount == closingBracketsCount\
    \ && openingBrackets.forall(x => closingBrackets.contains(x))", "        val openingBrackets\
    \ = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets = brackets.split(\"\
    >\").map(_.toInt)\n        val openingBracketsSet = Set(openingBrackets)\n   \
    \     val closingBracketsSet = Set(closingBrackets)\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(c => c == '<')\n        val closingBracketsArray = bracketsArray.filter(c\
    \ => c == '>')\n        openingBracketsArray.forall(c => closingBracketsArray.contains(c))",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(_ == '<')\n        val closingBracketsArray = bracketsArray.filter(_\
    \ == '>')\n        openingBracketsArray.size == closingBracketsArray.size", " \
    \       val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(c => c == '<')\n        val closingBracketsCount = bracketsArray.count(c\
    \ => c == '>')\n        openingBracketsCount == closingBracketsCount", "     \
    \   val openingBrackets = brackets.split(\"<\")\n        val closingBrackets =\
    \ brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        if (openingBracketsCount\
    \ != closingBracketsCount) {\n            return false\n        }\n        val\
    \ openingBracketsMap = openingBrackets.toMap\n        val closingBracketsMap =\
    \ closingBrackets.toMap\n        val openingBracketsMapKeys = openingBracketsMap.keys\n\
    \        val closingBracketsMapKeys = closingBracketsMap.keys\n        val openingBracketsMapValues\
    \ = openingBracketsMap.values.toList\n        val closingBracketsMapValues = closingBracketsMap.values.toList\n\
    \        val openingBracketsMapValuesCount = openingBracketsMapValues.length\n\
    \        val closingBracketsMapValuesCount = closingBracketsMapValues.length\n\
    \        if (openingBracketsMapValuesCount != closingBracketsMapValuesCount) {\n\
    \            return false\n        }\n        val openingBracketsMapValuesMap\
    \ = openingBracketsMapValues.toMap\n        val closingBracketsMapValuesMap =\
    \ closingBracketsMapValues.toMap\n        val openingBracketsMapValuesMapKeys\
    \ = openingBracketsMapValuesMap.keys\n        val closingBracketsMapValuesMapKeys\
    \ = closingBracketsMapValuesMap.keys\n        val openingBracketsMapValuesMapValues\
    \ = openingBracketsMapValuesMap.values.toList\n        val closingBracketsMapValuesMapValues\
    \ = closingBracketsMapValuesMap.values.toList\n        val openingBracketsMapValuesMapValuesCount\
    \ = openingBracketsMapValuesMapValues.length\n        val closingBracketsMapValuesMapValuesCount\
    \ = closingBracketsMapValuesMapValues.length\n        if (openingBracketsMapValuesMapValuesCount\
    \ != closingBracketsMapValuesMapValuesCount) {\n            return false\n   \
    \     }\n        val openingBracketsMapValuesMapValuesMap = openingBracketsMapValuesMapValues.toMap\n\
    \        val closingBracketsMapValuesMapValuesMap = closingBracketsMapValuesMapValues.toMap\n\
    \        val openingBracketsMapValuesMapValuesMapKeys = openingBracketsMapValuesMapValuesMap.keys\n\
    \        ", "        val openingBrackets = brackets.split(\"<\")\n        val\
    \ closingBrackets = brackets.split(\">\")\n        val openingBracketsCount =\
    \ openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        if (openingBracketsCount != closingBracketsCount) {\n            return\
    \ false\n        }\n        var openingBracketsIndex = 0\n        var closingBracketsIndex\
    \ = 0\n        while (openingBracketsIndex < openingBracketsCount && closingBracketsIndex\
    \ < closingBracketsCount) {\n            if (openingBrackets(openingBracketsIndex)\
    \ != closingBrackets(closingBracketsIndex)) {\n                return false\n\
    \            }\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        }\n        return true", "        val openingBrackets = brackets.split(\"\
    <\").map(_.toInt)\n        val closingBrackets = brackets.split(\">\").map(_.toInt)\n\
    \        val openingBracketsCount = openingBrackets.toSet.size // O(n)\n     \
    \   val closingBracketsCount = closingBrackets.toSet.size // O(n)\n        openingBracketsCount\
    \ == closingBracketsCount // O(1)", "        val openingBrackets = brackets.split(\"\
    <\").map(_.trim).toSet\n        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n\
    \        openingBrackets.forall(closingBrackets.contains)", "        val bracketsArray\
    \ = brackets.toCharArray\n        val bracketsArrayLength = bracketsArray.length\n\
    \        var openingBracketsCount = 0\n        var closingBracketsCount = 0\n\
    \        var currentChar = bracketsArray(0)\n        var currentCharCount = 1\n\
    \        var currentCharCountInCurrentBracket = 0\n        var currentCharCountInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentCharCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBra",
  "        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount",
  "        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n       \
    \ val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n        openingBrackets.subsetOf(closingBrackets)",
  "        val bracketsArray = brackets.toList\n        val bracketsArraySize = bracketsArray.length\n\
    \        val openingBracketsArray = bracketsArray.filter(_.isLetter)\n       \
    \ val closingBracketsArray = bracketsArray.filter(_.isLetter)\n        val openingBracketsArraySize\
    \ = openingBracketsArray.length\n        val closingBracketsArraySize = closingBracketsArray.length\n\
    \        openingBracketsArray.forall(bracketsArray(_).isLetter)\n        closingBracketsArray.forall(bracketsArray(_).isLetter)\n\
    \        openingBracketsArraySize == closingBracketsArraySize", "        val bracketsArray\
    \ = brackets.toCharArray\n        val bracketsArrayLength = bracketsArray.length\n\
    \        var openingBracketsCount = 0\n        var closingBracketsCount = 0\n\
    \        var openingBracketsCount2 = 0\n        var closingBracketsCount2 = 0\n\
    \        var openingBracketsCount3 = 0\n        var closingBracketsCount3 = 0\n\
    \        var openingBracketsCount4 = 0\n        var closingBracketsCount4 = 0\n\
    \        var openingBracketsCount5 = 0\n        var closingBracketsCount5 = 0\n\
    \        var openingBracketsCount6 = 0\n        var closingBracketsCount6 = 0\n\
    \        var openingBracketsCount7 = 0\n        var closingBracketsCount7 = 0\n\
    \        var openingBracketsCount8 = 0\n        var closingBracketsCount8 = 0\n\
    \        var openingBracketsCount9 = 0\n        var closingBracketsCount9 = 0\n\
    \        var openingBracketsCount10 = 0\n        var closingBracketsCount10 =\
    \ 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '<')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == '>')\n        openingBracketsCount == closingBracketsCount", "        val\
    \ bracketsArray = brackets.toCharArray\n        val openingBracketsCount = bracketsArray.count(_\
    \ == '<')\n        val closingBracketsCount = bracketsArray.count(_ == '>')\n\
    \        openingBracketsCount != closingBracketsCount", "        val bracketsArray\
    \ = brackets.toCharArray\n        val openingBracketsArray = bracketsArray.filter(c\
    \ => c == '<')\n        val closingBracketsArray = bracketsArray.filter(c => c\
    \ == '>')\n        openingBracketsArray.forall(c => closingBracketsArray.contains(c))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets\
    \ = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.foldLeft(0)(_\
    \ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_ + _)\n\
    \        openingBracketsCount == closingBracketsCount", "        val bracketsArray\
    \ = brackets.toCharArray\n        val openingBrackets = mutable.HashSet[Char]()\n\
    \        val closingBrackets = mutable.HashSet[Char]()\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        var currentChar = 0\n   \
    \     var currentOpeningBracket = 0\n        var currentClosingBracket = 0\n \
    \       var currentOpeningBracketCount = 0\n        var currentClosingBracketCount\
    \ = 0\n        var currentOpeningBracketCountBefore = 0\n        var currentClosingBracketCountBefore\
    \ = 0\n        var currentOpeningBracketCountAfter = 0\n        var currentClosingBracketCountAfter\
    \ = 0\n        var currentOpeningBracketCountBeforeAfter = 0\n        var currentClosingBracketCountBeforeAfter\
    \ = 0\n        var currentOpeningBracketCountBeforeBefore = 0\n        var currentClosingBracketCountBeforeBefore\
    \ = 0\n        var currentOpeningBracketCountBeforeBeforeAfter = 0\n        var\
    \ currentClosingBracketCountBeforeBeforeAfter = 0\n        var currentOpeningBracketCountBeforeBeforeBefore\
    \ = 0\n        var currentClosingBracketCountBeforeBeforeBefore = 0\n        var\
    \ currentOpeningBracketCountBeforeBeforeBefore = 0\n        var currentClosingBracketCountBeforeBeforeBefore\
    \ = 0\n        var currentOpeningBracketCountBeforeBeforeBeforeAfter = 0\n   \
    \     var currentClosingBracketCountBeforeBeforeBeforeAfter = 0\n        var currentOpeningBracketCountBeforeBeforeBeforeBefore\
    \ = 0\n        var currentClosingBracketCountBeforeBeforeBeforeBefore = 0\n  \
    \      var currentOpeningBracketCountBeforeBeforeBeforeBefore = 0\n        var\
    \ currentClosingBracketCountBeforeBeforeBeforeBefore = 0\n        var currentOpeningBracketCountBeforeBeforeBeforeBefore\
    \ = 0\n        var currentClosingBracketCountBeforeBeforeBeforeBefore = 0\n  \
    \      var currentOpeningBracketCountBeforeBeforeBeforeBefore = 0\n        var\
    \ currentClosingBracketCountBeforeBeforeBeforeBefore = 0\n        var currentOpeningBracketCountBeforeBeforeBeforeBefore\
    \ = 0\n        var currentClosingBracketCountBeforeBeforeBeforeBefore = 0\n  \
    \      var currentOpeningBracketCountBeforeBeforeBeforeBefore = 0\n        var\
    \ currentClosingBracketCountBeforeBeforeBeforeBefore = 0\n        var currentOpeningBracketCountBeforeBeforeBeforeBefore\
    \ = 0\n        var currentClosingBracketCountBeforeBeforeBeforeBefore = 0\n  \
    \      var currentOpeningBracketCountBeforeBeforeBeforeBefore = 0\n        var\
    \ currentClosingBracketCountBeforeBeforeBeforeBefore = 0\n        var currentOpeningBracketCountBeforeBeforeBeforeBefore\
    \ = 0\n        var currentClosingBracketCountBeforeBeforeBefore", "        val\
    \ openingBrackets = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets\
    \ = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.foldLeft(0)(_\
    \ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_ + _)\n\
    \        openingBracketsCount == closingBracketsCount", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        openingBracketsCount == closingBracketsCount\
    \ && openingBrackets.forall(x => closingBrackets.contains(x))", "        val bracketsArray\
    \ = brackets.toCharArray\n        val openingBrackets = mutable.ListBuffer[Char]()\n\
    \        val closingBrackets = mutable.ListBuffer[Char]()\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        var currentOpeningBracket\
    \ = ' '\n        var currentClosingBracket = ' '\n        var currentOpeningBracketCount\
    \ = 0\n        var currentClosingBracketCount = 0\n        var currentOpeningBracketChar\
    \ = ' '\n        var currentClosingBracketChar = ' '\n        var currentOpeningBracketCountChar\
    \ = ' '\n        var currentClosingBracketCountChar = ' '\n        var currentOpeningBracketCharArray\
    \ = Array[Char]()\n        var currentClosingBracketCharArray = Array[Char]()\n\
    \        var currentOpeningBracketCountCharArray = Array[Char]()\n        var\
    \ currentClosingBracketCountCharArray = Array[Char]()\n        var currentOpeningBracketCountCharArrayLength\
    \ = currentOpeningBracketCountCharArray.length\n        var currentClosingBracketCountCharArrayLength\
    \ = currentClosingBracketCountCharArray.length\n        var currentOpeningBracketCountCharArrayIndex\
    \ = 0\n        var currentClosingBracketCountCharArrayIndex = 0\n        var currentOpeningBracketCountCharArrayIndexLength\
    \ = currentOpeningBracketCountCharArrayIndex.length\n        var currentClosingBracketCountCharArrayIndexLength\
    \ = currentClosingBracketCountCharArrayIndex.length\n        var currentOpeningBracketCountCharArrayIndexLength\
    \ = 0\n        var currentClosingBracketCountCharArrayIndexLength = 0\n      \
    \  var currentOpeningBracketCountCharArrayIndexLength = 0\n        var currentOpeningBracketCountCharArrayIndexLength\
    \ = 0\n        var currentOpeningBracketCountCharArrayIndexLength = 0\n      \
    \  var currentOpeningBracketCountCharArrayIndexLength = 0\n        var currentOpeningBracketCountCharArrayIndexLength\
    \ = 0\n        var currentOpeningBracketCountCharArrayIndexLength = 0\n      \
    \  var currentOpeningBracketCountCharArrayIndexLength = 0\n        var currentOpeningBracketCountCharArrayIndexLength\
    \ = 0\n        var currentOpeningBracketCountCharArrayIndexLength = 0\n      \
    \  var currentOpeningBracketCountCharArrayIndexLength = 0\n        var currentOpeningBracketCountCharArrayIndexLength\
    \ = 0\n        var currentOpeningBracketCountCharArrayIndexLength = 0\n      \
    \  var currentOpeningBracketCountCharArrayIndexLength = 0\n        var currentOpeningBracketCountCharArray",
  "        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets\
    \ = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.foldLeft(0)(_\
    \ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_ + _)\n\
    \        openingBracketsCount == closingBracketsCount", "        val bracketsArray\
    \ = brackets.toCharArray\n        val openingBrackets = mutable.HashSet[Char]()\n\
    \        val closingBrackets = mutable.HashSet[Char]()\n        bracketsArray.foreach\
    \ { c =>\n            if (c == '<') {\n                openingBrackets += c\n\
    \            } else if (c == '>') {\n                closingBrackets += c\n  \
    \          }\n        }\n        openingBrackets.size == closingBrackets.size",
  "        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets\
    \ = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.toSet.size\n\
    \        val closingBracketsCount = closingBrackets.toSet.size\n        openingBracketsCount\
    \ == closingBracketsCount", "        val openingBrackets = brackets.split(\"<\"\
    ).map(_.trim).toSet\n        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n\
    \        openingBrackets.forall(closingBrackets.contains)", "        val openingBrackets\
    \ = brackets.split(\"<\").map(_.trim).toSet\n        val closingBrackets = brackets.split(\"\
    >\").map(_.trim).toSet\n        openingBrackets.subsetOf(closingBrackets)", " \
    \       val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '<')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == '>')\n        openingBracketsCount == closingBracketsCount", "        val\
    \ bracketsArray = brackets.toCharArray\n        val openingBracketsArray = Array(\"\
    <\", \">\", \"(\", \")\")\n        val closingBracketsArray = Array(\"<\", \"\
    >\", \">\", \"<\")\n        val openingBracketsCount = openingBracketsArray.length\n\
    \        val closingBracketsCount = closingBracketsArray.length\n        var openingBracketsCountInCurrentBracket\
    \ = 0\n        var closingBracketsCountInCurrentBracket = 0\n        var currentBracket\
    \ = openingBracketsArray(0)\n        var currentBracketCount = 0\n        var\
    \ currentBracketCountInCurrentBracket = 0\n        var currentBracketCountInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBra",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsMap\
    \ = mutable.HashMap[String, Int]()\n        val closingBracketsMap = mutable.HashMap[String,\
    \ Int]()\n        for (i <- 0 until openingBracketsCount) {\n            val openingBracket\
    \ = openingBrackets(i)\n            val closingBracket = closingBrackets(i)\n\
    \            openingBracketsMap.put(openingBracket, openingBracketsMap.getOrElse(openingBracket,\
    \ 0) + 1)\n            closingBracketsMap.put(closingBracket, closingBracketsMap.getOrElse(closingBracket,\
    \ 0) + 1)\n        }\n        openingBracketsMap.forall { case (openingBracket,\
    \ count) =>\n            closingBracketsMap.get(openingBracket) == count\n   \
    \     }", "        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n\
    \        val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val\
    \ openingBracketsCount = openingBrackets.toSet.size\n        val closingBracketsCount\
    \ = closingBrackets.toSet.size\n        openingBracketsCount == closingBracketsCount",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n       \
    \ val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n        openingBrackets.forall(closingBrackets.contains)",
  "        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets\
    \ = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.toSet.size\n\
    \        val closingBracketsCount = closingBrackets.toSet.size\n        openingBracketsCount\
    \ == closingBracketsCount", "        val bracketsArray = brackets.toCharArray\n\
    \        val openingBracketsArray = bracketsArray.filter(_ == '<')\n        val\
    \ closingBracketsArray = bracketsArray.filter(_ == '>')\n        openingBracketsArray.forall(closingBracketsArray.contains)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        if (openingBracketsCount\
    \ != closingBracketsCount) {\n            return false\n        }\n        val\
    \ openingBracketsMap = mutable.HashMap[String, Int]()\n        for (openingBracket\
    \ <- openingBrackets) {\n            val closingBracket = closingBrackets(openingBracketsCount\
    \ - 1)\n            val closingBracketCount = openingBracketsCount - 1\n     \
    \       val closingBracketsMap = mutable.HashMap[String, Int]()\n            openingBracketsMap.put(openingBracket,\
    \ closingBracketCount)\n            closingBracketsMap.put(closingBracket, openingBracketCount)\n\
    \            val openingBracketCount = openingBracketsMap.get(openingBracket)\n\
    \            val closingBracketCount = closingBracketsMap.get(closingBracket)\n\
    \            if (openingBracketCount != closingBracketCount) {\n             \
    \   return false\n            }\n        }\n        return true", "        val\
    \ openingBrackets = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\"\
    >\")\n        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n       \
    \ val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n        openingBrackets.subsetOf(closingBrackets)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets\
    \ = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.foldLeft(0)(_\
    \ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_ + _)\n\
    \        openingBracketsCount == closingBracketsCount", "        val bracketsArray\
    \ = brackets.toCharArray\n        val openingBracketsArray = Array(\"<\")\n  \
    \      val closingBracketsArray = Array(\">\")\n        val openingBracketsCount\
    \ = openingBracketsArray.length\n        val closingBracketsCount = closingBracketsArray.length\n\
    \        val openingBracketsArrayLength = openingBracketsArray.length\n      \
    \  val closingBracketsArrayLength = closingBracketsArray.length\n        val openingBracketsArray\
    \ = Array.fill(openingBracketsArrayLength)(0)\n        val closingBracketsArray\
    \ = Array.fill(closingBracketsArrayLength)(0)\n        var openingBracketsIndex\
    \ = 0\n        var closingBracketsIndex = 0\n        var openingBracketsArrayIndex\
    \ = 0\n        var closingBracketsArrayIndex = 0\n        var openingBracketsArrayIndex2\
    \ = 0\n        var closingBracketsArrayIndex2 = 0\n        var openingBracketsArrayIndex3\
    \ = 0\n        var closingBracketsArrayIndex3 = 0\n        var openingBracketsArrayIndex4\
    \ = 0\n        var closingBracketsArrayIndex4 = 0\n        var openingBracketsArrayIndex5\
    \ = 0\n        var closingBracketsArrayIndex5 = 0\n        var openingBracketsArrayIndex6\
    \ = 0\n        var closingBracketsArrayIndex6 = 0\n        var openingBracketsArrayIndex7\
    \ = 0\n        var closingBracketsArrayIndex7 = 0\n        var openingBracketsArrayIndex8\
    \ = 0\n        var closingBracketsArrayIndex8 = 0\n        var openingBracketsArrayIndex9\
    \ = 0\n        var closingBracketsArrayIndex9 = 0\n        var openingBracketsArrayIndex10\
    \ = 0\n        var closingBracketsArrayIndex10 = 0\n        var openingBracketsArrayIndex11\
    \ = 0\n        var closingBracketsArrayIndex11 = 0\n        var openingBracketsArrayIndex12\
    \ = 0\n        var closingBracketsArrayIndex12 = 0\n        var openingBracketsArrayIndex13\
    \ = 0\n        var closingBracketsArrayIndex13 = 0\n        var openingBracketsArrayIndex14\
    \ = 0\n        var closingBracketsArrayIndex14 = 0\n        var openingBracketsArrayIndex15\
    \ = 0\n        var closingBracketsArrayIndex15 = 0\n        var openingBracketsArrayIndex16\
    \ = 0\n        var closingBracketsArrayIndex16 = 0\n        var openingBracketsArrayIndex17\
    \ = 0\n        var closingBracketsArrayIndex17 = 0\n        var ", "        val\
    \ bracketsArray = brackets.toList\n        val openingBrackets = bracketsArray.filter(x\
    \ => x == \"<\")\n        val closingBrackets = bracketsArray.filter(x => x ==\
    \ \">\")\n        openingBrackets.size == closingBrackets.size", "        val\
    \ bracketsArray = brackets.toCharArray\n        val openingBracketsCount = bracketsArray.count(_\
    \ == '<')\n        val closingBracketsCount = bracketsArray.count(_ == '>')\n\
    \        openingBracketsCount == closingBracketsCount", "        val bracketsArray\
    \ = brackets.toCharArray\n        var openingBrackets = 0\n        var closingBrackets\
    \ = 0\n        var openingBracketsArray = new Array[Char](bracketsArray.length)\n\
    \        var closingBracketsArray = new Array[Char](bracketsArray.length)\n  \
    \      var i = 0\n        while (i < bracketsArray.length) {\n            openingBracketsArray(i)\
    \ = bracketsArray(i)\n            closingBracketsArray(i) = bracketsArray(i)\n\
    \            i += 1\n        }\n        while (i < bracketsArray.length) {\n \
    \           if (openingBracketsArray(i) == '<') {\n                openingBrackets\
    \ += 1\n                closingBracketsArray(i) = '>'\n                i += 1\n\
    \            } else if (openingBracketsArray(i) == '>') {\n                openingBrackets\
    \ -= 1\n                closingBracketsArray(i) = openingBracketsArray(i)\n  \
    \              i += 1\n            }\n        }\n        openingBrackets == 0\
    \ && closingBrackets == 0", "        val openingBrackets = brackets.split(\"<\"\
    ).map(_.toInt)\n        val closingBrackets = brackets.split(\">\").map(_.toInt)\n\
    \        val openingBracketsCount = openingBrackets.toSet.size\n        val closingBracketsCount\
    \ = closingBrackets.toSet.size\n        openingBracketsCount == closingBracketsCount",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(_ == '<')\n        val closingBracketsArray = bracketsArray.filter(_\
    \ == '>')\n        openingBracketsArray.forall(closingBracketsArray.contains)",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(c => c == '<')\n        val closingBracketsArray = bracketsArray.filter(c\
    \ => c == '>')\n        openingBracketsArray.forall(c => closingBracketsArray.contains(c))",
  "        val bracketsArray = brackets.toCharArray\n        var openingBrackets :\
    \ List[Char] = Nil\n        var closingBrackets : List[Char] = Nil\n        var\
    \ openingBracketsCount : Int = 0\n        var closingBracketsCount : Int = 0\n\
    \        var currentBrackets : List[Char] = Nil\n        var currentBracketsCount\
    \ : Int = 0\n        var currentOpeningBrackets : List[Char] = Nil\n        var\
    \ currentOpeningBracketsCount : Int = 0\n        var currentClosingBrackets :\
    \ List[Char] = Nil\n        var currentClosingBracketsCount : Int = 0\n      \
    \  var currentBracketsArray : Array[Char] = Nil\n        var currentBracketsArrayCount\
    \ : Int = 0\n        var currentOpeningBracketsArray : Array[Char] = Nil\n   \
    \     var currentOpeningBracketsArrayCount : Int = 0\n        var currentClosingBracketsArray\
    \ : Array[Char] = Nil\n        var currentClosingBracketsArrayCount : Int = 0\n\
    \        var currentBracketsArrayIndex : Int = 0\n        var currentOpeningBracketsArrayIndex\
    \ : Int = 0\n        var currentClosingBracketsArrayIndex : Int = 0\n        var\
    \ currentBracketsArrayIndexCount : Int = 0\n        var currentOpeningBracketsArrayIndexCount\
    \ : Int = 0\n        var currentClosingBracketsArrayIndexCount : Int = 0\n   \
    \     var currentBracketsArrayIndex : Int = 0\n        var currentOpeningBracketsArrayIndex\
    \ : Int = 0\n        var currentClosingBracketsArrayIndex : Int = 0\n        var\
    \ currentBracketsArrayIndexCount : Int = 0\n        var currentOpeningBracketsArrayIndexCount\
    \ : Int = 0\n        var currentClosingBracketsArrayIndexCount : Int = 0\n   \
    \     var currentBracketsArrayIndex : Int = 0\n        var currentOpeningBracketsArrayIndex\
    \ : Int = 0\n        var currentClosingBracketsArrayIndex : Int = 0\n        var\
    \ currentBracketsArrayIndexCount : Int = 0\n        var currentOpeningBracketsArrayIndexCount\
    \ : Int = 0\n        var currentClosingBracketsArrayIndexCount : Int = 0\n   \
    \     var currentBracketsArrayIndex : Int = 0\n        var currentOpeningBracketsArrayIndex\
    \ : Int = 0\n        var currentClosingBracketsArrayIndex : Int = 0\n        var\
    \ currentBracketsArrayIndexCount : Int = 0\n        var currentOpeningBracketsArrayIndexCount\
    \ : Int = 0\n        var currentClosingBracketsArray", "        val bracketsArray\
    \ = brackets.toCharArray\n        val openingBracketsCount = bracketsArray.filter(c\
    \ => c == '<').length\n        val closingBracketsCount = bracketsArray.filter(c\
    \ => c == '>').length\n        openingBracketsCount != closingBracketsCount",
  "        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets\
    \ = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.zip(closingBrackets).forall { case\
    \ (opening, closing) => opening == closing }", "        val bracketsArray = brackets.toCharArray\n\
    \        val openingBracketsArray = Array(\"<\", \">\")\n        val closingBracketsArray\
    \ = Array(\"<\", \">\")\n        val openingBracketsCount = openingBracketsArray.length\n\
    \        val closingBracketsCount = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        val openingBracketsArray = Array.fill(openingBracketsArrayLength)(0)\n\
    \        val closingBracketsArray = Array.fill(closingBracketsArrayLength)(0)\n\
    \        var openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n\
    \        var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayIndex2 = 0\n        var closingBracketsArrayIndex2\
    \ = 0\n        var openingBracketsArrayIndex3 = 0\n        var closingBracketsArrayIndex3\
    \ = 0\n        var openingBracketsArrayIndex4 = 0\n        var closingBracketsArrayIndex4\
    \ = 0\n        var openingBracketsArrayIndex5 = 0\n        var closingBracketsArrayIndex5\
    \ = 0\n        var openingBracketsArrayIndex6 = 0\n        var closingBracketsArrayIndex6\
    \ = 0\n        var openingBracketsArrayIndex7 = 0\n        var closingBracketsArrayIndex7\
    \ = 0\n        var openingBracketsArrayIndex8 = 0\n        var closingBracketsArrayIndex8\
    \ = 0\n        var openingBracketsArrayIndex9 = 0\n        var closingBracketsArrayIndex9\
    \ = 0\n        var openingBracketsArrayIndex10 = 0\n        var closingBracketsArrayIndex10\
    \ = 0\n        var openingBracketsArrayIndex11 = 0\n        var closingBracketsArrayIndex11\
    \ = 0\n        var openingBracketsArrayIndex12 = 0\n        var closingBracketsArrayIndex12\
    \ = 0\n        var openingBracketsArrayIndex13 = 0\n        var closingBracketsArrayIndex13\
    \ = 0\n        var openingBracketsArrayIndex14 = 0\n        var closingBracketsArrayIndex14\
    \ = 0\n        var openingBracketsArrayIndex15 = 0\n        var closingBracketsArrayIndex15\
    \ = 0\n        var openingBracketsArrayIndex16 = 0\n        var closingBracketsArrayIndex16\
    \ = 0\n        var openingBracketsArrayIndex17 = 0\n        var closingBracketsArrayIndex",
  "        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets\
    \ = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.toSet.size\n\
    \        val closingBracketsCount = closingBrackets.toSet.size\n        openingBracketsCount\
    \ == closingBracketsCount", "        val openingBrackets = brackets.split(\"<\"\
    ).map(_.trim).toSet\n        val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n\
    \        openingBrackets.subsetOf(closingBrackets)", "        val openingBrackets\
    \ = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets = brackets.split(\"\
    >\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.toSet.size\n\
    \        val closingBracketsCount = closingBrackets.toSet.size\n        openingBracketsCount\
    \ == closingBracketsCount", "        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))", "        val bracketsArray =\
    \ brackets.toCharArray\n        val bracketsArrayLength = bracketsArray.length\n\
    \        var openingBracketsCount = 0\n        var closingBracketsCount = 0\n\
    \        var openingBracketsCountInCurrentBracket = 0\n        var closingBracketsCountInCurrentBracket\
    \ = 0\n        var currentBracket = bracketsArray(0)\n        var currentBracketCount\
    \ = 0\n        var currentBracketCountInCurrentBracket = 0\n        var currentBracketCountInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrent", "        val\
    \ openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n        val closingBrackets\
    \ = brackets.split(\">\").map(_.trim).toSet\n        openingBrackets.forall(closingBrackets.contains)",
  "        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCount2 = 0\n        var closingBracketsCount2\
    \ = 0\n        var openingBracketsCount3 = 0\n        var closingBracketsCount3\
    \ = 0\n        var openingBracketsCount4 = 0\n        var closingBracketsCount4\
    \ = 0\n        var openingBracketsCount5 = 0\n        var closingBracketsCount5\
    \ = 0\n        var openingBracketsCount6 = 0\n        var closingBracketsCount6\
    \ = 0\n        var openingBracketsCount7 = 0\n        var closingBracketsCount7\
    \ = 0\n        var openingBracketsCount8 = 0\n        var closingBracketsCount8\
    \ = 0\n        var openingBracketsCount9 = 0\n        var closingBracketsCount9\
    \ = 0\n        var openingBracketsCount10 = 0\n        var closingBracketsCount10\
    \ = 0\n        var openingBracketsCount11 = 0\n        var closingBracketsCount11\
    \ = 0\n        var openingBracketsCount12 = 0\n        var closingBracketsCount12\
    \ = 0\n        var openingBracketsCount13 = 0\n        var closingBracketsCount13\
    \ = 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBracketsCount23\
    \ = 0\n        var openingBracketsCount24 = 0\n        var closingBracketsCount24\
    \ = 0\n        var openingBracketsCount25 = 0\n        var closingBracketsCount25\
    \ = 0\n        var openingBracketsCount26 = 0\n        var closingBracketsCount",
  "        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets\
    \ = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.toSet.size\n\
    \        val closingBracketsCount = closingBrackets.toSet.size\n        openingBracketsCount\
    \ == closingBracketsCount", "        val bracketsArray = brackets.toCharArray\n\
    \        val openingBrackets = bracketsArray.filter(c => c == '<')\n        val\
    \ closingBrackets = bracketsArray.filter(c => c == '>')\n        openingBrackets.size\
    \ == closingBrackets.size", "        val openingBrackets = brackets.split(\"<\"\
    ).map(_.toInt)\n        val closingBrackets = brackets.split(\">\").map(_.toInt)\n\
    \        val openingBracketsCount = openingBrackets.foldLeft(0)(_ + _)\n     \
    \   val closingBracketsCount = closingBrackets.foldLeft(0)(_ + _)\n        openingBracketsCount\
    \ == closingBracketsCount", "        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))", "        val bracketsArray = brackets.toCharArray\n\
    \        val bracketsArrayLength = bracketsArray.length\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        var openingBracketsCountInCurrentBracket\
    \ = 0\n        var closingBracketsCountInCurrentBracket = 0\n        var currentBracket\
    \ = bracketsArray(0)\n        var currentBracketCount = 0\n        var currentBracketCountInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracket = 0\n \
    \       var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracketInCurrentBracket\
    \ = 0\n        var currentBracketCountInCurrentBracketInCurrent", "        val\
    \ bracketsArray = brackets.toCharArray\n        val openingBracketsCount = bracketsArray.count(_\
    \ == '<')\n        val closingBracketsCount = bracketsArray.count(_ == '>')\n\
    \        openingBracketsCount != closingBracketsCount", "        val bracketsArray\
    \ = brackets.toCharArray\n        val openingBracketsArray = bracketsArray.filter(c\
    \ => c == '<')\n        val closingBracketsArray = bracketsArray.filter(c => c\
    \ == '>')\n        openingBracketsArray.forall(c => closingBracketsArray.contains(c))",
  "        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n       \
    \ val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n        openingBrackets.subsetOf(closingBrackets)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.size == closingBracketsSet.size &&\n            openingBracketsSet.forall(openingBracket\
    \ => closingBracketsSet.contains(openingBracket))", "        val openingBrackets\
    \ = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets = brackets.split(\"\
    >\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.foldLeft(0)(_\
    \ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_ + _)\n\
    \        openingBracketsCount == closingBracketsCount", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        if (openingBracketsCount != closingBracketsCount)\
    \ {\n            return false\n        }\n        var openingBracketsIndex = 0\n\
    \        var closingBracketsIndex = 0\n        while (openingBracketsIndex < openingBracketsCount\
    \ && closingBracketsIndex < closingBracketsCount) {\n            if (openingBrackets(openingBracketsIndex)\
    \ != closingBrackets(closingBracketsIndex)) {\n                return false\n\
    \            }\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        }\n        if (openingBracketsIndex != openingBracketsCount) {\n\
    \            return false\n        }\n        if (closingBracketsIndex != closingBracketsCount)\
    \ {\n            return false\n        }\n        return true", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        openingBracketsCount == closingBracketsCount\
    \ && openingBrackets.forall(x => closingBrackets.contains(x))", "        val bracketsArray\
    \ = brackets.toCharArray\n        val bracketsArrayLength = bracketsArray.length\n\
    \        val openingBracketsArray = new Array[Int](bracketsArrayLength)\n    \
    \    val closingBracketsArray = new Array[Int](bracketsArrayLength)\n        var\
    \ openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n        var\
    \ openingBracketsCount = 0\n        var closingBracketsCount = 0\n        var\
    \ openingBracketsCount2 = 0\n        var closingBracketsCount2 = 0\n        var\
    \ openingBracketsCount3 = 0\n        var closingBracketsCount3 = 0\n        var\
    \ openingBracketsCount4 = 0\n        var closingBracketsCount4 = 0\n        var\
    \ openingBracketsCount5 = 0\n        var closingBracketsCount5 = 0\n        var\
    \ openingBracketsCount6 = 0\n        var closingBracketsCount6 = 0\n        var\
    \ openingBracketsCount7 = 0\n        var closingBracketsCount7 = 0\n        var\
    \ openingBracketsCount8 = 0\n        var closingBracketsCount8 = 0\n        var\
    \ openingBracketsCount9 = 0\n        var closingBracketsCount9 = 0\n        var\
    \ openingBracketsCount10 = 0\n        var closingBracketsCount10 = 0\n       \
    \ var openingBracketsCount11 = 0\n        var closingBracketsCount11 = 0\n   \
    \     var openingBracketsCount12 = 0\n        var closingBracketsCount12 = 0\n\
    \        var openingBracketsCount13 = 0\n        var closingBracketsCount13 =\
    \ 0\n        var openingBracketsCount14 = 0\n        var closingBracketsCount14\
    \ = 0\n        var openingBracketsCount15 = 0\n        var closingBracketsCount15\
    \ = 0\n        var openingBracketsCount16 = 0\n        var closingBracketsCount16\
    \ = 0\n        var openingBracketsCount17 = 0\n        var closingBracketsCount17\
    \ = 0\n        var openingBracketsCount18 = 0\n        var closingBracketsCount18\
    \ = 0\n        var openingBracketsCount19 = 0\n        var closingBracketsCount19\
    \ = 0\n        var openingBracketsCount20 = 0\n        var closingBracketsCount20\
    \ = 0\n        var openingBracketsCount21 = 0\n        var closingBracketsCount21\
    \ = 0\n        var openingBracketsCount22 = 0\n        var closingBracketsCount22\
    \ = 0\n        var openingBracketsCount23 = 0\n        var closingBrackets", " \
    \       val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n      \
    \  val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n        openingBrackets.forall(closingBrackets.contains)",
  "        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCountInside = 0\n        var closingBracketsCountInside\
    \ = 0\n        var openingBracketsCountOutside = 0\n        var closingBracketsCountOutside\
    \ = 0\n        var openingBracketsCountInsideOutside = 0\n        var closingBracketsCountInsideOutside\
    \ = 0\n        var openingBracketsCountOutsideInside = 0\n        var closingBracketsCountOutsideInside\
    \ = 0\n        var openingBracketsCountInsideOutsideOutside = 0\n        var closingBracketsCountInsideOutsideOutside\
    \ = 0\n        var openingBracketsCountOutsideInsideInside = 0\n        var closingBracketsCountOutsideInsideInside\
    \ = 0\n        var openingBracketsCountInsideOutsideOutsideInside = 0\n      \
    \  var closingBracketsCountInsideOutsideOutsideInside = 0\n        var openingBracketsCountOutsideInsideInside\
    \ = 0\n        var closingBracketsCountOutsideInsideInside = 0\n        var openingBracketsCountInsideOutsideOutsideInsideInside\
    \ = 0\n        var closingBracketsCountInsideOutsideOutsideInsideInside = 0\n\
    \        var openingBracketsCountOutsideInsideInside = 0\n        var closingBracketsCountOutsideInsideInside\
    \ = 0\n        var openingBracketsCountInsideOutsideOutsideInsideInside = 0\n\
    \        var closingBracketsCountInsideOutsideOutsideInsideInside = 0\n      \
    \  var openingBracketsCountOutsideInsideInside = 0\n        var closingBracketsCountOutsideInsideInside\
    \ = 0\n        var openingBracketsCountInsideOutsideOutsideInsideInside = 0\n\
    \        var closingBracketsCountInsideOutsideOutsideInsideInside = 0\n      \
    \  var openingBracketsCountOutsideInsideInside = 0\n        var closingBracketsCountOutsideInsideInside\
    \ = 0\n        var openingBracketsCountInsideOutsideOutsideInsideInside = 0\n\
    \        var closingBracketsCountInsideOutsideOutsideInsideInside = 0\n      \
    \  var openingBracketsCountOutsideInsideInside = 0\n        var closingBracketsCountOutsideInside",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.filter(c => c == '<').length\n        val closingBracketsCount\
    \ = bracketsArray.filter(c => c == '>').length\n        openingBracketsCount ==\
    \ closingBracketsCount", "        val bracketsArray = brackets.toCharArray\n \
    \       val bracketsArrayLength = bracketsArray.length\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        var openingBracketsCountInside\
    \ = 0\n        var closingBracketsCountInside = 0\n        var openingBracketsCountOutside\
    \ = 0\n        var closingBracketsCountOutside = 0\n        var openingBracketsCountInsideOutside\
    \ = 0\n        var closingBracketsCountInsideOutside = 0\n        var openingBracketsCountOutsideInside\
    \ = 0\n        var closingBracketsCountOutsideInside = 0\n        var openingBracketsCountInsideOutsideInside\
    \ = 0\n        var closingBracketsCountInsideOutsideInside = 0\n        var openingBracketsCountOutsideInsideOutside\
    \ = 0\n        var closingBracketsCountOutsideInsideOutside = 0\n        var openingBracketsCountInsideOutsideInsideOutside\
    \ = 0\n        var closingBracketsCountInsideOutsideInsideOutside = 0\n      \
    \  var openingBracketsCountOutsideInsideOutsideInside = 0\n        var closingBracketsCountOutsideInsideOutsideInside\
    \ = 0\n        var openingBracketsCountInsideOutsideInsideOutsideInside = 0\n\
    \        var closingBracketsCountInsideOutsideInsideOutsideInside = 0\n      \
    \  var openingBracketsCountOutsideInsideOutsideInsideOutside = 0\n        var\
    \ closingBracketsCountOutsideInsideOutsideInsideOutside = 0\n        var openingBracketsCountInsideOutsideInsideOutsideInsideOutside\
    \ = 0\n        var closingBracketsCountInsideOutsideInsideOutsideInsideOutside\
    \ = 0\n        var openingBracketsCountOutsideInsideOutsideInsideOutsideInsideOutside\
    \ = 0\n        var closingBracketsCountOutsideInsideOutsideInsideOutsideInsideOutside\
    \ = 0\n        var openingBracketsCountInsideOutsideInsideOutsideInsideOutsideInsideOutside\
    \ = 0\n        var closingBracketsCountInsideOutsideInsideOutsideInsideOutsideInsideOutside\
    \ = 0\n        var openingBracketsCountOutsideInsideOutsideInsideOutsideInsideOutsideInsideOutside\
    \ = 0\n        var closingBracketsCountOutsideInsideOutsideInsideOutsideInsideOutside",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n       \
    \ val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n        openingBrackets.subsetOf(closingBrackets)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val bracketsArray = brackets.toList\n        val openingBracketsArray =\
    \ bracketsArray.filter(x => x == \"<\")\n        val closingBracketsArray = bracketsArray.filter(x\
    \ => x == \">\")\n        openingBracketsArray.forall(x => closingBracketsArray.contains(x))",
  "        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n       \
    \ val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n        openingBrackets.subsetOf(closingBrackets)",
  "        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentOpeningBracket = bracketsArray(0)\n        var currentClosingBracket\
    \ = bracketsArray(0)\n        var currentOpeningBracketCount = 0\n        var\
    \ currentClosingBracketCount = 0\n        var currentOpeningBracketIndex = -1\n\
    \        var currentClosingBracketIndex = -1\n        var currentOpeningBracketCountIndex\
    \ = -1\n        var currentClosingBracketCountIndex = -1\n        var currentOpeningBracketIndexInArray\
    \ = -1\n        var currentClosingBracketIndexInArray = -1\n        var currentOpeningBracketCountIndexInArray\
    \ = -1\n        var currentClosingBracketCountIndexInArray = -1\n        var currentOpeningBracketIndexInArrayLength\
    \ = -1\n        var currentClosingBracketIndexInArrayLength = -1\n        var\
    \ currentOpeningBracketCountIndexInArrayLength = -1\n        var currentClosingBracketCountIndexInArrayLength\
    \ = -1\n        var currentOpeningBracketIndexInArrayLength = -1\n        var\
    \ currentClosingBracketIndexInArrayLength = -1\n        var currentOpeningBracketCountIndexInArrayLength\
    \ = -1\n        var currentClosingBracketCountIndexInArrayLength = -1\n      \
    \  var currentOpeningBracketCountIndexInArrayLength = -1\n        var currentOpeningBracketCountIndexInArrayLength\
    \ = -1\n        var currentOpeningBracketCountIndexInArrayLength = -1\n      \
    \  var currentOpeningBracketCountIndexInArrayLength = -1\n        var currentOpeningBracketCountIndexInArrayLength\
    \ = -1\n        var currentOpeningBracketCountIndexInArrayLength = -1\n      \
    \  var currentOpeningBracketCountIndexInArrayLength = -1\n        var currentOpeningBracketCountIndexInArrayLength\
    \ = -1\n        var currentOpeningBracketCountIndexInArrayLength = -1\n      \
    \  var currentOpeningBracketCountIndexInArrayLength = -1\n        var currentOpeningBracketCountIndexInArrayLength\
    \ = -1\n        var currentOpeningBracketCountIndexInArrayLength = -1\n      \
    \  var currentOpeningBracketCountIndexInArrayLength = -1\n        var currentOpeningBracketCountIndexInArrayLength\
    \ = -1\n        var currentOpeningBracketCountIndexInArrayLength = -1\n      \
    \  var currentOpeningBracketCountIndexInArrayLength = -1\n        var currentOpeningBracketCountIndexInArrayLength\
    \ = -1\n        var currentOpeningBracketCountIndexInArrayLength = -1\n      \
    \  var currentOpeningBracketCountIndexInArrayLength = -1", "        val bracketsArray\
    \ = brackets.toCharArray\n        val openingBracketsCount = bracketsArray.filter(c\
    \ => c == '<').length\n        val closingBracketsCount = bracketsArray.filter(c\
    \ => c == '>').length\n        openingBracketsCount == closingBracketsCount",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.filter(c => c == '<').length\n        val closingBracketsCount\
    \ = bracketsArray.filter(c => c == '>').length\n        openingBracketsCount ==\
    \ closingBracketsCount", "        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n\
    \        val closingBrackets = brackets.split(\">\").map(_.toInt)\n        val\
    \ openingBracketsCount = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount\
    \ = closingBrackets.foldLeft(0)(_ + _)\n        openingBracketsCount == closingBracketsCount",
  "        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n       \
    \ val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n        openingBrackets.subsetOf(closingBrackets)",
  "        val bracketsArray = brackets.toCharArray\n        val openingBrackets =\
    \ mutable.HashSet[Char]()\n        val closingBrackets = mutable.HashSet[Char]()\n\
    \        val openingBracketsArray = mutable.ArrayBuffer(0)\n        val closingBracketsArray\
    \ = mutable.ArrayBuffer(0)\n        var openingBracketsIndex = 0\n        var\
    \ closingBracketsIndex = 0\n        var openingBracketsCount = 0\n        var\
    \ closingBracketsCount = 0\n        var openingBracketsCount2 = 0\n        var\
    \ closingBracketsCount2 = 0\n        var openingBracketsCount3 = 0\n        var\
    \ closingBracketsCount3 = 0\n        var openingBracketsCount4 = 0\n        var\
    \ closingBracketsCount4 = 0\n        var openingBracketsCount5 = 0\n        var\
    \ closingBracketsCount5 = 0\n        var openingBracketsCount6 = 0\n        var\
    \ closingBracketsCount6 = 0\n        var openingBracketsCount7 = 0\n        var\
    \ closingBracketsCount7 = 0\n        var openingBracketsCount8 = 0\n        var\
    \ closingBracketsCount8 = 0\n        var openingBracketsCount9 = 0\n        var\
    \ closingBracketsCount9 = 0\n        var openingBracketsCount10 = 0\n        var\
    \ closingBracketsCount10 = 0\n        var openingBracketsCount11 = 0\n       \
    \ var closingBracketsCount11 = 0\n        var openingBracketsCount12 = 0\n   \
    \     var closingBracketsCount12 = 0\n        var openingBracketsCount13 = 0\n\
    \        var closingBracketsCount13 = 0\n        var openingBracketsCount14 =\
    \ 0\n        var closingBracketsCount14 = 0\n        var openingBracketsCount15\
    \ = 0\n        var closingBracketsCount15 = 0\n        var openingBracketsCount16\
    \ = 0\n        var closingBracketsCount16 = 0\n        var openingBracketsCount17\
    \ = 0\n        var closingBracketsCount17 = 0\n        var openingBracketsCount18\
    \ = 0\n        var closingBracketsCount18 = 0\n        var openingBracketsCount19\
    \ = 0\n        var closingBracketsCount19 = 0\n        var openingBracketsCount20\
    \ = 0\n        var closingBracketsCount20 = 0\n        var openingBracketsCount21\
    \ = 0\n        var closingBracketsCount21 = 0\n        var openingBracketsCount22\
    \ = 0\n        var closingBracketsCount22 = 0\n        var openingBracketsCount",
  "        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets\
    \ = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.foldLeft(0)(_\
    \ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_ + _)\n\
    \        openingBracketsCount == closingBracketsCount", "        val bracketsArray\
    \ = brackets.toCharArray\n        val openingBrackets = mutable.HashSet[Char]()\n\
    \        val closingBrackets = mutable.HashSet[Char]()\n        val openingBracketsCount\
    \ = mutable.HashMap[Char, Int]()\n        val closingBracketsCount = mutable.HashMap[Char,\
    \ Int]()\n        val openingBracketsCountArray = mutable.ArrayBuffer.empty[Int]\n\
    \        val closingBracketsCountArray = mutable.ArrayBuffer.empty[Int]\n    \
    \    val openingBracketsCountArray2 = mutable.ArrayBuffer.empty[Int]\n       \
    \ val closingBracketsCountArray2 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openingBracketsCountArray3 = mutable.ArrayBuffer.empty[Int]\n        val closingBracketsCountArray3\
    \ = mutable.ArrayBuffer.empty[Int]\n        val openingBracketsCountArray4 = mutable.ArrayBuffer.empty[Int]\n\
    \        val closingBracketsCountArray4 = mutable.ArrayBuffer.empty[Int]\n   \
    \     val openingBracketsCountArray5 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val closingBracketsCountArray5 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openingBracketsCountArray6 = mutable.ArrayBuffer.empty[Int]\n        val closingBracketsCountArray6\
    \ = mutable.ArrayBuffer.empty[Int]\n        val openingBracketsCountArray7 = mutable.ArrayBuffer.empty[Int]\n\
    \        val closingBracketsCountArray7 = mutable.ArrayBuffer.empty[Int]\n   \
    \     val openingBracketsCountArray8 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val closingBracketsCountArray8 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openingBracketsCountArray9 = mutable.ArrayBuffer.empty[Int]\n        val closingBracketsCountArray9\
    \ = mutable.ArrayBuffer.empty[Int]\n        val openingBracketsCountArray10 =\
    \ mutable.ArrayBuffer.empty[Int]\n        val closingBracketsCountArray10 = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArray11 = mutable.ArrayBuffer.empty[Int]\n  \
    \      val closingBracketsCountArray11 = mutable.ArrayBuffer.empty[Int]\n    \
    \    val openingBracketsCountArray12 = mutable.ArrayBuffer.empty[Int]\n      \
    \  val closingBracketsCountArray", "        val bracketsArray = brackets.toCharArray\n\
    \        var openingBrackets = 0 // number of opening brackets\n        var closingBrackets\
    \ = 0 // number of closing brackets\n        var openingBracketsArray = Array.empty[Char]\n\
    \        var closingBracketsArray = Array.empty[Char]\n        var openingBracketsArrayIndex\
    \ = Array.empty[Int]\n        var closingBracketsArrayIndex = Array.empty[Int]\n\
    \        var openingBracketsArrayLength = Array.empty[Int]\n        var closingBracketsArrayLength\
    \ = Array.empty[Int]\n        var openingBracketsArrayIndexLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLength = Array.empty[Int]\n        var openingBracketsArrayIndexLengthLength\
    \ = Array.empty[Int]\n        var closingBracketsArrayIndexLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var closingBracketsArrayIndexLengthLengthLength = Array.empty[Int]\n\
    \        var openingBra", "        val openingBrackets = brackets.split(\"<\"\
    ).map(_.toInt)\n        val closingBrackets = brackets.split(\">\").map(_.toInt)\n\
    \        val openingBracketsCount = openingBrackets.foldLeft(0)(_ + _)\n     \
    \   val closingBracketsCount = closingBrackets.foldLeft(0)(_ + _)\n        openingBracketsCount\
    \ == closingBracketsCount", "        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n       \
    \ val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n        openingBrackets.subsetOf(closingBrackets)",
  "        val bracketsArray = brackets.toList\n        val openingBrackets = bracketsArray.filter(x\
    \ => x == \"<\")\n        val closingBrackets = bracketsArray.filter(x => x ==\
    \ \">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))", " \
    \       val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val bracketsArrayIterator = bracketsArray.iterator\n\
    \        var openingBracketCount = 0\n        var closingBracketCount = 0\n  \
    \      while(bracketsArrayIterator.hasNext) {\n            val nextChar = bracketsArrayIterator.next()\n\
    \            if(nextChar == '<') {\n                openingBracketCount += 1\n\
    \            }\n            if(nextChar == '>') {\n                closingBracketCount\
    \ += 1\n            }\n        }\n        openingBracketCount < closingBracketCount",
  "        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var openingBracketsCountArray = new Array[Int](bracketsArrayLength)\n\
    \        var closingBracketsCountArray = new Array[Int](bracketsArrayLength)\n\
    \        var openingBracketsCountArrayIndex = 0\n        var closingBracketsCountArrayIndex\
    \ = 0\n        var openingBracketsCountArrayIndex2 = 0\n        var closingBracketsCountArrayIndex2\
    \ = 0\n        var openingBracketsCountArrayIndex3 = 0\n        var closingBracketsCountArrayIndex3\
    \ = 0\n        var openingBracketsCountArrayIndex4 = 0\n        var closingBracketsCountArrayIndex4\
    \ = 0\n        var openingBracketsCountArrayIndex5 = 0\n        var closingBracketsCountArrayIndex5\
    \ = 0\n        var openingBracketsCountArrayIndex6 = 0\n        var closingBracketsCountArrayIndex6\
    \ = 0\n        var openingBracketsCountArrayIndex7 = 0\n        var closingBracketsCountArrayIndex7\
    \ = 0\n        var openingBracketsCountArrayIndex8 = 0\n        var closingBracketsCountArrayIndex8\
    \ = 0\n        var openingBracketsCountArrayIndex9 = 0\n        var closingBracketsCountArrayIndex9\
    \ = 0\n        var openingBracketsCountArrayIndex10 = 0\n        var closingBracketsCountArrayIndex10\
    \ = 0\n        var openingBracketsCountArrayIndex11 = 0\n        var closingBracketsCountArrayIndex11\
    \ = 0\n        var openingBracketsCountArrayIndex12 = 0\n        var closingBracketsCountArrayIndex12\
    \ = 0\n        var openingBracketsCountArrayIndex13 = 0\n        var closingBracketsCountArrayIndex13\
    \ = 0\n        var openingBracketsCountArrayIndex14 = 0\n        var closingBracketsCountArrayIndex14\
    \ = 0\n        var openingBracketsCountArrayIndex15 = 0\n        var closingBracketsCountArrayIndex15\
    \ = 0\n        var openingBracketsCountArrayIndex16 = 0\n        var closingBracketsCountArrayIndex16\
    \ = 0\n        var openingBracketsCountArrayIndex17 = 0\n        var closingBracketsCountArrayIndex17\
    \ = 0\n        var openingBracketsCountArrayIndex18 = 0\n        var closingBracketsCountArrayIndex18\
    \ = 0\n        var openingBracketsCountArrayIndex19 = 0\n        var closingBracketsCountArray",
  "        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n       \
    \ val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n        openingBrackets.forall(closingBrackets.contains)",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"<\")\n        val closingBracketsArray = Array(\">\")\n        val\
    \ openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        var openingBracketsIndex = 0\n      \
    \  var closingBracketsIndex = 0\n        var openingBracketsCountSoFar = 0\n \
    \       var closingBracketsCountSoFar = 0\n        var openingBracketsCountSoFarSoFar\
    \ = 0\n        var closingBracketsCountSoFarSoFar = 0\n        var openingBracketsCountSoFarSoFarSoFar\
    \ = 0\n        var closingBracketsCountSoFarSoFarSoFar = 0\n        var openingBracketsCountSoFarSoFarSoFarSoFar\
    \ = 0\n        var closingBracketsCountSoFarSoFarSoFarSoFar = 0\n        var openingBracketsCountSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        var closingBracketsCountSoFarSoFarSoFarSoFarSoFar = 0\n       \
    \ var openingBracketsCountSoFarSoFarSoFarSoFarSoFar = 0\n        var closingBracketsCountSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        var openingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFar = 0\n  \
    \      var closingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        var\
    \ openingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFarSoFar = 0\n        var closingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        var openingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        var closingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        var openingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        var closingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        var openingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = 0\n        var closingBracketsCountSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSo",
  "        val bracketsArray = brackets.toCharArray\n        val openingBrackets =\
    \ mutable.ListBuffer[Char]()\n        val closingBrackets = mutable.ListBuffer[Char]()\n\
    \        val openingBracketsCount = mutable.ListBuffer[Int]()\n        val closingBracketsCount\
    \ = mutable.ListBuffer[Int]()\n        var openingBracketsIndex = 0\n        var\
    \ closingBracketsIndex = 0\n        var currentOpeningBracketsIndex = 0\n    \
    \    var currentClosingBracketsIndex = 0\n        var currentOpeningBracketsCount\
    \ = 0\n        var currentClosingBracketsCount = 0\n        var currentOpeningBracketsChar\
    \ = ' '\n        var currentClosingBracketsChar = ' '\n        var currentOpeningBracketsCharCount\
    \ = 0\n        var currentClosingBracketsCharCount = 0\n        var currentOpeningBracketsCharArray\
    \ = Array[Char]()\n        var currentClosingBracketsCharArray = Array[Char]()\n\
    \        var currentOpeningBracketsCharArrayIndex = 0\n        var currentClosingBracketsCharArrayIndex\
    \ = 0\n        var currentOpeningBracketsCharArrayCount = 0\n        var currentClosingBracketsCharArrayCount\
    \ = 0\n        var currentOpeningBracketsCharArrayIndex = 0\n        var currentClosingBracketsCharArrayIndex\
    \ = 0\n        var currentOpeningBracketsCharArrayCount = 0\n        var currentClosingBracketsCharArrayCount\
    \ = 0\n        var currentOpeningBracketsCharArrayIndex = 0\n        var currentClosingBracketsCharArrayIndex\
    \ = 0\n        var currentOpeningBracketsCharArrayCount = 0\n        var currentClosingBracketsCharArrayCount\
    \ = 0\n        var currentOpeningBracketsCharArrayIndex = 0\n        var currentClosingBracketsCharArrayIndex\
    \ = 0\n        var currentOpeningBracketsCharArrayCount = 0\n        var currentClosingBracketsCharArrayCount\
    \ = 0\n        var currentOpeningBracketsCharArrayIndex = 0\n        var currentClosingBracketsCharArrayIndex\
    \ = 0\n        var currentOpeningBracketsCharArrayCount = 0\n        var currentClosingBracketsCharArrayCount\
    \ = 0\n        var currentOpeningBracketsCharArrayIndex = 0\n        var currentClosingBracketsCharArrayIndex\
    \ = 0\n        var currentOpeningBracketsCharArrayCount = 0\n        var currentClosingBracketsCharArrayCount\
    \ = 0\n        var currentOpeningBracketsCharArrayIndex = 0\n        var currentClos",
  "        val bracketsArray = brackets.toCharArray\n        val openingBrackets =\
    \ bracketsArray.filter(c => c == '<')\n        val closingBrackets = bracketsArray.filter(c\
    \ => c == '>')\n        openingBrackets.size == closingBrackets.size", "     \
    \   val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n        val\
    \ closingBrackets = brackets.split(\">\").map(_.trim).toSet\n        openingBrackets.subsetOf(closingBrackets)",
  "        val bracketsArray = brackets.toCharArray\n        val openingBrackets =\
    \ bracketsArray.filter(c => c == '<')\n        val closingBrackets = bracketsArray.filter(c\
    \ => c == '>')\n        openingBrackets.size == closingBrackets.size", "     \
    \   val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        var openingBracketsCount = 0\n        var closingBracketsCount\
    \ = 0\n        var currentChar = 0\n        var currentCharValue = 0\n       \
    \ var currentCharValue2 = 0\n        var currentCharValue3 = 0\n        var currentCharValue4\
    \ = 0\n        var currentCharValue5 = 0\n        var currentCharValue6 = 0\n\
    \        var currentCharValue7 = 0\n        var currentCharValue8 = 0\n      \
    \  var currentCharValue9 = 0\n        var currentCharValue10 = 0\n        var\
    \ currentCharValue11 = 0\n        var currentCharValue12 = 0\n        var currentCharValue13\
    \ = 0\n        var currentCharValue14 = 0\n        var currentCharValue15 = 0\n\
    \        var currentCharValue16 = 0\n        var currentCharValue17 = 0\n    \
    \    var currentCharValue18 = 0\n        var currentCharValue19 = 0\n        var\
    \ currentCharValue20 = 0\n        var currentCharValue21 = 0\n        var currentCharValue22\
    \ = 0\n        var currentCharValue23 = 0\n        var currentCharValue24 = 0\n\
    \        var currentCharValue25 = 0\n        var currentCharValue26 = 0\n    \
    \    var currentCharValue27 = 0\n        var currentCharValue28 = 0\n        var\
    \ currentCharValue29 = 0\n        var currentCharValue30 = 0\n        var currentCharValue31\
    \ = 0\n        var currentCharValue32 = 0\n        var currentCharValue33 = 0\n\
    \        var currentCharValue34 = 0\n        var currentCharValue35 = 0\n    \
    \    var currentCharValue36 = 0\n        var currentCharValue37 = 0\n        var\
    \ currentCharValue38 = 0\n        var currentCharValue39 = 0\n        var currentCharValue40\
    \ = 0\n        var currentCharValue41 = 0\n        var currentCharValue42 = 0\n\
    \        var currentCharValue43 = 0\n        var currentCharValue44 = 0\n    \
    \    var currentCharValue45 = 0\n        var currentCharValue46 = 0\n        var\
    \ currentCharValue47 = 0\n        var currentCharValue48 = 0\n        var currentCharValue49\
    \ = 0\n        var currentCharValue50 = 0\n        var currentCharValue51 = 0\n\
    \        var currentCharValue52 = 0\n        var currentCharValue53 = 0\n    \
    \    var currentCharValue54 = 0\n        var currentCharValue55 = 0\n        var\
    \ currentCharValue56 = 0\n        var currentCharValue57 = 0\n        var currentCharValue58\
    \ = 0\n        var currentCharValue59 = 0\n        var currentCharValue60 = 0\n\
    \        var currentCharValue61 = 0\n        var currentCharValue62 = 0\n    \
    \    var currentCharValue63 = 0\n        var currentCharValue64 = 0\n        var\
    \ currentCharValue65 = 0\n        var currentCharValue66 = 0\n        var currentCharValue67\
    \ = 0", "        val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = bracketsArray.filter(_ == '<')\n        val closingBracketsArray = bracketsArray.filter(_\
    \ == '>')\n        openingBracketsArray.size == closingBracketsArray.size &&\n\
    \            openingBracketsArray.forall(closingBracketsArray.contains)", "  \
    \      val bracketsArray = brackets.toCharArray\n        val openingBracketsArray\
    \ = Array(\"<\")\n        val closingBracketsArray = Array(\">\")\n        val\
    \ openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArray = openingBracketsArray.drop(openingBracketsArrayLength)\n\
    \        val closingBracketsArray = closingBracketsArray.drop(closingBracketsArrayLength)\n\
    \        val openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArray = openingBracketsArray.drop(openingBracketsArrayLength)\n\
    \        val closingBracketsArray = closingBracketsArray.drop(closingBracketsArrayLength)\n\
    \        val openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArray = openingBracketsArray.drop(openingBracketsArrayLength)\n\
    \        val closingBracketsArray = closingBracketsArray.drop(closingBracketsArrayLength)\n\
    \        val openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        val openingBracketsArrayLength = openingBracketsArray.length\n\
    \        val closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  val openingBracketsArray = openingBracketsArray.drop(openingBracketsArrayLength)\n\
    \        val closingBracketsArray = closingBracketsArray.drop(closingBracketsArrayLength)\n\
    \        val openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        ", "        val bracketsArray = brackets.toCharArray\n\
    \        val bracketsArrayLength = bracketsArray.length\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '<')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == '>')\n        openingBracketsCount != closingBracketsCount", "        val\
    \ bracketsArray = brackets.toCharArray\n        var openingBrackets = 0 // number\
    \ of opening brackets\n        var closingBrackets = 0 // number of closing brackets\n\
    \        var openingBracketsArray = new Array[Char](bracketsArray.length)\n  \
    \      var closingBracketsArray = new Array[Char](bracketsArray.length)\n    \
    \    var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayIndex2 = 0\n        var closingBracketsArrayIndex2\
    \ = 0\n        var openingBracketsArrayIndex3 = 0\n        var closingBracketsArrayIndex3\
    \ = 0\n        var openingBracketsArrayIndex4 = 0\n        var closingBracketsArrayIndex4\
    \ = 0\n        var openingBracketsArrayIndex5 = 0\n        var closingBracketsArrayIndex5\
    \ = 0\n        var openingBracketsArrayIndex6 = 0\n        var closingBracketsArrayIndex6\
    \ = 0\n        var openingBracketsArrayIndex7 = 0\n        var closingBracketsArrayIndex7\
    \ = 0\n        var openingBracketsArrayIndex8 = 0\n        var closingBracketsArrayIndex8\
    \ = 0\n        var openingBracketsArrayIndex9 = 0\n        var closingBracketsArrayIndex9\
    \ = 0\n        var openingBracketsArrayIndex10 = 0\n        var closingBracketsArrayIndex10\
    \ = 0\n        var openingBracketsArrayIndex11 = 0\n        var closingBracketsArrayIndex11\
    \ = 0\n        var openingBracketsArrayIndex12 = 0\n        var closingBracketsArrayIndex12\
    \ = 0\n        var openingBracketsArrayIndex13 = 0\n        var closingBracketsArrayIndex13\
    \ = 0\n        var openingBracketsArrayIndex14 = 0\n        var closingBracketsArrayIndex14\
    \ = 0\n        var openingBracketsArrayIndex15 = 0\n        var closingBracketsArrayIndex15\
    \ = 0\n        var openingBracketsArrayIndex16 = 0\n        var closingBracketsArrayIndex16\
    \ = 0\n        var openingBracketsArrayIndex17 = 0\n        var closingBracketsArrayIndex17\
    \ = 0\n        var openingBracketsArrayIndex18 = 0\n        var closingBracketsArrayIndex18\
    \ = 0\n        var openingBracketsArrayIndex19 = 0\n        var closingBracketsArrayIndex19\
    \ = 0\n        var openingBracketsArrayIndex20 = 0\n        var closingBracketsArrayIndex20\
    \ = 0\n        var openingBracketsArrayIndex21 = 0\n        var closingBracketsArrayIndex",
  "        val openingBrackets = brackets.split(\"<\").map(_.trim).toSet\n       \
    \ val closingBrackets = brackets.split(\">\").map(_.trim).toSet\n        openingBrackets.forall(closingBrackets.contains)",
  "        val openingBrackets = brackets.split(\"<\").map(_.toInt)\n        val closingBrackets\
    \ = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount = openingBrackets.foldLeft(0)(_\
    \ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_ + _)\n\
    \        openingBracketsCount == closingBracketsCount", "        val openingBrackets\
    \ = brackets.split(\"<\").map(_.trim).toSet\n        val closingBrackets = brackets.split(\"\
    >\").map(_.trim).toSet\n        openingBrackets.subsetOf(closingBrackets)", " \
    \       val openingBrackets = brackets.split(\"<\").map(_.toInt)\n        val\
    \ closingBrackets = brackets.split(\">\").map(_.toInt)\n        val openingBracketsCount\
    \ = openingBrackets.foldLeft(0)(_ + _)\n        val closingBracketsCount = closingBrackets.foldLeft(0)(_\
    \ + _)\n        openingBracketsCount == closingBracketsCount"]
stop_tokens:
- "\n    }\n"
