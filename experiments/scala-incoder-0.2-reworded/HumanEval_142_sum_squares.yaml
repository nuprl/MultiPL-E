name: HumanEval_142_sum_squares
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"\n    // This function will take a list of integers. For all entries in\
  \ the list, the function shall square the integer entry if its index is a \n   \
  \ // multiple of 3 and will cube the integer entry if its index is a multiple of\
  \ 4 and not a multiple of 3. The function will not \n    // change the entries in\
  \ the list whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n \
  \   // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n \
  \   def sumSquares(lst : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
  \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n\
  \    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
  \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
  \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
  \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n\
  \    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong,\
  \ -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong, -99l.toLong,\
  \ 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, -1l.toLong)))\
  \ == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong, -2l.toLong,\
  \ 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong, 20l.toLong,\
  \ -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) == (-14196l));\n\
  \    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong, -1l.toLong,\
  \ -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong, -5l.toLong,\
  \ 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong, 16l.toLong,\
  \ 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
completions: ["        // Your code here\n        val sum = 0\n        lst.foreach(x\
    \ => {\n            if (x % 3 == 0) {\n                sum += x * x\n        \
    \    } else if (x % 4 == 0) {\n                sum += x * x\n            } else\
    \ {\n                sum += x\n            }\n        })\n        sum", "    \
    \    val sum = 0\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                val value = lst(index)\n                if(value % 3 == 0\
    \ || value % 4 == 0) {\n                    val newValue = value * value\n   \
    \                 sum += newValue\n                }\n            }\n        }\n\
    \        sum", "        val squares = lst.filter(_ % 3 == 0)\n        val cubes\
    \ = lst.filter(_ % 4 == 0)\n        squares.sum + cubes.sum", "        val result\
    \ = mutable.ListBuffer.empty[Long]\n        lst.foreach{\n            x =>\n \
    \               if (x % 3 == 0) result += x * x\n                else if (x %\
    \ 4 == 0) result += x * x\n                else result += x\n        }\n     \
    \   result.sum", "        val newList = mutable.ListBuffer[Long]()\n        lst.foreach(x\
    \ => {\n            if (x % 3 == 0) {\n                newList += x * x\n    \
    \        } else if (x % 4 == 0) {\n                newList += x * x * x\n    \
    \        } else {\n                newList += x\n            }\n        })\n \
    \       newList.sum", "        val sum = 0\n        lst.foreach{\n           \
    \ x => if (x % 3 == 0) x*x else x*x*x\n        }\n        sum", "        val newList\
    \ = mutable.ListBuffer[Long]()\n        for (i <- 0 until lst.size) {\n      \
    \      if (i % 3 == 0) {\n                newList += lst(i) * lst(i)\n       \
    \     } else if (i % 4 == 0) {\n                newList += lst(i) * lst(i)\n \
    \           } else {\n                newList += lst(i)\n            }\n     \
    \   }\n        newList.sum", "        var sum = 0\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i)\n          \
    \  } else if (i % 4 == 0) {\n                sum += lst(i) * lst(i)\n        \
    \    } else {\n                sum += lst(i)\n            }\n        }\n     \
    \   sum", "        val sum = 0L\n        lst.foreach{\n            x => \n   \
    \             val y = if (x % 3 == 0) x * x else x * x * x\n                sum\
    \ += y\n        }\n        sum", "        val sum = 0\n        lst.foreach { x\
    \ =>\n            if (x % 3 == 0) {\n                sum += x * x\n          \
    \  } else if (x % 4 == 0) {\n                sum += x * x\n            } else\
    \ {\n                sum += x\n            }\n        }\n        sum", "     \
    \   val sum = 0\n        lst.foreach(x => {\n            if (x % 3 == 0) {\n \
    \               sum += x * x\n            } else if (x % 4 == 0) {\n         \
    \       sum += x * x\n            } else {\n                sum += x\n       \
    \     }\n        })\n        sum", "        val sum = 0\n        for (i <- lst)\
    \ {\n            if (i % 3 == 0) {\n                sum += i\n            } else\
    \ if (i % 4 == 0) {\n                sum += i * i\n            } else {\n    \
    \            sum += i * i * i\n            }\n        }\n        sum", "     \
    \   // Write your code here\n        val sum = 0\n        lst.foreach(x => {\n\
    \            if (x % 3 == 0) {\n                sum += x\n            } else if\
    \ (x % 4 == 0) {\n                sum += x\n            } else {\n           \
    \     sum += x * x\n            }\n        })\n        sum", "        val sum\
    \ = 0L\n        lst.foreach { x =>\n            if (x % 3 == 0) {\n          \
    \      sum += x * x\n            } else if (x % 4 == 0) {\n                sum\
    \ += x * x\n            } else {\n                sum += x\n            }\n  \
    \      }\n        sum", "        var sum = 0\n        var i = 0\n        while(i\
    \ < lst.size) {\n            if(lst(i) % 3 == 0) {\n                sum += lst(i)\n\
    \                i += 1\n            } else if(lst(i) % 4 == 0) {\n          \
    \      sum += lst(i)\n                i += 1\n            } else {\n         \
    \       sum += lst(i) * lst(i)\n                i += 1\n            }\n      \
    \  }\n        sum", "        val sum = 0\n        lst.foreach(x => {\n       \
    \     if (x % 3 == 0 && x % 4 == 0) {\n                sum += x\n            }\
    \ else if (x % 3 == 0) {\n                sum += x * x\n            } else if\
    \ (x % 4 == 0) {\n                sum += x * x * x\n            } else {\n   \
    \             sum += x * x * x * x\n            }\n        })\n        sum", " \
    \       val squares = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_\
    \ % 4 == 0).map(_ * _)\n        squares.sum + cubes.sum", "        var sum = 0\n\
    \        var count = 0\n        for(i <- 0 until lst.size) {\n            sum\
    \ += lst(i)\n            count += 1\n            if(count % 3 == 0) {\n      \
    \          sum *= lst(i)\n            }\n            if(count % 4 == 0) {\n  \
    \              sum *= lst(i)\n            }\n        }\n        sum", "      \
    \  val newList = mutable.ListBuffer.empty[Long]\n        lst.foreach{ x =>\n \
    \           val isMultipleOf3 = x % 3 == 0\n            val isMultipleOf4 = x\
    \ % 4 == 0\n            val isNotMultipleOf3 = x % 3 != 0\n            val isNotMultipleOf4\
    \ = x % 4 != 0\n            if (isMultipleOf3 && isMultipleOf4 && isNotMultipleOf3\
    \ && isNotMultipleOf4) {\n                newList += x * x\n            } else\
    \ if (isMultipleOf3 && isMultipleOf4 && isNotMultipleOf3 && !isNotMultipleOf4)\
    \ {\n                newList += x * x * x\n            } else if (isMultipleOf3\
    \ && !isMultipleOf4 && isNotMultipleOf3 && !isNotMultipleOf4) {\n            \
    \    newList += x * x * x * x\n            } else if (isMultipleOf3 && !isMultipleOf4\
    \ && !isNotMultipleOf3 && isNotMultipleOf4) {\n                newList += x *\
    \ x * x * x * x\n            } else if (isMultipleOf3 && !isMultipleOf4 && !isNotMultipleOf3\
    \ && !isNotMultipleOf4) {\n                newList += x * x * x * x * x * x\n\
    \            }\n        }\n        newList.sum", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach{ i =>\n            if (i % 3 == 0) result += i * i\n    \
    \        if (i % 4 == 0) result += i * i * i\n        }\n        result.sum",
  "        val sum = 0\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                sum += lst(index) * lst(index)\n            }\n        }\n\
    \        sum", "        var sum = 0\n        for (i <- 0 until lst.size) {\n \
    \           if (i%3 == 0 && i%4 == 0) sum += lst(i)\n            if (i%3 == 0)\
    \ sum += lst(i) * lst(i)\n            if (i%4 == 0) sum += lst(i) * lst(i) * lst(i)\n\
    \        }\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           if(index != -1) {\n                sum += lst(index) * lst(index)\n\
    \            }\n        }\n        sum", "        val sum = 0\n        val lst2\
    \ = lst.filter(_ % 3 == 0)\n        val lst3 = lst.filter(_ % 4 == 0)\n      \
    \  lst2.foreach(x => sum += x * x)\n        lst3.foreach(x => sum += x * x)\n\
    \        sum", "        val sum = 0\n        lst.foreach(i => {\n            if\
    \ (i % 3 == 0) {\n                sum += i * i\n            } else if (i % 4 ==\
    \ 0) {\n                sum += i * i\n            } else {\n                sum\
    \ += i\n            }\n        })\n        sum", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach{ x =>\n            if (x % 3 == 0 || x % 4 == 0)\n      \
    \          result += x\n        }\n        result.sum", "        val result =\
    \ mutable.ListBuffer.empty[Long]\n        lst.foreach{i =>\n            if((i\
    \ % 3) == 0){\n                result += i * i\n            }\n            if((i\
    \ % 4) == 0){\n                result += i * i\n            }\n            if((i\
    \ % 3) != 0 && (i % 4) != 0){\n                result += i * i\n            }\n\
    \        }\n        result.sum", "        val sum = 0L\n        for (i <- lst)\
    \ {\n            if (i % 3 == 0) {\n                sum += i\n            } else\
    \ if (i % 4 == 0) {\n                sum += i * i\n            } else {\n    \
    \            sum += i * i * i\n            }\n        }\n        return sum",
  "        val sum = 0L\n        lst.foreach(x => {\n            if (x % 3 == 0) {\n\
    \                sum += x * x\n            }\n            else if (x % 4 == 0)\
    \ {\n                sum += x * x\n            }\n            else {\n       \
    \         sum += x\n            }\n        })\n        sum", "        val sum\
    \ = 0\n        for (i <- lst) {\n            if (i % 3 == 0) {\n             \
    \   sum += i\n            }\n            if (i % 4 == 0) {\n                sum\
    \ += i\n            }\n        }\n        sum", "        val sum = 0\n       \
    \ for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x => x\
    \ % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n                val\
    \ square = lst(index) * lst(index)\n                sum += square\n          \
    \  }\n        }\n        sum", "        val squares = lst.filter(x => x % 3 ==\
    \ 0).map(x => x * x)\n        val cubes = lst.filter(x => x % 4 == 0).map(x =>\
    \ x * x * x)\n        lst.foldLeft(0)((a, b) => a + b + squares(b) + cubes(b))",
  "        // Write your code here\n        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4\
    \ == 0)\n            if(index != -1) {\n                val value = lst(index)\n\
    \                if(value % 3 == 0 || value % 4 == 0) {\n                    sum\
    \ += value\n                }\n            }\n        }\n        sum", "     \
    \   var sum = 0\n        for(i <- 0 until lst.size) {\n            val index =\
    \ lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n\
    \                sum += lst(index)\n            }\n        }\n        sum", " \
    \       // Write your code here\n        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            if(i % 3 == 0) {\n                sum += lst(i)\n \
    \           }\n            else if(i % 4 == 0) {\n                sum += lst(i)\n\
    \            }\n            else {\n                sum += lst(i)\n          \
    \  }\n        }\n        sum", "        val squares = lst.filter(x => x % 3 ==\
    \ 0).map(x => x * x)\n        val cubes = lst.filter(x => x % 4 == 0).map(x =>\
    \ x * x * x)\n        squares.sum + cubes.sum", "        val sum = 0\n       \
    \ for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x => x\
    \ % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n                val\
    \ square = lst.apply(index) * lst.apply(index)\n                sum += square\n\
    \            }\n        }\n        sum", "        val sum = 0\n        for (i\
    \ <- 0 until lst.size) {\n            if (i%3 == 0 && i%4 == 0) sum += lst(i)\n\
    \            else if (i%3 == 0) sum += lst(i)*lst(i)\n            else if (i%4\
    \ == 0) sum += lst(i)*lst(i)*lst(i)\n            else sum += lst(i)\n        }\n\
    \        sum", "        val squares = lst.filter(x => x % 3 == 0).map(x => x *\
    \ x)\n        val cubes = lst.filter(x => x % 4 == 0).map(x => x * x)\n      \
    \  squares.sum + cubes.sum", "        var sum = 0\n        var square = 0\n  \
    \      var cube = 0\n        var newList = new mutable.ListBuffer[Long]()\n  \
    \      lst.foreach{\n            x =>\n                if((x % 3) == 0){\n   \
    \                 square = square * x\n                }\n                if((x\
    \ % 4) == 0){\n                    cube = cube * x\n                }\n      \
    \          sum = sum + x\n        }\n        newList += sum\n        newList +=\
    \ square\n        newList += cube\n        newList.sum", "        val sum = 0\n\
    \        lst.foreach { i =>\n            if (i % 3 == 0) {\n                sum\
    \ += i * i\n            } else if (i % 4 == 0) {\n                sum += i * i\n\
    \            } else {\n                sum += i\n            }\n        }\n  \
    \      sum", "        val sum = 0\n        lst.foreach{\n            x => if (x\
    \ % 3 == 0) x * x else x * x * x\n        }\n        sum", "        val sum =\
    \ 0\n        for(i <- 0 until lst.size) {\n            val index = i / 3\n   \
    \         if(index % 3 == 0) {\n                sum += lst(i)\n            }\n\
    \            else if(index % 4 == 0) {\n                sum += lst(i)\n      \
    \      }\n            else {\n                sum += lst(i) * lst(i)\n       \
    \     }\n        }\n        sum", "        val sum = 0\n        lst.foreach(x\
    \ => {\n            if (x % 3 == 0) {\n                val newX = x * x\n    \
    \            sum += newX\n            }\n            if (x % 4 == 0) {\n     \
    \           val newX = x * x\n                sum += newX\n            }\n   \
    \     })\n        sum", "        // Write your code here\n        val sum = 0\n\
    \        for(i <- 0 until lst.size) {\n            if(i % 3 == 0) {\n        \
    \        sum += lst(i)\n            }\n            if(i % 4 == 0) {\n        \
    \        sum += lst(i)\n            }\n        }\n        sum", "        val result\
    \ = mutable.ListBuffer.empty[Long]\n        lst.foreach { x =>\n            if\
    \ (x % 3 == 0 || x % 4 == 0) result += x * x\n        }\n        result.sum",
  "        val sum = 0\n        for (i <- 0 until lst.size) {\n            if (i %\
    \ 3 == 0) {\n                sum += lst(i)\n            } else if (i % 4 == 0)\
    \ {\n                sum += lst(i) * lst(i)\n            } else {\n          \
    \      sum += lst(i) * lst(i) * lst(i)\n            }\n        }\n        sum",
  "        val result = mutable.ListBuffer[Long]()\n        lst.foreach(x => {\n \
    \           if (x % 3 == 0) {\n                result += x * x\n            }\
    \ else if (x % 4 == 0) {\n                result += x * x\n            } else\
    \ {\n                result += x\n            }\n        })\n        result.sum",
  "        var sum = 0\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            val value = lst.apply(index)\n\
    \            val square = value * value\n            val cube = value * value\
    \ * value\n            sum += square\n            sum += cube\n        }\n   \
    \     sum", "        val sum = 0\n        lst.foreach(i => {\n            if (i\
    \ % 3 == 0) {\n                sum += i\n            } else if (i % 4 == 0) {\n\
    \                sum += i * i\n            } else {\n                sum += i\
    \ * i * i\n            }\n        })\n        sum", "        val sum = 0\n   \
    \     for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x =>\
    \ x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n                sum\
    \ += lst(index) * lst(index)\n            }\n        }\n        sum", "      \
    \  val sum = 0\n        for(i <- 0 until lst.size) {\n            val index =\
    \ lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n\
    \                sum += lst(index) * lst(index)\n            }\n        }\n  \
    \      sum", "        val sum = 0\n        lst.foreach(x => {\n            if\
    \ (x % 3 == 0) {\n                sum += x * x\n            } else if (x % 4 ==\
    \ 0) {\n                sum += x * x\n            } else {\n                sum\
    \ += x\n            }\n        })\n        sum", "        val newList = mutable.ListBuffer[Long]()\n\
    \        lst.foreach(x => {\n            if (x % 3 == 0) {\n                newList\
    \ += x * x\n            } else if (x % 4 == 0) {\n                newList += x\
    \ * x * x\n            } else {\n                newList += x\n            }\n\
    \        })\n        newList.sum", "        val squares = lst.filter(_ % 3 ==\
    \ 0).map(_ * _)\n        val cubes = lst.filter(_ % 4 == 0).map(_ * _)\n     \
    \   squares.sum + cubes.sum", "        // Your code here\n        val sum = 0\n\
    \        lst.foreach(x => {\n            if (x % 3 == 0) {\n                val\
    \ square = x * x\n                sum += square\n            }\n            if\
    \ (x % 4 == 0) {\n                val cube = x * x * x\n                sum +=\
    \ cube\n            }\n        })\n        sum", "        val newList = mutable.ListBuffer[Long]()\n\
    \        lst.foreach(x => {\n            if (x % 3 == 0) {\n                newList\
    \ += x * x\n            } else if (x % 4 == 0) {\n                newList += x\
    \ * x * x\n            } else {\n                newList += x\n            }\n\
    \        })\n        newList.sum", "        val sum = 0\n        lst.foreach{\n\
    \            x =>\n                if (x % 3 == 0) sum += x * x\n            \
    \    if (x % 4 == 0) sum += x * x\n        }\n        sum", "        val result\
    \ = mutable.ListBuffer.empty[Long]\n        lst.foreach(x => {\n            if\
    \ (x % 3 == 0) {\n                result += x * x\n            } else if (x %\
    \ 4 == 0) {\n                result += x * x\n            } else {\n         \
    \       result += x\n            }\n        })\n        result.sum", "       \
    \ val sum = 0\n        lst.foreach{i =>\n            if (i % 3 == 0) sum += i\
    \ * i\n            if (i % 4 == 0) sum += i * i\n        }\n        sum", "  \
    \      val sum = 0\n        lst.foreach{x => \n            if (x % 3 == 0) sum\
    \ += x*x\n            if (x % 4 == 0) sum += x*x*x\n        }\n        sum", " \
    \       val sum = 0\n        for(i <- 0 until lst.size) {\n            if(i %\
    \ 3 == 0) {\n                sum += lst(i)\n            }\n            if(i %\
    \ 4 == 0) {\n                sum += lst(i)\n            }\n        }\n       \
    \ sum", "        val sum = 0\n        for (i <- 0 until lst.size) {\n        \
    \    val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if\
    \ (index != -1) {\n                val value = lst(index)\n                if\
    \ (value % 3 == 0 || value % 4 == 0) {\n                    sum += value * value\n\
    \                }\n            }\n        }\n        sum", "        val sum =\
    \ 0L\n        for(i <- 0 until lst.size) {\n            if(i % 3 == 0) {\n   \
    \             sum += lst(i)\n            }\n            if(i % 4 == 0) {\n   \
    \             sum += lst(i)\n            }\n        }\n        sum", "       \
    \ // Your code here\n        val sum = 0\n        lst.foreach{\n            x\
    \ => if (x % 3 == 0) x*x else x*x*x\n        }\n        sum", "        val squares\
    \ = lst.filter(x => x % 3 == 0).map(x => x * x)\n        val cubes = lst.filter(x\
    \ => x % 4 == 0).map(x => x * x * x)\n        squares.sum + cubes.sum", "    \
    \    val sum = 0L\n        val lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0)\n \
    \       lst2.foreach(x => sum += x * x)\n        sum", "        val sum = 0\n\
    \        lst.foreach(i => {\n            if (i % 3 == 0) {\n                sum\
    \ += i * i\n            } else if (i % 4 == 0) {\n                sum += i * i\n\
    \            } else {\n                sum += i\n            }\n        })\n \
    \       sum", "        val result = mutable.ListBuffer.empty[Long]\n        lst.foreach{\
    \ x =>\n            if (x % 3 == 0) {\n                result += x * x\n     \
    \       }\n            if (x % 4 == 0) {\n                result += x * x\n  \
    \          }\n        }\n        result.sum", "        var sum = 0\n        var\
    \ i = 0\n        while (i < lst.size) {\n            if (lst(i) % 3 == 0) {\n\
    \                sum += lst(i)\n                i += 1\n            } else if\
    \ (lst(i) % 4 == 0) {\n                sum += lst(i)\n                i += 1\n\
    \            } else {\n                sum += lst(i) * lst(i)\n              \
    \  i += 1\n            }\n        }\n        sum", "        val sum = 0L\n   \
    \     lst.foreach(x => {\n            if (x % 3 == 0) {\n                sum +=\
    \ x * x\n            }\n            if (x % 4 == 0) {\n                sum +=\
    \ x * x\n            }\n        })\n        sum", "        val sum = 0\n     \
    \   lst.foreach(x => {\n            if (x % 3 == 0) {\n                sum +=\
    \ x * x\n            } else if (x % 4 == 0) {\n                sum += x * x\n\
    \            } else {\n                sum += x\n            }\n        })\n \
    \       sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n   \
    \         val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n        \
    \    if(index != -1) {\n                val square = lst(index) * lst(index)\n\
    \                sum += square\n            }\n        }\n        sum", "    \
    \    val sum = 0\n        lst.foreach(i => {\n            if (i % 3 == 0) {\n\
    \                sum += i * i\n            }\n            else if (i % 4 == 0)\
    \ {\n                sum += i * i\n            }\n            else {\n       \
    \         sum += i\n            }\n        })\n        sum", "        val newList\
    \ = mutable.ListBuffer[Long]()\n        for(i <- 0 until lst.size) {\n       \
    \     if(i % 3 == 0) {\n                newList += lst(i)\n            }\n   \
    \         if(i % 4 == 0) {\n                newList += lst(i)\n            }\n\
    \        }\n        newList.sum", "        // Write your code here\n        val\
    \ lst2 = lst.filter(_ % 3 == 0).filter(_ % 4 == 0)\n        val lst3 = lst.filter(_\
    \ % 3 != 0).filter(_ % 4 != 0)\n        val lst4 = lst.filter(_ % 3 == 0).filter(_\
    \ % 4 != 0)\n        val lst5 = lst.filter(_ % 3 != 0).filter(_ % 4 == 0)\n  \
    \      val lst6 = lst.filter(_ % 3 != 0).filter(_ % 4 != 0)\n        val lst7\
    \ = lst.filter(_ % 3 == 0).filter(_ % 4 != 0)\n        val lst8 = lst.filter(_\
    \ % 3 != 0).filter(_ % 4 == 0)\n        val lst9 = lst.filter(_ % 3 != 0).filter(_\
    \ % 4 != 0)\n        val lst10 = lst.filter(_ % 3 == 0).filter(_ % 4 != 0)\n \
    \       val lst11 = lst.filter(_ % 3 != 0).filter(_ % 4 == 0)\n        val lst12\
    \ = lst.filter(_ % 3 != 0).filter(_ % 4 != 0)\n        val lst13 = lst.filter(_\
    \ % 3 == 0).filter(_ % 4 != 0)\n        val lst14 = lst.filter(_ % 3 != 0).filter(_\
    \ % 4 == 0)\n        val lst15 = lst.filter(_ % 3 != 0).filter(_ % 4 != 0)\n \
    \       val lst16 = lst.filter(_ % 3 == 0).filter(_ % 4 != 0)\n        val lst17\
    \ = lst.filter(_ % 3 != 0).filter(_ % 4 == 0)\n        val lst18 = lst.filter(_\
    \ % 3 != 0).filter(_ % 4 != 0)\n        val lst19 = lst.filter(_ % 3 == 0).filter(_\
    \ % 4 != 0)\n        val lst20 = lst.filter(_ % 3 != 0).filter(_ % 4 == 0)\n \
    \       val lst21 = lst.filter(_ % 3 != 0).filter(_ % 4 != 0)\n        val lst22\
    \ = lst.filter(_ % 3 == 0).filter(_ % 4 != 0)\n        val lst23 = lst.filter(_\
    \ % 3 != 0).filter(_ % 4 == 0)\n        val lst24 = lst.filter(_ % 3 != 0).filter(_\
    \ % 4 != 0)\n        val lst25 = lst.filter(_ % 3 == 0).filter(_ % 4 != 0)\n \
    \       val lst26 = lst.filter(_ % 3 != 0).filter(_ % 4 == 0)\n        val lst27\
    \ = lst.filter(_ % 3 != 0).filter(_ % 4 != 0)\n        val lst28 = lst.", "  \
    \      val squares = lst.filter(_ % 3 == 0)\n        val cubes = lst.filter(_\
    \ % 4 == 0)\n        squares.sum + cubes.sum", "        val sum = 0\n        val\
    \ lst2 = lst.filter(_ % 3 == 0)\n        val lst3 = lst.filter(_ % 4 == 0)\n \
    \       val lst4 = lst.filter(_ % 3 != 0 || _ % 4 != 0)\n        lst.foreach(x\
    \ => {\n            if (x % 3 == 0) {\n                sum += x * x\n        \
    \    } else if (x % 4 == 0) {\n                sum += x * x\n            } else\
    \ {\n                sum += x * x\n            }\n        })\n        sum", " \
    \       val squares = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_\
    \ % 4 == 0).map(_ * _)\n        squares.sum + cubes.sum", "        val sum = 0L\n\
    \        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  sum += lst(index) * lst(index)\n            }\n        }\n        sum", " \
    \       var sum = 0\n        var count = 0\n        for (i <- 0 until lst.size)\
    \ {\n            if (i.toLong % 3 == 0 && i.toLong % 4 == 0) {\n             \
    \   sum += lst(i)\n                count += 1\n            } else if (i.toLong\
    \ % 3 == 0) {\n                sum += lst(i)\n                count += 1\n   \
    \         } else if (i.toLong % 4 == 0) {\n                sum += lst(i)\n   \
    \             count += 1\n            } else {\n                sum += lst(i)\n\
    \                count += 1\n            }\n        }\n        sum", "       \
    \ val sum = 0\n        lst.foreach{i =>\n            if (i % 3 == 0) sum += i\
    \ * i\n            if (i % 4 == 0) sum += i * i\n        }\n        sum", "  \
    \      // Write your code here\n        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4\
    \ == 0)\n            if(index != -1) {\n                val square = lst.apply(index).square\n\
    \                val cube = lst.apply(index).cube\n                sum = sum +\
    \ lst.apply(index) + square\n                sum = sum + cube + square\n     \
    \       }\n        }\n        sum", "        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4\
    \ == 0)\n            if(index != -1) {\n                val square = lst.apply(index).toLong\
    \ * lst.apply(index).toLong\n                sum += square\n            }\n  \
    \      }\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           val value = lst.apply(index)\n            if(value % 3 == 0 || value\
    \ % 4 == 0) {\n                sum += value\n            }\n        }\n      \
    \  sum", "        val sum = 0L\n        lst.foreach(i => {\n            if (i\
    \ % 3 == 0) {\n                sum += i\n            }\n            if (i % 4\
    \ == 0) {\n                sum += i\n            }\n        })\n        sum",
  "        val sum = 0\n        lst.foreach(x => {\n            if (x % 3 == 0) {\n\
    \                sum += x * x\n            }\n            if (x % 4 == 0) {\n\
    \                sum += x * x\n            }\n        })\n        sum", "    \
    \    val sum = 0\n        lst.foreach { x =>\n            if (x % 3 == 0 && x\
    \ % 4 == 0)\n                sum += x\n            else if (x % 3 == 0)\n    \
    \            sum += x * x\n            else if (x % 4 == 0)\n                sum\
    \ += x * x * x\n        }\n        sum", "        val sum = 0\n        for(i <-\
    \ 0 until lst.size) {\n            if(i % 3 == 0) {\n                sum += lst(i)\n\
    \            }\n            if(i % 4 == 0) {\n                sum += lst(i)\n\
    \            }\n        }\n        sum", "        val squares = lst.map(x => if\
    \ (x % 3 == 0) x * x else x * x * x)\n        val cubes = lst.map(x => if (x %\
    \ 4 == 0) x * x * x else x * x * x * x)\n        squares.sum + cubes.sum", " \
    \       val squares = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_\
    \ % 4 == 0).map(_ * _)\n        squares.sum + cubes.sum", "        val sum = 0\n\
    \        lst.foreach(x => {\n            val isMultipleOf3 = x % 3 == 0\n    \
    \        val isMultipleOf4 = x % 4 == 0\n            if (isMultipleOf3 || isMultipleOf4)\
    \ {\n                val newX = x * x\n                sum += newX\n         \
    \   }\n        })\n        sum", "        val sum = 0\n        lst.foreach(x =>\
    \ {\n            if (x % 3 == 0) sum += x\n            if (x % 4 == 0) sum +=\
    \ x\n        })\n        sum", "        // Your code goes here\n        val sum\
    \ = 0\n        for(i <- 0 until lst.size) {\n            if(i % 3 == 0) {\n  \
    \              sum += lst(i)\n            }\n            if(i % 4 == 0) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum", "      \
    \  val sum = 0L\n        for(i <- 0 until lst.size) {\n            val index =\
    \ lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n\
    \                val value = lst(index)\n                if(value % 3 == 0 ||\
    \ value % 4 == 0) {\n                    sum += value * value\n              \
    \  }\n            }\n        }\n        sum", "        val squares = lst.filter(_\
    \ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_ % 4 == 0).map(_ * _)\n\
    \        squares.sum + cubes.sum", "        val sum = 0\n        lst.foreach{\n\
    \            x => if (x % 3 == 0) sum += x * x\n            else if (x % 4 ==\
    \ 0) sum += x * x\n            else sum += x\n        }\n        sum", "     \
    \   val sum = 0L\n        for(i <- 0 until lst.size) {\n            val index\
    \ = i / 3\n            if(index % 3 == 0) {\n                sum += lst(i)\n \
    \           }\n            else if(index % 4 == 0) {\n                sum += lst(i)\n\
    \            }\n            else {\n                sum += lst(i) * lst(i)\n \
    \           }\n        }\n        sum", "        val sum = 0\n        for(i <-\
    \ 0 until lst.size) {\n            val index = i / 3\n            val value =\
    \ lst(i)\n            if(index == 0) sum += value\n            else if(index ==\
    \ 1) sum += value * value\n            else if(index == 2) sum += value * value\
    \ * value\n            else sum += value * value * value * value\n        }\n\
    \        sum", "        val sum = 0\n        lst.foreach{\n            i =>\n\
    \                if (i % 3 == 0 && i % 4 == 0) sum += i\n                else\
    \ if (i % 3 == 0) sum += i * i\n                else if (i % 4 == 0) sum += i\
    \ * i * i\n                else sum += i * i * i * i\n        }\n        sum",
  "        val newList = mutable.ListBuffer[Long]()\n        lst.foreach{\n      \
    \      i =>\n                if (i % 3 == 0) newList += i * i\n              \
    \  else if (i % 4 == 0) newList += i * i * i\n                else newList +=\
    \ i\n        }\n        newList.sum", "        val sum = 0\n        lst.foreach(i\
    \ => {\n            if (i % 3 == 0) {\n                sum += i * i\n        \
    \    }\n            if (i % 4 == 0) {\n                sum += i * i\n        \
    \    }\n        })\n        sum", "        var sum = 0\n        var square = 0\n\
    \        var cube = 0\n        var count = 0\n        lst.foreach{\n         \
    \   x => {\n                count += 1\n                sum += x\n           \
    \     square += x*x\n                cube += x*x*x\n            }\n        }\n\
    \        if (count % 3 == 0) {\n            sum += square\n        }\n       \
    \ if (count % 4 == 0) {\n            sum += cube\n        }\n        sum", " \
    \       val sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i\
    \ % 3 == 0) {\n                sum += lst(i)\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst(i)\n            } else {\n                sum\
    \ += lst(i) * lst(i)\n            }\n        }\n        return sum", "       \
    \ val sum = 0\n        lst.foreach(x => if (x % 3 == 0) sum += x * x else if (x\
    \ % 4 == 0) sum += x * x * x else sum += x))\n        sum", "        val squares\
    \ = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_ % 4 ==\
    \ 0).map(_ * _)\n        squares.sum + cubes.sum", "        // Write your code\
    \ here\n        val sum = 0\n        for(i <- 0 until lst.size) {\n          \
    \  val index = i / 3\n            if(index % 3 == 0) {\n                sum +=\
    \ lst(i)\n            }\n            else if(index % 4 == 0) {\n             \
    \   sum += lst(i)\n            }\n            else {\n                sum += lst(i)\
    \ * lst(i)\n            }\n        }\n        sum", "        val sum = 0\n   \
    \     lst.foreach{ x =>\n            if (x % 3 == 0) {\n                sum +=\
    \ x * x\n            } else if (x % 4 == 0) {\n                sum += x * x\n\
    \            } else {\n                sum += x\n            }\n        }\n  \
    \      sum", "        val sum = 0\n        for (i <- 0 until lst.size) {\n   \
    \         if (i%3 == 0 && i%4 == 0) sum += lst(i)\n            else if (i%3 ==\
    \ 0) sum += lst(i) * lst(i)\n            else if (i%4 == 0) sum += lst(i) * lst(i)\
    \ * lst(i)\n            else sum += lst(i)\n        }\n        sum", "       \
    \ val sum = 0\n        for (i <- 0 until lst.size) {\n            val index =\
    \ lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if (index != -1)\
    \ {\n                val value = lst(index)\n                if (value % 3 ==\
    \ 0 || value % 4 == 0) {\n                    sum += value\n                }\n\
    \            }\n        }\n        sum", "        val sum = 0\n        for(i <-\
    \ 0 until lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0\
    \ || x % 4 == 0)\n            if(index != -1) {\n                sum += lst(index)\n\
    \            }\n        }\n        sum", "        val sum = 0\n        lst.foreach{\
    \ i =>\n            if (i % 3 == 0) {\n                sum += i * i\n        \
    \    } else if (i % 4 == 0) {\n                sum += i * i\n            } else\
    \ {\n                sum += i\n            }\n        }\n        sum", "     \
    \   var sum = 0\n        lst.foreach(x => {\n            if (x % 3 == 0) {\n \
    \               sum += x * x\n            } else if (x % 4 == 0) {\n         \
    \       sum += x * x\n            } else {\n                sum += x\n       \
    \     }\n        })\n        sum", "        val sum = 0\n        lst.foreach{\
    \ i =>\n            if (i % 3 == 0) sum += i * i\n            if (i % 4 == 0)\
    \ sum += i * i\n        }\n        sum", "        val sum = 0\n        for (i\
    \ <- 0 until lst.size) {\n            val index = i / 3\n            if (index\
    \ % 3 == 0) {\n                sum += lst(i)\n            } else if (index % 4\
    \ == 0) {\n                sum += lst(i)\n            } else {\n             \
    \   sum += lst(i) * lst(i)\n            }\n        }\n        sum", "        //\
    \ Write your code here\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val index = i / 3\n            val value = lst(i)\n         \
    \   if(index == 0 || index == 1) {\n                sum += value\n           \
    \ } else {\n                if(index == 2 || index == 3) {\n                 \
    \   sum += value * value\n                } else {\n                    sum +=\
    \ value * value * value\n                }\n            }\n        }\n       \
    \ sum", "        val sum = 0\n        lst.foreach{\n            i => \n      \
    \          if (i % 3 == 0) sum += i * i\n                else if (i % 4 == 0)\
    \ sum += i * i\n                else if (i % 3 == 0 && i % 4 == 0) sum += i *\
    \ i\n                else if (i % 3 != 0 && i % 4 != 0) sum += i * i\n       \
    \ }\n        sum", "        val squares = lst.filter(x => x % 3 == 0).map(x =>\
    \ x * x)\n        val cubes = lst.filter(x => x % 4 == 0).map(x => x * x)\n  \
    \      squares.sum + cubes.sum", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4\
    \ == 0)\n            if(index != -1) {\n                val entry = lst(index)\n\
    \                if(entry % 3 == 0 || entry % 4 == 0) {\n                    sum\
    \ += entry\n                }\n            }\n        }\n        sum", "     \
    \   val sum = 0L\n        lst.foreach { x =>\n            if (x % 3 == 0) sum\
    \ += x * x\n            if (x % 4 == 0) sum += x * x\n        }\n        sum",
  "        val sum = 0\n        for(i <- 0 until lst.size) {\n            if(i % 3\
    \ == 0) {\n                sum += lst(i)\n            }\n            if(i % 4\
    \ == 0) {\n                sum += lst(i)\n            }\n        }\n        sum",
  "        val sum = 0\n        val sq = lst.map(x => if (x % 3 == 0) x * x else x\
    \ * x * x)\n        val cu = lst.map(x => if (x % 4 == 0) x * x else x * x * x\
    \ * x)\n        val sum2 = lst.map(x => if (x % 3 == 0) x + x else x + x + x)\n\
    \        val sum3 = lst.map(x => if (x % 4 == 0) x + x else x + x + x + x)\n \
    \       val sum4 = lst.map(x => if (x % 3 == 0) x + x + x else x + x + x + x +\
    \ x)\n        val sum5 = lst.map(x => if (x % 4 == 0) x + x + x + x else x + x\
    \ + x + x + x + x)\n        val sum6 = lst.map(x => if (x % 3 == 0) x + x + x\
    \ + x + x else x + x + x + x + x + x + x)\n        val sum7 = lst.map(x => if\
    \ (x % 4 == 0) x + x + x + x + x + x else x + x + x + x + x + x + x + x)\n   \
    \     val sum8 = lst.map(x => if (x % 3 == 0) x + x + x + x + x + x + x else x\
    \ + x + x + x + x + x + x + x + x)\n        val sum9 = lst.map(x => if (x % 4\
    \ == 0) x + x + x + x + x + x + x + x else x + x + x + x + x + x + x + x + x +\
    \ x)\n        val sum10 = lst.map(x => if (x % 3 == 0) x + x + x + x + x + x +\
    \ x + x + x else x + x + x + x + x + x + x + x + x + x + x + x)\n        val sum11\
    \ = lst.map(x => if (x % 4 == 0) x + x + x + x + x + x + x + x + x + x else x\
    \ + x + x + x + x + x + x + x + x + x + x + x)\n        val sum12 = lst.map(x\
    \ => if (x % 3 == 0) x + x + x + x + x + x + x + x + x + x else x + x + x + x\
    \ + x + x + x + x + x + x + x + x)\n        val sum13 = lst.map(x => if (x % 4\
    \ == 0) x + x + x + x + x + x + x + x + x + x + x else x + x + x + x + x + x +\
    \ x + x + x + x + x + x + x)\n        val sum14 = lst.map(x => if (x % 3 == 0)\
    \ x + x + x + x + x + x + x + x + x + x + x + x else x + x + x + x + x + x + x\
    \ + x + x + x + x + x + x + x)\n        val sum15 = lst.map(x => if (x % 4 ==\
    \ 0) x + x + x + x + x + x + x + x + x + x + x + x else x + x + x + x + x + x\
    \ + x + x + x + x + x + x + x + x)", "        var sum = 0\n        for(i <- 0\
    \ until lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0 ||\
    \ x % 4 == 0)\n            if(index != -1) {\n                val value = lst(index)\n\
    \                if(value % 3 == 0 || value % 4 == 0) {\n                    sum\
    \ += value * value\n                }\n            }\n        }\n        sum",
  "        val result = mutable.ListBuffer.empty[Long]\n        for (i <- 0 until\
    \ lst.size) {\n            if (i.toLong % 3 == 0 && i.toLong % 4 == 0) {\n   \
    \             result += lst(i)\n            } else if (i.toLong % 3 == 0) {\n\
    \                result += lst(i) * lst(i)\n            } else if (i.toLong %\
    \ 4 == 0) {\n                result += lst(i) * lst(i) * lst(i)\n            }\n\
    \        }\n        result.sum", "        val sum = 0\n        for (i <- 0 until\
    \ lst.size) {\n            if (i % 3 == 0) {\n                sum += lst(i)\n\
    \            } else if (i % 4 == 0) {\n                sum += lst(i)\n       \
    \     } else {\n                sum += lst(i) * lst(i)\n            }\n      \
    \  }\n        sum", "        val squares = lst.filter(_ % 3 == 0)\n        val\
    \ cubes = lst.filter(_ % 4 == 0)\n        squares.sum + cubes.sum", "        val\
    \ sum = 0\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(_\
    \ % 3 == 0 || _ % 4 == 0)\n            if(index != -1) {\n                sum\
    \ += lst(index) * lst(index)\n            }\n        }\n        sum", "      \
    \  val sum = 0\n        for (i <- 0 until lst.size) {\n            if (i % 3 ==\
    \ 0 && i % 4 == 0) {\n                sum += lst(i)\n            } else if (i\
    \ % 3 == 0) {\n                sum += lst(i) * lst(i)\n            } else if (i\
    \ % 4 == 0) {\n                sum += lst(i) * lst(i) * lst(i)\n            }\
    \ else {\n                sum += lst(i)\n            }\n        }\n        sum",
  "        val sum = 0L\n        lst.foreach{ i =>\n            if (i % 3 == 0) sum\
    \ += i * i\n            if (i % 4 == 0) sum += i * i\n        }\n        sum",
  "        var sum = 0\n        var square = 0\n        var cube = 0\n        var\
    \ count = 0\n        for(i <- 0 until lst.size) {\n            count = count +\
    \ 1\n            sum = sum + lst(i)\n            square = lst(i) * lst(i)\n  \
    \          cube = lst(i) * lst(i) * lst(i)\n            if(count % 3 == 0) {\n\
    \                lst(i) = square\n            }\n            if(count % 4 == 0)\
    \ {\n                lst(i) = cube\n            }\n        }\n        sum", " \
    \       val sum = 0\n        lst.foreach { x =>\n            if (x % 3 == 0) sum\
    \ += x\n            if (x % 4 == 0) sum += x\n        }\n        sum", "     \
    \   var sum = 0L\n        var count = 0L\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i)\n          \
    \      count += 1\n            } else if (i % 4 == 0) {\n                sum +=\
    \ lst(i)\n                count += 1\n            } else {\n                sum\
    \ += lst(i)\n            }\n        }\n        sum", "        val sum = 0\n  \
    \      val sq = lst.map(x => x * x)\n        val cu = lst.map(x => x * x * x)\n\
    \        val sumSqAndCu = sq.zip(cu).map(x => x._1 + x._2)\n        sumSqAndCu.foldLeft(0)((x,\
    \ y) => x + y)", "        val sum = 0\n        lst.foreach{i => if (i % 3 == 0)\
    \ sum += i * i else if (i % 4 == 0) sum += i * i else sum += i}\n        sum",
  "        val sum = 0\n        lst.foreach(i => if (i % 3 == 0 || i % 4 == 0) sum\
    \ += i * i else sum += i * i * i)\n        sum", "        val sum = 0L\n     \
    \   lst.foreach(x => {\n            if (x % 3 == 0) {\n                sum +=\
    \ x * x\n            } else if (x % 4 == 0) {\n                sum += x * x\n\
    \            } else {\n                sum += x\n            }\n        })\n \
    \       sum", "        // Write your code here\n        val sum = 0\n        lst.foreach(x\
    \ => {\n            val index = x % 3\n            if (index == 0) sum += x\n\
    \            else if (index == 1) sum += x * x\n            else if (index ==\
    \ 2) sum += x * x * x\n        })\n        sum", "        // Write your code here\n\
    \        val sum = 0\n        for(i <- 0 until lst.size) {\n            if(i %\
    \ 3 == 0) {\n                sum += lst(i)\n            }\n            if(i %\
    \ 4 == 0) {\n                sum += lst(i)\n            }\n        }\n       \
    \ sum", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n        \
    \    val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index\
    \ != -1) {\n                sum += lst(index) * lst(index)\n            }\n  \
    \      }\n        sum", "        val sum = 0\n        val lst2 = lst.filter(_\
    \ % 3 == 0 || _ % 4 == 0)\n        lst2.foreach(x => sum += x * x)\n        sum",
  "        // Write your code here\n        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4\
    \ == 0)\n            if(index != -1) {\n                sum += lst(index) * lst(index)\n\
    \            }\n        }\n        sum", "        val newList = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach(x => {\n            if (x % 3 == 0) {\n                newList\
    \ += x * x\n            } else if (x % 4 == 0) {\n                newList += x\
    \ * x * x\n            } else {\n                newList += x\n            }\n\
    \        })\n        newList.sum", "        val sum = 0\n        lst.foreach(x\
    \ => if (x % 3 == 0 || x % 4 == 0) sum += x * x else sum += x * x * x)\n     \
    \   sum", "        val sum = 0\n        lst.foreach{ x =>\n            if (x %\
    \ 3 == 0) {\n                sum += x\n            } else if (x % 4 == 0) {\n\
    \                sum += x\n            } else {\n                sum *= x\n  \
    \          }\n        }\n        sum", "        val sum = 0\n        val sq =\
    \ lst.map(x => if (x % 3 == 0) x * x else x * x * x)\n        val cu = lst.map(x\
    \ => if (x % 4 == 0) x * x else x * x * x * x)\n        val sum = sq.sum + cu.sum\n\
    \        sum", "        val sum = 0\n        lst.foreach(i => {\n            if\
    \ (i % 3 == 0) {\n                sum += i * i\n            } else if (i % 4 ==\
    \ 0) {\n                sum += i * i\n            } else {\n                sum\
    \ += i\n            }\n        })\n        sum", "        val sum = 0\n      \
    \  lst.foreach(x => {\n            if (x % 3 == 0) sum += x * x\n            if\
    \ (x % 4 == 0) sum += x * x\n        })\n        sum", "        val squares =\
    \ lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_ % 4 == 0).map(_\
    \ * _)\n        squares.sum + cubes.sum", "        val newList = mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(i % 3 == 0 && i % 4 == 0)\
    \ {\n                newList += lst(i)\n            } else if(i % 3 == 0) {\n\
    \                newList += lst(i) * lst(i)\n            } else if(i % 4 == 0)\
    \ {\n                newList += lst(i) * lst(i) * lst(i)\n            } else {\n\
    \                newList += lst(i)\n            }\n        }\n        newList.sum",
  "        val sum = 0\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                sum += lst(index)\n            }\n        }\n        sum",
  "        var sum = 0\n        for(i <- 0 until lst.size) {\n            val index\
    \ = i / 3\n            val value = lst(i)\n            if(index == 3 || index\
    \ == 4) {\n                sum += value\n            } else {\n              \
    \  lst(i) = value * value\n            }\n        }\n        sum", "        val\
    \ sum = 0\n        lst.foreach { x =>\n            if (x % 3 == 0) sum += x *\
    \ x\n            if (x % 4 == 0) sum += x * x\n        }\n        sum", "    \
    \    val squares = lst.filter(x => x % 3 == 0).map(x => x * x)\n        val cubes\
    \ = lst.filter(x => x % 4 == 0).map(x => x * x * x)\n        squares.sum + cubes.sum",
  "        val sum = 0\n        lst.foreach{\n            i =>\n                if((i\
    \ % 3) == 0){\n                    sum += i * i\n                }\n         \
    \       if((i % 4) == 0){\n                    sum += i * i\n                }\n\
    \                if((i % 3) != 0){\n                    sum += i * i\n       \
    \         }\n                if((i % 4) != 0){\n                    sum += i *\
    \ i\n                }\n        }\n        sum", "        val sum = 0\n      \
    \  for (i <- 0 until lst.size) {\n            if (i % 3 == 0) {\n            \
    \    sum += lst(i)\n            } else if (i % 4 == 0) {\n                sum\
    \ += lst(i)\n            } else {\n                sum += lst(i) * lst(i)\n  \
    \          }\n        }\n        sum", "        val sum = 0\n        lst.foreach{\
    \ x =>\n            if (x % 3 == 0) {\n                sum += x * x\n        \
    \    } else if (x % 4 == 0) {\n                sum += x * x\n            } else\
    \ {\n                sum += x\n            }\n        }\n        sum", "     \
    \   val sum = 0\n        lst.foreach(x => if (x % 3 == 0 || x % 4 == 0) sum +=\
    \ x * x else sum += x * x * x)\n        sum", "        val squares = lst.filter(_\
    \ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_ % 4 == 0).map(_ * _)\n\
    \        squares.sum + cubes.sum", "        val sum = 0\n        val lst2 = lst.filter(_\
    \ % 3 == 0)\n        val lst3 = lst.filter(_ % 4 == 0)\n        val lst4 = lst.filter(_\
    \ % 3 == 0)\n        val lst5 = lst.filter(_ % 4 == 0)\n        lst2.foreach(x\
    \ => sum += x * x)\n        lst3.foreach(x => sum += x * x)\n        lst4.foreach(x\
    \ => sum += x * x)\n        lst5.foreach(x => sum += x * x)\n        sum", " \
    \       var sum = 0\n        var count = 0\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i)\n          \
    \      count += 1\n            } else if (i % 4 == 0) {\n                sum +=\
    \ lst(i)\n                count += 1\n            } else {\n                sum\
    \ += lst(i)\n            }\n        }\n        sum", "        val sum = 0\n  \
    \      val lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0)\n        lst2.foreach(x\
    \ => sum += x * x)\n        sum", "        var sum = 0\n        for (i <- 0 until\
    \ lst.size) {\n            if (i % 3 == 0) {\n                sum += lst(i)\n\
    \            }\n            else if (i % 4 == 0) {\n                sum += lst(i)\n\
    \            }\n            else {\n                sum += lst(i)\n          \
    \  }\n        }\n        sum", "        // Your code here\n        val sum = 0\n\
    \        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  val square = lst(index) * lst(index)\n                sum += square\n     \
    \       }\n        }\n        sum", "        val sum = 0\n        lst.foreach(x\
    \ => {\n            if (x % 3 == 0) sum += x * x\n            if (x % 4 == 0)\
    \ sum += x * x\n        })\n        sum", "        var sum = 0\n        for (i\
    \ <- 0 until lst.size) {\n            if (i%3 == 0 && i%4 == 0) sum += lst(i)\n\
    \            if (i%3 == 0) sum += lst(i)\n            if (i%4 == 0) sum += lst(i)\n\
    \        }\n        sum", "        val sum = 0\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i)\n          \
    \  } else if (i % 4 == 0) {\n                sum += lst(i)\n            } else\
    \ {\n                sum += lst(i) * lst(i)\n            }\n        }\n      \
    \  sum", "        val sum = 0\n        for (i <- 0 until lst.size) {\n       \
    \     if (i.toLong % 3 == 0 && i.toLong % 4 == 0) {\n                sum += lst(i)\n\
    \            }\n        }\n        sum", "        val sum = 0\n        for (i\
    \ <- 0 until lst.size) {\n            if (i % 3 == 0) {\n                sum +=\
    \ lst(i)\n            }\n            if (i % 4 == 0) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        sum", "        // Write your code\
    \ here\n        val sum = 0\n        lst.foreach(x => {\n            if (x % 3\
    \ == 0) {\n                sum += x * x\n            } else if (x % 4 == 0) {\n\
    \                sum += x * x\n            } else {\n                sum += x\n\
    \            }\n        })\n        sum", "        val sum = 0L\n        lst.foreach(i\
    \ => {\n            if (i % 3 == 0) {\n                sum += i * i\n        \
    \    } else if (i % 4 == 0) {\n                sum += i * i\n            } else\
    \ {\n                sum += i\n            }\n        })\n        sum", "    \
    \    val sum = 0\n        lst.foreach{i =>\n            val mod3 = i % 3\n   \
    \         val mod4 = i % 4\n            if (mod3 == 0) sum += i\n            if\
    \ (mod4 == 0) sum += i\n        }\n        sum", "        val squares = lst.map(x\
    \ => if (x % 3 == 0) x * x else x * x * x)\n        val cubes = lst.map(x => if\
    \ (x % 4 == 0) x * x else x * x * x * x)\n        squares.sum + cubes.sum", " \
    \       // Your code here\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           if(index != -1) {\n                val square = lst(index) * lst(index)\n\
    \                sum += square\n            }\n        }\n        sum", "    \
    \    var sum = 0\n        for (i <- 0 until lst.size) {\n            if (i % 3\
    \ == 0) {\n                sum += lst(i)\n            } else if (i % 4 == 0) {\n\
    \                sum += lst(i)\n            } else {\n                sum += lst(i)\
    \ * lst(i)\n            }\n        }\n        sum", "        val sum = 0\n   \
    \     val lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0)\n        lst2.foreach(x\
    \ => sum += x * x)\n        sum", "        val sum = 0\n        for (i <- 0 until\
    \ lst.size) {\n            if (i % 3 == 0) {\n                sum += lst(i)\n\
    \            } else if (i % 4 == 0) {\n                sum += lst(i) * lst(i)\n\
    \            } else {\n                sum += lst(i)\n            }\n        }\n\
    \        sum", "        val sum = 0\n        lst.foreach(x => {\n            if\
    \ (x % 3 == 0) {\n                sum += x\n            } else if (x % 4 == 0)\
    \ {\n                sum += x\n            } else {\n                sum *= x\n\
    \            }\n        })\n        sum", "        val sum = 0\n        for (i\
    \ <- 0 until lst.size) {\n            if (i % 3 == 0) {\n                sum +=\
    \ lst(i)\n            } else if (i % 4 == 0) {\n                sum += lst(i)\n\
    \            } else {\n                sum += lst(i) * lst(i)\n            }\n\
    \        }\n        sum", "        val sum = 0\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i)\n          \
    \  }\n            else if (i % 4 == 0) {\n                sum += lst(i)\n    \
    \        }\n            else {\n                sum += lst(i) * lst(i)\n     \
    \       }\n        }\n        sum", "        val sum = 0\n        lst.foreach{\n\
    \            i => if (i % 3 == 0 || i % 4 == 0) sum += i * i\n            else\
    \ sum += i\n        }\n        sum", "        val sum = 0\n        lst.foreach(x\
    \ => {\n            if (x % 3 == 0) {\n                sum += x * x\n        \
    \    } else if (x % 4 == 0) {\n                sum += x * x\n            } else\
    \ {\n                sum += x\n            }\n        })\n        sum", "    \
    \    val sum = 0\n        lst.foreach{ x =>\n            if (x % 3 == 0) {\n \
    \               sum += x\n            } else if (x % 4 == 0) {\n             \
    \   sum += x\n            } else {\n                sum += x * x\n           \
    \ }\n        }\n        sum", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach(x => if (x % 3 == 0) result += x * x else if (x % 4 == 0)\
    \ result += x * x * x else result += x))\n        result.sum", "        val sum\
    \ = 0\n        lst.foreach{ x =>\n            if (x % 3 == 0) {\n            \
    \    sum += x * x\n            } else if (x % 4 == 0) {\n                sum +=\
    \ x * x\n            } else {\n                sum += x\n            }\n     \
    \   }\n        sum", "        // Your code goes here\n        val sum = 0\n  \
    \      for(i <- 0 until lst.size) {\n            if(i % 3 == 0) {\n          \
    \      sum += lst(i)\n            }\n            if(i % 4 == 0) {\n          \
    \      sum += lst(i)\n            }\n        }\n        sum", "        val sum\
    \ = 0\n        for (i <- 0 until lst.size) {\n            if (i % 3 == 0 || i\
    \ % 4 == 0) {\n                sum += lst(i)\n            }\n        }\n     \
    \   sum", "        val sum = 0\n        lst.foreach(i => {\n            if (i\
    \ % 3 == 0) {\n                sum += i * i\n            }\n            if (i\
    \ % 4 == 0) {\n                sum += i * i\n            }\n        })\n     \
    \   sum", "        var sum = 0\n        for(i <- 0 until lst.size) {\n       \
    \     val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index\
    \ != -1) {\n                val value = lst(index)\n                if(value %\
    \ 3 == 0 || value % 4 == 0) {\n                    sum += value * value\n    \
    \            }\n            }\n        }\n        sum", "        val squares =\
    \ lst.filter(x => x % 3 == 0).map(x => x * x)\n        val cubes = lst.filter(x\
    \ => x % 4 == 0).map(x => x * x * x)\n        lst.filterNot(x => x % 3 == 0 ||\
    \ x % 4 == 0).sum + squares.sum + cubes.sum", "        val squares = lst.map(x\
    \ => if (x % 3 == 0) x * x else x * x * x)\n        val cubes = lst.map(x => if\
    \ (x % 4 == 0) x * x * x else x * x * x * x)\n        squares.sum + cubes.sum",
  "        val sum = 0\n        val sq = lst.map(x => if (x % 3 == 0) x * x else x\
    \ * x * x)\n        val cu = lst.map(x => if (x % 4 == 0) x * x else x * x * x\
    \ * x)\n        val sum = sq.sum + cu.sum\n        sum", "        val sum = 0\n\
    \        lst.foreach(x => {\n            val mod = x % 3\n            if (mod\
    \ != 0) {\n                val newX = x * x\n                val newY = newX *\
    \ x\n                val newZ = newY * x\n                sum += newZ\n      \
    \      }\n        })\n        sum", "        val newList = mutable.ListBuffer[Long]()\n\
    \        lst.foreach{x => \n            if (x % 3 == 0) newList += x*x\n     \
    \       if (x % 4 == 0) newList += x*x*x\n            newList += x\n        }\n\
    \        newList.sum", "        val sum = 0\n        lst.foreach{i =>\n      \
    \      if (i % 3 == 0) sum += i * i\n            if (i % 4 == 0) sum += i * i\n\
    \        }\n        sum", "        val squares = lst.filter(x => x % 3 == 0).map(x\
    \ => x * x)\n        val cubes = lst.filter(x => x % 4 == 0).map(x => x * x)\n\
    \        squares.sum + cubes.sum", "        val sum = 0\n        lst.foreach(i\
    \ => {\n            if (i % 3 == 0) sum += i * i\n            if (i % 4 == 0)\
    \ sum += i * i\n        })\n        sum", "        var sum = 0\n        for(i\
    \ <- 0 until lst.size) {\n            val index = lst.indexWhere(x => x % 3 ==\
    \ 0 || x % 4 == 0)\n            if(index != -1) {\n                sum += lst(index)\
    \ * lst(index)\n            }\n        }\n        sum", "        val squares =\
    \ lst.filter(x => x % 3 == 0).map(x => x * x)\n        val cubes = lst.filter(x\
    \ => x % 4 == 0).map(x => x * x * x)\n        squares.sum + cubes.sum", "    \
    \    val sum = 0\n        lst.foreach { i =>\n            if (i % 3 == 0) sum\
    \ += i * i\n            if (i % 4 == 0) sum += i * i\n        }\n        sum",
  "        val sum = 0\n        for (i <- 0 until lst.size) {\n            if (i %\
    \ 3 == 0) {\n                sum += lst(i)\n            } else if (i % 4 == 0)\
    \ {\n                sum += lst(i)\n            } else {\n                sum\
    \ += lst(i) * lst(i)\n            }\n        }\n        sum"]
stop_tokens:
- "\n    }\n"
