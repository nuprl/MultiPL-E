language: scala
name: HumanEval_156_int_to_mini_roman
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5_dez5s5.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5_dez5s5.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val digits = number.toString.toInt\n\
    \        val numDigits = digits.length\n        val numPowers = numDigits - 1\n\
    \        val numPowersOfTen = numPowers / 10\n        val numPowersOfOne = numPowers\
    \ % 10\n        val numPowersOfFive = numPowersOfTen / 5\n        val numPowersOfThree\
    \ = numPowersOfOne / 3\n        val numPowersOfTwo = numPowersOfFive / 2\n   \
    \     val numPowersOfOneAndHalf = numPowersOfThree / 1\n        val numPowersOfOneAndHalfAndHalf\
    \ = numPowersOfOneAndHalf + 1\n        val numPowersOfOneAndHalfAndHalfAndHalf\
    \ = numPowersOfOneAndHalfAndHalf + 1\n        val numPowersOfOneAndHalfAndHalfAndHalfAndHalf\
    \ = numPowersOfOneAndHalfAndHalfAndHalf + 1\n        val numPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalf\
    \ = numPowersOfOneAndHalfAndHalfAndHalfAndHalf + 1\n        val numPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalfAndHalf\
    \ = numPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalf + 1\n        val numPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalf\
    \ = numPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalf + 1\n    \
    \    val numPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalf\
    \ = numPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalf + 1\n    \
    \    val numPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalf\
    \ = numPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalf + 1\n    \
    \    val numPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalf\
    \ = numPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalf + 1\n\
    \        val numPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalf\
    \ = numPowersOfOneAndHalfAndHalfAndHalf\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmggx96za.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnumPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalf\e\
    [0m = numPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalf + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalf\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalf\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmggx96za.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mnumPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalf\e\
    [0m = numPowersOfOneAndHalfAndHalfAndHalf\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalf\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numPowersOfOneAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalfAndHalf\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmggx96za.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpmggx96za.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsArray = nums.toArray\n        val numsArrayLength\
    \ = numsArray.length\n        val numsArrayLength = numsArray.length\n       \
    \ val numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpksorikvn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayLength\e[0m = numsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsArrayLength is already defined as \e[33mvalue\e[0m \e[35mnumsArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpksorikvn.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayLength\e[0m = numsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsArrayLength is already defined as \e[33mvalue\e[0m \e[35mnumsArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpksorikvn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayLength\e[0m = numsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsArrayLength is already defined as \e[33mvalue\e[0m \e[35mnumsArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpksorikvn.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayLength\e[0m = numsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsArrayLength is already defined as \e[33mvalue\e[0m \e[35mnumsArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpksorikvn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayLength\e[0m = numsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder23\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp91e3r4hg.scala:40:51 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder23\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp91e3r4hg.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, Long]()\n       \
    \ val numsMap5 = scala.collection.mutable.Map[String, Long]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap7 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap8 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[String, Long]()\n       \
    \ val numsMap10 = scala.collection.mutable.Map[String, Long]()\n        val numsMap11\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap12 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap13 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap14 = scala.collection.mutable.Map[String, Long]()\n      \
    \  val numsMap15 = scala.collection.mutable.Map[String, Long]()\n        val numsMap16\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap17 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap18 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap19 = scala.collection.mutable.Map[String, Long]()\n      \
    \  val numsMap20 = scala.collection.mutable.Map[String, Long]()\n        val numsMap21\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap22 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap23 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap24 = scala.collection.mutable.Map[String, Long]()\n      \
    \  val numsMap25 = scala.collection.mutable.Map[String, Long]()\n        val numsMap26\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap27 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfcqb7wcz.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfcqb7wcz.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var i\
    \ = number\n        while(i >= 1000) {\n            roman.append(roman.last.substring(0,\
    \ roman.last.length - 1))\n            i -= 1000\n        }\n        while(i >=\
    \ 100) {\n            roman.append(roman.last.substring(0, roman.last.length -\
    \ 1))\n            i -= 100\n        }\n        while(i >= 10) {\n           \
    \ roman.append(roman.last.substring(0, roman.last.length - 1))\n            i\
    \ -= 10\n        }\n        roman.append(roman.last.substring(0, roman.last.length\
    \ - 1))\n        roman.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty ListBuffer\n\tat scala.collection.mutable.ListBuffer.last(ListBuffer.scala:379)\n\
    \tat Problem$.intToMiniRoman(tmpa2lg19in.scala:26)\n\tat Problem$.main(tmpa2lg19in.scala:33)\n\
    \tat Problem.main(tmpa2lg19in.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString2\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString3\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString4\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString5\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString6\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString7\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString8\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString9\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString10\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString11\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString12\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString13\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString14\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString15\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString16\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString17\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString18\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString19\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString20\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString21\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString22\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString23\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString24\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString25\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString26\
    \ = scala.collection.mutable.ListBuffer.empty[String\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp49t8ntmg.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp49t8ntmg.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp05rquc1b.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp05rquc1b.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mStringBuilder\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp05rquc1b.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp05rquc1b.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp05rquc1b.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 "
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp73w3u0qg.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp73w3u0qg.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.length) {\n            val num\
    \ = nums(i)\n            val romanNum = num / 100\n            val remainder =\
    \ num % 100\n            val romanNumStr = romanNum.toString\n            val\
    \ remainderStr = remainder.toString\n            if (romanNumStr.length < remainderStr.length)\
    \ {\n                roman.append(romanNumStr)\n                roman.append(remainderStr.substring(romanNumStr.length))\n\
    \            } else {\n                roman.append(remainderStr)\n          \
    \      roman.append(romanNumStr.substring(romanNumStr.length))\n            }\n\
    \        }\n        roman.toString().toLowerCase()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdzn5jb1n.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpdzn5jb1n.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.length)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value length is not a member of Double\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpdzn5jb1n.scala:18:22 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659806064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ i = number\n        while(i >= 1000) {\n            roman.push(\"M\")\n    \
    \        i -= 1000\n        }\n        while(i >= 100) {\n            roman.push(\"\
    C\")\n            i -= 100\n        }\n        while(i >= 10) {\n            roman.push(\"\
    D\")\n            i -= 10\n        }\n        while(i >= 1) {\n            roman.push(\"\
    M\")\n            i -= 1\n        }\n        roman.push(\"I\")\n        roman.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx59bprq2.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            roman.push(\e[31m\"M\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue push is not a member\
    \ of scala.collection.mutable.ListBuffer[String] - did you mean roman.last?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpx59bprq2.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            roman.push(\e[31m\"C\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue push is not a member\
    \ of scala.collection.mutable.ListBuffer[String] - did you mean roman.last?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpx59bprq2.scala:26:18 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            roman.push(\e[31m\"D\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue push is not a member\
    \ of scala.collection.mutable.ListBuffer[String] - did you mean roman.last?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpx59bprq2.scala:30:18 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            roman.push(\e[31m\"M\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue push is not a member\
    \ of scala.collection.mutable.ListBuffer[String] - did you mean roman.last?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpx59bprq2.scala:33:14 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        roman.push(\e[31m\"I\"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue push is not a member of\
    \ scala.collection.mutable.ListBuffer[String] - did you mean roman.last?\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659806066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        var num = 0\n       \
    \ while (number > 0) {\n            val remainder = number % 100\n           \
    \ number -= remainder\n            num += 1\n            roman.append(romanDigits(remainder))\n\
    \            nums += num\n        }\n        roman.mkString(\"\")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0k3tam35.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            number -= remainder\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean number.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0k3tam35.scala:22:25\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            roman.append(romanDigits(remainder))\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         Not found: romanDigits\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ tenths = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredths\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n \
    \       val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n \
    \       val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiftj9wlq.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mhundredthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredthths is already defined as \e[33mvalue\e[0m \e[35mhundredthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiftj9wlq.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiftj9wlq.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mhundredthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredthths is already defined as \e[33mvalue\e[0m \e[35mhundredthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiftj9wlq.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel defi"
  stdout: ''
  timestamp: 1659806064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val digits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val maxDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n  \
    \      val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n \
    \       val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val max\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd9dbsbpq.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd9dbsbpq.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxDigitIndex\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxDigitIndex is already defined as \e[33mvalue\e[0m \e[35mmaxDigitIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd9dbsbpq.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitIndex\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxDigitIndex is already defined as \e[33mvalue\e[0m \e[35mmaxDigitIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd9dbsbpq.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitIndex\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxDigitIndex is already defined as \e[33mvalue\e[0m \e[35mmaxDigitIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd9dbsbpq.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitIndex\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659806064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsLength = nums.length\n        for (i<-0 until\
    \ numsLength) {\n            val num = nums(i)\n            val digit = num.toInt\n\
    \            val romanDigit = if (digit < 5) {\n                val romanDigit\
    \ = if (digit < 10)\n                    digit.toString\n                else\n\
    \                    scala.math.pow(10, digit - 5).toString\n                romanDigit\
    \ + romanDigit\n            } else \"M\"\n            roman += romanDigit\n  \
    \      }\n        roman.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz_mm5rsp.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpz_mm5rsp.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsLength\e[0m = nums.length\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value length is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpz_mm5rsp.scala:19:22 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsLength = nums.length\n        for (i <- 0 until\
    \ numsLength) {\n            val num = (nums(i) / nums(i).toInt).toInt\n     \
    \       val digit = nums(i) % nums(i).toInt\n            roman += if (digit >\
    \ 0) \"M\" else \"\"\n            roman += if (digit > 0) \"C\" else \"\"\n  \
    \          roman += if (digit > 0) \"D\" else \"\"\n            roman += if (digit\
    \ > 0) \"C\" else \"\"\n            roman += if (digit > 0) \"X\" else \"\"\n\
    \            roman += if (digit > 0) \"V\" else \"\"\n            roman += if\
    \ (digit > 0) \"I\" else \"\"\n            roman += if (digit > 0) \"X\" else\
    \ \"\"\n            roman += if (digit > 0) \"I\" else \"\"\n            roman\
    \ += if (digit > 0) \"I\" else \"\"\n            roman += if (digit > 0) \"I\"\
    \ else \"\"\n            roman += if (digit > 0) \"I\" else \"\"\n           \
    \ roman += if (digit > 0) \"I\" else \"\"\n            roman += if (digit > 0)\
    \ \"I\" else \"\"\n            roman += if (digit > 0) \"I\" else \"\"\n     \
    \       roman += if (digit > 0) \"I\" else \"\"\n            roman += if (digit\
    \ > 0) \"I\" else \"\"\n            roman += if (digit > 0) \"I\" else \"\"\n\
    \            roman += if (digit > 0) \"I\" else \"\"\n            roman += if\
    \ (digit > 0) \"I\" else \"\"\n            roman += if (digit > 0) \"I\" else\
    \ \"\"\n            roman += if (digit > 0) \"I\" else \"\"\n            roman\
    \ += if (digit > 0) \"I\" else \"\"\n            roman += if (digit > 0) \"I\"\
    \ else \"\"\n            roman += if (digit > 0) \"I\" else \"\"\n           \
    \ roman += if (digit > 0) \"I\" else \"\"\n            roman += if (digit > 0)\
    \ \"I\" else \"\"\n            roman += if (digit > 0) \"I\" else \"\"\n     \
    \       roman += if (digit > 0) \"I\" else \"\"\n            roman += if (digit\
    \ > 0) \"I\" else \"\"\n            roman += if (digit > 0) \"I\" else \"\"\n\
    \            rom\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpug23uku6.scala:21:21 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            roman += \e[33mif\e[0m (digit > \e[31m0\e\
    [0m) \e[31m\"M\"\e[0m \e[33melse\e[0m \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m \
    \                    ^^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpug23uku6.scala:22:21 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            roman += \e[33mif\e[0m (digit > \e[31m0\e[0m) \e[31m\"C\"\e\
    [0m \e[33melse\e[0m \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \  ^^\e[0m\n\e[31m   |\e[0m                     expression expected but \e[31mif\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpug23uku6.scala:23:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            roman += \e\
    [33mif\e[0m (digit > \e[31m0\e[0m) \e[31m\"D\"\e[0m \e[33melse\e[0m \e[31m\"\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m    \
    \                 expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E018] Syntax Error: /tmp/tmpug23uku6.scala:24:21 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            roman += \e[33mif\e[0m (digit > \e[31m0\e\
    [0m) \e[31m\"C\"\e[0m \e[33melse\e[0m \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m \
    \                    ^^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpug23uku6.scala:25:21 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m            roman += \e[33mif\e[0m (digit > \e[31m0\e[0m) \e[31m\"X\"\e\
    [0m \e[33melse\e[0m \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \  ^^\e[0m\n\e[31m   |\e[0m                     expression expected but \e[31mif\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when"
  stdout: ''
  timestamp: 1659806066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        val numsArray\
    \ = numsString.toCharArray\n        var i = 0\n        while (i < numsArray.length)\
    \ {\n            if (numsArray(i) == '1') {\n                roman.append(numsArray(i))\n\
    \                i += 1\n            } else {\n                val numsArray2\
    \ = numsArray(i).toString.reverse\n                val numsArray3 = numsArray2.toCharArray\n\
    \                val numsArray4 = numsArray3.takeWhile(_ != '0')\n           \
    \     val numsArray5 = numsArray4.takeWhile(_ != '0')\n                val numsArray6\
    \ = numsArray5.takeWhile(_ != '0')\n                val numsArray7 = numsArray6.takeWhile(_\
    \ != '0')\n                val numsArray8 = numsArray7.takeWhile(_ != '0')\n \
    \               val numsArray9 = numsArray8.takeWhile(_ != '0')\n            \
    \    val numsArray10 = numsArray9.takeWhile(_ != '0')\n                val numsArray11\
    \ = numsArray10.takeWhile(_ != '0')\n                val numsArray12 = numsArray11.takeWhile(_\
    \ != '0')\n                val numsArray13 = numsArray12.takeWhile(_ != '0')\n\
    \                val numsArray14 = numsArray13.takeWhile(_ != '0')\n         \
    \       val numsArray15 = numsArray14.takeWhile(_ != '0')\n                val\
    \ numsArray16 = numsArray15.takeWhile(_ != '0')\n                val numsArray17\
    \ = numsArray16.takeWhile(_ != '0')\n                val numsArray18 = numsArray17.takeWhile(_\
    \ != '0')\n                val numsArray19 = numsArray18.takeWhile(_ != '0')\n\
    \                val numsArray20 = numsArray19.takeWhile(_ != '0')\n         \
    \       val numsArray21 = numsArray20.takeWhile(_ != '0')\n                val\
    \ numsArray22 = numsArray21.takeWhile(_ != '0')\n                val numsArray23\
    \ = numsArray22.takeWhile(_ != '0')\n                val numsArray24 = numsArray23.takeWhile(_\
    \ != '0')\n                val numsArray25 = numsArray24.takeWhile(_ != '0')\n\
    \                val numsArray26 = numsArray25.takeWhile(_ != '0')\n         \
    \       val numsArray27 = numsArray26.takeWhile(_ != '0')\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt5muaesw.scala:70:0 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt5muaesw.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt5muaesw.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mwhile\e[0m (i\
    \ < numsArray.length) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m\
    \        Found:    Unit\n\e[31m   |\e[0m        Required: String\n\e[31m21 |\e\
    [0m            \e[33mif\e[0m (numsArray(i) == \e[31m'1'\e[0m) {\n\e[31m22 |\e\
    [0m                roman.append(numsArray(i))\n\e[31m23 |\e[0m               \
    \ i += \e[31m1\e[0m\n\e[31m24 |\e[0m            } \e[33melse\e[0m {\n\e[31m25\
    \ |\e[0m                \e[33mval\e[0m \e[36mnumsArray2\e[0m = numsArray(i).toString.reverse\n\
    \e[31m26 |\e[0m                \e[33mval\e[0m \e[36mnumsArray3\e[0m = numsArray2.toCharArray\n\
    \e[31m27 |\e[0m                \e[33mval\e[0m \e[36mnumsArray4\e[0m = numsArray3.takeWhile(_\
    \ != \e[31m'0'\e[0m)\n\e[31m28 |\e[0m                \e[33mval\e[0m \e[36mnumsArray5\e\
    [0m = numsArray4.takeWhile(_ != \e[31m'0'\e[0m)\n\e[31m29 |\e[0m             \
    \   \e[33mval\e[0m \e[36mnumsArray6\e[0m = numsArray5.takeWhile(_ != \e[31m'0'\e\
    [0m)\n\e[31m30 |\e[0m                \e[33mval\e[0m \e[36mnumsArray7\e[0m = numsArray6.takeWhile(_\
    \ != \e[31m'0'\e[0m)\n\e[31m31 |\e[0m                \e[33mval\e[0m \e[36mnumsArray8\e\
    [0m = numsArray7.takeWhile(_ != \e[31m'0'\e[0m)\n\e[31m32 |\e[0m             \
    \   \e[33mval\e[0m \e[36mnumsArray9\e[0m = numsArray8.takeWhile(_ != \e[31m'0'\e\
    [0m)\n\e[31m33 |\e[0m                \e[33mval\e[0m \e[36mnumsArray10\e[0m = numsArray9.takeWhile(_\
    \ != \e[31m'0'\e[0m)\n\e[31m34 |\e[0m                \e[33mval\e[0m \e[36mnumsArray11\e\
    [0m = numsArray10.takeWhile(_ != \e[31m'0'\e["
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp73w3u0qg.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp73w3u0qg.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5_dez5s5.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5_dez5s5.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val digits = number.toString.reverse\n\
    \        var index = 0\n        while (index < digits.length) {\n            val\
    \ digit = digits(index)\n            if (digit < 'a' || digit > 'z') {\n     \
    \           roman += digit\n            } else {\n                val romanDigit\
    \ = digit - 'a'\n                val nextDigit = digits(index + 1)\n         \
    \       if (nextDigit < 'a' || nextDigit > 'z') {\n                    roman +=\
    \ romanDigit\n                } else {\n                    val nextRomanDigit\
    \ = nextDigit - 'a'\n                    val nextNextDigit = digits(index + 2)\n\
    \                    if (nextNextDigit < 'a' || nextNextDigit > 'z') {\n     \
    \                   roman += romanDigit + nextRomanDigit\n                   \
    \ } else {\n                        val nextNextRomanDigit = nextNextDigit - 'a'\n\
    \                        val nextNextNextDigit = digits(index + 3)\n         \
    \               if (nextNextNextDigit < 'a' || nextNextNextDigit > 'z') {\n  \
    \                          roman += romanDigit + nextRomanDigit + nextNextRomanDigit\n\
    \                        } else {\n                            val nextNextNextRomanDigit\
    \ = nextNextNextDigit - 'a'\n                            val nextNextNextNextDigit\
    \ = digits(index + 4)\n                            if (nextNextNextNextDigit <\
    \ 'a' || nextNextNextNextDigit > 'z') {\n                                roman\
    \ += romanDigit + nextRomanDigit + nextNextRomanDigit + nextNextNextRomanDigit\n\
    \                            } else {\n                                val nextNextNextNextRomanDigit\
    \ = nextNextNextNextDigit - 'a'\n                                val nextNextNextNextNextDigit\
    \ = digits(index + 5)\n                                if (nextNextNextNextNextDigit\
    \ < 'a' || nextNextNextNextNextDigit > 'z') {\n                              \
    \      roman += romanDigit + nextRomanDigit + nextNextRomanDigit + nextNextNextRomanDigit\
    \ + nextNextNextRomanDigit + nextNextNextRomanDigit + nextNextNextRomanDigit\n\
    \                                } else {\n                                  \
    \  val nextNextNextNextNextRomanDigit = nextNextNextNextNextDigit - 'a'\n    \
    \                                val nextNextNextNextNextNextDigit = digits(index\
    \ + 6)\n                                    if (nextNextNextNextNextNextDigit\
    \ < 'a' || nextNextNextNextNextNextDigit > 'z') {\n                          \
    \              roman += romanDigit \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv5iel8ez.scala:71:0 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv5iel8ez.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv5iel8ez.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mwhile\e[0m (index\
    \ < digits.length) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    Unit\n\e[31m   |\e[0m        Required: String\n\e[31m19 |\e[0m\
    \            \e[33mval\e[0m \e[36mdigit\e[0m = digits(index)\n\e[31m20 |\e[0m\
    \            \e[33mif\e[0m (digit < \e[31m'a'\e[0m || digit > \e[31m'z'\e[0m)\
    \ {\n\e[31m21 |\e[0m                roman += digit\n\e[31m22 |\e[0m          \
    \  } \e[33melse\e[0m {\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mromanDigit\e\
    [0m = digit - \e[31m'a'\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e\
    [36mnextDigit\e[0m = digits(index + \e[31m1\e[0m)\n\e[31m25 |\e[0m           \
    \     \e[33mif\e[0m (nextDigit < \e[31m'a'\e[0m || nextDigit > \e[31m'z'\e[0m)\
    \ {\n\e[31m26 |\e[0m                    roman += romanDigit\n\e[31m27 |\e[0m \
    \               } \e[33melse\e[0m {\n\e[31m28 |\e[0m                    \e[33mval\e\
    [0m \e[36mnextRomanDigit\e[0m = nextDigit - \e[31m'a'\e[0m\n\e[31m29 |\e[0m  \
    \                  \e[33mval\e[0m \e[36mnextNextDigit\e[0m = digits(index + \e\
    [31m2\e[0m)\n\e[31m30 |\e[0m                    \e[33mif\e[0m (nextNextDigit <\
    \ \e[31m'a'\e[0m || nextNextDigit > \e[31m'z'\e[0m) {\n\e[31m31 |\e[0m       \
    \                 roman += romanDigit + nextRomanDigit\n\e[31m32 |\e[0m      \
    \              } \e[33melse\e[0m {\n\e[31m33 |\e[0m                        \e\
    [33mval\e[0m \e[36mnextNextRomanDigit\e[0m = nextNextDigit - \e[31m'a'\e[0m\n\e\
    [31m34 |\e[0m                        \e[33mval\e[0m \e[36mnextNextNextDigi"
  stdout: ''
  timestamp: 1659806066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjm19h5wq.scala:40:51 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder22\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjm19h5wq.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var i\
    \ = 0\n        while (number > 0) {\n            val remainder = number % 10\n\
    \            roman.append(remainder)\n            number /= 10\n            i\
    \ += 1\n        }\n        roman.reverse.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpxcof48ec.scala:19:18 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            roman.append(remainder)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m\
    \ with types\n\e[31m   |\e[0m (elems: String*): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments ((remainder : Long))\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpxcof48ec.scala:20:19 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ digits = scala.collection.mutable.ListBuffer.empty[Int]\n        val tens =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val hundredsTens = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val hundredsHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val thousandsHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandsThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundredsThousandsHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundredsThousandsThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandsThousandsThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandsThousandsThousandsHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandsThousandsThousandsThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandsThousandsThousandsThousandsHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandsThousandsThousandsThousandsThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandsThousandsThousandsThousandsThousandsHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandsThousandsThousandsThousandsThousandsThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandsThousandsThousandsThousandsThousandsThousandsHundreds =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsThousandsThousandsThousandsThousandsThousands\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiart1cse.scala:34:95 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mthousandsThousandsThousandsThousandsThousandsThousandsThousands\e\
    [0m = scala.collection.mut\n\e[31m\e[31m   |\e[0m                            \
    \                                                  ^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m  value mut is not a member of collection - did you mean collection.Set?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiart1cse.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ digits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.math.log10(number).toInt\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd0xocruw.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumDigitsInt\e[0m = scala.math.pow(\e\
    [31m10\e[0m, numDigits)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigitsInt is already defined as \e[33mvalue\e[0m \e[35mnumDigitsInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd0xocruw.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnumDigitsInt\e[0m = scala.math.pow(\e\
    [31m10\e[0m, numDigits)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigitsInt is already defined as \e[33mvalue\e[0m \e[35mnumDigitsInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd0xocruw.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumDigitsInt\e[0m = scala.math.pow(\e\
    [31m10\e[0m, numDigits)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigitsInt is already defined as \e[33mvalue\e[0m \e[35mnumDigitsInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd0xocruw.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumDigitsInt\e[0m = scala.math.pow(\e\
    [31m10\e[0m, numDigits)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigitsInt is already defined as \e[33mvalue\e[0m \e[35mnumDigitsInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd0xocruw.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659806064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        var index = 0\n      \
    \  while (number > 0) {\n            val remainder = number % 10\n           \
    \ roman.append(remainder)\n            number /= 10\n            index += 1\n\
    \        }\n        roman.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg_3ens9t.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpg_3ens9t.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659806064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        var i\
    \ = 0\n        while (i < numsString.length) {\n            val num = numsString(i).toLong\n\
    \            val digit = num / 100\n            val remainder = num % 100\n  \
    \          val digitString = digit.toString\n            val remainderString =\
    \ remainder.toString\n            if (digit == 1) {\n                roman.append(digitString)\n\
    \            } else if (digit > 1) {\n                roman.append(digitString\
    \ + roman.last)\n            }\n            if (remainder == 1) {\n          \
    \      roman.append(remainderString)\n            } else if (remainder > 1) {\n\
    \                roman.append(remainderString + roman.last)\n            }\n \
    \           i += 1\n        }\n        roman.mkString.toLowerCase\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp11cga5_b.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659806071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ remainder = number\n        var i = 2\n        while (i <= number) {\n     \
    \       val remainderToAdd = remainder % i\n            roman.append(if (remainderToAdd\
    \ == 0) \"M\" else if (remainderToAdd == 1) \"D\" else \"C\")\n            remainder\
    \ = remainder / i\n            i += 1\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ngcxmk7.scala:27)\n\tat Problem.main(tmp5ngcxmk7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var i\
    \ = number\n        while(i >= 1000) {\n            roman.append(roman.last.substring(0,\
    \ roman.last.length-1))\n            i -= 1000\n        }\n        roman.append(roman.last.substring(0,\
    \ roman.last.length-1))\n        roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty ListBuffer\n\tat scala.collection.mutable.ListBuffer.last(ListBuffer.scala:379)\n\
    \tat Problem$.intToMiniRoman(tmp_2qcyr6c.scala:21)\n\tat Problem$.main(tmp_2qcyr6c.scala:25)\n\
    \tat Problem.main(tmp_2qcyr6c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val num = (number\
    \ / nums) * i\n            roman += numToMiniRoman(num)\n        }\n        roman.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpesuxuxyu.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpesuxuxyu.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    (nums : Double)\n\e[31m   |\e[0m        \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsLength = nums.length\n        val numsDigits\
    \ = nums.toString.length\n        val numsDigit = numsDigits.toInt\n        val\
    \ numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits.toInt\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgjdija29.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = nums.toString.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsDigits is already defined as \e[33mvalue\e[0m \e[35mnumsDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgjdija29.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsDigit\e[0m = numsDigits.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnumsDigit is already defined as \e[33mvalue\e[0m \e[35mnumsDigit\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgjdija29.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = nums.toString.length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsDigits is already defined as \e[33mvalue\e[0m \e[35mnumsDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgjdija29.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsDigit\e[0m = numsDigits.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnumsDigit is already defined as \e[33mvalue\e[0m \e[35mnumsDigit\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgjdija29.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = nums.toString.length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsDigits is already defined as \e[33mvalue"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        var i = number\n     \
    \   while(i >= 1000) {\n            roman.append (i % 100).asInstanceOf[String]\n\
    \            i /= 100\n        }\n        roman.append (i % 10).asInstanceOf[String]\n\
    \        roman.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoz_anr5u.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659806072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp05rquc1b.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp05rquc1b.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mStringBuilder\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp05rquc1b.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp05rquc1b.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp05rquc1b.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 "
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val digitsLen = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numsLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val digitsLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ digitsLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ digitsLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numsLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val digitsLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val digitsLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val digitsLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val digitsLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val digitsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val digitsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptzdbrx48.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmptzdbrx48.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStr =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val num\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp06a2plpn.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp06a2plpn.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStr\e[0m = scala.collection.mutable.ListBuffer.empty[\e[35mString\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStr is already defined as \e[33mvalue\e[0m \e[35mnumsStr\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp06a2plpn.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnumsStr\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStr is already defined as \e[33mvalue\e[0m \e[35mnumsStr\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp06a2plpn.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsStr\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStr is already defined as \e[33mvalue\e[0m \e[35mnumsStr\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp06a2plpn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStr\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStr is already defined as \e[33mvalue\e[0m "
  stdout: ''
  timestamp: 1659806075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsStr = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr2 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsStr3 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr4\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr5 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr6 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsStr7 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr8\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr9 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr10 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr11 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr12 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr13\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr15 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr16 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr17 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr18\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr19 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr20 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr21 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr22 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr23\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr24 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr25 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr26 = scala.collection.mutable.ListBuffer[String]\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqqu53m6b.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        var num = 0\n        while (number > 0) {\n         \
    \   val remainder = number % 10\n            number /= 10\n            num +=\
    \ 1\n            roman.append(nums(num).toChar)\n        }\n        roman.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpik7f8eva.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpik7f8eva.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659806075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeq5_s2x_.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeq5_s2x_.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in "
  stdout: ''
  timestamp: 1659806075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = number.toString.toInt\n\
    \        val numsStr = nums.toString\n        val numsLen = numsStr.length\n \
    \       val numsLenMinusOne = numsLen - 1\n        val numsLenMinusOneStr = numsLenMinusOne.toString\n\
    \        val numsLenMinusOneLen = numsLenMinusOneStr.length\n        val numsLenMinusOneLenMinusOne\
    \ = numsLenMinusOneLen - 1\n        val numsLenMinusOneLenMinusOneStr = numsLenMinusOneLenMinusOne.toString\n\
    \        val numsLenMinusOneLenMinusOneLenMinusOne = numsLenMinusOneLenMinusOneLen\
    \ - 1\n        val numsLenMinusOneLenMinusOneLenMinusOneStr = numsLenMinusOneLenMinusOneLenMinusOneStr.toString\n\
    \        val numsLenMinusOneLenMinusOneLenMinusOneLenMinusOne = numsLenMinusOneLenMinusOneLenMinusOneLenMinusOneStr.toString\n\
    \        val numsLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOne = numsLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOneStr.toString\n\
    \        val numsLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOne\
    \ = numsLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOneStr.toString\n\
    \        val numsLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOne\
    \ = numsLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOneStr.toString\n\
    \        val numsLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOne\
    \ = numsLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOneLenMinusOneStr.toString\n\
    \        val numsLenMinusOneLenMinusOneLenMinusOneLen\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg8u0sezi.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8u0sezi.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8u0sezi.scala:24:52\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsLenMinusOneLenMinusOneLenMinusOne\e[0m = numsLenMinusOneLenMinusOneLen\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     Not found: numsLenMinusOneLenMinusOneLen\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg8u0sezi.scala:25:55 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnumsLenMinusOneLenMinusOneLenMinusOneStr\e\
    [0m = numsLenMinusOneLenMinusOneLenMinusOneStr.toString\n\e[31m\e[31m   |\e[0m\
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \     Recursive \e[33mvalue\e[0m \e[35mnumsLenMinusOneLenMinusOneLenMinusOneStr\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8u0sezi.scala:26:63\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsLenMinusOneLenMinusOneLenMinusOneLenMinusOne\e[0m = numsLenMinusOneLenMinusOneLenMinusOneLenMinusOneStr.toString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m          Not found: numsLenMinusOneLenMinusOneLenMinusOneLenMinus"
  stdout: ''
  timestamp: 1659806075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5_dez5s5.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5_dez5s5.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr2 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr3 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr4 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr5 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr6 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr7 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr8 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr9\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr10 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr11 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr12 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr13 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr14 = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr15 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr16 = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val numsStr17 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr18 = scala.collection.mutable.ListBuffer.empty[String]\n       \
    \ val numsStr19 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr20 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr21\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr22 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr23 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr24 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr25 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr26 = scala.collection.mutable.ListBuffer.empty[String\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjomgr47f.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpjomgr47f.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsArray = nums.toArray\n        val numsArrayLength\
    \ = numsArray.length\n        var i = 0\n        while (i < numsArrayLength) {\n\
    \            val num = numsArray(i)\n            val romanNum = num.toRoman\n\
    \            roman.append(romanNum)\n            i += 1\n        }\n        roman.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeoqfeog6.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeoqfeog6.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsArray\e[0m = nums.toArray\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        value toArray is not a member of Double\n2 errors found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap3 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap5 = scala.collection.mutable.Map[Long, String]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap7 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap8 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap10 = scala.collection.mutable.Map[Long, String]()\n        val numsMap11\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap12 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap13 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap14 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap15 = scala.collection.mutable.Map[Long, String]()\n        val numsMap16\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap17 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap18 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap19 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap20 = scala.collection.mutable.Map[Long, String]()\n        val numsMap21\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap22 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap23 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap24 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap25 = scala.collection.mutable.Map[Long, String]()\n        val numsMap26\
    \ = scala.collection.mutable.Map[Long, String]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp44cwj06r.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ i = 0\n        while (number > 0) {\n            val remainder = number % 1000\n\
    \            roman.append(roman(i).dropRight(1))\n            number /= 1000\n\
    \            i += 1\n        }\n        roman.mkString.toLowerCase\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprmwhf80g.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            number /= \e[31m1000\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not\
    \ a member of Long - did you mean number.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        var i\
    \ = 0\n        while(i < numsString.length) {\n            val num = numsString(i).toLong\n\
    \            val romanNum = numToRoman(num)\n            roman.append(romanNum)\n\
    \            i += 1\n        }\n        roman.reverse.mkString(\"\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_xid0tx2.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_xid0tx2.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mromanNum\e[0m = numToRoman(num)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Not found: numToRoman\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659806073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\", \"CD\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n\
    \        val romanNum = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\"\
    , \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n    \
    \    val romanNum2 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"\
    XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val\
    \ romanNum3 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"XC\", \"\
    L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum4\
    \ = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\"\
    , \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum5 = mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanNum6 = mutable.ArrayBuffer(\n   \
    \         \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n        )\n        val romanNum7 = mutable.ArrayBuffer(\n       \
    \     \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\"\
    , \"I\"\n        )\n        val romanNum8 = mutable.ArrayBuffer(\n           \
    \ \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"\
    I\"\n        )\n        val romanNum9 = mutable.ArrayBuffer(\n            \"M\"\
    , \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n \
    \       )\n        val romanNum10 = mutable.ArrayBuffer(\n            \"M\", \"\
    D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n     \
    \   )\n        val romanNum11 = mutable.ArrayBuffer(\n            \"M\", \"D\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n\
    \        val romanNum12 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\"\
    , \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n    \
    \    val romanNum13 = mutable.ArrayBuffer(\n            \"M\", \"\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqqs40yj7.scala:55:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m            \e[31m\"M\"\e[0m, \"\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 unclosed string literal\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqs40yj7.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqqs40yj7.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqqs40yj7.scala:21:24 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum2\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqqs40yj7.scala:24:24 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum3\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqqs40yj7.scala:27:24 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum4\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ avai"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val digits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigits = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigits = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigits = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigits = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigits = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigits = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigits = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmxh3g9ju.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsDigits is already defined as \e[33mvalue\e[0m \e[35mnumsDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmxh3g9ju.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsDigit\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsDigit is already defined as \e[33mvalue\e[0m \e[35mnumsDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmxh3g9ju.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsDigits is already defined as \e[33mvalue\e[0m \e[35mnumsDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmxh3g9ju.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsDigit\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsDigit is already defined as \e[33mvalue\e[0m \e[35mnumsDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmxh3g9ju.scala:24:12 ---------"
  stdout: ''
  timestamp: 1659806077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\", \"CD\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n\
    \        val romanNum = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\"\
    , \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n    \
    \    val romanNum2 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"\
    XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val\
    \ romanNum3 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"XC\", \"\
    L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum4\
    \ = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\"\
    , \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum5 = mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanNum6 = mutable.ArrayBuffer(\n   \
    \         \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n        )\n        val romanNum7 = mutable.ArrayBuffer(\n       \
    \     \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\"\
    , \"I\"\n        )\n        val romanNum8 = mutable.ArrayBuffer(\n           \
    \ \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"\
    I\"\n        )\n        val romanNum9 = mutable.ArrayBuffer(\n            \"M\"\
    , \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n \
    \       )\n        val romanNum10 = mutable.ArrayBuffer(\n            \"M\", \"\
    D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n     \
    \   )\n        val romanNum11 = mutable.ArrayBuffer(\n            \"M\", \"D\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n\
    \        val romanNum12 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\"\
    , \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n    \
    \    val romanNum13 = mutable.ArrayBuffer(\n            \"M\", \"\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqqs40yj7.scala:55:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m            \e[31m\"M\"\e[0m, \"\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 unclosed string literal\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqs40yj7.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqqs40yj7.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqqs40yj7.scala:21:24 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum2\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqqs40yj7.scala:24:24 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum3\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqqs40yj7.scala:27:24 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum4\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ avai"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsString = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString2 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString3 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString4 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString5 = scala.collection.mutable.ListBuffer[String]()\n        val numsString6\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString7 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString8 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString9 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString10 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString11 = scala.collection.mutable.ListBuffer[String]()\n        val numsString12\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString13 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString15 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString16 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString17 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString18 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString19 = scala.collection.mutable.ListBuffer[String]()\n        val numsString20\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString21 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString22 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString23 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString24 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString25 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString26 = scala.collection.mutable.ListBuffer[String]\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqbcilkug.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5_dez5s5.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5_dez5s5.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23 =\
    \ scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24 =\
    \ scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpri2qtg8e.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpri2qtg8e.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap3 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap5 = scala.collection.mutable.Map[Long, String]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap7 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap8 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap10 = scala.collection.mutable.Map[Long, String]()\n        val numsMap11\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap12 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap13 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap14 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap15 = scala.collection.mutable.Map[Long, String]()\n        val numsMap16\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap17 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap18 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap19 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap20 = scala.collection.mutable.Map[Long, String]()\n        val numsMap21\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap22 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap23 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap24 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap25 = scala.collection.mutable.Map[Long, String]()\n        val numsMap26\
    \ = scala.collection.mutable.Map[Long, String]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp44cwj06r.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ i = 0\n        while (number > 0) {\n            val remainder = number % 10\n\
    \            number /= 10\n            roman += if (remainder == 0) \"M\" else\
    \ if (remainder == 1) \"D\" else \"C\"\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpn7u968ya.scala:20:21 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            roman += \e[33mif\e[0m (remainder == \e[31m0\e\
    [0m) \e[31m\"M\"\e[0m \e[33melse\e[0m \e[33mif\e[0m (remainder == \e[31m1\e[0m)\
    \ \e[31m\"D\"\e[0m \e[33melse\e[0m \e[31m\"C\"\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                  ^^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpn7u968ya.scala:19:19 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value /= is not a member of Long - did you mean\
    \ number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilderBuilder2\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder3\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder4\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder5\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder6\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder7\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder8\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder9\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder10\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder11\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder12\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder13\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder14\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder15\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder16\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder17\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder18\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder19\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder20\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder21\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder22\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder23\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder24\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder25\
    \ = scala.collection.mutable.StringBuilder.new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptdjh3anc.scala:42:73 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder25\e[0m\
    \ = scala.collection.mutable.StringBuilder.\e[33mnew\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                                         ^^^\e\
    [0m\n\e[31m   |\e[0m                                 an identifier expected, but\
    \ 'new' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptdjh3anc.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqmikpzra.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqmikpzra.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmikpzra.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e[35mnumDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmikpzra.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmikpzra.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e"
  stdout: ''
  timestamp: 1659806082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsStr = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStrLen = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsStrLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsStrLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptv39phpg.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptv39phpg.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptv39phpg.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptv39phpg.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplev"
  stdout: ''
  timestamp: 1659806083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        val numsArray\
    \ = numsString.toCharArray\n        val numsArrayLength = numsArray.length\n \
    \       var i = 0\n        while (i < numsArrayLength) {\n            val num\
    \ = numsArray(i)\n            if (num == 'I') {\n                roman.append(\"\
    x\")\n            } else if (num == 'V') {\n                roman.append(\"v\"\
    )\n            } else if (num == 'X') {\n                roman.append(\"l\")\n\
    \            } else if (num == 'L') {\n                roman.append(\"c\")\n \
    \           } else if (num == 'C') {\n                roman.append(\"d\")\n  \
    \          } else if (num == 'D') {\n                roman.append(\"m\")\n   \
    \         } else if (num == 'M') {\n                roman.append(\"n\")\n    \
    \        } else if (num == 'I') {\n                roman.append(\"x\")\n     \
    \       } else if (num == 'I') {\n                roman.append(\"x\")\n      \
    \      } else if (num == 'I') {\n                roman.append(\"x\")\n       \
    \     } else if (num == 'I') {\n                roman.append(\"x\")\n        \
    \    } else if (num == 'I') {\n                roman.append(\"x\")\n         \
    \   } else if (num == 'I') {\n                roman.append(\"x\")\n          \
    \  } else if (num == 'I') {\n                roman.append(\"x\")\n           \
    \ } else if (num == 'I') {\n                roman.append(\"x\")\n            }\
    \ else if (num == 'I') {\n                roman.append(\"x\")\n            } else\
    \ if (num == 'I') {\n                roman.append(\"x\")\n            } else if\
    \ (num == 'I') {\n                roman.append(\"x\")\n            } else if (num\
    \ == 'I') {\n                roman.append(\"x\")\n            } else if (num ==\
    \ 'I') {\n                roman.append(\"x\")\n            } else if (num == 'I')\
    \ {\n                roman.append(\"x\")\n            } else if (num == 'I') {\n\
    \                roman.append(\"x\")\n            } else if (num == 'I') {\n \
    \               roman.append(\"x\")\n            } else if (num == 'I') {\n  \
    \              roman.append(\"x\")\n            } else if (num == 'I') {\n   \
    \             roman.append(\"x\")\n            } else if (num == 'I') {\n    \
    \            roman.append(\"x\")\n            } else if (num == 'I') {\n     \
    \           roman.append(\"x\")\n            } else if (num == 'I') {\n      \
    \          roman.append(\"x\")\n            } else if (num == 'I') {\n       \
    \         roman.append(\"x\")\n            } else if (num == 'I') {\n        \
    \        roman.append(\"x\")\n            } else if (num == 'I') {\n         \
    \       roman.append(\"x\")\n            } else if (num == 'I') {\n          \
    \      roman.append(\"x\")\n            } else if (num == 'I') {\n           \
    \     roman.append(\"x\")\n            } else if (num == '\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0k0aldaw.scala:89:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m89 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (num == '\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           unclosed character literal\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmp0k0aldaw.scala:109:0 ---------------------------\e[0m\e\
    [0m\n\e[31m109 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0k0aldaw.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0k0aldaw.scala:108:1\
    \ --------------------\e[0m\e[0m\n\e[31m108 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: String\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp0k0aldaw.scala:91:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m91 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmp0k0aldaw.scala:90:4 -----------------\e\
    [0m\e[0m\n\e[33m89 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (num == '\n\
    \e[33m90 |\e[0m    }\n\e[33m\e[33m   |\e[0m                               ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 warnings found\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659806087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp05rquc1b.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp05rquc1b.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mStringBuilder\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp05rquc1b.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp05rquc1b.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp05rquc1b.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 "
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder23\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp91e3r4hg.scala:40:51 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder23\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp91e3r4hg.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjm19h5wq.scala:40:51 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder22\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjm19h5wq.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5_dez5s5.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5_dez5s5.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val remainder\
    \ = number % i\n            if (remainder == 0) {\n                roman += scala.math.pow(10,\
    \ i).toString + roman.last\n                number /= i\n            } else {\n\
    \                roman += scala.math.pow(10, i).toString + roman.last\n      \
    \          number /= i\n            }\n        }\n        roman.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp75tmxrip.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp75tmxrip.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    (nums : Double)\n\e[31m   |\e[0m        \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp75tmxrip.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                number /= i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              value /= is not a member of Long - did you mean\
    \ number.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp75tmxrip.scala:24:23\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                number /=\
    \ i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \          value /= is not a member of Long - did you mean number.!=?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659806087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr2 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr3 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr4 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr5 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr6 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr7 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr8 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr9\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr10 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr11 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr12 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr13 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr14 = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr15 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr16 = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val numsStr17 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr18 = scala.collection.mutable.ListBuffer.empty[String]\n       \
    \ val numsStr19 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr20 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr21\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr22 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr23 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr24 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr25 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr26 = scala.collection.mutable.ListBuffer.empty[String\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjomgr47f.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpjomgr47f.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsString = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder2 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder3 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder4 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder5 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder6 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder7 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder8 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder9 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder10 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder11 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder12 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder13 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder15 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder16 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder17 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder18 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder19 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder20 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder21 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder22 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder23 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder24 = scala.collection.mutable.List\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzv497evz.scala:41:59 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder24\e[0m\
    \ = scala.collection.mutable.List\n\e[31m\e[31m   |\e[0m                     \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue List is\
    \ not a member of scala.collection.mutable - did you mean mutable.ListMap?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzv497evz.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659806088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsStr = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr2 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsStr3 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr4\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr5 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr6 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsStr7 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr8\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr9 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr10 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr11 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr12 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr13\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr15 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr16 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr17 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr18\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr19 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr20 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr21 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr22 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr23\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr24 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr25 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr26 = scala.collection.mutable.ListBuffer[String]\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqqu53m6b.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqmikpzra.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqmikpzra.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmikpzra.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e[35mnumDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmikpzra.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmikpzra.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e"
  stdout: ''
  timestamp: 1659806082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigit\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2ho59vqy.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ho59vqy.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxDigitIndex\e[0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxDigitIndex is already defined as \e[33mvalue\e[0m \e[35mmaxDigitIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ho59vqy.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitIndex\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxDigitIndex is already defined as \e[33mvalue\e[0m \e[35mmaxDigitIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ho59vqy.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitIndex\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxDigitIndex is already defined as \e[33mvalue\e[0m \e[35mmaxDigitIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ho59vqy.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitIndex\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0"
  stdout: ''
  timestamp: 1659806087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ digits = scala.collection.mutable.ListBuffer.empty[Int]\n        val tens =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val numThousands = scala.collection.mutable.ListBuffer.empty[\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1kcy2v7i.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1kcy2v7i.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1kcy2v7i.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1kcy2v7i.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1kcy2v7i.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already d"
  stdout: ''
  timestamp: 1659806085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        var index = 0\n        while (index < nums) {\n     \
    \       val num = scala.math.pow(10, index.toInt)\n            val numStr = scala.math.pow(10,\
    \ index.toInt).toString\n            val numStrLen = numStr.length\n         \
    \   val numStrDigits = numStr.dropRight(numStrLen - 1)\n            val numStrDigit\
    \ = numStrDigits(0)\n            val numStrDigitDigit = numStrDigits(1)\n    \
    \        val numStrDigitDigitDigit = numStrDigits(2)\n            val numStrDigitDigitDigitDigit\
    \ = numStrDigits(3)\n            val numStrDigitDigitDigitDigit = numStrDigits(4)\n\
    \            val numStrDigitDigitDigitDigitDigit = numStrDigits(5)\n         \
    \   val numStrDigitDigitDigitDigitDigitDigit = numStrDigits(6)\n            val\
    \ numStrDigitDigitDigitDigitDigitDigitDigit = numStrDigits(7)\n            val\
    \ numStrDigitDigitDigitDigitDigitDigitDigitDigit = numStrDigits(8)\n         \
    \   val numStrDigitDigitDigitDigitDigitDigitDigitDigitDigit = numStrDigits(9)\n\
    \            val numStrDigitDigitDigitDigitDigitDigitDigitDigitDigit = numStrDigits(10)\n\
    \            val numStrDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = numStrDigits(11)\n\
    \            val numStrDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = numStrDigits(12)\n\
    \            val numStrDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = numStrDigits(13)\n            val numStrDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = numStrDigits(14)\n            val numStrDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = numStrDigits(15)\n            val numStrDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = numStrDigits(16)\n            val numStrDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = numStrDigits(17)\n            val numStrDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = numStrDigits(18)\n            val numStrDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = numStrDigits(19)\n            val numStrDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = numStrDigits(20)\n            val numStrDigitDigitDigitDigitDigitDigitDigitDigitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpizc_22ya.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpizc_22ya.scala:64:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpizc_22ya.scala:15:20 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpizc_22ya.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mnumStrDigitDigitDigitDigit\e\
    [0m = numStrDigits(\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumStrDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mnumStrDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpizc_22ya.scala:33:16 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36mnumStrDigitDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m = numStrDigits(\e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumStrDigitDigitDigitDigitDigitDigitDigitDigitDigit is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumStrDigitDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpizc_22ya.scala:35:16 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m            \e[33mval\e[0m \e[36mnumStrDigitDigitDigitDigitDig"
  stdout: ''
  timestamp: 1659806087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStrLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numsLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numsLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnv5b87la.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnv5b87la.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLen is already defined as\
    \ \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnv5b87la.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpnv5b87la.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitio"
  stdout: ''
  timestamp: 1659806086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val digits = number.toString.toInt\n\
    \        val numDigits = digits.length\n        val numPowers = numDigits - 1\n\
    \        val numPowersStr = numPowers.toString\n        val numPowersArr = numPowersStr.split(\"\
    \\\\.\")\n        val numPowersArrLength = numPowersArr.length\n        val numPowersArrElement\
    \ = numPowersArr(0)\n        val numPowersArrElementLength = numPowersArrElement.length\n\
    \        val numPowersArrElementElement = numPowersArrElement(0)\n        val\
    \ numPowersArrElementElementLength = numPowersArrElementElement.length\n     \
    \   val numPowersArrElementElementElement = numPowersArrElementElement(0)\n  \
    \      val numPowersArrElementElementElementLength = numPowersArrElementElementElement.length\n\
    \        val numPowersArrElementElementElement = numPowersArrElementElementElement(0)\n\
    \        val numPowersArrElementElementElementLength = numPowersArrElementElementElement.length\n\
    \        val numPowersArrElementElementElementElement = numPowersArrElementElementElementElement(0)\n\
    \        val numPowersArrElementElementElementElementLength = numPowersArrElementElementElementElement.length\n\
    \        val numPowersArrElementElementElementElementElement = numPowersArrElementElementElementElementElement(0)\n\
    \        val numPowersArrElementElementElementElementElementLength = numPowersArrElementElementElementElementElement.length\n\
    \        val numPowersArrElementElementElementElementElementElement = numPowersArrElementElementElementElementElementElement(0)\n\
    \        val numPowersArrElementElementElementElementElementElementLength = numPowersArrElementElementElementElementElementElementElement.length\n\
    \        val numPowersArrElementElementElementElementElementElementElement = numPowersArrElementElementElementElementElementElementElementElement(0)\n\
    \        val numPowersArrElementElementElementElementElementElementElementLength\
    \ = numPowersArrElementElementElementElementElementElementElementElement.length\n\
    \        val numPowersArrElementElementElementElementElementElementElementElement\
    \ = numPowersArrElementElementElementElementElementElementElementElementElement(0)\n\
    \        val numPowersArrElementElementElementElementElementElementElementElementLength\
    \ = numPowersArrElementElementElementElementElementElementElementElementElement.length\n\
    \        val numPowersArrElementElementElementElementElementElementElementElementElement\
    \ = numPowersArrElementElementElementElementElementElementElementElementElementElement(0)\n\
    \        val numPowers\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpazx5wl__.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpazx5wl__.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumPowersArrElementElementElement\e[0m = numPowersArrElementElementElement(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumPowersArrElementElementElement is already defined as \e\
    [33mvalue\e[0m \e[35mnumPowersArrElementElementElement\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpazx5wl__.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumPowersArrElementElementElementLength\e[0m = numPowersArrElementElementElement.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumPowersArrElementElementElementLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumPowersArrElementElementElementLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpazx5wl__.scala:15:20 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer.empty[\e[35mString\e\
    [0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpazx5wl__.scala:17:31 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = digits.length\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        value length is not a member of Int"
  stdout: ''
  timestamp: 1659806087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLen = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsLenLen = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsLenLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_bwchj7k.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_bwchj7k.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_bwchj7k.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_bwchj7k.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplev"
  stdout: ''
  timestamp: 1659806086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        val numsArray\
    \ = numsString.toCharArray\n        var i = 0\n        while (i < numsArray.length)\
    \ {\n            val num = numsArray(i).toLong\n            val romanNum = numToRoman(num)\n\
    \            roman += romanNum\n            i += 1\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvvdaonob.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvvdaonob.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mromanNum\e[0m = numToRoman(num)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Not found: numToRoman\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659806083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeq5_s2x_.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeq5_s2x_.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in "
  stdout: ''
  timestamp: 1659806075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var index\
    \ = 0\n        while (number > 0) {\n            val remainder = number % 10\n\
    \            number /= 10\n            roman += if (remainder == 0) \"M\" else\
    \ if (remainder == 1) \"CM\" else \"D\"\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf9rkuwuk.scala:20:21 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            roman += \e[33mif\e[0m (remainder == \e[31m0\e\
    [0m) \e[31m\"M\"\e[0m \e[33melse\e[0m \e[33mif\e[0m (remainder == \e[31m1\e[0m)\
    \ \e[31m\"CM\"\e[0m \e[33melse\e[0m \e[31m\"D\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                   ^^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpf9rkuwuk.scala:19:19 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value /= is not a member of Long - did you mean\
    \ number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659806087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = number.toString.toInt\n\
    \        val numsLength = nums.length\n        val numsDigits = nums.toString.length\n\
    \        val numsDigit = numsDigits - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = nums.toString.toInt\n\
    \        val numsDigit = numsDigit - 1\n        val numsDigits = \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp044054t2.scala:56:24 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = \n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp044054t2.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = nums.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsDigits is already defined as \e[33mvalue\e[0m \e[35mnumsDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp044054t2.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsDigit\e[0m = numsDigit - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mnumsDigit is already defined as \e[33mvalue\e[0m \e[35mnumsDigit\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp044054t2.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = nums.toString.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mnumsDigits is already defined as \e[33mvalue\e[0m \e[35mnumsDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp044054t2.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsDigit\e[0m = numsDigit - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mnumsDigit is already defined as \e[33mvalue\e[0m \e[35mnumsDigit\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloa"
  stdout: ''
  timestamp: 1659806088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        val numsArray\
    \ = numsString.toCharArray\n        var i = 0\n        while (i < numsArray.length)\
    \ {\n            val numsChar = numsArray(i)\n            val romanChar = if (numsChar\
    \ >= 'a' && numsChar <= 'm') numsChar else 'i'\n            roman += romanChar\n\
    \            i += 1\n        }\n        roman.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1oirnpes.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLen =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr8veut7l.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr8veut7l.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr8veut7l.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr8veut7l.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in "
  stdout: ''
  timestamp: 1659806087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ i = 1\n        while (number >= i) {\n            roman += romanDigit(number\
    \ % i)\n            number /= i\n            i += 1\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1grmxker.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            roman += romanDigit(number % i)\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \          Not found: romanDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp1grmxker.scala:19:19 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            number /= i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value /= is not a member of Long - did you mean number.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659806087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsString = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString2 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString3 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString4 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString5 = scala.collection.mutable.ListBuffer[String]()\n        val numsString6\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString7 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString8 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString9 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString10 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString11 = scala.collection.mutable.ListBuffer[String]()\n        val numsString12\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString13 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString15 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString16 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString17 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString18 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString19 = scala.collection.mutable.ListBuffer[String]()\n        val numsString20\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString21 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString22 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString23 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString24 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString25 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString26 = scala.collection.mutable.ListBuffer[String]\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqbcilkug.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ digits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.math.log10(number).toInt\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInten = scala.math.pow(10, numDigitsInt - 1)\n\
    \        val numDigitsIntenMinusOne = scala.math.pow(10, numDigitsInt - 2)\n \
    \       val numDigitsIntenMinusTwo = scala.math.pow(10, numDigitsInt - 3)\n  \
    \      val numDigitsIntenMinusThree = scala.math.pow(10, numDigitsInt - 4)\n \
    \       val numDigitsIntenMinusFour = scala.math.pow(10, numDigitsInt - 5)\n \
    \       val numDigitsIntenMinusFive = scala.math.pow(10, numDigitsInt - 6)\n \
    \       val numDigitsIntenMinusSix = scala.math.pow(10, numDigitsInt - 7)\n  \
    \      val numDigitsIntenMinusSeven = scala.math.pow(10, numDigitsInt - 8)\n \
    \       val numDigitsIntenMinusEight = scala.math.pow(10, numDigitsInt - 9)\n\
    \        val numDigitsIntenMinusNine = scala.math.pow(10, numDigitsInt - 10)\n\
    \        val numDigitsIntenMinusTen = scala.math.pow(10, numDigitsInt - 11)\n\
    \        val numDigitsIntenMinusEleven = scala.math.pow(10, numDigitsInt - 12)\n\
    \        val numDigitsIntenMinusTwelve = scala.math.pow(10, numDigitsInt - 13)\n\
    \        val numDigitsIntenMinusThirteen = scala.math.pow(10, numDigitsInt - 14)\n\
    \        val numDigitsIntenMinusFourteen = scala.math.pow(10, numDigitsInt - 15)\n\
    \        val numDigitsIntenMinusFifteen = scala.math.pow(10, numDigitsInt - 16)\n\
    \        val numDigitsIntenMinusSixteen = scala.math.pow(10, numDigitsInt - 17)\n\
    \        val numDigitsIntenMinusSeventeen = scala.math.pow(10, numDigitsInt -\
    \ 18)\n        val numDigitsIntenMinusEighteen = scala.math.pow(10, numDigitsInt\
    \ - 19)\n        val numDigitsIntenMinusNineteen = scala.math.pow(10, numDigitsInt\
    \ - 20)\n        val numDigitsIntenMinusTwenty = scala.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2agdztvj.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2agdztvj.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        var num = 0\n       \
    \ while (number > 0) {\n            num += 1\n            number -= num\n    \
    \        nums += num\n        }\n        val romanNum = scala.collection.mutable.ListBuffer[String]()\n\
    \        val romanNums = scala.collection.mutable.ListBuffer[String]()\n     \
    \   var i = 0\n        while (i < nums.length) {\n            val num = nums(i)\n\
    \            if (num < 1000) {\n                romanNum += romanNums(i)\n   \
    \             romanNums += nums(i)\n            } else {\n                val\
    \ num2 = num / 1000\n                val num3 = num % 1000\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                romanNum\
    \ += romanNums(i)\n                romanNums += nums(i)\n                \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnbzbd7y7.scala:90:0 ----------------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnbzbd7y7.scala:20:19\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            number -= num\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean number.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnbzbd7y7.scala:30:33 --------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m                romanNums += nums(i)\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Found:    Long\n\e[31m   |\e[0m                             Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnbzbd7y7.scala:35:33\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m                romanNums +=\
    \ nums(i)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                             Found:    Long\n\e[31m   |\e[0m    \
    \                         Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnbzbd7y7.scala:37:33 --------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m                romanNums += nums(i)\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Found:    Long\n\e[31m   |\e[0m                             Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnbzbd7y7.scala:39:33\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m                romanNums +=\
    \ nums(i)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                             Found:    Long\n\e[31m   |\e[0m    \
    \                         Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanati"
  stdout: ''
  timestamp: 1659806090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            val digit = num.toInt\n            val romanDigit = if\
    \ (digit < 5)\n                scala.math.pow(10, digit - 1)\n            else\n\
    \                scala.math.pow(10, digit - 5)\n            val romanDigitString\
    \ = romanDigit.toString\n            val romanDigitStringLength = romanDigitString.length\n\
    \            val romanDigitStringWithZeros = romanDigitString.padTo(romanDigitStringLength,\
    \ \"0\")\n            val romanDigitStringWithZeros = romanDigitStringWithZeros.substring(0,\
    \ romanDigitStringLength)\n            roman += romanDigitStringWithZeros\n  \
    \      }\n        roman.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvnw3ub8o.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpvnw3ub8o.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.size)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value size is not a member of Double\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpvnw3ub8o.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mromanDigitStringWithZeros\e\
    [0m = romanDigitStringWithZeros.substring(\e[31m0\e[0m, romanDigitStringLength)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mromanDigitStringWithZeros is already defined as \e[33mvalue\e\
    [0m \e[35mromanDigitStringWithZeros\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpvnw3ub8o.scala:18:22 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659806088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeq5_s2x_.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeq5_s2x_.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in "
  stdout: ''
  timestamp: 1659806075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsLen = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsLenLen = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsLenLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4g2gkon_.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4g2gkon_.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4g2gkon_.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4g2gkon_.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplev"
  stdout: ''
  timestamp: 1659806088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap =\
    \ scala.collection.mutable.Map[Int, Int]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap4 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap7 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap8 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap9\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap10 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap11 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap12 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap13 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap14\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap15 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap16 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap17 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap20 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap21 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap22 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap25 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap26 = scala.collection.mutable.Map[Int, Int]\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcisz5wg6.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp05rquc1b.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp05rquc1b.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mStringBuilder\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp05rquc1b.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp05rquc1b.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp05rquc1b.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 "
  stdout: ''
  timestamp: 1659806065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ i = number\n        while(i >= 1000) {\n            roman.append(roman.last.substring(0,\
    \ roman.last.length - 1))\n            i /= 1000\n        }\n        roman.append(roman.last.substring(0,\
    \ roman.last.length - 1))\n        roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty ListBuffer\n\tat scala.collection.mutable.ListBuffer.last(ListBuffer.scala:379)\n\
    \tat Problem$.intToMiniRoman(tmpcvm91t1y.scala:21)\n\tat Problem$.main(tmpcvm91t1y.scala:25)\n\
    \tat Problem.main(tmpcvm91t1y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_35igtuf.scala:40:51 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder22\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_35igtuf.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder2\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder3\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder4\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder5\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder6\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder7\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder8\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder9\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder10\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder11\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder12\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder13\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder14\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder15\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder16\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder17\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder18\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder19\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder20\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder21\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder22\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder23\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder24\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder25\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8vvnawdq.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ i = number\n        while (i > 0) {\n            roman += romanDigits(i%10)\n\
    \            i /= 10\n        }\n        roman.reverse.mkString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfp4pooj4.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            roman += romanDigits(i%\e[31m10\e[0m)\n\e\
    [31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                 Not found: romanDigits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5_dez5s5.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5_dez5s5.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        var i = 0\n        while (i < nums.length) {\n      \
    \      val num = nums(i)\n            val romanNum = num / 100\n            val\
    \ remainder = num % 100\n            roman.append(romanNum.toString)\n       \
    \     roman.append(if (remainder > 0) \"M\" else \"m\")\n            i += 1\n\
    \        }\n        roman.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjy56chtv.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpjy56chtv.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mwhile\e[0m (i < nums.length) {\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \       value length is not a member of Double\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpjy56chtv.scala:19:22 -----------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\e[31m\e[31m   |\e\
    [0m                      ^^^^\e[0m\n\e[31m   |\e[0m                      \e[33mvalue\e\
    [0m \e[35mnums\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659806095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ i = 0\n        while(i < number) {\n            roman += romanDigit(number %\
    \ 10)\n            number /= 10\n            i += 1\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkcw7_jbo.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            roman += romanDigit(number % \e[31m10\e[0m)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                  Not found: romanDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpkcw7_jbo.scala:19:19 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659806097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsStr = nums.toString.reverse\n        val numsArr\
    \ = numsStr.split(\"\\\\.\")\n        val numsArr2 = numsArr.tail\n        val\
    \ numsArr3 = numsArr2.reverse\n        val numsArr4 = numsArr3.tail\n        val\
    \ numsArr5 = numsArr4.reverse\n        val numsArr6 = numsArr5.tail\n        val\
    \ numsArr7 = numsArr6.reverse\n        val numsArr8 = numsArr7.tail\n        val\
    \ numsArr9 = numsArr8.reverse\n        val numsArr10 = numsArr9.tail\n       \
    \ val numsArr11 = numsArr10.tail\n        val numsArr12 = numsArr11.tail\n   \
    \     val numsArr13 = numsArr12.tail\n        val numsArr14 = numsArr13.tail\n\
    \        val numsArr15 = numsArr14.tail\n        val numsArr16 = numsArr15.tail\n\
    \        val numsArr17 = numsArr16.tail\n        val numsArr18 = numsArr17.tail\n\
    \        val numsArr19 = numsArr18.tail\n        val numsArr20 = numsArr19.tail\n\
    \        val numsArr21 = numsArr20.tail\n        val numsArr22 = numsArr21.tail\n\
    \        val numsArr23 = numsArr22.tail\n        val numsArr24 = numsArr23.tail\n\
    \        val numsArr25 = numsArr24.tail\n        val numsArr26 = numsArr25.tail\n\
    \        val numsArr27 = numsArr26.tail\n        val numsArr28 = numsArr27.tail\n\
    \        val numsArr29 = numsArr28.tail\n        val numsArr30 = numsArr29.tail\n\
    \        val numsArr31 = numsArr30.tail\n        val numsArr32 = numsArr31.tail\n\
    \        val numsArr33 = numsArr32.tail\n        val numsArr34 = numsArr33.tail\n\
    \        val numsArr35 = numsArr34.tail\n        val numsArr36 = numsArr35.tail\n\
    \        val numsArr37 = numsArr36.tail\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp8thh6fsd.scala:55:11 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8thh6fsd.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8thh6fsd.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659806098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap =\
    \ scala.collection.mutable.Map[Int, Int]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap4 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap7 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap8 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap9\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap10 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap11 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap12 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap13 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap14\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap15 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap16 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap17 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap20 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap21 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap22 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap25 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap26 = scala.collection.mutable.Map[Int, Int]\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcisz5wg6.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5_dez5s5.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5_dez5s5.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val digits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var num = 0\n        while\
    \ (number > 0) {\n            num += 1\n            number /= 10\n        }\n\
    \        val numDigits = scala.math.log10(number).toInt\n        var i = 0\n \
    \       while (i < numDigits) {\n            val digit = number % 10\n       \
    \     number /= 10\n            digits += digit\n            i += 1\n        }\n\
    \        val romanDigits = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val romanDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ romanDigits = scala.collection.mutable.ListBuffer[String]()\n        var j =\
    \ 0\n        while (j < digits.length) {\n            val digit = digits(j)\n\
    \            romanDigit += digit\n            romanDigits += romanDigit\n    \
    \        j += 1\n        }\n        val romanDigit = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val romanDigits = scala.collection.mutable.ListBuffer[String]()\n   \
    \     var k = 0\n        while (j < romanDigits.length) {\n            val romanDigit\
    \ = romanDigits(k)\n            romanDigit += romanDigit\n            romanDigits\
    \ += romanDigit\n            k += 1\n        }\n        val romanDigit = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val romanDigits = scala.collection.mutable.ListBuffer[String]()\n   \
    \     var l = 0\n        while (j < romanDigits.length) {\n            val romanDigit\
    \ = romanDigits(l)\n            romanDigit += romanDigit\n            romanDigits\
    \ += romanDigit\n            l += 1\n        }\n        val romanDigit = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val romanDigits = scala.collection.mutable.ListBuffer[String]()\n   \
    \     var m = 0\n        while (j < romanDigits.length) {\n            val romanDigit\
    \ = romanDigits(m)\n            romanDigit += romanDigit\n            romanDigits\
    \ += romanDigit\n            m += 1\n        }\n        val romanDigit = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val romanDigits = scala.collection.mutable.ListBuffer[String]()\n   \
    \     var n = 0\n        while (j < romanDigits.length) {\n            val romanDigit\
    \ = romanDigits(n)\n            romanDigit += romanDigit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3qouwe6r.scala:92:0 ----------------------------\e\
    [0m\e[0m\n\e[31m92 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3qouwe6r.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mromanDigits\e[0m = scala.collection.mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mromanDigits is already defined as \e[33mvalue\e[0m \e[35mromanDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3qouwe6r.scala:40:12 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mval\e[0m \e[36mromanDigit\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mromanDigit is already defined as \e[33mvalue\e[0m \e[35mromanDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3qouwe6r.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mromanDigits\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mromanDigits is already defined as \e[33mvalue\e[0m \e[35mromanDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3qouwe6r.scala:49:12 ---------------------------\e[0m\e[0m\n\e\
    [31m49 |\e[0m        \e[33mval\e[0m \e[36mromanDigit\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mromanDigit is already defined as \e[33mvalue\e[0m \e[35"
  stdout: ''
  timestamp: 1659806100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val n = nums.toInt\n\
    \            val m = scala.math.pow(10, i)\n            val romanDigit = if (n\
    \ % 10 == 0) \"M\" else if (n % 10 == 1) \"CM\" else if (n % 10 == 2) \"D\" else\
    \ \"CD\"\n            roman += romanDigit + m.toString.substring(m.toString.length\
    \ - 1)\n        }\n        roman.mkString.toLowerCase\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmakkf9_y.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpmakkf9_y.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    (nums : Double)\n\e[31m   |\e[0m        \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder23\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp91e3r4hg.scala:40:51 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder23\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp91e3r4hg.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeq5_s2x_.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeq5_s2x_.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in "
  stdout: ''
  timestamp: 1659806075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, Long]()\n       \
    \ val numsMap5 = scala.collection.mutable.Map[String, Long]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap7 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap8 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[String, Long]()\n       \
    \ val numsMap10 = scala.collection.mutable.Map[String, Long]()\n        val numsMap11\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap12 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap13 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap14 = scala.collection.mutable.Map[String, Long]()\n      \
    \  val numsMap15 = scala.collection.mutable.Map[String, Long]()\n        val numsMap16\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap17 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap18 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap19 = scala.collection.mutable.Map[String, Long]()\n      \
    \  val numsMap20 = scala.collection.mutable.Map[String, Long]()\n        val numsMap21\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap22 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap23 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap24 = scala.collection.mutable.Map[String, Long]()\n      \
    \  val numsMap25 = scala.collection.mutable.Map[String, Long]()\n        val numsMap26\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap27 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfcqb7wcz.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfcqb7wcz.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeq5_s2x_.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeq5_s2x_.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in "
  stdout: ''
  timestamp: 1659806075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val digits = scala.math.pow(10,\
    \ number.toInt)\n        val nums = scala.math.ceil(number).toInt.toString.toLong\n\
    \        val numsDigits = scala.math.ceil(number).toInt.toString.toLong\n    \
    \    val numsDigit = scala.math.ceil(number).toInt.toString.toLong\n        val\
    \ numsDigits = scala.math.ceil(number).toInt.toString.toLong\n        val numsDigit\
    \ = scala.math.ceil(number).toInt.toString.toLong\n        val numsDigits = scala.math.ceil(number).toInt.toString.toLong\n\
    \        val numsDigit = scala.math.ceil(number).toInt.toString.toLong\n     \
    \   val numsDigits = scala.math.ceil(number).toInt.toString.toLong\n        val\
    \ numsDigit = scala.math.ceil(number).toInt.toString.toLong\n        val numsDigits\
    \ = scala.math.ceil(number).toInt.toString.toLong\n        val numsDigit = scala.math.ceil(number).toInt.toString.toLong\n\
    \        val numsDigits = scala.math.ceil(number).toInt.toString.toLong\n    \
    \    val numsDigit = scala.math.ceil(number).toInt.toString.toLong\n        val\
    \ numsDigits = scala.math.ceil(number).toInt.toString.toLong\n        val numsDigit\
    \ = scala.math.ceil(number).toInt.toString.toLong\n        val numsDigits = scala.math.ceil(number).toInt.toString.toLong\n\
    \        val numsDigit = scala.math.ceil(number).toInt.toString.toLong\n     \
    \   val numsDigits = scala.math.ceil(number).toInt.toString.toLong\n        val\
    \ numsDigit = scala.math.ceil(number).toInt.toString.toLong\n        val numsDigits\
    \ = scala.math.ceil(number).toInt.toString.toLong\n        val numsDigit = scala.math.ceil(number).toInt.toString.toLong\n\
    \        val numsDigits = scala.math.ceil(number).toInt.toString.toLong\n    \
    \    val numsDigit = scala.math.ceil(number).toInt.toString.toLong\n        val\
    \ numsDigits = scala.math.ceil(number).toInt.toString.toLong\n        val numsDigit\
    \ = scala.math.ceil(number).toInt.toString.toLong\n        val numsDigits = scala.math.ceil(number\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi9f8n0eu.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi9f8n0eu.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsDigits\e[0m = scala.math.ceil(number).toInt.toString.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsDigits is already defined as \e[33mvalue\e[0m \e[35mnumsDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi9f8n0eu.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsDigit\e[0m = scala.math.ceil(number).toInt.toString.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsDigit is already defined as \e[33mvalue\e[0m \e[35mnumsDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi9f8n0eu.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = scala.math.ceil(number).toInt.toString.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsDigits is already defined as \e[33mvalue\e[0m \e[35mnumsDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi9f8n0eu.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsDigit\e[0m = scala.math.ceil(number).toInt.toString.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsDigit is already defined as \e[33mvalue\e[0m \e[35mnumsDigit\e\
    [0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659806098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsLength = nums.length\n        var i = 0\n   \
    \     while (i < numsLength) {\n            val num = nums(i)\n            val\
    \ digit = num.toInt\n            if (digit < 5) {\n                roman += scala.math.pow(10,\
    \ digit).toString.toLowerCase\n            } else if (digit < 9) {\n         \
    \       roman += scala.math.pow(10, digit - 5).toString.toLowerCase\n        \
    \    } else if (digit < 40) {\n                roman += scala.math.pow(10, digit\
    \ - 9).toString.toLowerCase\n            } else if (digit < 90) {\n          \
    \      roman += scala.math.pow(10, digit - 40).toString.toLowerCase\n        \
    \    } else if (digit < 400) {\n                roman += scala.math.pow(10, digit\
    \ - 90).toString.toLowerCase\n            } else if (digit < 900) {\n        \
    \        roman += scala.math.pow(10, digit - 400).toString.toLowerCase\n     \
    \       } else if (digit < 4000) {\n                roman += scala.math.pow(10,\
    \ digit - 900).toString.toLowerCase\n            } else if (digit < 9000) {\n\
    \                roman += scala.math.pow(10, digit - 4000).toString.toLowerCase\n\
    \            } else if (digit < 10000) {\n                roman += scala.math.pow(10,\
    \ digit - 9000).toString.toLowerCase\n            } else if (digit < 100000) {\n\
    \                roman += scala.math.pow(10, digit - 10000).toString.toLowerCase\n\
    \            } else if (digit < 1000000) {\n                roman += scala.math.pow(10,\
    \ digit - 100000).toString.toLowerCase\n            } else if (digit < 10000000)\
    \ {\n                roman += scala.math.pow(10, digit - 1000000).toString.toLowerCase\n\
    \            } else if (digit < 100000000) {\n                roman += scala.math.pow(10,\
    \ digit - 10000000).toString.toLowerCase\n            } else if (digit < 1000000000)\
    \ {\n                roman += scala.math.pow(10, digit - 100000000).toString.toLowerCase\n\
    \            } else if (digit < 10000000000) {\n                roman += scala.math.pow(10,\
    \ digit - 1000000000).toString.toLowerCase\n            } else if (digit < 100000000000)\
    \ {\n                roman += scala.math.pow(10, digit - 10000000000).toString.toLowerCase\n\
    \            } else if (digit < 1000000000000) {\n                roman += scala.math.pow(10,\
    \ digit - 100000000000).toString.toLowerCase\n            } else if (digit < 10000000000000)\
    \ {\n                roman += scala.math.pow(10, digit - 1000000000000).toString.toLowerCase\n\
    \            } else if (digit < 100000000000000) {\n                roman += scala.math.pow(10,\
    \ digit - 10000000000000).toString.toLowerCase\n            } else if (digit <\
    \ 1000000000000000) {\n                roman += scal\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaa5qsgc1.scala:81:0 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaa5qsgc1.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ArrayBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaa5qsgc1.scala:17:30\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsLength\e[0m = nums.length\n\e[31m\e[31m   |\e[0m                     \
    \    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value length is\
    \ not a member of Double\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpaa5qsgc1.scala:20:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e\
    [0m \e[36mnum\e[0m = nums(i)\n\e[31m\e[31m   |\e[0m                      ^^^^\e\
    [0m\n\e[31m   |\e[0m                      \e[33mvalue\e[0m \e[35mnums\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpaa5qsgc1.scala:63:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m63 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1659806098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ var index = 0\n        while(number > 0) {\n            val remainder = number\
    \ % 100\n            number /= 100\n            roman += if (remainder >= 10)\
    \ \"M\" else \"m\"\n        }\n        roman.reverse.mkString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp19eap071.scala:20:21 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            roman += \e[33mif\e[0m (remainder >= \e[31m10\e\
    [0m) \e[31m\"M\"\e[0m \e[33melse\e[0m \e[31m\"m\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                     ^^\e[0m\n\e[31m   |\e[0m                     expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp19eap071.scala:19:19 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            number /= \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value /= is not a member of Long - did you mean\
    \ number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659806098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString\n        val numsArray\
    \ = numsString.split(\"\\\\.\")\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps99pya94.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayLength\e[0m = numsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsArrayLength is already defined as \e[33mvalue\e[0m \e[35mnumsArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps99pya94.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayLength\e[0m = numsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsArrayLength is already defined as \e[33mvalue\e[0m \e[35mnumsArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps99pya94.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayLength\e[0m = numsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsArrayLength is already defined as \e[33mvalue\e[0m \e[35mnumsArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps99pya94.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayLength\e[0m = numsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsArrayLength is already defined as \e[33mvalue\e[0m \e[35mnumsArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps99pya94.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayLength\e[0m = numsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659806098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy85zti4j.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy85zti4j.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy85zti4j.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy85zti4j.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659806098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer(\"\",\"M\",\"CM\",\"D\"\
    ,\"CD\",\"C\",\"XC\",\"L\",\"XL\",\"X\",\"IX\",\"V\",\"IV\",\"I\")\n        var\
    \ index = 0\n        while(number > 0){\n            val remainder = number %\
    \ 10\n            roman(index) = roman(index).+(remainder)\n            number\
    \ /= 10\n            index += 1\n        }\n        roman.mkString.toLowerCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphxtfikb2.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659806098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeq5_s2x_.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeq5_s2x_.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in "
  stdout: ''
  timestamp: 1659806075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var i\
    \ = 0\n        while (i < number) {\n            roman += romanDigit(number %\
    \ 10, i)\n            number /= 10\n            i += 1\n        }\n        roman.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplcaq5np0.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            roman += romanDigit(number % \e[31m10\e[0m,\
    \ i)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     Not found: romanDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmplcaq5np0.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659806099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ digits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.math.log10(number).toInt\n        val numDigitsInBase = scala.math.pow(10,\
    \ numDigits)\n        val numBase = scala.math.pow(10, numDigitsInBase)\n    \
    \    val numBaseInBase = scala.math.pow(10, numDigitsInBase - 1)\n        val\
    \ numBaseInBase2 = scala.math.pow(10, numDigitsInBase - 2)\n        val numBaseInBase3\
    \ = scala.math.pow(10, numDigitsInBase - 3)\n        val numBaseInBase4 = scala.math.pow(10,\
    \ numDigitsInBase - 4)\n        val numBaseInBase5 = scala.math.pow(10, numDigitsInBase\
    \ - 5)\n        val numBaseInBase6 = scala.math.pow(10, numDigitsInBase - 6)\n\
    \        val numBaseInBase7 = scala.math.pow(10, numDigitsInBase - 7)\n      \
    \  val numBaseInBase8 = scala.math.pow(10, numDigitsInBase - 8)\n        val numBaseInBase9\
    \ = scala.math.pow(10, numDigitsInBase - 9)\n        val numBaseInBase10 = scala.math.pow(10,\
    \ numDigitsInBase - 10)\n        val numBaseInBase11 = scala.math.pow(10, numDigitsInBase\
    \ - 11)\n        val numBaseInBase12 = scala.math.pow(10, numDigitsInBase - 12)\n\
    \        val numBaseInBase13 = scala.math.pow(10, numDigitsInBase - 13)\n    \
    \    val numBaseInBase14 = scala.math.pow(10, numDigitsInBase - 14)\n        val\
    \ numBaseInBase15 = scala.math.pow(10, numDigitsInBase - 15)\n        val numBaseInBase16\
    \ = scala.math.pow(10, numDigitsInBase - 16)\n        val numBaseInBase17 = scala.math.pow(10,\
    \ numDigitsInBase - 17)\n        val numBaseInBase18 = scala.math.pow(10, numDigitsInBase\
    \ - 18)\n        val numBaseInBase19 = scala.math.pow(10, numDigitsInBase - 19)\n\
    \        val numBaseInBase20 = scala.math.pow(10, numDigitsInBase - 20)\n    \
    \    val numBaseInBase21 = scala.math.pow(10, numDigitsInBase - 21)\n        val\
    \ numBaseInBase22 = scala.math.pow(10, numDigitsInBase - 22)\n        val num\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0_jz9lua.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0_jz9lua.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val digits\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val tens = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val hundreds = scala.collection.mutable.ListBuffer[Long]()\n        val\
    \ thousands = scala.collection.mutable.ListBuffer[Long]()\n        val romanDigits\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val romanTens = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val romanHundreds = scala.collection.mutable.ListBuffer[Long]()\n   \
    \     val romanThousands = scala.collection.mutable.ListBuffer[Long]()\n     \
    \   val romanRomanDigits = scala.collection.mutable.ListBuffer[Long]()\n     \
    \   val romanRomanTens = scala.collection.mutable.ListBuffer[Long]()\n       \
    \ val romanRomanHundreds = scala.collection.mutable.ListBuffer[Long]()\n     \
    \   val romanRomanThousands = scala.collection.mutable.ListBuffer[Long]()\n  \
    \      val romanRomanRomanDigits = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val romanRomanRomanTens = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val romanRomanRomanHundreds = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val romanRomanRomanThousands = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val romanRomanRomanRomanDigits = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val romanRomanRomanRomanTens = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val romanRomanRomanRomanHundreds = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val romanRomanRomanRomanThousands = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val romanRomanRomanRomanRomanDigits = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val romanRomanRomanRomanRomanTens = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val romanRomanRomanRomanRomanHundreds = scala.collection.mutable.ListBuffer[Long\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp60c7ssc2.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp60c7ssc2.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLen =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr8veut7l.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr8veut7l.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr8veut7l.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr8veut7l.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in "
  stdout: ''
  timestamp: 1659806087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\", \"CD\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n\
    \        val romanNum = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\"\
    , \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n    \
    \    val romanNum2 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"\
    XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val\
    \ romanNum3 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"XC\", \"\
    L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum4\
    \ = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\"\
    , \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum5 = mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanNum6 = mutable.ArrayBuffer(\n   \
    \         \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n        )\n        val romanNum7 = mutable.ArrayBuffer(\n       \
    \     \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\"\
    , \"I\"\n        )\n        val romanNum8 = mutable.ArrayBuffer(\n           \
    \ \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"\
    I\"\n        )\n        val romanNum9 = mutable.ArrayBuffer(\n            \"M\"\
    , \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n \
    \       )\n        val romanNum10 = mutable.ArrayBuffer(\n            \"M\", \"\
    D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n     \
    \   )\n        val romanNum11 = mutable.ArrayBuffer(\n            \"M\", \"D\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n\
    \        val romanNum12 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\"\
    , \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n    \
    \    val romanNum13 = mutable.ArrayBuffer(\n            \"M\", \"\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqqs40yj7.scala:55:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m            \e[31m\"M\"\e[0m, \"\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 unclosed string literal\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqs40yj7.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqqs40yj7.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqqs40yj7.scala:21:24 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum2\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqqs40yj7.scala:24:24 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum3\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqqs40yj7.scala:27:24 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum4\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ avai"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val numsLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLen =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLen =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcana4eli.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcana4eli.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcana4eli.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcana4eli.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defin"
  stdout: ''
  timestamp: 1659806099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val romanNum = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigits = scala.math.log10(number).toInt\n        val numDigitsInRoman = scala.math.pow(10,\
    \ numDigits - 1)\n        val numDigitsInRomanInt = scala.math.pow(10, numDigits)\n\
    \        val numDigitsInRomanIntInt = scala.math.pow(10, numDigitsInRoman)\n \
    \       val numDigitsInRomanIntIntInt = scala.math.pow(10, numDigitsInRomanInt)\n\
    \        val numDigitsInRomanIntIntIntInt = scala.math.pow(10, numDigitsInRomanIntInt)\n\
    \        val numDigitsInRomanIntIntIntIntInt = scala.math.pow(10, numDigitsInRomanIntIntIntInt)\n\
    \        val numDigitsInRomanIntIntIntIntIntInt = scala.math.pow(10, numDigitsInRomanIntIntIntIntInt)\n\
    \        val numDigitsInRomanIntIntIntIntIntIntIntInt = scala.math.pow(10, numDigitsInRomanIntIntIntIntIntIntInt)\n\
    \        val numDigitsInRomanIntIntIntIntIntIntIntIntInt = scala.math.pow(10,\
    \ numDigitsInRomanIntIntIntIntIntIntIntIntInt)\n        val numDigitsInRomanIntIntIntIntIntIntIntIntIntInt\
    \ = scala.math.pow(10, numDigitsInRomanIntIntIntIntIntIntIntIntIntIntIntIntInt)\n\
    \        val numDigitsInRomanIntIntIntIntIntIntIntIntIntIntIntIntInt = scala.math.pow(10,\
    \ numDigitsInRomanIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc21yvbc7.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc21yvbc7.scala:25:74\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mnumDigitsInRomanIntIntIntIntIntIntIntInt\e[0m = scala.math.pow(\e[31m10\e\
    [0m, numDigitsInRomanIntIntIntIntIntIntInt)\n\e[31m\e[31m   |\e[0m           \
    \                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: numDigitsInRomanIntIntIntIntIntIntInt\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc21yvbc7.scala:26:77\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigitsInRomanIntIntIntIntIntIntIntIntInt\e[0m = scala.math.pow(\e[31m10\e\
    [0m, numDigitsInRomanIntIntIntIntIntIntIntIntInt)\n\e[31m\e[31m   |\e[0m     \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m  Recursive \e[33mvalue\e[0m \e[35mnumDigitsInRomanIntIntIntIntIntIntIntIntInt\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc21yvbc7.scala:28:89\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mnumDigitsInRomanIntIntIntIntIntIntIntIntIntIntIntIntInt\e[0m = scala.math.pow(\e\
    [31m10\e[0m, numDigitsInRomanIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \e[31m\e[31m   |\e[0m                                       "
  stdout: ''
  timestamp: 1659806100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val numsLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLen =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLen =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcana4eli.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcana4eli.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcana4eli.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcana4eli.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defin"
  stdout: ''
  timestamp: 1659806099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val remainder\
    \ = number % i\n            roman.append(if (remainder > 0) \"M\" else \"m\")\n\
    \            number /= i\n        }\n        roman.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9g_zis8c.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp9g_zis8c.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    (nums : Double)\n\e[31m   |\e[0m        \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp9g_zis8c.scala:20:19 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            number /= i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value /= is not a member of Long - did you mean number.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659806100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var i\
    \ = number\n        while(i > 0) {\n            roman.append(roman(i%10) + roman(i/10))\n\
    \            i /= 10\n        }\n        roman.reverse.mkString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjr0fyiqx.scala:18:31\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            roman.append(roman(i%\e\
    [31m10\e[0m) + roman(i/\e[31m10\e[0m))\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                               Found:\
    \    Long\n\e[31m   |\e[0m                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjr0fyiqx.scala:18:45 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            roman.append(roman(i%\e[31m10\e[0m) + roman(i/\e\
    [31m10\e[0m))\n\e[31m\e[31m   |\e[0m                                         \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                                             Found:\
    \    Long\n\e[31m   |\e[0m                                             Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer(\n            \"I\", \"II\", \"III\", \"\
    IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"XIII\"\
    , \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XIX\", \"XX\", \"XXI\", \"\
    XXII\", \"XXIII\", \"XXIV\", \"XXV\", \"XXVI\", \"XXVII\", \"XXVIII\", \"XXIX\"\
    , \"XXX\", \"XXXI\", \"XXXII\", \"XXXIII\", \"XXXIV\", \"XXXV\", \"XXXVI\", \"\
    XXXVII\", \"XXXVIII\", \"XXXIX\", \"XL\", \"L\", \"LI\", \"LII\", \"LIII\", \"\
    LIIII\", \"LIIV\", \"LIV\", \"LIVI\", \"LIVII\", \"LIVIII\", \"LIIX\", \"LX\"\
    , \"LXI\", \"LXII\", \"LXIII\", \"LXIV\", \"LXV\", \"LXVI\", \"LXVII\", \"LXVIII\"\
    , \"LXIX\", \"LXX\", \"LXXI\", \"LXXII\", \"LXXIII\", \"LXXIV\", \"LXXV\", \"\
    LXXVI\", \"LXXVII\", \"LXXVIII\", \"LXXIX\", \"LXXX\", \"LXXXI\", \"LXXXII\",\
    \ \"LXXXIII\", \"LXXXIV\", \"LXXXV\", \"LXXXVI\", \"LXXXVII\", \"LXXXVIII\", \"\
    LXXXIX\", \"XC\", \"C\", \"CI\", \"CII\", \"CIII\", \"CIIII\", \"CIV\", \"CV\"\
    , \"CVI\", \"CVII\", \"CVIII\", \"CIX\", \"CX\", \"CXI\", \"CXII\", \"CXIII\"\
    , \"CXIV\", \"CXV\", \"CXVI\", \"CXVII\", \"CXVIII\", \"CXIX\", \"CXX\", \"CXXI\"\
    , \"CXXII\", \"CXXIII\", \"CXXIV\", \"CXXV\", \"CXXVI\", \"CXXVII\", \"CXXVIII\"\
    , \"CXXIX\", \"CXXX\", \"CXXXI\", \"CXXXII\", \"CXXXIII\", \"CXXXIV\", \"CXXXV\"\
    , \"CXXXVI\", \"CXXXVII\", \"CXXXVIII\", \"CXXXIX\", \"CXL\", \"CL\", \"LI\",\
    \ \"LI\", \"LI\", \"LI\", \"LI\", \"LI\", \"LI\", \"LI\", \"LI\", \"LI\", \"LI\"\
    , \"LI\", \"LI\", \"LI\", \"LI\", \"LI\", \"LI\", \"LI\", \"LI\", \"LI\", \"LI\"\
    , \"LI\", \"LI\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsixhpxu5.scala:16:1169 ---------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[31m\"I\"\e[0m, \e[31m\"II\"\e[0m, \e[31m\"\
    III\"\e[0m, \e[31m\"IV\"\e[0m, \e[31m\"V\"\e[0m, \e[31m\"VI\"\e[0m, \e[31m\"VII\"\
    \e[0m, \e[31m\"VIII\"\e[0m, \e[31m\"IX\"\e[0m, \e[31m\"X\"\e[0m, \e[31m\"XI\"\e\
    [0m, \e[31m\"XII\"\e[0m, \e[31m\"XIII\"\e[0m, \e[31m\"XIV\"\e[0m, \e[31m\"XV\"\
    \e[0m, \e[31m\"XVI\"\e[0m, \e[31m\"XVII\"\e[0m, \e[31m\"XVIII\"\e[0m, \e[31m\"\
    XIX\"\e[0m, \e[31m\"XX\"\e[0m, \e[31m\"XXI\"\e[0m, \e[31m\"XXII\"\e[0m, \e[31m\"\
    XXIII\"\e[0m, \e[31m\"XXIV\"\e[0m, \e[31m\"XXV\"\e[0m, \e[31m\"XXVI\"\e[0m, \e\
    [31m\"XXVII\"\e[0m, \e[31m\"XXVIII\"\e[0m, \e[31m\"XXIX\"\e[0m, \e[31m\"XXX\"\e\
    [0m, \e[31m\"XXXI\"\e[0m, \e[31m\"XXXII\"\e[0m, \e[31m\"XXXIII\"\e[0m, \e[31m\"\
    XXXIV\"\e[0m, \e[31m\"XXXV\"\e[0m, \e[31m\"XXXVI\"\e[0m, \e[31m\"XXXVII\"\e[0m,\
    \ \e[31m\"XXXVIII\"\e[0m, \e[31m\"XXXIX\"\e[0m, \e[31m\"XL\"\e[0m, \e[31m\"L\"\
    \e[0m, \e[31m\"LI\"\e[0m, \e[31m\"LII\"\e[0m, \e[31m\"LIII\"\e[0m, \e[31m\"LIIII\"\
    \e[0m, \e[31m\"LIIV\"\e[0m, \e[31m\"LIV\"\e[0m, \e[31m\"LIVI\"\e[0m, \e[31m\"\
    LIVII\"\e[0m, \e[31m\"LIVIII\"\e[0m, \e[31m\"LIIX\"\e[0m, \e[31m\"LX\"\e[0m, \e\
    [31m\"LXI\"\e[0m, \e[31m\"LXII\"\e[0m, \e[31m\"LXIII\"\e[0m, \e[31m\"LXIV\"\e\
    [0m, \e[31m\"LXV\"\e[0m, \e[31m\"LXVI\"\e[0m, \e[31m\"LXVII\"\e[0m, \e[31m\"LXVIII\"\
    \e[0m, \e[31m\"LXIX\"\e[0m, \e[31m\"LXX\"\e[0m, \e[31m\"LXXI\"\e[0m, \e[31m\"\
    LXXII\"\e[0m, \e[31m\"LXXIII\"\e[0m, \e[31m\"LXXIV\"\e[0m, \e[31m\"LXXV\"\e[0m,\
    \ \e[31m\"LXXVI\"\e[0m, \e[31m\"LXXVII\"\e[0m, \e[31m\"LXXVIII\"\e[0m, \e[31m\"\
    LXXIX\"\e[0m, \e[31m\"LXXX\"\e[0m, \e[31m\"LXXXI\"\e[0m, \e[31m\"LXXXII\"\e[0m,\
    \ \e[31m\"LXXXIII\"\e[0m, \e[31m\"LXXXIV\"\e[0m, \e[31m\"LXXXV\"\e[0m, \e[31m\"\
    LXXXVI\"\e[0m, \e[31m\"LXXXVII\"\e[0m, \e[31m\"LXXXVIII\"\e[0m, \e[31m\"LXXXIX\"\
    \e[0m, \e[31m\"XC\"\e[0m, \e[31m\"C\"\e[0m, \e[31m\"CI\"\e[0m, \e[31m\"CII\"\e\
    [0m, \e[31m\"CIII\"\e[0m, \e[31m\"CIIII\"\e[0m, \e[31m\"CIV\"\e[0m, \e[31m\"CV\"\
    \e[0m, \e[31m\"CVI\"\e[0m, \e[31m\"CVII\"\e[0m, \e[31m\"CVIII\"\e[0m, \e[31m\"\
    CIX\"\e[0m, \e[31m\"CX\"\e[0m, \e[31m\"CXI\"\e[0m, \e[31m\"CXII\"\e[0m, \e[31m\"\
    CXIII\"\e[0m, \e[31m\"CXIV\"\e[0m, \e[31m\"CXV\"\e[0m, \e[31m\"CXVI\"\e[0m, \e\
    [31m\"CXVII\"\e[0m, \e[31m\"CXVIII\"\e[0m, \e[31m\"CXIX\"\e[0m, \e[31m\"CXX\"\e\
    [0m, \e[31m\"CXXI\"\e[0m, \e[31m\"CXXII\"\e[0m, \e[31m\"CXXIII\"\e[0m, \e[31m\"\
    CXXIV\"\e[0m, \e[31m\"CXXV\"\e[0m, \e[31m\"CXXVI\"\e[0m, \e[31m\"CXXVII\"\e[0m,\
    \ \e[31m\"CXXVIII\"\e[0m, \e[31m\"CXXIX\"\e"
  stdout: ''
  timestamp: 1659806100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val digits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val tens = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val thousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numsBuff = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ digitsBuff = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val tensBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredsBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandsBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsBuffBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val digitsBuffBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val tensBuffBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredsBuffBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandsBuffBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsBuffBuffBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val digitsBuffBuffBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val tensBuffBuffBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredsBuffBuffBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandsBuffBuffBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsBuffBuffBuffBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val digitsBuffBuffBuffBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val tensBuffBuffBuffBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredsBuffBuffBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandsBuffBuffBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsBuffBuffBuffBuff\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjiygzbhm.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mhundredsBuffBuffBuff\e[0m\
    \ = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredsBuffBuffBuff is already defined as \e[33mvalue\e[0m\
    \ \e[35mhundredsBuffBuffBuff\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjiygzbhm.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mthousandsBuffBuffBuff\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandsBuffBuffBuff is already defined as \e[33mvalue\e\
    [0m \e[35mthousandsBuffBuffBuff\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjiygzbhm.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mnumsBuffBuffBuffBuff\e[0m\
    \ = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsBuffBuffBuffBuff is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsBuffBuffBuffBuff\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpjiygzbhm.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659806102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val numsLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLen =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLen =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcana4eli.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcana4eli.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcana4eli.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcana4eli.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defin"
  stdout: ''
  timestamp: 1659806099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsString\
    \ = scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilderBuilder2\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder3\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder4\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder5\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder6\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder7\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder8\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder9\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder10\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder11\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder12\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder13\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder14\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder15\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder16\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder17\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder18\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder19\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder20\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder21\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder22\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder23\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder24\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder25\
    \ = scala.collection.mutable.StringBuilder.new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuj9emya8.scala:42:73 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder25\e[0m\
    \ = scala.collection.mutable.StringBuilder.\e[33mnew\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                                         ^^^\e\
    [0m\n\e[31m   |\e[0m                                 an identifier expected, but\
    \ 'new' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuj9emya8.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr2 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr3 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr4 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr5 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr6 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr7 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr8 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr9\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr10 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr11 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr12 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr13 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr14 = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr15 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr16 = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val numsStr17 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr18 = scala.collection.mutable.ListBuffer.empty[String]\n       \
    \ val numsStr19 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr20 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr21\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr22 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr23 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr24 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr25 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr26 = scala.collection.mutable.ListBuffer.empty[String\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjomgr47f.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpjomgr47f.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val num = scala.math.pow(10,\
    \ i.toInt)\n            val numStr = scala.math.pow(10, i.toInt).toString.toUpperCase\n\
    \            val numStrLen = numStr.length\n            val numStrDigits = numStr.length\
    \ - numStrLen\n            val numStrDigit = numStr.substring(numStrLen - numStrDigits)\n\
    \            val numStrDigitLen = numStrDigit.length\n            val numStrDigitDigit\
    \ = numStrDigit.substring(numStrDigitLen - numStrDigitLen)\n            val numStrDigitDigitLen\
    \ = numStrDigitDigit.length\n            val numStrDigitDigitDigit = numStrDigitDigit.substring(numStrDigitDigitLen\
    \ - numStrDigitDigitLen)\n            val numStrDigitDigitDigitLen = numStrDigitDigitDigit.length\n\
    \            val numStrDigitDigitDigitDigit = numStrDigitDigitDigitDigit.substring(numStrDigitDigitDigitLen\
    \ - numStrDigitDigitDigitLen)\n            val numStrDigitDigitDigitDigitLen =\
    \ numStrDigitDigitDigitDigit.length\n            val numStrDigitDigitDigitDigitDigit\
    \ = numStrDigitDigitDigitDigitDigit.substring(numStrDigitDigitDigitDigitLen -\
    \ numStrDigitDigitDigitDigitLen)\n            val numStrDigitDigitDigitDigitDigitLen\
    \ = numStrDigitDigitDigitDigitDigit.length\n            val numStrDigitDigitDigitDigitDigitDigit\
    \ = numStrDigitDigitDigitDigitDigitDigit.substring(numStrDigitDigitDigitDigitDigitLen\
    \ - numStrDigitDigitDigitDigitDigitLen)\n            val numStrDigitDigitDigitDigitDigitDigitLen\
    \ = numStrDigitDigitDigitDigitDigitDigit.length\n            val numStrDigitDigitDigitDigitDigitDigit\
    \ = numStrDigitDigitDigitDigitDigitDigitDigit.substring(numStrDigitDigitDigitDigitDigitDigitLen\
    \ - numStrDigitDigitDigitDigitDigitLen)\n            val numStrDigitDigitDigitDigitDigitDigitLen\
    \ = numStrDigitDigitDigitDigitDigitDigitDigit.length\n            val numStrDigitDigitDigitDigitDigitDigitDigit\
    \ = numStrDigitDigitDigitDigitDigitDigitDigitDigit.substring(numStrDigitDigitDigitDigitDigitDigitDigitLen\
    \ - numStrDigitDigitDigitDigitDigitDigitDigitLen)\n            val numStrDigitDigitDigitDigitDigitDigitDigitLen\
    \ = numStrDigitDigitDigitDigitDigitDigitDigitDigitLen\n            val numStrDigitDigitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1vtaejky.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1vtaejky.scala:58:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp1vtaejky.scala:15:20 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1vtaejky.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    (nums : Double)\n\e[31m   |\e[0m        \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1vtaejky.scala:36:60 ------------------------\e[0m\e[0m\n\e[31m36 |\e\
    [0m            \e[33mval\e[0m \e[36mnumStrDigitDigitDigitDigitDigitDigitDigit\e\
    [0m = numStrDigitDigitDigitDigitDigitDigitDigitDigit.substring(numStrDigitDigitDigitDigitDigitDigitDigitLen\
    \ - numStrDigitDigitDigitDigitDigitDigitDigitLen)\n\e[31m\e[31m   |\e[0m     \
    \                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Not found: numStrDigitDigitDigitDigitDigitDigitDigitDigit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1vtaejky.scala:37:63\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnumStrDigitDigitDigitDigitDigitDigitDigitLen\e[0m = numStrDigitDigitDigitDigitDigitDigitDigitD"
  stdout: ''
  timestamp: 1659806108
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuajrpfr7.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuajrpfr7.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStringBuilderBuilder\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mStringBuilder\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuajrpfr7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuajrpfr7.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuajrpfr7.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m     "
  stdout: ''
  timestamp: 1659806107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString2\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString3\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString4\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString5\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString6\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString7\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString8\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString9\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString10\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString11\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString12\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString13\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString14\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString15\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString16\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString17\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString18\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString19\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString20\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString21\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString22\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString23\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString24\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString25\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString26\
    \ = scala.collection.mutable.ListBuffer.empty[String\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp49t8ntmg.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp49t8ntmg.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.toInt) {\n            val remainder\
    \ = nums.toInt - i\n            val digit = remainder / 10\n            val remainderDigit\
    \ = remainder % 10\n            val romanDigit = if (digit > 0) \"M\" else if\
    \ (digit == 0) \"D\" else \"C\"\n            roman += romanDigit + digit\n   \
    \     }\n        roman.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7yfln3k9.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy85zti4j.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy85zti4j.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy85zti4j.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy85zti4j.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659806098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsStr = nums.toString.reverse\n        var i =\
    \ 0\n        while (i < numsStr.length) {\n            val num = numsStr(i).toLong\n\
    \            val romanNum = numToRoman(num)\n            roman += romanNum\n \
    \           i += 1\n        }\n        roman.reverse.toString.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp56zf2kcy.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp56zf2kcy.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mromanNum\e[0m = numToRoman(num)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Not found: numToRoman\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659806105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsLen = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsLenLen = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsLenLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4g2gkon_.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4g2gkon_.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4g2gkon_.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4g2gkon_.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplev"
  stdout: ''
  timestamp: 1659806088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsLength = nums.length\n        val numsDigits\
    \ = nums.toString.length\n        val numsDigit = numsDigits - 1\n        val\
    \ numsDigits = nums.toString.length\n        val numsDigit = numsDigits - 1\n\
    \        val numsDigits = nums.toString.length\n        val numsDigit = numsDigits\
    \ - 1\n        val numsDigits = nums.toString.length\n        val numsDigit =\
    \ numsDigits - 1\n        val numsDigits = nums.toString.length\n        val numsDigit\
    \ = numsDigits - 1\n        val numsDigits = nums.toString.length\n        val\
    \ numsDigit = numsDigits - 1\n        val numsDigits = nums.toString.length\n\
    \        val numsDigit = numsDigits - 1\n        val numsDigits = nums.toString.length\n\
    \        val numsDigit = numsDigits - 1\n        val numsDigits = nums.toString.length\n\
    \        val numsDigit = numsDigits - 1\n        val numsDigits = nums.toString.length\n\
    \        val numsDigit = numsDigits - 1\n        val numsDigits = nums.toString.length\n\
    \        val numsDigit = numsDigits - 1\n        val numsDigits = nums.toString.length\n\
    \        val numsDigit = numsDigits - 1\n        val numsDigits = nums.toString.length\n\
    \        val numsDigit = numsDigits - 1\n        val numsDigits = nums.toString.length\n\
    \        val numsDigit = numsDigits - 1\n        val numsDigits = nums.toString.length\n\
    \        val numsDigit = numsDigits - 1\n        val numsDigits = nums.toString.length\n\
    \        val numsDigit = numsDigits - 1\n        val numsDigits = nums.toString.length\n\
    \        val numsDigit = numsDigits - 1\n        val numsDigits = nums.toString.length\n\
    \        val numsDigit = numsDigits - 1\n        val numsDigits = nums.toString.length\n\
    \        val numsDigit = numsDigits - 1\n        val numsDigits = nums.toString.length\n\
    \        val numsDigit = nums\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0h8unns7.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = nums.toString.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsDigits is already defined as \e[33mvalue\e[0m \e[35mnumsDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0h8unns7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsDigit\e[0m = numsDigits - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsDigit is already defined as \e[33mvalue\e[0m \e[35mnumsDigit\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0h8unns7.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = nums.toString.length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsDigits is already defined as \e[33mvalue\e[0m \e[35mnumsDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0h8unns7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsDigit\e[0m = numsDigits - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsDigit is already defined as \e[33mvalue\e[0m \e[35mnumsDigit\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0h8unns7.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = nums.toString.length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsDigits is already defined as "
  stdout: ''
  timestamp: 1659806110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            if (num < 1000) {\n                roman += num.toString()\
    \ + if (num > 0) \"i\" else \"\"\n            } else {\n                val num2\
    \ = num / 1000\n                val num3 = num % 1000\n                val num4\
    \ = num2 / 100\n                val num5 = num2 % 100\n                val num6\
    \ = num3 / 10\n                val num7 = num3 % 10\n                val num8\
    \ = num4 / 1\n                val num9 = num4 % 1\n                val num10 =\
    \ num5 / 1\n                val num11 = num5 % 1\n                val num12 =\
    \ num6 / 1\n                val num13 = num6 % 1\n                val num14 =\
    \ num7 / 1\n                val num15 = num7 % 1\n                val num16 =\
    \ num8 / 1\n                val num17 = num8 % 1\n                val num18 =\
    \ num9 / 1\n                val num19 = num9 % 1\n                val num20 =\
    \ num10 / 1\n                val num21 = num10 % 1\n                val num22\
    \ = num11 / 1\n                val num23 = num11 % 1\n                val num24\
    \ = num12 / 1\n                val num25 = num12 % 1\n                val num26\
    \ = num13 / 1\n                val num27 = num13 % 1\n                val num28\
    \ = num14 / 1\n                val num29 = num14 % 1\n                val num30\
    \ = num15 / 1\n                val num31 = num15 % 1\n                val num32\
    \ = num16 / 1\n                val num33 = num16 % 1\n                val num34\
    \ = num17 / 1\n                val num35 = num17 % 1\n                val num36\
    \ = num18 / 1\n                val num37 = num18 % 1\n                val num38\
    \ = num19 / 1\n                val num39 = num19 % 1\n                val num40\
    \ = num20 / 1\n                val num41 = num20 % 1\n                val num42\
    \ = num21 / 1\n                val num43 = num21 % 1\n                val num44\
    \ = num22 / 1\n                val num45 = num22 % 1\n                val num46\
    \ = num23 / 1\n                val num47 = num\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxpfa4wir.scala:20:42 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                roman += num.toString() + \e[33mif\e\
    [0m (num > \e[31m0\e[0m) \e[31m\"i\"\e[0m \e[33melse\e[0m \e[31m\"\"\e[0m\n\e\
    [31m\e[31m   |\e[0m                                          ^^\e[0m\n\e[31m \
    \  |\e[0m                                        expression expected but \e[31mif\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxpfa4wir.scala:87:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m87 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpxpfa4wir.scala:15:20 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpxpfa4wir.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.size)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value size is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpxpfa4wir.scala:18:22 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpxpfa4wir.scala:69:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m69 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659806110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsStr = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr2 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsStr3 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr4\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr5 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr6 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsStr7 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr8\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr9 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr10 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr11 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr12 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr13\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr15 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr16 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr17 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr18\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr19 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr20 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr21 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr22 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr23\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr24 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr25 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr26 = scala.collection.mutable.ListBuffer[String]\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqqu53m6b.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap =\
    \ scala.collection.mutable.Map[Int, Int]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap4 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap7 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap8 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap9\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap10 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap11 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap12 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap13 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap14\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap15 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap16 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap17 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap20 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap21 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap22 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap25 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap26 = scala.collection.mutable.Map[Int, Int]\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcisz5wg6.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ tenths = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredths\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n \
    \       val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n \
    \       val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n \
    \       val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwhab1_gn.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwhab1_gn.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mhundredthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredthths is already defined as \e[33mvalue\e[0m \e[35mhundredthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwhab1_gn.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwhab1_gn.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel "
  stdout: ''
  timestamp: 1659806110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            val digit = num.toInt\n            val romanDigit = digit\
    \ / 100\n            val remainder = digit % 100\n            val romanDigitString\
    \ = romanDigit.toString\n            if (romanDigit == 0) {\n                roman.append(romanDigitString)\n\
    \            } else {\n                roman.append(romanDigitString + \"m\")\n\
    \            }\n            if (remainder > 0) {\n                roman.append(intToMiniRoman(remainder))\n\
    \            }\n        }\n        roman.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzsde8796.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpzsde8796.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.size)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value size is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpzsde8796.scala:18:22 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659806109
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ hundredths = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandths\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundredths\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousandths\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTenths = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numHundredths = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numThousandths = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundredths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousandths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTenths = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numHundredths = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numThousandths = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val num\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5925oxz9.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5925oxz9.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumHundredths\e[0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundredths is already defined as \e[33mvalue\e[0m \e[35mnumHundredths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5925oxz9.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mnumThousandths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousandths is already defined as \e[33mvalue\e[0m \e[35mnumThousandths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5925oxz9.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5925oxz9.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens i"
  stdout: ''
  timestamp: 1659806110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsArray = nums.toArray\n        var i = 0\n   \
    \     while (i < numsArray.length) {\n            val num = numsArray(i)\n   \
    \         val romanNum = num.toRoman\n            roman += romanNum\n        \
    \    i += 1\n        }\n        roman.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq5lvd4uk.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpq5lvd4uk.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsArray\e[0m = nums.toArray\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        value toArray is not a member of Double\n2 errors found\n"
  stdout: ''
  timestamp: 1659806110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzc1vhngr.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzc1vhngr.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val remainder\
    \ = number % i\n            roman.append(if (remainder > 0) \"M\" else \"m\")\n\
    \            number /= i\n        }\n        roman.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9g_zis8c.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp9g_zis8c.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    (nums : Double)\n\e[31m   |\e[0m        \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp9g_zis8c.scala:20:19 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            number /= i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value /= is not a member of Long - did you mean number.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659806100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp73w3u0qg.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp73w3u0qg.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzc1vhngr.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzc1vhngr.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        var i = number\n\
    \        while (i > 0) {\n            roman += romanDigits(i).mkString(\"\")\n\
    \            i /= 10\n        }\n        roman.reverse.mkString(\"\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxmw5ou1r.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var index\
    \ = 0\n        while (number > 0) {\n            val remainder = number % 10\n\
    \            number /= 10\n            roman += if (remainder == 0) \"M\" else\
    \ if (remainder == 1) \"D\" else \"C\"\n        }\n        roman.mkString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpok87huws.scala:20:21 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            roman += \e[33mif\e[0m (remainder == \e[31m0\e\
    [0m) \e[31m\"M\"\e[0m \e[33melse\e[0m \e[33mif\e[0m (remainder == \e[31m1\e[0m)\
    \ \e[31m\"D\"\e[0m \e[33melse\e[0m \e[31m\"C\"\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                  ^^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpok87huws.scala:19:19 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value /= is not a member of Long - did you mean\
    \ number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659806110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val digits\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val tens = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val hundreds = scala.collection.mutable.ListBuffer[Long]()\n        val\
    \ thousands = scala.collection.mutable.ListBuffer[Long]()\n        val hundredths\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val tenths = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val ones = scala.collection.mutable.ListBuffer[Long]()\n        val tenth\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val one = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val hundredth = scala.collection.mutable.ListBuffer[Long]()\n       \
    \ val thousandth = scala.collection.mutable.ListBuffer[Long]()\n        val hundredths\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val thousandths = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val hundredthths = scala.collection.mutable.ListBuffer[Long]()\n    \
    \    val thousandthths = scala.collection.mutable.ListBuffer[Long]()\n       \
    \ val hundredthth = scala.collection.mutable.ListBuffer[Long]()\n        val thousandthth\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val hundredthths = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val thousandthths = scala.collection.mutable.ListBuffer[Long]()\n   \
    \     val hundredthth = scala.collection.mutable.ListBuffer[Long]()\n        val\
    \ thousandthth = scala.collection.mutable.ListBuffer[Long]()\n        val hundredthths\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val thousandthths = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val hundredthth = scala.collection.mutable.ListBuffer[Long]()\n     \
    \   val thousandthth = scala.collection.mutable.ListBuffer[Long]()\n        val\
    \ hundredthths = scala.collection.mutable.ListBuffer[Long]()\n        val thousandthths\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val hundredthth = \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmpjjd9a8.scala:43:25 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mhundredthth\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpmpjjd9a8.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhundredths\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredths is already defined as \e[33mvalue\e[0m \e[35mhundredths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmpjjd9a8.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhundredthths\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredthths is already defined as \e[33mvalue\e[0m \e[35mhundredthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmpjjd9a8.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmpjjd9a8.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mhundredthth\e[0m = sca"
  stdout: ''
  timestamp: 1659806111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var num\
    \ = 0\n        while (number > 0) {\n            val remainder = number % 10\n\
    \            roman.append(remainder)\n            number /= 10\n        }\n  \
    \      roman.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp7a35l7o8.scala:19:18 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            roman.append(remainder)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m\
    \ with types\n\e[31m   |\e[0m (elems: String*): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments ((remainder : Long))\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp7a35l7o8.scala:20:19 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659806111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsString = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString2 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString3 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString4 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString5 = scala.collection.mutable.ListBuffer[String]()\n        val numsString6\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString7 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString8 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString9 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString10 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString11 = scala.collection.mutable.ListBuffer[String]()\n        val numsString12\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString13 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString15 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString16 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString17 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString18 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString19 = scala.collection.mutable.ListBuffer[String]()\n        val numsString20\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString21 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString22 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString23 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString24 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString25 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString26 = scala.collection.mutable.ListBuffer[String]\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqbcilkug.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            val digit = num.toInt\n            val romanDigit = if\
    \ (digit < 0 || digit > 4) \"?\" else romanDigits(digit)\n            roman.append(romanDigit)\n\
    \        }\n        roman.mkString\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmjbbhsbu.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpmjbbhsbu.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.size)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value size is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpmjbbhsbu.scala:18:22 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmjbbhsbu.scala:20:66 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mromanDigit\e[0m = \e\
    [33mif\e[0m (digit < \e[31m0\e[0m || digit > \e[31m4\e[0m) \e[31m\"?\"\e[0m \e\
    [33melse\e[0m romanDigits(digit)\n\e[31m\e[31m   |\e[0m                      \
    \                                            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                  Not found: romanDigits\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659806110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val digits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        var i\
    \ = 0\n        while(number > 0) {\n            val digit = number % 10\n    \
    \        number /= 10\n            digits += digit\n        }\n        while(i\
    \ < digits.length) {\n            roman += romanDigit(digits(i))\n           \
    \ i += 1\n        }\n        roman.mkString.toLowerCase\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2nttti3k.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2nttti3k.scala:21:22 --------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \            digits += digit\n\e[31m\e[31m   |\e[0m                      ^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    (digit : Long)\n\e[31m   |\e\
    [0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2nttti3k.scala:24:21 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            roman += romanDigit(digits(i))\n\e[31m\e[31m \
    \  |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \      Not found: romanDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659806113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val numsLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLen =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLen =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcana4eli.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcana4eli.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcana4eli.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcana4eli.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defin"
  stdout: ''
  timestamp: 1659806099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ var i = number\n        while(i > 0){\n            val remainder = i % 10\n\
    \            roman.append(remainder)\n            i /= 10\n        }\n       \
    \ roman.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpe0ixtde4.scala:19:18 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            roman.append(remainder)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m\
    \ with types\n\e[31m   |\e[0m (elems: String*): (roman : scala.collection.mutable.ArrayBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (roman : scala.collection.mutable.ArrayBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments ((remainder : Long))\n1 error found\n"
  stdout: ''
  timestamp: 1659806109
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilderBuilder2\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder3\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder4\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder5\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder6\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder7\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder8\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder9\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder10\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder11\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder12\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder13\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder14\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder15\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder16\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder17\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder18\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder19\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder20\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder21\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder22\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder23\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder24\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder25\
    \ = scala.collection.mutable.StringBuilder.new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptdjh3anc.scala:42:73 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder25\e[0m\
    \ = scala.collection.mutable.StringBuilder.\e[33mnew\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                                         ^^^\e\
    [0m\n\e[31m   |\e[0m                                 an identifier expected, but\
    \ 'new' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptdjh3anc.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            val romanDigit = num / 100\n            val romanDigitString\
    \ = romanDigit.toString\n            if (romanDigit > 0)\n                roman.append(romanDigitString)\n\
    \            val newNum = num % 100\n            val newNumString = newNum.toString\n\
    \            roman.append(newNumString)\n        }\n        roman.mkString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa4uu0ujr.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpa4uu0ujr.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.size)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value size is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpa4uu0ujr.scala:18:22 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659806111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsStr = nums.toString.reverse\n        val numsArr\
    \ = numsStr.split(\"\\\\.\")\n        val numsArrLen = numsArr.length\n      \
    \  val numsArr2 = numsArr.tail\n        val numsArrLen2 = numsArr2.length\n  \
    \      val numsArr3 = numsArr2.tail\n        val numsArrLen3 = numsArr3.length\n\
    \        val numsArr4 = numsArr3.tail\n        val numsArrLen4 = numsArr4.length\n\
    \        val numsArr5 = numsArr4.tail\n        val numsArrLen5 = numsArr5.length\n\
    \        val numsArr6 = numsArr5.tail\n        val numsArrLen6 = numsArr6.length\n\
    \        val numsArr7 = numsArr6.tail\n        val numsArrLen7 = numsArr7.length\n\
    \        val numsArr8 = numsArr7.tail\n        val numsArrLen8 = numsArr8.length\n\
    \        val numsArr9 = numsArr8.tail\n        val numsArrLen9 = numsArr9.length\n\
    \        val numsArr10 = numsArr9.reverse\n        val numsArrLen10 = numsArr10.length\n\
    \        val numsArr11 = numsArr10.reverse\n        val numsArrLen11 = numsArr11.length\n\
    \        val numsArr12 = numsArr11.reverse\n        val numsArrLen12 = numsArr12.length\n\
    \        val numsArr13 = numsArr12.reverse\n        val numsArrLen13 = numsArr13.length\n\
    \        val numsArr14 = numsArr13.reverse\n        val numsArrLen14 = numsArr14.length\n\
    \        val numsArr15 = numsArr14.reverse\n        val numsArrLen15 = numsArr15.length\n\
    \        val numsArr16 = numsArr15.reverse\n        val numsArrLen16 = numsArr16.length\n\
    \        val numsArr17 = numsArr16.reverse\n        val numsArrLen17 = numsArr17.length\n\
    \        val numsArr18 = numsArr17.reverse\n        val numsArrLen18 = numsArr18.length\n\
    \        val numsArr19 = nums\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4wvcbz1m.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4wvcbz1m.scala:55:5 ---------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659806112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp05rquc1b.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp05rquc1b.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mStringBuilder\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp05rquc1b.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp05rquc1b.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp05rquc1b.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 "
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        val numsArray\
    \ = numsString.toCharArray\n        var index = 0\n        while (index < numsArray.length)\
    \ {\n            val num = numsArray(index)\n            if (num == 'I') {\n \
    \               roman += \"I\"\n            } else if (num == 'V') {\n       \
    \         roman += \"V\"\n            } else if (num == 'X') {\n             \
    \   roman += \"X\"\n            } else if (num == 'L') {\n                roman\
    \ += \"L\"\n            } else if (num == 'C') {\n                roman += \"\
    C\"\n            } else if (num == 'D') {\n                roman += \"D\"\n  \
    \          } else if (num == 'M') {\n                roman += \"M\"\n        \
    \    } else if (num == 'I') {\n                roman += \"I\"\n            } else\
    \ if (num == 'I') {\n                roman += \"I\"\n            } else if (num\
    \ == 'I') {\n                roman += \"I\"\n            } else if (num == 'I')\
    \ {\n                roman += \"I\"\n            } else if (num == 'I') {\n  \
    \              roman += \"I\"\n            } else if (num == 'I') {\n        \
    \        roman += \"I\"\n            } else if (num == 'I') {\n              \
    \  roman += \"I\"\n            } else if (num == 'I') {\n                roman\
    \ += \"I\"\n            } else if (num == 'I') {\n                roman += \"\
    I\"\n            } else if (num == 'I') {\n                roman += \"I\"\n  \
    \          } else if (num == 'I') {\n                roman += \"I\"\n        \
    \    } else if (num == 'I') {\n                roman += \"I\"\n            } else\
    \ if (num == 'I') {\n                roman += \"I\"\n            } else if (num\
    \ == 'I') {\n                roman += \"I\"\n            } else if (num == 'I')\
    \ {\n                roman += \"I\"\n            } else if (num == 'I') {\n  \
    \              roman += \"I\"\n            } else if (num == 'I') {\n        \
    \        roman += \"I\"\n            } else if (num == 'I') {\n              \
    \  roman += \"I\"\n            } else if (num == 'I') {\n                roman\
    \ += \"I\"\n            } else if (num == 'I') {\n                roman += \"\
    I\"\n            } else if (num == 'I') {\n                roman += \"I\"\n  \
    \          } else if (num == 'I') {\n                roman += \"I\"\n        \
    \    } else if (num == 'I') {\n                roman += \"I\"\n            } else\
    \ if (num == 'I') {\n                roman += \"I\"\n            } else if (num\
    \ == 'I') {\n                roman += \"I\"\n            } else if (num == 'I')\
    \ {\n                roman += \"I\"\n            } else if (num == 'I') {\n  \
    \              roman += \"I\"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3n31i30i.scala:109:0 ---------------------------\e\
    [0m\e[0m\n\e[31m109 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3n31i30i.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3n31i30i.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m 20 |\e[0m        \e[33mwhile\e[0m (index\
    \ < numsArray.length) {\n\e[31m\e[31m    |\e[0m        ^\e[0m\n\e[31m    |\e[0m\
    \        Found:    Unit\n\e[31m    |\e[0m        Required: String\n\e[31m 21 |\e\
    [0m            \e[33mval\e[0m \e[36mnum\e[0m = numsArray(index)\n\e[31m 22 |\e\
    [0m            \e[33mif\e[0m (num == \e[31m'I'\e[0m) {\n\e[31m 23 |\e[0m     \
    \           roman += \e[31m\"I\"\e[0m\n\e[31m 24 |\e[0m            } \e[33melse\e\
    [0m \e[33mif\e[0m (num == \e[31m'V'\e[0m) {\n\e[31m 25 |\e[0m                roman\
    \ += \e[31m\"V\"\e[0m\n\e[31m 26 |\e[0m            } \e[33melse\e[0m \e[33mif\e\
    [0m (num == \e[31m'X'\e[0m) {\n\e[31m 27 |\e[0m                roman += \e[31m\"\
    X\"\e[0m\n\e[31m 28 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (num ==\
    \ \e[31m'L'\e[0m) {\n\e[31m 29 |\e[0m                roman += \e[31m\"L\"\e[0m\n\
    \e[31m 30 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (num == \e[31m'C'\e\
    [0m) {\n\e[31m 31 |\e[0m                roman += \e[31m\"C\"\e[0m\n\e[31m 32 |\e\
    [0m            } \e[33melse\e[0m \e[33mif\e[0m (num == \e[31m'D'\e[0m) {\n\e[31m\
    \ 33 |\e[0m                roman += \e[31m\"D\"\e[0m\n\e[31m 34 |\e[0m       \
    \     } \e[33melse\e[0m \e[33mif\e[0m (num == \e[31m'M'\e[0m) {\n\e[31m 35 |\e\
    [0m                roman += \e[31m\"M\"\e[0m\n\e[31m 36 |\e[0m            } \e\
    [33melse\e[0m \e[33mif\e[0m (num == \e[31m'I'\e[0m) {\n\e[31m 37 |\e[0m      \
    \          roman += \e[31m\"I\"\e[0m\n\e[31m 38 |\e[0m            } \e[33melse\e\
    [0m \e[33mif\e[0m (num == \e[31m'I'\e[0m) {\n\e[31m 39 |\e[0m                roman\
    \ += \e[3"
  stdout: ''
  timestamp: 1659806113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val romanNum = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numToRoman = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numToRomanNum\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numToRomanNumMap\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numToRomanNumMap19\
    \ = scala.collection.mutable.HashMap.empty[\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9r5opa3p.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E023] Syntax Error:\
    \ /tmp/tmp9r5opa3p.scala:37:71 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumToRomanNumMap19\e[0m = scala.collection.mutable.HashMap.empty[\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot enough type arguments for scala.collection.mutable.HashMap.empty[K,\
    \ V]\n\e[31m   |\e[0mexpected: [K, V]\n\e[31m   |\e[0mactual:   [\e[35m<error>\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9r5opa3p.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659806113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap =\
    \ scala.collection.mutable.Map[Int, Int]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap4 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap7 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap8 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap9\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap10 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap11 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap12 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap13 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap14\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap15 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap16 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap17 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap20 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap21 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap22 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap25 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap26 = scala.collection.mutable.Map[Int, Int]\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcisz5wg6.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val digits\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val tens = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val hundreds = scala.collection.mutable.ListBuffer[Long]()\n        val\
    \ thousands = scala.collection.mutable.ListBuffer[Long]()\n        val tenths\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val hundredths = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val thousandths = scala.collection.mutable.ListBuffer[Long]()\n     \
    \   val hundredthsCount = scala.collection.mutable.ListBuffer[Long]()\n      \
    \  val thousandthsCount = scala.collection.mutable.ListBuffer[Long]()\n      \
    \  val tenthsCount = scala.collection.mutable.ListBuffer[Long]()\n        val\
    \ tenthsCount2 = scala.collection.mutable.ListBuffer[Long]()\n        val tenthsCount3\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val tenthsCount4 = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val tenthsCount5 = scala.collection.mutable.ListBuffer[Long]()\n    \
    \    val tenthsCount6 = scala.collection.mutable.ListBuffer[Long]()\n        val\
    \ tenthsCount7 = scala.collection.mutable.ListBuffer[Long]()\n        val tenthsCount8\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val tenthsCount9 = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val tenthsCount10 = scala.collection.mutable.ListBuffer[Long]()\n   \
    \     val hundredthsCount2 = scala.collection.mutable.ListBuffer[Long]()\n   \
    \     val hundredthsCount3 = scala.collection.mutable.ListBuffer[Long]()\n   \
    \     val hundredthsCount4 = scala.collection.mutable.ListBuffer[Long]()\n   \
    \     val hundredthsCount5 = scala.collection.mutable.ListBuffer[Long]()\n   \
    \     val hundredthsCount6 = scala.collection.mutable.ListBuffer[Long]()\n   \
    \     val hundredthsCount7 = scala.collection.mutable.ListBuffer[Long]()\n   \
    \     val hundredthsCount8 = scala.collection.mutable.ListBuffer[Long]()\n   \
    \     val hundredthsCount9 = scal\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3f1orpp6.scala:42:31 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mhundredthsCount9\e[0m =\
    \ scal\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: scal\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3f1orpp6.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659806114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsStr = nums.toString.reverse\n        var i =\
    \ 0\n        while (i < numsStr.length) {\n            val num = numsStr.charAt(i).toInt\n\
    \            val romanNum = num * scala.math.pow(10, number.toInt)\n         \
    \   roman += romanNum.toString\n            i += 1\n        }\n        roman.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkfd1pvrt.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659806112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString\n        val numsArray\
    \ = numsString.toCharArray\n        val numsArrayLength = numsArray.length\n \
    \       var i = 0\n        while (i < numsArrayLength) {\n            val num\
    \ = numsArray(i).toInt\n            if (num < 1000) {\n                roman +=\
    \ numsArray(i).toString.toLower\n                i += 1\n            } else {\n\
    \                val num2 = num - 1000\n                val num3 = num2 / 100\n\
    \                val num4 = num2 - num3 * 100\n                val num5 = num3\
    \ / 10\n                val num6 = num3 - num5 * 10\n                val num7\
    \ = num5 / 1\n                val num8 = num5 - num7 * 1\n                val\
    \ num9 = num7 / 10\n                val num10 = num7 - num9 * 10\n           \
    \     val num11 = num9 / 100\n                val num12 = num9 - num11 * 100\n\
    \                val num13 = num11 / 1000\n                val num14 = num11 -\
    \ num13 * 1000\n                val num15 = num13 / 10000\n                val\
    \ num16 = num13 - num15 * 10000\n                val num17 = num15 / 100000\n\
    \                val num18 = num15 - num17 * 100000\n                val num19\
    \ = num17 / 1000000\n                val num20 = num17 - num19 * 1000000\n   \
    \             val num21 = num19 / 10000000\n                val num22 = num19\
    \ - num21 * 10000000\n                val num23 = num21 / 100000000\n        \
    \        val num24 = num21 - num23 * 100000000\n                val num25 = num23\
    \ / 1000000000\n                val num26 = num23 - num25 * 1000000000\n     \
    \           val num27 = num25 / 1000000000000\n                val num28 = num25\
    \ - num27 * 1000000000000\n                val num29 = num27 / 1000000000000000\n\
    \                val num30 = num27 - num29 * 1000000000000000\n              \
    \  val num31 = num29 / 1000000000000000000\n                val num32 = num29\
    \ - num31 * 1000000000000000000\n                val num33 = num31 / 1000000000000000000000\n\
    \                val num34 = num31 - num33 * 1000000000000000000000\n        \
    \        val num35 = num33 / 1000000000000000000000000\n                val num36\
    \ = num33 - num35 * 1000000000000000000\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphx2gzi3x.scala:81:0 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphx2gzi3x.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmphx2gzi3x.scala:52:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m52 |\e[0m       \
    \         \e[33mval\e[0m \e[36mnum27\e[0m = num25 / \e[31m1000000000000\e[0m\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                    number too large\n\e[31m\e[31m--\
    \ Error: /tmp/tmphx2gzi3x.scala:53:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m                \e[33mval\e[0m \e[36mnum28\e[0m = num25\
    \ - num27 * \e[31m1000000000000\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                             number too large\n\e[31m\e[31m-- Error: /tmp/tmphx2gzi3x.scala:54:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m54 |\e[0m       \
    \         \e[33mval\e[0m \e[36mnum29\e[0m = num27 / \e[31m1000000000000000\e[0m\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    number too large\n\e[31m\e\
    [31m-- Error: /tmp/tmphx2gzi3x.scala:55:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m                \e[33mval\e[0m \e[36mnum30\e[0m = num27\
    \ - num29 * \e[31m1000000000000000\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                                   number too large\n\e[31m\e[31m-- Error: /tmp/tmphx2gzi3x.scala:56:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m56 |\e[0m        "
  stdout: ''
  timestamp: 1659806113
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var romanNum\
    \ = number\n        var romanDigit = 0\n        while (romanNum > 0) {\n     \
    \       romanDigit += 1\n            romanNum = romanNum / 10\n        }\n   \
    \     romanDigit -= 1\n        roman.reverse.foreach(romanNum => {\n         \
    \   roman.append(romanNum.toString)\n        })\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpahdvxboe.scala:29)\n\tat Problem.main(tmpahdvxboe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeq5_s2x_.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeq5_s2x_.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in "
  stdout: ''
  timestamp: 1659806075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStr =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr2 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr3 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr4 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr5 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr6 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr7 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr8\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr9 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr10 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr11 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr12 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr13 = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr14 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr15 = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val numsStr16 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr17 = scala.collection.mutable.ListBuffer.empty[String]\n       \
    \ val numsStr18 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr19 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr20\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr21 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr22 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr23 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr24 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr25 = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr26 = scala.collection.mutable.ListBuffer.empty[String\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4rs189mm.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4rs189mm.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val num = scala.math.pow(10,\
    \ i)\n            val digit = num / number\n            val remainder = num %\
    \ number\n            roman += if (digit > 0) \"M\" else if (digit == 0) \"D\"\
    \ else \"C\"\n            if (remainder > 0) roman += if (remainder > 1) \"C\"\
    \ else \"D\"\n        }\n        roman.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzvubon5j.scala:21:21 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            roman += \e[33mif\e[0m (digit > \e[31m0\e\
    [0m) \e[31m\"M\"\e[0m \e[33melse\e[0m \e[33mif\e[0m (digit == \e[31m0\e[0m) \e\
    [31m\"D\"\e[0m \e[33melse\e[0m \e[31m\"C\"\e[0m\n\e[31m\e[31m   |\e[0m       \
    \              ^^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpzvubon5j.scala:22:40 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            \e[33mif\e[0m (remainder > \e[31m0\e[0m) roman += \e[33mif\e\
    [0m (remainder > \e[31m1\e[0m) \e[31m\"C\"\e[0m \e[33melse\e[0m \e[31m\"D\"\e\
    [0m\n\e[31m\e[31m   |\e[0m                                        ^^\e[0m\n\e\
    [31m   |\e[0m                                        expression expected but \e\
    [31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzvubon5j.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzvubon5j.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until nums) {\n\e[31m\e[31m   |\e[0m                          ^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (nums : Double)\n\e[31m\
    \   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659806119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsString = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString2 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString3 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString4 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString5 = scala.collection.mutable.ListBuffer[String]()\n        val numsString6\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString7 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString8 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString9 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString10 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString11 = scala.collection.mutable.ListBuffer[String]()\n        val numsString12\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString13 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString15 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString16 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString17 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString18 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString19 = scala.collection.mutable.ListBuffer[String]()\n        val numsString20\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString21 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString22 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString23 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString24 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString25 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString26 = scala.collection.mutable.ListBuffer[String]\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqbcilkug.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeq5_s2x_.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeq5_s2x_.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in "
  stdout: ''
  timestamp: 1659806075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap3 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap5 = scala.collection.mutable.Map[Long, String]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap7 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap8 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap10 = scala.collection.mutable.Map[Long, String]()\n        val numsMap11\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap12 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap13 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap14 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap15 = scala.collection.mutable.Map[Long, String]()\n        val numsMap16\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap17 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap18 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap19 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap20 = scala.collection.mutable.Map[Long, String]()\n        val numsMap21\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap22 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap23 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap24 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap25 = scala.collection.mutable.Map[Long, String]()\n        val numsMap26\
    \ = scala.collection.mutable.Map[Long, String]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp44cwj06r.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString\n        var index = 0\n\
    \        while (index < numsString.length) {\n            val num = nums(index)\n\
    \            val digit = num.toString.toInt\n            if (digit > 9) {\n  \
    \              val numString = num.toString.toInt\n                val numStringDigit\
    \ = numString.toInt\n                val numStringDigitString = numStringDigit.toString\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigitStringLength = numStringDigitString.length\n\
    \                val numStringDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgeku3s67.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgeku3s67.scala:77:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m77 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpgeku3s67.scala:15:20 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmpgeku3s67.scala:20:22 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(index)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgeku3s67.scala:27:20 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mval\e[0m \e[36mnumStringDigitStringLength\e\
    [0m = numStringDigitString.length\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumStringDigitStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mnumStringDigitStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgeku3s67.scala:28:20 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                \e[33mval\e[0m \e[36mnumStringDigitStringLength\e\
    [0m = numStringDigitString.length\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumStringDigitStringLength is already defined as \e[33mv"
  stdout: ''
  timestamp: 1659806117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ i = 0\n        while (i < number) {\n            roman += romanDigit(number\
    \ % 10)\n            number /= 10\n            i += 1\n        }\n        roman.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg_46cdk2.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            roman += romanDigit(number % \e[31m10\e[0m)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                  Not found: romanDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpg_46cdk2.scala:19:19 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpg_46cdk2.scala:22:14 --------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \        roman.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    scala.collection.mutable.ListBuffer[String]\n\e[31m\
    \   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659806121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsStr = nums.toString.reverse\n        val numsArr\
    \ = numsStr.split(\"\\\\.\")\n        val numsArr_length = numsArr.length\n  \
    \      val numsArr_length_2 = numsArr_length % 2\n        val numsArr_length_3\
    \ = numsArr_length % 3\n        val numsArr_length_4 = numsArr_length % 4\n  \
    \      val numsArr_length_5 = numsArr_length % 5\n        val numsArr_length_6\
    \ = numsArr_length % 6\n        val numsArr_length_7 = numsArr_length % 7\n  \
    \      val numsArr_length_8 = numsArr_length % 8\n        val numsArr_length_9\
    \ = numsArr_length % 9\n        val numsArr_length_10 = numsArr_length % 10\n\
    \        val numsArr_length_11 = numsArr_length % 11\n        val numsArr_length_12\
    \ = numsArr_length % 12\n        val numsArr_length_13 = numsArr_length % 13\n\
    \        val numsArr_length_14 = numsArr_length % 14\n        val numsArr_length_15\
    \ = numsArr_length % 15\n        val numsArr_length_16 = numsArr_length % 16\n\
    \        val numsArr_length_17 = numsArr_length % 17\n        val numsArr_length_18\
    \ = numsArr_length % 18\n        val numsArr_length_19 = numsArr_length % 19\n\
    \        val numsArr_length_20 = numsArr_length % 20\n        val numsArr_length_21\
    \ = numsArr_length % 21\n        val numsArr_length_22 = numsArr_length % 22\n\
    \        val numsArr_length_23 = numsArr_length % 23\n        val numsArr_length_24\
    \ = numsArr_length % 24\n        val numsArr_length_25 = numsArr_length % 25\n\
    \        val numsArr_length_26 = numsArr_length % 26\n        val numsArr_length_27\
    \ = numsArr_length % 27\n        val numsArr_length_28 = numsArr_length % \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnh5dqk6b.scala:46:48 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnumsArr_length_28\e[0m =\
    \ numsArr_length % \n\e[31m\e[31m   |\e[0m                                   \
    \             ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpnh5dqk6b.scala:15:20 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer.empty[\e[35mString\e\
    [0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnh5dqk6b.scala:47:5 ---------------------\e[0m\e\
    [0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659806120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilderBuilder2\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder3\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder4\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder5\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder6\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder7\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder8\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder9\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder10\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder11\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder12\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder13\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder14\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder15\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder16\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder17\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder18\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder19\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder20\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder21\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder22\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder23\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder24\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder25\
    \ = scala.collection.mutable.StringBuilder.new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptdjh3anc.scala:42:73 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder25\e[0m\
    \ = scala.collection.mutable.StringBuilder.\e[33mnew\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                                         ^^^\e\
    [0m\n\e[31m   |\e[0m                                 an identifier expected, but\
    \ 'new' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptdjh3anc.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsStr = nums.toString.reverse\n        val numsArr\
    \ = numsStr.split(\"\\\\.\")\n        val numsArrLength = numsArr.length\n   \
    \     val numsArrLength = numsArrLength - 1\n        val numsArrLength = numsArrLength\
    \ - 1\n        val numsArrLength = numsArrLength - 1\n        val numsArrLength\
    \ = numsArrLength - 1\n        val numsArrLength = numsArrLength - 1\n       \
    \ val numsArrLength = numsArrLength - 1\n        val numsArrLength = numsArrLength\
    \ - 1\n        val numsArrLength = numsArrLength - 1\n        val numsArrLength\
    \ = numsArrLength - 1\n        val numsArrLength = numsArrLength - 1\n       \
    \ val numsArrLength = numsArrLength - 1\n        val numsArrLength = numsArrLength\
    \ - 1\n        val numsArrLength = numsArrLength - 1\n        val numsArrLength\
    \ = numsArrLength - 1\n        val numsArrLength = numsArrLength - 1\n       \
    \ val numsArrLength = numsArrLength - 1\n        val numsArrLength = numsArrLength\
    \ - 1\n        val numsArrLength = numsArrLength - 1\n        val numsArrLength\
    \ = numsArrLength - 1\n        val numsArrLength = numsArrLength - 1\n       \
    \ val numsArrLength = numsArrLength - 1\n        val numsArrLength = numsArrLength\
    \ - 1\n        val numsArrLength = numsArrLength - 1\n        val numsArrLength\
    \ = numsArrLength - 1\n        val numsArrLength = numsArrLength - 1\n       \
    \ val numsArrLength = numsArrLength - 1\n        val numsArrLength = numsArrLength\
    \ - 1\n        val numsArrLength = numsArrLength - 1\n        val numsArrLength\
    \ = numsArrLength - 1\n        val numsArrLength = numsArrLength - 1\n       \
    \ val numsArrLength = numsArrLength - 1\n        val numsArrLength = numsArrLength\
    \ - 1\n        val numsArrLength = numsArrLength - 1\n        val numsArrLength\
    \ = numsArrLength - 1\n        val numsArrLength = numsArrLength - 1\n       \
    \ val numsArrLength = numsArrLength - 1\n        val numsArrLength = numsArrLength\
    \ - 1\n        val num\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_v97_ke1.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_v97_ke1.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArrLength\e[0m = numsArrLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnumsArrLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsArrLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_v97_ke1.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArrLength\e[0m = numsArrLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnumsArrLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsArrLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_v97_ke1.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArrLength\e[0m = numsArrLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnumsArrLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsArrLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_v97_ke1.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArrLength\e[0m = numsArrLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnumsArrLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsArrLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659806121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLen =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr8veut7l.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr8veut7l.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr8veut7l.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr8veut7l.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in "
  stdout: ''
  timestamp: 1659806087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsMap = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap2 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap3 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap4 = scala.collection.mutable.Map[Int, String]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap7 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap8 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap9 = scala.collection.mutable.Map[Int, String]()\n        val numsMap10\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap11 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap12 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap13 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap14 = scala.collection.mutable.Map[Int, String]()\n        val numsMap15\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap16 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap17 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap18 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap19 = scala.collection.mutable.Map[Int, String]()\n        val numsMap20\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap21 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap22 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap23 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap24 = scala.collection.mutable.Map[Int, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap26 = scala.collection.mutable.Map[Int,\
    \ String]\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphanweuw9.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzc1vhngr.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzc1vhngr.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp73w3u0qg.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp73w3u0qg.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStr =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr2 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr3 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr4 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr5 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr6 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr7 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr8\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr9 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr10 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr11 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr12 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr13 = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr14 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr15 = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val numsStr16 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr17 = scala.collection.mutable.ListBuffer.empty[String]\n       \
    \ val numsStr18 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr19 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr20\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr21 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr22 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr23 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr24 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr25 = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr26 = scala.collection.mutable.ListBuffer.empty[String\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4rs189mm.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4rs189mm.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5_dez5s5.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5_dez5s5.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ digits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigitsInRoman\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigitsInRomanInt\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigitsInRomanIntInt\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigitsInRomanIntIntInt\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigitsInRomanIntIntIntInt\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigitsInRomanIntIntIntIntInt\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigitsInRomanIntIntIntIntIntInt\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigitsInRomanIntIntIntIntIntIntInt\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigitsInRomanIntIntIntIntIntIntIntInt\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigitsInRomanIntIntIntIntIntIntIntIntInt\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigitsInRomanIntIntIntIntIntIntIntIntIntInt\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigitsInRomanIntIntIntIntIntIntIntIntIntIntInt\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigitsInRomanIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigitsInRomanIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigitsInRomanIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigitsInRomanIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigitsInRomanIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdg3y7261.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdg3y7261.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigitsInRomanIntIntIntIntIntIntIntIntIntIntIntIntIntInt\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigitsInRomanIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumDigitsInRomanIntIntIntIntIntIntIntIntIntIntIntIntIntInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpdg3y7261.scala:35:5 ---------------------\e[0m\e[0m\n\
    \e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659806120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap =\
    \ scala.collection.mutable.Map[Int, Int]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap4 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap7 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap8 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap9\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap10 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap11 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap12 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap13 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap14\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap15 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap16 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap17 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap20 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap21 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap22 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap25 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap26 = scala.collection.mutable.Map[Int, Int]\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcisz5wg6.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ hundredsTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsTens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsHundredsTens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsHundredsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsHundredsTens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsHundredsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsThousandsTens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsThousandsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsTens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsHundredsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsHundredsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsThousandsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph_jv0n_o.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val numsMap\
    \ = new scala.collection.mutable.HashMap[Long, String]()\n        val numsMap2\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap3\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap4\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap5\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap6\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap7\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap8\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap9\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap10\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap11\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap12\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap13\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap14\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap15\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap16\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap17\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap18\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap19\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap20\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap21\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap22\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap23\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap24\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val numsMap25\
    \ = new scala.collection.mutable.HashMap[String, Long]()\n        val num\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeq3d4qck.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpeq3d4qck.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5_dez5s5.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5_dez5s5.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeq5_s2x_.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeq5_s2x_.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpeq5_s2x_.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in "
  stdout: ''
  timestamp: 1659806075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5_dez5s5.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5_dez5s5.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val remainder\
    \ = number % i\n            number -= remainder\n            roman.append(if (remainder\
    \ == 0) \"M\" else if (remainder == 1) \"D\" else \"C\")\n        }\n        roman.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnpres0ks.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpnpres0ks.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    (nums : Double)\n\e[31m   |\e[0m        \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpnpres0ks.scala:19:19 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            number -= remainder\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value -= is not a member of Long - did you mean\
    \ number.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659806122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numsDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsDigit = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numsDigits = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsDigit = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numsDigits = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsDigit = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numsDigits = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsDigit = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numsDigits = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsDigit = scala.collection.mutable.ListBuffer.\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi_go8uj7.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi_go8uj7.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsDigits is already defined as \e[33mvalue\e[0m \e[35mnumsDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi_go8uj7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsDigit is already defined as \e[33mvalue\e[0m \e[35mnumsDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi_go8uj7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsDigits is already defined as \e[33mvalue\e[0m \e[35mnumsDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi_go8uj7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsDigit is already de"
  stdout: ''
  timestamp: 1659806121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val digits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val tens = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val thousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val hundredsTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val hundredsHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val thousandsTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n  \
    \      val thousandsHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredsThousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandsThousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredsHundredsTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredsHundredsHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandsHundredsTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandsHundredsHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredsThousandsTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredsThousandsHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandsThousandsTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandsThousandsHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredsHundredsThousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredsHundredsHundredsTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredsHundredsHundredsHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandsHundredsThousandsTens = scala.collection.\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps9hrxn66.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps9hrxn66.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap = scala.collection.mutable.Map[Long,\
    \ String]()\n        val digitsMap = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap2 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val digitsMap2 = scala.collection.mutable.Map[Int, String]()\n        val numsMap3\
    \ = scala.collection.mutable.Map[Long, String]()\n        val digitsMap3 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap4 = scala.collection.mutable.Map[Long, String]()\n\
    \        val digitsMap4 = scala.collection.mutable.Map[Int, String]()\n      \
    \  val numsMap5 = scala.collection.mutable.Map[Long, String]()\n        val digitsMap5\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap6 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val digitsMap6 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap7 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val digitsMap7 = scala.collection.mutable.Map[Int, String]()\n        val numsMap8\
    \ = scala.collection.mutable.Map[Long, String]()\n        val digitsMap8 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[Long, String]()\n\
    \        val digitsMap9 = scala.collection.mutable.Map[Int, String]()\n      \
    \  val numsMap10 = scala.collection.mutable.Map[Long, String]()\n        val digitsMap10\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap11 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val digitsMap11 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap12 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val digitsMap12 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap13 = scala.collection.mutable.Map[Long, String]()\n        val digitsMap13\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap14 = scal\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1am93i5l.scala:44:24 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mnumsMap14\e[0m = scal\n\e\
    [31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0m        \
    \                Not found: scal\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1am93i5l.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqmikpzra.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqmikpzra.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmikpzra.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e[35mnumDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmikpzra.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmikpzra.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e"
  stdout: ''
  timestamp: 1659806082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        var i = 0\n        while(i\
    \ < number) {\n            val temp = number % 100\n            roman.append(temp.toString)\n\
    \            nums.append(temp)\n            number /= 100\n            i += 1\n\
    \        }\n        while(nums.length > 0) {\n            val temp = nums.head\n\
    \            nums.clear()\n            roman.append(temp.toString)\n        }\n\
    \        roman.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr4v81xma.scala:22:19 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            number /= \e[31m100\e[0m\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not\
    \ a member of Long - did you mean number.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659806122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsStr = nums.toString.reverse\n        var index\
    \ = 0\n        while (index < numsStr.length) {\n            val num = nums(index)\n\
    \            val digit = numsStr(index).toInt\n            val romanDigit = if\
    \ (digit > 0) romanDigit(digit) else 0\n            roman += romanDigit\n    \
    \        index += 1\n        }\n        roman.reverse.mkString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp04rvyvoy.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp04rvyvoy.scala:20:22 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(index)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp04rvyvoy.scala:22:44 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mromanDigit\e[0m = \e\
    [33mif\e[0m (digit > \e[31m0\e[0m) romanDigit(digit) \e[33melse\e[0m \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                                            ^\e[0m\n\
    \e[31m   |\e[0m                                   Recursive \e[33mvalue\e[0m \e\
    [35mromanDigit\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659806120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsLength = nums.length\n        for (i<-0 until\
    \ numsLength) {\n            val num = nums(i)\n            val remainder = number\
    \ % num\n            number -= remainder\n            roman += if (remainder ==\
    \ 0) \"M\" else if (remainder == 1) \"D\" else \"C\"\n        }\n        roman.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsox8fkr7.scala:22:21 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            roman += \e[33mif\e[0m (remainder == \e[31m0\e\
    [0m) \e[31m\"M\"\e[0m \e[33melse\e[0m \e[33mif\e[0m (remainder == \e[31m1\e[0m)\
    \ \e[31m\"D\"\e[0m \e[33melse\e[0m \e[31m\"C\"\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                  ^^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsox8fkr7.scala:15:20 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpsox8fkr7.scala:17:30 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsLength\e[0m = nums.length\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value length is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpsox8fkr7.scala:19:22 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsox8fkr7.scala:21:19 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            number -= remainder\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean number.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1659806123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val num = scala.math.pow(10,\
    \ i)\n            val digit = scala.math.pow(10, num.toInt)\n            val romanDigit\
    \ = scala.math.pow(10, digit.toInt)\n            val romanDigitString = romanDigit.toString\n\
    \            val romanDigitStringLength = romanDigitString.length\n          \
    \  val romanDigitStringWithLeadingZeros = romanDigitString.padTo(romanDigitStringLength,\
    \ \"0\")\n            val romanDigitStringWithTrailingZeros = romanDigitStringWithLeadingZeros.reverse\n\
    \            val romanDigitStringWithTrailingZeros = romanDigitStringWithTrailingZeros.reverse\n\
    \            val romanDigitStringWithLeadingZeros = romanDigitStringWithLeadingZeros.reverse\n\
    \            val romanDigitStringWithLeadingZeros = romanDigitStringWithLeadingZeros.reverse\n\
    \            val romanDigitStringWithLeadingZeros = romanDigitStringWithLeadingZeros.reverse\n\
    \            val romanDigitStringWithLeadingZeros = romanDigitStringWithLeadingZeros.reverse\n\
    \            val romanDigitStringWithLeadingZeros = romanDigitStringWithLeadingZeros.reverse\n\
    \            val romanDigitStringWithLeadingZeros = romanDigitStringWithLeadingZeros.reverse\n\
    \            val romanDigitStringWithLeadingZeros = romanDigitStringWithLeadingZeros.reverse\n\
    \            val romanDigitStringWithLeadingZeros = romanDigitStringWithLeadingZeros.reverse\n\
    \            val romanDigitStringWithLeadingZeros = romanDigitStringWithLeadingZeros.reverse\n\
    \            val romanDigitStringWithLeadingZeros = romanDigitStringWithLeadingZeros.reverse\n\
    \            val romanDigitStringWithLeadingZeros = romanDigitStringWithLeadingZeros.reverse\n\
    \            val romanDigitStringWithLeadingZeros = romanDigitStringWithLeadingZeros.reverse\n\
    \            val romanDigitStringWithLeadingZeros = romanDigitStringWithLeadingZeros.reverse\n\
    \            val romanDigitStringWithLeadingZeros = romanDigitStringWithLeadingZeros.reverse\n\
    \            val romanDigitStringWithLeadingZeros = romanDigitStringWith\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpompkpfzs.scala:60:0 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpompkpfzs.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpompkpfzs.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until nums) {\n\e[31m\e[31m   |\e[0m                          ^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (nums : Double)\n\e[31m\
    \   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpompkpfzs.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mromanDigitStringWithTrailingZeros\e\
    [0m = romanDigitStringWithTrailingZeros.reverse\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mromanDigitStringWithTrailingZeros is already defined as \e\
    [33mvalue\e[0m \e[35mromanDigitStringWithTrailingZeros\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpompkpfzs.scala:26:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e\
    [0m \e[36mromanDigitStringWithLeadingZeros\e[0m = romanDigitStringWithLeadingZeros.reverse\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mromanDigitStringWithLeadingZeros is already defined as \e\
    [33mvalue\e[0m \e[35mromanDigitStringWithLeadingZeros\e[0m\n\e[31m   |\e[0m\n\e\
    [31m"
  stdout: ''
  timestamp: 1659806123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer(\n            \"M\", \"\
    CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\"\
    , \"I\"\n        )\n        val romanNum = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanNumInt = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanNumInt2 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanNumInt3 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanNumInt4 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanNumInt5 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanNumInt6 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanNumInt7 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanNumInt8 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanNumInt9 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanNumInt10 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanNumInt11 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpl2bzk1vs.scala:51:27 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mromanNumInt11\e[0m = \n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl2bzk1vs.scala:52:5 ---------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659806122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var current\
    \ = 0\n        var next = 1\n        var last = 0\n        while(number > 0){\n\
    \            current = next\n            next = number % 10\n            number\
    \ /= 10\n            if(next > 0){\n                roman += last.toString\n \
    \               last += next\n            }\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqkbfn8vn.scala:21:19\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            next = number % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Found:    Long\n\e[31m   |\e[0m                 \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqkbfn8vn.scala:22:19\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            number /= \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value /= is not a member of Long - did you mean number.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659806123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val remainder\
    \ = number % i\n            number -= remainder\n            roman.append(remainder.toString)\n\
    \        }\n        roman.foldLeft(\"\") { (acc, x) => acc + x.toLowerCase }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxwb0khfb.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpxwb0khfb.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    (nums : Double)\n\e[31m   |\e[0m        \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpxwb0khfb.scala:19:19 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            number -= remainder\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value -= is not a member of Long - did you mean\
    \ number.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659806123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsString\
    \ = scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzx_aoym9.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzx_aoym9.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mStringBuilder\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzx_aoym9.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzx_aoym9.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzx_aoym9.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e["
  stdout: ''
  timestamp: 1659806123
