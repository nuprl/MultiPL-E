name: HumanEval_155_even_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n    // ((1l,\
  \ 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
  \ : Long) : Tuple2[Long, Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
  \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
  \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
  \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
  \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
completions: ["        val even = num.toString.filter(_ % 2 == 0).length\n       \
    \ val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "  \
    \      val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        val even = num.toString.filter(_ % 2 ==\
    \ 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n      \
    \  (even, odd)", "        val even = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(x => x % 2 != 0).length\n        (even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val evenCount = 0\n        val oddCount = 0\n        val numStr = num.toString\n\
    \        for(i <- 0 until numStr.length){\n            val digit = numStr(i)\n\
    \            if(digit.toInt == 0){\n                evenCount += 1\n         \
    \   }else{\n                oddCount += 1\n            }\n        }\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_.isDigit).filter(x => x\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_.isDigit).filter(x\
    \ => x % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 == 1).length\n        Tuple2(even, odd)", " \
    \       val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 == 1).length\n        (even, odd)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        Tuple2(even, odd)", " \
    \       val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evens = num.toString.filter(_\
    \ % 2 == 0).length\n        val odds = num.toString.filter(_ % 2 == 1).length\n\
    \        (evens, odds)", "        val evenCount = num.toString.count(_ % 2 ==\
    \ 0)\n        val oddCount = num.toString.count(_ % 2 != 0)\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 == 1).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val evens = num.toString.filter(_ % 2 == 0).length\n\
    \        val odds = num.toString.filter(_ % 2 != 0).length\n        (evens, odds)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        Tuple2(even, odd)", " \
    \       val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 == 1).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evens = num.toString.filter(_ % 2 == 0).length\n        val odds =\
    \ num.toString.filter(_ % 2 != 0).length\n        (evens, odds)", "        val\
    \ even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evenCount = num.toString.filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        val even = num.toString.filter(_ % 2\
    \ == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n   \
    \     (even, odd)", "        var even = 0\n        var odd = 0\n        var numStr\
    \ = num.toString\n        var evenStr = numStr.filter(_ % 2 == 0)\n        var\
    \ oddStr = numStr.filter(_ % 2 != 0)\n        evenStr.foreach(x => even += x)\n\
    \        oddStr.foreach(x => odd += x)\n        (even, odd)", "        val evenCount\
    \ = num.toString.filter(_ % 2 == 0).length\n        val oddCount = num.toString.filter(_\
    \ % 2 == 1).length\n        (evenCount, oddCount)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        Tuple2(even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val evens = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odds = num.toString.filter(x => x % 2 != 0).length\n        (evens,\
    \ odds)", "        val even = num.toString.filter(_ % 2 == 0).length\n       \
    \ val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "  \
    \      var even = 0\n        var odd = 0\n        while(num > 0) {\n         \
    \   val digit = num % 10\n            if(digit % 2 == 0) {\n                even\
    \ += 1\n            } else {\n                odd += 1\n            }\n      \
    \      num /= 10\n        }\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        val even = num.toString.filter(_ % 2 ==\
    \ 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n      \
    \  (even, odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 == 1).length\n        (evenCount,\
    \ oddCount)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 == 1).length\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 == 1).length\n        (even, odd)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "     \
    \   val even = num.toString.filter(x => x % 2 == 0).length\n        val odd =\
    \ num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "       \
    \ val evenCount = 0\n        val oddCount = 0\n        val digits = num.toString.reverse.grouped(2).map(_.reverse).map(_.toInt)\n\
    \        digits.foreach { digit =>\n            if (digit % 2 == 0) {\n      \
    \          evenCount += 1\n            } else {\n                oddCount += 1\n\
    \            }\n        }\n        (evenCount, oddCount)", "        val evenCount\
    \ = num.toString.filter(_ % 2 == 0).length\n        val oddCount = num.toString.filter(_\
    \ % 2 != 0).length\n        (evenCount, oddCount)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 == 1).length\n        (even, odd)", "        val evenCount = num.toString.filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        val even = num.toString.filter(_ % 2\
    \ == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n   \
    \     (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  var evenCount = 0\n        var oddCount = 0\n        var temp = 0\n       \
    \ for(i <- 0 until num.toString.length) {\n            temp = num.toString.charAt(i).toInt\n\
    \            if(temp % 2 == 0) {\n                evenCount += 1\n           \
    \ } else {\n                oddCount += 1\n            }\n        }\n        return\
    \ (evenCount, oddCount)", "        val even = num.toString.filter(x => x % 2 ==\
    \ 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n \
    \       (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        var even = 0\n        var odd = 0\n        var digits = num.toString.reverse.grouped(2).map(_.toInt)\n\
    \        digits.foreach(x => if (x % 2 == 0) even += x else odd += x)\n      \
    \  (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val evenCount = 0\n        val oddCount = 0\n        val digits = num.toString.reverse.grouped(2).map(_.reverse).map(_.toInt)\n\
    \        digits.foreach { digit =>\n            if (digit % 2 == 0) {\n      \
    \          evenCount += 1\n            } else {\n                oddCount += 1\n\
    \            }\n        }\n        (evenCount, oddCount)", "        val even =\
    \ num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 == 1).length\n        (even, odd)",
  "        var even = 0\n        var odd = 0\n        var numStr = num.toString\n\
    \        var numStrLen = numStr.length\n        var evenStr = \"\"\n        var\
    \ oddStr = \"\"\n        var evenStrLen = 0\n        var oddStrLen = 0\n     \
    \   var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n\
    \        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0", "        val evens = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odds = num.toString.filter(_ % 2 == 1).length\n        (evens, odds)", "   \
    \     val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        var even = 0\n        var odd\
    \ = 0\n        var digit = 0\n        var count = 0\n        while(num > 0) {\n\
    \            digit = num % 10\n            num = num / 10\n            count =\
    \ count + 1\n            if(digit == 0) {\n                even = even + 1\n \
    \           } else {\n                odd = odd + 1 \n            }\n        }\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "     \
    \   val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        var even = 0\n        var odd = 0\n    \
    \    var numString = num.toString\n        for(i <- 0 until numString.length)\
    \ {\n            if(numString.charAt(i).isDigit) {\n                if(numString.charAt(i).isDigit)\
    \ {\n                    even += numString.charAt(i).toLong\n                }\
    \ else {\n                    odd += numString.charAt(i).toLong\n            \
    \    }\n            }\n        }\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 == 1).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evens = num.toString.filter(_ % 2 == 0).length\n        val odds =\
    \ num.toString.filter(_ % 2 != 0).length\n        (evens, odds)", "        val\
    \ evens = num.toString.filter(_ % 2 == 0).length\n        val odds = num.toString.filter(_\
    \ % 2 != 0).length\n        (evens, odds)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evenCount = 0\n        val oddCount = 0\n        val numStr = num.toString\n\
    \        for(i <- 0 until numStr.length){\n            val digit = numStr(i)\n\
    \            if(digit % 2 == 0){\n                evenCount += 1\n           \
    \ }\n            else{\n                oddCount += 1\n            }\n       \
    \ }\n        (evenCount, oddCount)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evenCount = num.toString.filter(x => x % 2 == 0).length\n        val\
    \ oddCount = num.toString.filter(x => x % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 == 1).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_.isDigit).filter(_.isEven).length\n\
    \        val odd = num.toString.filter(_.isDigit).filter(_.isOdd).length\n   \
    \     (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val evenCount = 0\n        val oddCount = 0\n\
    \        val numStr = num.toString\n        val numStrLen = numStr.length\n  \
    \      val evenStr = \"\"\n        val oddStr = \"\"\n        var i = 0\n    \
    \    while (i < numStrLen) {\n            if (numStr(i) % 2 == 0) {\n        \
    \        evenCount += 1\n                evenStr += numStr(i)\n            } else\
    \ {\n                oddCount += 1\n                oddStr += numStr(i)\n    \
    \        }\n            i += 1\n        }\n        (evenCount, oddCount)", " \
    \       var even = 0\n        var odd = 0\n        var count = 0\n        while(num\
    \ > 0) {\n            val digit = num % 10\n            num /= 10\n          \
    \  count += digit\n            if(digit % 2 == 0) {\n                even += digit\n\
    \            } else {\n                odd += digit\n            }\n        }\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 == 1).length\n        Tuple2(even,\
    \ odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n   \
    \     val oddCount = num.toString.filter(_ % 2 == 1).length\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evenCount = num.toString.filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        var even = 0\n        var odd = 0\n\
    \        var digits = num.toString.reverse.map(_.toInt)\n        digits.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                even += 1\n           \
    \ } else {\n                odd += 1\n            }\n        })\n        return\
    \ (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n \
    \       val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "     \
    \   val even = num.toString.filter(x => x % 2 == 0).length\n        val odd =\
    \ num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "       \
    \ val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(x => x % 2 != 0).length\n        (even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val evenCount = 0\n        val oddCount = 0\n        val numString = num.toString\n\
    \        val numArray = numString.toCharArray\n        for(i <- 0 until numArray.length){\n\
    \            val digit = numArray(i)\n            if(digit == '0'){\n        \
    \        evenCount += 1\n            }\n            if(digit == '1'){\n      \
    \          oddCount += 1\n            }\n        }\n        (evenCount, oddCount)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        Tuple2(even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        val even = num.toString.filter(x => x %\
    \ 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        var even = 0\n        var odd = 0\n        var numStr = num.toString\n\
    \        var evenStr = numStr.filter(_ % 2 == 0)\n        var oddStr = numStr.filter(_\
    \ % 2 != 0)\n        evenStr.foreach(x => even += x)\n        oddStr.foreach(x\
    \ => odd += x)\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        val even = num.toString.filter(x => x %\
    \ 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        var even = 0\n        var odd = 0\n        var\
    \ digits = num.toString.toList\n        for(i <- 0 until digits.size) {\n    \
    \        if(digits(i).asInstanceOf[Int] % 2 == 0) {\n                even += 1\n\
    \            } else {\n                odd += 1\n            }\n        }\n  \
    \      (even, odd)", "        val evens = num.toString.filter(_ % 2 == 0).length\n\
    \        val odds = num.toString.filter(_ % 2 != 0).length\n        (evens, odds)",
  "        val evenCount = num.toString.filter(_ % 2 == 0).length\n        val oddCount\
    \ = num.toString.filter(_ % 2 != 0).length\n        (evenCount, oddCount)", " \
    \       val evenCount = num.toString.filter(_ % 2 == 0).length\n        val oddCount\
    \ = num.toString.filter(_ % 2 == 1).length\n        (evenCount, oddCount)", " \
    \       val evenCount = num.toString.filter(_ % 2 == 0).length\n        val oddCount\
    \ = num.toString.filter(_ % 2 != 0).length\n        (evenCount, oddCount)", " \
    \       val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        val evens = num.toString.filter(_ % 2 ==\
    \ 0).length\n        val odds = num.toString.filter(_ % 2 != 0).length\n     \
    \   (evens, odds)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evenCount = num.toString.filter(_ % 2 == 0).length\n        val oddCount\
    \ = num.toString.filter(_ % 2 != 0).length\n        (evenCount, oddCount)", " \
    \       val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 == 1).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        Tuple2(even, odd)", " \
    \       val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "     \
    \   val even = num.toString.filter(x => x % 2 == 0).length\n        val odd =\
    \ num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "       \
    \ val even = num.toString.filter(x => x % 2 == 0).length\n        val odd = num.toString.filter(x\
    \ => x % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 == 1).length\n        (even, odd)", "        val evenCount = 0\n       \
    \ val oddCount = 0\n        val numAsString = num.toString\n        for(i <- 0\
    \ until numAsString.length) {\n            val digit = numAsString.charAt(i)\n\
    \            if(digit == '0') {\n                evenCount += 1\n            }\
    \ else if(digit == '1') {\n                oddCount += 1\n            }\n    \
    \    }\n        (evenCount, oddCount)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 == 1).length\n\
    \        (even, odd)", "        val evens = num.toString.filter(_ % 2 == 0).length\n\
    \        val odds = num.toString.filter(_ % 2 == 1).length\n        (evens, odds)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "     \
    \   val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 == 1).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 == 1).length\n        Tuple2(even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n   \
    \     val oddCount = num.toString.filter(_ % 2 == 1).length\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(x => x % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val even = num.toString.filter(x => x % 2 == 0).length\n   \
    \     val odd = num.toString.filter(x => x % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "     \
    \   val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(x => x % 2 != 0).length\n        (even,\
    \ odd)", "        val evens = num.toString.filter(_ % 2 == 0).length\n       \
    \ val odds = num.toString.filter(_ % 2 == 1).length\n        (evens, odds)", " \
    \       val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val evens = num.toString.filter(_ % 2 == 0).length\n  \
    \      val odds = num.toString.filter(_ % 2 != 0).length\n        (evens, odds)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)"]
stop_tokens:
- "\n    }\n"
