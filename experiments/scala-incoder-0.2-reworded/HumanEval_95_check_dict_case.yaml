name: HumanEval_95_check_dict_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a map, return true if all keys are strings in lower \n    // case\
  \ or all keys are strings in upper case, else return false.\n    // The function\
  \ should return false is the given map is empty.\n    // Examples:\n    // >>> checkDictCase((Map[String,String](\"\
  a\" -> \"apple\", \"b\" -> \"banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"\
  a\" -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
  \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
  , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
  \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String]) : Boolean\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
  banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" ->\
  \ \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        if (dict.isEmpty)\n            return false\n        var lower\
    \ = true\n        var upper = true\n        for (key <- dict.keySet) {\n     \
    \       if (key.isLower)\n                lower = false\n            if (key.isUpper)\n\
    \                upper = false\n        }\n        return lower || upper", " \
    \       val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  || upperCaseDict.isEmpty", "        val keys =\
    \ dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper =\
    \ keys.map(_.toUpperCase)\n        val both = lower ++ upper\n        val isAllLowerCase\
    \ = lower.forall(_.isLower)\n        val isAllUpperCase = upper.forall(_.isUpper)\n\
    \        isAllLowerCase && isAllUpperCase && both.forall(_.toString.toLowerCase\
    \ == _.toString.toUpperCase)", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) return true\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n   \
    \     val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict =\
    \ dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        return lowerCaseDict.isEmpty() && upperCaseDict.isEmpty()", "       \
    \ val keys = dict.keys\n        if(keys.length == 0) return false\n        val\
    \ lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        lowerCaseKeys.isEmpty\
    \ == upperCaseKeys.isEmpty", "        val keys = dict.keys\n        val lower\
    \ = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n   \
    \     val isLower = lower.forall(_.isInstanceOf[String])\n        val isUpper\
    \ = upper.forall(_.isInstanceOf[String])\n        isLower && isUpper", "     \
    \   val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n      \
    \  val upper = keys.map(_.toUpperCase)\n        val result = lower.forall(x =>\
    \ upper.contains(x))\n        !result", "        val keys = dict.keys\n      \
    \  if (keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty() && upperCaseDict.isEmpty()", "        val keys\
    \ = dict.keys\n        if (keys.length == 0) return false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keySet\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        val lowerCaseKeys = keys.filter(_.isLower)\n        val allKeys = upperCaseKeys\
    \ ++ lowerCaseKeys\n        allKeys.forall(key => dict.get(key).isInstanceOf[String])",
  "        val keys = dict.keySet\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        val lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeySet\
    \ = upperCaseKeys.toSet\n        val lowerCaseKeySet = lowerCaseKeys.toSet\n \
    \       if(upperCaseKeySet.isEmpty && lowerCaseKeySet.isEmpty)\n            return\
    \ true\n        if(upperCaseKeySet.isEmpty || lowerCaseKeySet.isEmpty)\n     \
    \       return false\n        if(upperCaseKeySet.size != lowerCaseKeySet.size)\n\
    \            return false\n        val upperCaseKeySetIterator = upperCaseKeySet.iterator\n\
    \        val lowerCaseKeySetIterator = lowerCaseKeySet.iterator\n        while(upperCaseKeySetIterator.hasNext\
    \ && lowerCaseKeySetIterator.hasNext) {\n            val upperCaseKey = upperCaseKeySetIterator.next\n\
    \            val lowerCaseKey = lowerCaseKeySetIterator.next\n            if(upperCaseKey.toString.toLowerCase\
    \ != lowerCaseKey.toString.toLowerCase || upperCaseKey.toString.toUpperCase !=\
    \ lowerCaseKey.toString.toUpperCase)\n                return false\n        }\n\
    \        return true", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict\
    \ = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty  || upperCaseDict.isEmpty",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty\
    \  && upperCaseDict.isEmpty", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n  \
    \      val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty\
    \  && upperCaseDict.isEmpty", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(lowerCaseKeys.contains)\n       \
    \ val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n        lowerCaseDict.isEmpty\
    \  && upperCaseDict.isEmpty", "        val keys = dict.keys\n        if(keys.isEmpty)\
    \ false\n        else if(keys.forall(_.isInstanceOf[String])) true\n        else\
    \ false", "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase.nonEmpty)\n        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n\
    \        lowerCaseKeys.forall(lowerCaseDict.contains)\n        upperCaseKeys.forall(upperCaseDict.contains)",
  "        val keys = dict.keys\n        if(keys.length == 0) return false\n     \
    \   val lowerKeys = keys.map(_.toLowerCase)\n        val upperKeys = keys.map(_.toUpperCase)\n\
    \        lowerKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = lowerCaseKeys.toSet\n        val upperCaseDict = upperCaseKeys.toSet\n   \
    \     val allKeys = lowerCaseKeys ++ upperCaseKeys\n        val allDict = lowerCaseDict\
    \ ++ upperCaseDict\n        val isAllKeysString = allKeys.forall(_.isInstanceOf[String])\n\
    \        val isAllDictString = allDict.forall(_.isInstanceOf[String])\n      \
    \  val isAllKeysStringOrAllDictString = isAllKeysString || isAllDictString\n \
    \       val isAllKeysStringOrAllDictStringOrBothEmpty = isAllKeysStringOrAllDictString\
    \ || keys.isEmpty\n        val isAllKeysStringOrAllDictStringOrBothEmptyOrBothNotEmpty\
    \ = isAllKeysStringOrAllDictStringOrBothEmpty || allKeys.forall(_.isInstanceOf[String])\n\
    \        val isAllKeysStringOrAllDictStringOrBothEmptyOrBothNotEmptyOrBothEmpty\
    \ = isAllKeysStringOrAllDictStringOrBothEmptyOrBothNotEmpty || keys.isEmpty\n\
    \        val isAllKeysStringOrAllDictStringOrBothEmptyOrBothNotEmptyOrBothNotEmpty\
    \ = isAllKeysStringOrAllDictStringOrBothEmptyOrBothNotEmptyOrBothEmpty\n     \
    \   val isAllKeysStringOrAllDictStringOrBothEmptyOrBothNotEmptyOrBothNotEmptyOrBothEmpty\
    \ = isAllKeysStringOrAllDictStringOrBothEmptyOrBothNotEmptyOrBothNotEmptyOrBothEmpty\n\
    \        val isAllKeysStringOrAllDictStringOrBothEmptyOrBothNotEmptyOrBothNotEmptyOrBothNotEmpty\
    \ = isAllKeysStringOrAllDictStringOrBothEmptyOrBothNotEmptyOrBothNotEmptyOrBothNotEmpty\n\
    \        val isAllKeysStringOrAllDictStringOrBothEmptyOrBothNotEmptyOrBothNotEmptyOrBothNotEmptyOrBothEmpty\
    \ = isAllKeysStringOrAllDictStringOrBothEmptyOrBothNotEmptyOrBothNotEmptyOrBothNotEmptyOrBothEmpty\n\
    \        val isAllKeysStringOrAllDictStringOrBothEmptyOrBothNotEmptyOrBothNotEmptyOrBothNotEmptyOrBothNotEmptyOrBothEmpty\
    \ = isAllKeysStringOrAllDictStringOrBothEmptyOrBothNotEmptyOrBothNotEmptyOrBothNotEmptyOrBothNot",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase.nonEmpty)\n        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n\
    \        lowerCaseKeys.forall(lowerCaseDict.contains) &&\n        upperCaseKeys.forall(upperCaseDict.contains)",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        if (dict.isEmpty)\
    \ false\n        else (dict.keys.toSet.toList.forall(_.isInstanceOf[String]) &&\
    \ dict.keys.toSet.toList.forall(_.isInstanceOf[String]) && dict.keys.toSet.toList.forall(_.toLowerCase\
    \ == _.toLowerCase))", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val allLowerCaseKeys = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val allUpperCaseKeys = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        allLowerCaseKeys && allUpperCaseKeys", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty\
    \  || upperCaseDict.isEmpty", "        val keys = dict.keys\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val allKeys = upperCaseKeys ++ lowerCaseKeys\n        allKeys.forall(key\
    \ => dict.get(key) != null)", "        if (dict.isEmpty) false\n        else (dict.keys.toSet.toList.map(_.toLowerCase).toSet\
    \ == dict.keys.toSet.toList.map(_.toUpperCase).toSet)", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(_.toLowerCase.forall(_.isLetter))\n\
    \        val upperCaseDict = dict.filterKeys(_.toUpperCase.forall(_.isLetter))\n\
    \        val lowerCaseDictSize = lowerCaseDict.size\n        val upperCaseDictSize\
    \ = upperCaseDict.size\n        val isDictCase = lowerCaseDictSize == upperCaseDictSize\
    \ && lowerCaseKeys == upperCaseKeys\n        isDictCase", "        val keys =\
    \ dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n        val\
    \ lowerCaseKeys = keys.map(_.toLowerCase)\n        val isAllUpper = upperCaseKeys.forall(_.equals(keys))\n\
    \        val isAllLower = lowerCaseKeys.forall(_.equals(keys))\n        isAllUpper\
    \ && isAllLower", "        val keys = dict.keySet\n        val lowerCaseKeys =\
    \ keys.filter(_.isLower)\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty", "        val keys =\
    \ dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        val isLowerCase = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val isUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n    \
    \    val isAllLowerCase = isLowerCase && isUpperCase\n        val isAllUpperCase\
    \ = isUpperCase && isLowerCase\n        isAllLowerCase || isAllUpperCase", " \
    \       val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase.forall(_.isLetter))\n        val upperCaseDict\
    \ = dict.filterKeys(_.toUpperCase.forall(_.isLetter))\n        lowerCaseKeys.isEmpty\
    \  ||  upperCaseKeys.isEmpty  ||  lowerCaseDict.size == upperCaseDict.size ||\
    \ lowerCaseDict.size == keys.size || upperCaseDict.size == keys.size", "     \
    \   val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val isAllUpperCase\
    \ = upperCaseKeys.forall(_.equals(keys))\n        val isAllLowerCase = lowerCaseKeys.forall(_.equals(keys))\n\
    \        isAllUpperCase && isAllLowerCase", "        val keys = dict.keys\n  \
    \      val lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeys =\
    \ keys.filter(_.isUpper)\n        lowerCaseKeys.forall(key => upperCaseKeys.contains(key))\
    \ || upperCaseKeys.forall(key => lowerCaseKeys.contains(key))", "        val keys\
    \ = dict.keys\n        if(keys.length == 0) return true\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict\
    \ = dict.filterKeys(upperCaseKeys)\n        return lowerCaseDict.isEmpty && upperCaseDict.isEmpty",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        lowerCaseKeys.forall(key\
    \ => upperCaseKeys.contains(key)) || upperCaseKeys.forall(key => lowerCaseKeys.contains(key))",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val isLowerOrUpper = lower\
    \ ++ upper.forall(_.contains(_))\n        !isLowerOrUpper.isEmpty", "        val\
    \ keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n    \
    \    val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict =\
    \ lowerCaseKeys.toMap\n        val upperCaseDict = upperCaseKeys.toMap\n     \
    \   val keysSet = keys.toSet\n        val lowerCaseKeysSet = lowerCaseKeys.toSet\n\
    \        val upperCaseKeysSet = upperCaseKeys.toSet\n        val lowerCaseDictSet\
    \ = lowerCaseDict.toSet\n        val upperCaseDictSet = upperCaseDict.toSet\n\
    \        val keysSetSet = keysSet.toSet\n        val lowerCaseKeysSetSet = lowerCaseKeysSet.toSet\n\
    \        val upperCaseKeysSetSet = upperCaseKeysSet.toSet\n        val lowerCaseDictSetSet\
    \ = lowerCaseDictSet.toSet\n        val upperCaseDictSetSet = upperCaseDictSet.toSet\n\
    \        val keysSetSetSet = keysSetSet.toSet\n        val lowerCaseKeysSetSetSet\
    \ = lowerCaseKeysSetSet.toSet\n        val upperCaseKeysSetSetSet = upperCaseKeysSetSet.toSet\n\
    \        val lowerCaseDictSetSetSet = lowerCaseDictSetSet.toSet\n        val upperCaseDictSetSetSet\
    \ = upperCaseDictSetSet.toSet\n        val keysSetSetSetSet = keysSetSetSet.toSet\n\
    \        val lowerCaseKeysSetSetSetSet = lowerCaseKeysSetSetSet.toSet\n      \
    \  val upperCaseKeysSetSetSetSet = upperCaseKeysSetSetSet.toSet\n        val lowerCaseDictSetSetSetSet\
    \ = lowerCaseDictSetSetSet.toSet\n        val upperCaseDictSetSetSetSet = upperCaseDictSetSetSet.toSet\n\
    \        val keysSetSetSetSetSet = keysSetSetSetSet.toSet\n        val lowerCaseKeysSetSetSetSetSet\
    \ = lowerCaseKeysSetSetSetSet.toSet\n        val upperCaseKeysSetSetSetSetSet\
    \ = upperCaseKeysSetSetSetSet.toSet\n        val lowerCaseDictSetSetSetSetSet\
    \ = lowerCaseDictSetSetSetSet.toSet\n        val upperCaseDictSetSetSetSetSet\
    \ = upperCaseDictSetSetSetSet.toSet\n        val keysSetSetSetSetSetSet = keysSetSetSetSetSet.toSet\n\
    \        val lowerCaseKeysSetSetSetSetSetSet = lowerCase", "        val keys =\
    \ dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key =>\
    \ dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeys\
    \ = keys.filter(_.isUpper)\n        val isAllLowerCase = lowerCaseKeys.forall(_.equals(dict))\n\
    \        val isAllUpperCase = upperCaseKeys.forall(_.equals(dict))\n        isAllLowerCase\
    \ && isAllUpperCase", "        val keys = dict.keys\n        if (keys.length ==\
    \ 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n     \
    \   val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val all = lower ++ upper\n        val result = all forall keys.contains(\"\
    String\")\n        result", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys.contains)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n\
    \        lowerCaseDict.isEmpty  || upperCaseDict.isEmpty", "        val keys =\
    \ dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper =\
    \ keys.map(_.toUpperCase)\n        val both = lower ++ upper\n        val notBoth\
    \ = keys.filter(!both.contains(_))\n        notBoth.isEmpty", "        val keys\
    \ = dict.keySet\n        val upperCaseKeys = keys.filter(_.isUpper)\n        val\
    \ lowerCaseKeys = keys.filter(_.isLower)\n        val isAllUpper = upperCaseKeys.size\
    \ == keys.size\n        val isAllLower = lowerCaseKeys.size == keys.size\n   \
    \     val isAllCase = isAllUpper && isAllLower\n        val isAllSameCase = upperCaseKeys.size\
    \ == lowerCaseKeys.size && upperCaseKeys.size == keys.size\n        isAllCase\
    \ || isAllSameCase", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.filter(_.isLower)\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        lowerCaseKeys.forall(key => upperCaseKeys.contains(key)) || upperCaseKeys.forall(key\
    \ => lowerCaseKeys.contains(key))", "        val keys = dict.keys\n        val\
    \ lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(lowerCaseKeys.contains)\n       \
    \ val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n        lowerCaseDict.isEmpty\
    \  || upperCaseDict.isEmpty", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = lowerCaseKeys.toSet\n        val upperCaseDict = upperCaseKeys.toSet\n   \
    \     lowerCaseDict.isEmpty || upperCaseDict.isEmpty || lowerCaseDict.subsetOf(upperCaseDict)",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase)\n        val upperCaseDict = dict.filterKeys(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(lowerCaseDict.contains) &&\n        upperCaseKeys.forall(upperCaseDict.contains)",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        val isAllLowerOrUpper = both.forall(_.equals(keys.toSet))\n        isAllLowerOrUpper\
    \ || dict.isEmpty", "        val keys = dict.keys\n        val lowerCaseKeys =\
    \ keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val isAllLowerCase = lowerCaseKeys.forall(_.equals(keys))\n        val\
    \ isAllUpperCase = upperCaseKeys.forall(_.equals(keys))\n        isAllLowerCase\
    \ && isAllUpperCase", "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        val result = both.forall(x => dict.get(x) == x)\n        result", " \
    \       val keys = dict.keys\n        if(keys.length == 0) return false\n    \
    \    val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys =\
    \ keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        if(lowerCaseDict.isEmpty)\
    \ lowerCaseDict.size == upperCaseDict.size\n        else upperCaseDict.size ==\
    \ lowerCaseDict.size", "        val keys = dict.keySet\n        val isStringInLowerCase\
    \ = keys.forall(_.toLowerCase.contains(\"a\"))\n        val isStringInUpperCase\
    \ = keys.forall(_.toUpperCase.contains(\"A\"))\n        isStringInLowerCase &&\
    \ isStringInUpperCase", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(lowerCaseKeys.contains)\n       \
    \ val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n        lowerCaseDict.isEmpty\
    \  || upperCaseDict.isEmpty", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) return true\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n   \
    \     val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict =\
    \ dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        return lowerCaseDict.isEmpty() && upperCaseDict.isEmpty()", "       \
    \ if (dict.isEmpty) false\n        else {\n            val keys = dict.keys\n\
    \            val lower = keys.map(_.toLowerCase)\n            val upper = keys.map(_.toUpperCase)\n\
    \            val both = keys.map(k => k -> dict.get(k).toString.toLowerCase ==\
    \ dict.get(k).toString.toUpperCase)\n            val result = lower == upper ||\
    \ both\n            result\n        }", "        val keys = dict.keys\n      \
    \  val upperCaseKeys = keys.filter(_.isUpper)\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeysSet = upperCaseKeys.toSet\n        val lowerCaseKeysSet\
    \ = lowerCaseKeys.toSet\n        val result = upperCaseKeysSet.union(lowerCaseKeysSet).isEmpty\n\
    \        result", "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase.forall(_.isLetter))\n        val upperCaseDict\
    \ = dict.filterKeys(_.toUpperCase.forall(_.isLetter))\n        val lowerCaseDictKeys\
    \ = lowerCaseDict.keys\n        val upperCaseDictKeys = upperCaseDict.keys\n \
    \       val lowerCaseDictValues = lowerCaseDict.values\n        val upperCaseDictValues\
    \ = upperCaseDict.values\n        val lowerCaseDictKeysSet = lowerCaseKeys.toSet\n\
    \        val upperCaseDictKeysSet = upperCaseKeys.toSet\n        val lowerCaseDictValuesSet\
    \ = lowerCaseValues.toSet\n        val upperCaseDictValuesSet = upperCaseValues.toSet\n\
    \        val keysSet = keys.toSet\n        val valuesSet = values.toSet\n    \
    \    val keysSet = keys.toSet\n        val valuesSet = values.toSet\n        val\
    \ keysSet = keys.toSet\n        val valuesSet = values.toSet\n        val keysSet\
    \ = keys.toSet\n        val valuesSet = values.toSet\n        val keysSet = keys.toSet\n\
    \        val valuesSet = values.toSet\n        val keysSet = keys.toSet\n    \
    \    val valuesSet = values.toSet\n        val keysSet = keys.toSet\n        val\
    \ valuesSet = values.toSet\n        val keysSet = keys.toSet\n        val valuesSet\
    \ = values.toSet\n        val keysSet = keys.toSet\n        val valuesSet = values.toSet\n\
    \        val keysSet = keys.toSet\n        val valuesSet = values.toSet\n    \
    \    val keysSet = keys.toSet\n        val valuesSet = values.toSet\n        val\
    \ keysSet = keys.toSet\n        val valuesSet = values.toSet\n        val keysSet\
    \ = keys.toSet\n        val valuesSet = values.toSet\n        val keysSet = keys.toSet\n\
    \        val valuesSet = values.toSet\n        val keysSet = keys.toSet\n    \
    \    val valuesSet = values.toSet\n        val keysSet = keys.toSet\n        val\
    \ valuesSet = values.toSet\n        val keysSet = keys.toSet\n        val valuesSet\
    \ = values.toSet\n        val keysSet = keys.toSet\n        val valuesSet = values.toSet\n\
    \        val keysSet = keys.toSet\n        ", "        val keys = dict.keys\n\
    \        if (keys.length == 0) false\n        else {\n            val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n            val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \            lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \            upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))\n\
    \        }", "        if (dict.isEmpty) false\n        else (dict.toList.map(_.toLowerCase).forall(_.equals(_.toLowerCase))\
    \ || dict.toList.map(_.toUpperCase).forall(_.equals(_.toUpperCase)))", "     \
    \   val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = lowerCaseKeys.toSet\n        val upperCaseDict = upperCaseKeys.toSet\n   \
    \     lowerCaseDict.isEmpty || upperCaseDict.isEmpty", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty\
    \  && upperCaseDict.isEmpty", "        val keys = dict.keys\n        if(keys.length\
    \ == 0) return false\n        val lower = keys.map(_.toLowerCase)\n        val\
    \ upper = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n        val\
    \ result = all forall (x => keys.contains(x))\n        result", "        val keys\
    \ = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val allLower = lower.forall(_.isInstanceOf[String])\n\
    \        val allUpper = upper.forall(_.isInstanceOf[String])\n        allLower\
    \ && allUpper", "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase.forall(_.isLetter))\n        val upperCaseDict\
    \ = dict.filterKeys(_.toUpperCase.forall(_.isLetter))\n        lowerCaseKeys.isEmpty\
    \  ||  upperCaseKeys.isEmpty  ||  lowerCaseDict.size == upperCaseDict.size ||\
    \ lowerCaseDict.size == keys.size", "        val keys = dict.keys\n        val\
    \ lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeysSet = lowerCaseKeys.toSet\n        val upperCaseKeysSet\
    \ = upperCaseKeys.toSet\n        val allKeysSet = lowerCaseKeysSet.union(upperCaseKeysSet)\n\
    \        val isAllKeysSet = allKeysSet.isEmpty\n        val isAllKeysLowerCase\
    \ = allKeysSet.size == lowerCaseKeysSet.size\n        val isAllKeysUpperCase =\
    \ allKeysSet.size == upperCaseKeysSet.size\n        val isAllKeysAllCase = allKeysSet.size\
    \ == keys.size\n        val isAllKeysNotEmpty = allKeysSet.isDefined\n       \
    \ val isAllKeysNotEmptyOrAllCase = allKeysSet.isDefined || allKeysSet.size ==\
    \ keys.size\n        val isAllKeysNotEmptyOrAllCaseOrNotAllKeysSet = allKeysSet.isDefined\
    \ || allKeysSet.size == keys.size || allKeysSet.isEmpty\n        val isAllKeysNotEmptyOrAllCaseOrNotAllKeysSetOrNotAllKeysSet\
    \ = allKeysSet.isDefined || allKeysSet.size == keys.size || allKeysSet.isEmpty\
    \ || allKeysSet.size != keys.size\n        val isAllKeysNotEmptyOrAllCaseOrNotAllKeysSetOrNotAllKeysSetOrNotAllKeysSet\
    \ = allKeysSet.isDefined || allKeysSet.size == keys.size || allKeysSet.isEmpty\
    \ || allKeysSet.size != keys.size || allKeysSet.isEmpty\n        val isAllKeysNotEmptyOrAllCaseOrNotAllKeysSetOrNotAllKeysSetOrNotAllKeysSetOrNotAllKeysSet\
    \ = allKeysSet.isDefined || allKeysSet.size == keys.size || allKeysSet.isEmpty\
    \ || allKeysSet.size != keys.size || allKeysSet.isEmpty || allKeysSet.isEmpty\n\
    \        val isAllKeysNotEmptyOrAllCaseOrNotAllKeysSetOrNotAllKeysSetOrNotAllKeysSetOrNotAllKeysSetOrNotAllKeysSet\
    \ = allKeysSet.isDefined || allKeysSet.size == keys.size || allKeysSet.isEmpty\
    \ || all", "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val both = keys.map(k =>\
    \ (k.toLowerCase, k.toUpperCase))\n        val all = lower ++ upper ++ both\n\
    \        val empty = keys.isEmpty\n        val equal = keys.size == all.length\n\
    \        val equal = keys.size == (lower ++ upper ++ both).length\n        val\
    \ equal = keys.size == (lower ++ upper ++ both).length\n        val equal = keys.size\
    \ == (lower ++ upper ++ both).length\n        val equal = keys.size == (lower\
    \ ++ upper ++ both).length\n        val equal = keys.size == (lower ++ upper ++\
    \ both).length\n        val equal = keys.size == (lower ++ upper ++ both).length\n\
    \        val equal = keys.size == (lower ++ upper ++ both).length\n        val\
    \ equal = keys.size == (lower ++ upper ++ both).length\n        val equal = keys.size\
    \ == (lower ++ upper ++ both).length\n        val equal = keys.size == (lower\
    \ ++ upper ++ both).length\n        val equal = keys.size == (lower ++ upper ++\
    \ both).length\n        val equal = keys.size == (lower ++ upper ++ both).length\n\
    \        val equal = keys.size == (lower ++ upper ++ both).length\n        val\
    \ equal = keys.size == (lower ++ upper ++ both).length\n        val equal = keys.size\
    \ == (lower ++ upper ++ both).length\n        val equal = keys.size == (lower\
    \ ++ upper ++ both).length\n        val equal = keys.size == (lower ++ upper ++\
    \ both).length\n        val equal = keys.size == (lower ++ upper ++ both).length\n\
    \        val equal = keys.size == (lower ++ upper ++ both).length\n        val\
    \ equal = keys.size == (lower ++ upper ++ both).length\n        val equal = keys.size\
    \ == (lower ++ upper ++ both).length\n        val equal = keys.size == (lower\
    \ ++ upper ++ both).length\n        val equal = keys.size == (lower ++ upper ++\
    \ both).length\n        val equal = keys.size == (lower ++ upper ++ both).length\n\
    \        val equal = keys.size == (lower ++ upper ++ both).length\n        val\
    \ equal = keys.size == (lower ++ upper ++ both).length\n        val equal = keys.size\
    \ == (lower ++ upper ++ both).length\n        val equal = keys.size == (lower\
    \ ++ upper ++ both).length\n        val equal = keys.size == (lower ++ upper ++\
    \ both).length\n        val equal = keys.size == (lower ++ upper ++ ", "     \
    \   val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n      \
    \  val upper = keys.map(_.toUpperCase)\n        val isLowerOrUpper = lower ++\
    \ upper\n        val isAllLowerOrUpper = isLowerOrUpper.forall(_.isInstanceOf[String])\n\
    \        val isAllUpper = isLowerOrUpper.forall(_.isInstanceOf[String])\n    \
    \    isAllLowerOrUpper && isAllUpper", "        val keys = dict.keys\n       \
    \ if (keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty\
    \  || upperCaseDict.isEmpty", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(_.toLowerCase)\n        val upperCaseDict\
    \ = dict.filterKeys(_.toUpperCase)\n        val lowerCaseDictKeys = lowerCaseDict.keys\n\
    \        val upperCaseDictKeys = upperCaseDict.keys\n        val lowerCaseDictValues\
    \ = lowerCaseDict.values\n        val upperCaseDictValues = upperCaseDict.values\n\
    \        val lowerCaseDictValuesKeys = lowerCaseDictValues.map(_.toLowerCase)\n\
    \        val upperCaseDictValuesKeys = upperCaseDictValues.map(_.toUpperCase)\n\
    \        val lowerCaseDictValuesValues = lowerCaseDictValues.map(_.toLowerCase)\n\
    \        val upperCaseDictValuesValues = upperCaseDictValues.map(_.toUpperCase)\n\
    \        val lowerCaseDictValuesValuesKeys = lowerCaseDictValuesValues.map(_.toLowerCase)\n\
    \        val upperCaseDictValuesValuesKeys = upperCaseDictValuesValues.map(_.toUpperCase)\n\
    \        val lowerCaseDictValuesValuesValues = lowerCaseDictValuesValues.map(_.toLowerCase)\n\
    \        val upperCaseDictValuesValuesValues = upperCaseDictValuesValues.map(_.toUpperCase)\n\
    \        val lowerCaseDictValuesValuesValuesKeys = lowerCaseDictValuesValuesValues.map(_.toLowerCase)\n\
    \        val upperCaseDictValuesValuesValuesKeys = upperCaseDictValuesValuesValues.map(_.toUpperCase)\n\
    \        val lowerCaseDictValuesValuesValuesValues = lowerCaseDictValuesValuesValues.map(_.toLowerCase)\n\
    \        val upperCaseDictValuesValuesValuesValues = upperCaseDictValuesValuesValues.map(_.toUpperCase)\n\
    \        val lowerCaseDictValuesValuesValuesValuesKeys = lowerCaseDictValuesValuesValuesValues.map(_.toLowerCase)\n\
    \        val upperCaseDictValuesValuesValuesValuesKeys = upperCaseDictValuesValuesValuesValues.map(_.toUpperCase)\n\
    \        val lowerCaseDictValuesValuesValuesValuesValues = lowerCaseDictValuesValuesValuesValues.map(_.toLowerCase)\n\
    \        val upperCaseDictValuesValuesValuesValuesValues = upperCaseDictValuesValuesValuesValuesValues.map(_.toUpperCase)\n\
    \        val lowerCaseDictValuesValuesValuesValuesValuesKeys = lowerCaseDictValuesValuesValuesValuesValues.map(_.toLowerCase)\n\
    \        val upperCaseDictValuesValuesValuesValuesValuesKeys = upperCaseDictValuesValuesValuesValuesValues.map(_.toUpperCase)\n\
    \        val lowerCaseDictValuesValuesValues", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val allLowerCaseKeys = keys.forall(_.toLowerCase.equalsIgnoreCase)\n\
    \        val allUpperCaseKeys = keys.forall(_.toUpperCase.equalsIgnoreCase)\n\
    \        val allKeys = lowerCaseKeys ++ upperCaseKeys\n        allKeys.forall(_.equalsIgnoreCase(dict.getOrElse(\"\
    key\", null))) ", "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase.nonEmpty)\n        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n\
    \        val lowerCaseDictKeys = lowerCaseDict.keys\n        val upperCaseDictKeys\
    \ = upperCaseDict.keys\n        val lowerCaseDictValues = lowerCaseDict.values\n\
    \        val upperCaseDictValues = upperCaseDict.values\n        val lowerCaseDictKeysSet\
    \ = lowerCaseKeys.toSet\n        val upperCaseDictKeysSet = upperCaseKeys.toSet\n\
    \        val lowerCaseDictValuesSet = lowerCaseValues.toSet\n        val upperCaseDictValuesSet\
    \ = upperCaseValues.toSet\n        val keysSet = keys.toSet\n        val valuesSet\
    \ = values.toSet\n        val keysSetKeys = keysSet.map(_.toLowerCase)\n     \
    \   val keysSetValues = keysSet.map(_.toUpperCase)\n        val valuesSetKeys\
    \ = valuesSet.map(_.toLowerCase)\n        val valuesSetValues = valuesSet.map(_.toUpperCase)\n\
    \        val keysSetKeysSet = keysSetKeys.toSet\n        val keysSetValuesSet\
    \ = keysSetValues.toSet\n        val valuesSetKeysSet = valuesSetKeys.toSet\n\
    \        val valuesSetValuesSet = valuesSetValues.toSet\n        val keysSetKeysSetKeys\
    \ = keysSetKeysSet.map(_.toLowerCase)\n        val keysSetKeysSetValues = keysSetValuesSet.map(_.toUpperCase)\n\
    \        val keysSetValuesSetKeys = keysSetValuesSet.map(_.toLowerCase)\n    \
    \    val keysSetValuesSetValues = keysSetValuesSet.map(_.toUpperCase)\n      \
    \  val keysSetKeysSetKeysSet = keysSetKeysSetKeys.map(_.toLowerCase)\n       \
    \ val keysSetKeysSetValuesSet = keysSetValuesSetKeys.map(_.toUpperCase)\n    \
    \    val keysSetValuesSetKeysSet = keysSetValuesSetValues.map(_.toLowerCase)\n\
    \        val keysSetValuesSetValuesSet = keysSetValuesSetValues.map(_.toUpperCase)\n\
    \        val keysSetKeysSetKeysSetKeys = keysSetKeysSetKeysSet.map(_.toLowerCase)\n\
    \        val keysSetKeysSetKeysSetValues = keysSetKeysSetValuesSet.map(_.toUpperCase)\n\
    \        val keysSet", "        if (dict.isEmpty) false\n        else (\n    \
    \        dict.keys.toSet.toList.forall(_.isInstanceOf[String]) &&\n          \
    \  dict.keys.toSet.toList.forall(_.isInstanceOf[String]) &&\n            dict.keys.toSet.toList.forall(_.toString.toLowerCase()\
    \ == _.toString.toLowerCase()) &&\n            dict.keys.toSet.toList.forall(_.toString.toUpperCase()\
    \ == _.toString.toUpperCase())\n        )", "        val keys = dict.keys\n  \
    \      if(keys.length == 0) return false\n        val lowerKeys = keys.map(_.toLowerCase)\n\
    \        val upperKeys = keys.map(_.toUpperCase)\n        lowerKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys.contains)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n       \
    \ lowerCaseDict.isEmpty  || upperCaseDict.isEmpty", "        val keys = dict.keys\n\
    \        if(keys.isEmpty) false\n        else if(keys.forall(_.isInstanceOf[String]))\
    \ true\n        else false", "        val keys = dict.keySet\n        val upperCaseKeys\
    \ = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n        val\
    \ lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n\
    \        upperCaseKeys.isEmpty  || lowerCaseKeys.isEmpty", "        val keys =\
    \ dict.keys\n        if (keys.length == 0) return true\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val low = lower.toSet\n\
    \        val up = upper.toSet\n        val all = low union up\n        val notAll\
    \ = all - low\n        val notAll2 = all - up\n        val notAll3 = all - low\n\
    \        val notAll4 = all - upper\n        val notAll5 = all - lower\n      \
    \  val notAll6 = all - keys\n        val notAll7 = all - keys\n        val notAll8\
    \ = all - keys\n        val notAll9 = all - keys\n        val notAll10 = all -\
    \ keys\n        val notAll11 = all - keys\n        val notAll12 = all - keys\n\
    \        val notAll13 = all - keys\n        val notAll14 = all - keys\n      \
    \  val notAll15 = all - keys\n        val notAll16 = all - keys\n        val notAll17\
    \ = all - keys\n        val notAll18 = all - keys\n        val notAll19 = all\
    \ - keys\n        val notAll20 = all - keys\n        val notAll21 = all - keys\n\
    \        val notAll22 = all - keys\n        val notAll23 = all - keys\n      \
    \  val notAll24 = all - keys\n        val notAll25 = all - keys\n        val notAll26\
    \ = all - keys\n        val notAll27 = all - keys\n        val notAll28 = all\
    \ - keys\n        val notAll29 = all - keys\n        val notAll30 = all - keys\n\
    \        val notAll31 = all - keys\n        val notAll32 = all - keys\n      \
    \  val notAll33 = all - keys\n        val notAll34 = all - keys\n        val notAll35\
    \ = all - keys\n        val notAll36 = all - keys\n        val notAll37 = all\
    \ - keys\n        val notAll38 = all - keys\n        val notAll39 = all - keys\n\
    \        val notAll40 = all - keys\n        val notAll41 = all - keys\n      \
    \  val notAll42 = all - keys\n        val notAll43 = all - keys\n        val notAll44\
    \ = all - keys\n        val notAll45 = all - keys\n        val notAll46 = all\
    \ - keys\n        val notAll47 = ", "        val keys = dict.keys\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val allStrings = keys.forall(_.isInstanceOf[String])\n        val allStringsOrAllUpper\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String])\n\
    \        val allStringsOrAllLower = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String])\n\
    \        val allStringsOrAllUpperOrAllLower = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String])\n\
    \        val allStringsOrAllUpperOrAllLower = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String])\n\
    \        val allStringsOrAllUpperOrAllLowerOrAllStrings = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String]\
    \ || _.isInstanceOf[String])\n        val allStringsOrAllUpperOrAllLowerOrAllStrings\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String] || _.isInstanceOf[String])\n        val allStringsOrAllUpperOrAllLowerOrAllStringsOrAllStrings\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String] || _.isInstanceOf[String] || _.isInstanceOf[String])\n\
    \        val allStringsOrAllUpperOrAllLowerOrAllStringsOrAllStrings = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String]\
    \ || _.isInstanceOf[String] || _.isInstanceOf[String])\n        val allStringsOrAllUpperOrAllLowerOrAllStringsOrAllStringsOrAllStrings\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String] || _.isInstanceOf[String] || _.isInstanceOf[String]\
    \ || _.isInstanceOf[String])\n        val allStringsOrAllUpperOrAllLowerOrAllStringsOrAllStringsOrAllStringsOrAllStrings\
    \ = keys.forall(_.isInstanceOf", "        val keys = dict.keys\n        if(keys.isEmpty)\
    \ false\n        else if(keys.forall(_.isInstanceOf[String])) true\n        else\
    \ false", "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = lowerCaseKeys.toSet\n        val upperCaseDict = upperCaseKeys.toSet\n   \
    \     lowerCaseDict.isEmpty || upperCaseDict.isEmpty || lowerCaseDict.subsetOf(upperCaseDict)",
  "        if (dict.isEmpty) false\n        else (\n            val keys = dict.keys\n\
    \            val lower = keys.map(_.toLowerCase)\n            val upper = keys.map(_.toUpperCase)\n\
    \            lower.forall(x => upper.contains(x))\n            || upper.forall(x\
    \ => lower.contains(x))\n        )", "        if (dict.isEmpty) false\n      \
    \  else {\n            val keys = dict.keys\n            val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \            val upperCaseKeys = keys.map(_.toUpperCase)\n            val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n            val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \            lowerCaseDict.forall(lowerCaseKeys contains _) && upperCaseDict.forall(upperCaseKeys\
    \ contains _)\n        }", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(_.toLowerCase.nonEmpty)\n       \
    \ val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n        lowerCaseKeys.forall(lowerCaseDict.contains)\
    \ || upperCaseKeys.forall(upperCaseDict.contains)", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty\
    \  && upperCaseDict.isEmpty", "        val keys = dict.keys\n        val lower\
    \ = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n   \
    \     val lowerSet = lower.toSet\n        val upperSet = upper.toSet\n       \
    \ val result = lowerSet.subsetOf(upperSet)\n        result && keys.forall(_.isInstanceOf[String])",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase.forall(_.isLetter))\n        val upperCaseDict\
    \ = dict.filterKeys(_.toUpperCase.forall(_.isLetter))\n        val lowerCaseDictSize\
    \ = lowerCaseDict.size\n        val upperCaseDictSize = upperCaseDict.size\n \
    \       val keysSize = keys.size\n        val isDictAllCase = keysSize == lowerCaseDictSize\
    \ && keysSize == upperCaseDictSize && lowerCaseDictSize == upperCaseDictSize\n\
    \        isDictAllCase", "        val keys = dict.keySet\n        val lowerCaseKeys\
    \ = keys.filter(_.isLower)\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        lowerCaseKeys.isEmpty  ||  upperCaseKeys.isEmpty", "        val keys\
    \ = dict.keys\n        if (keys.length == 0) false\n        else {\n         \
    \   val lowerCaseKeys = keys.map(_.toLowerCase)\n            val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n            lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n            upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n        }", "        if (dict.isEmpty) false\n\
    \        else (dict.keys.toSet.size == dict.keys.toSet.size) && dict.keys.toSet.forall(_.isLower)\
    \ && dict.keys.toSet.forall(_.isUpper)", "        val keys = dict.keys\n     \
    \   val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val allLower = lower.forall(_.isInstanceOf[String])\n        val allUpper\
    \ = upper.forall(_.isInstanceOf[String])\n        allLower && allUpper", "   \
    \     if (dict.isEmpty) false\n        else (dict.keySet.toSeq.map(_.toLowerCase).forall(_.equals(dict.keySet.toSeq.map(_.toLowerCase).head))\n\
    \            || dict.keySet.toSeq.map(_.toUpperCase).forall(_.equals(dict.keySet.toSeq.map(_.toUpperCase).head))",
  "        val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase.nonEmpty)\n        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n\
    \        val lowerCaseKeysSet = lowerCaseKeys.toSet\n        val upperCaseKeysSet\
    \ = upperCaseKeys.toSet\n        val keysSet = keys.toSet\n        lowerCaseDict.forall\
    \ { case (k,v) => keysSet.contains(k) && lowerCaseKeysSet.contains(k) && v !=\
    \ upperCaseDict.get(k) }\n        || upperCaseDict.forall { case (k,v) => keysSet.contains(k)\
    \ && upperCaseKeysSet.contains(k) && v != lowerCaseDict.get(k) }", "        val\
    \ keys = dict.keys\n        if (keys.length == 0) false\n        else {\n    \
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n            val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n            lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n            upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n        }", "        val keys = dict.keys\n \
    \       val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val isLower = lower.forall(_.isInstanceOf[String])\n        val isUpper\
    \ = upper.forall(_.isInstanceOf[String])\n        val isAll = isLower && isUpper\n\
    \        !isAll", "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty",
  "        val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val allStrings =\
    \ upperCaseKeys.union(lowerCaseKeys)\n        val isAllStrings = allStrings.forall(_.isInstanceOf[String])\n\
    \        val isAllUpperCase = allStrings.forall(_.isInstanceOf[String])\n    \
    \    val isAllLowerCase = allStrings.forall(_.isInstanceOf[String])\n        val\
    \ isAllStringsOrUpperCase = isAllStrings || isAllUpperCase\n        val isAllStringsOrLowerCase\
    \ = isAllStrings || isAllLowerCase\n        val isAllStringsOrBoth = isAllStringsOrUpperCase\
    \ || isAllStringsOrLowerCase\n        val isAllStringsOrBothOrEmpty = isAllStringsOrBoth\
    \ || isAllStrings\n        val isAllStringsOrBothOrEmptyOrEmpty = isAllStringsOrBothOrEmpty\
    \ || isAllStrings\n        val isAllStringsOrBothOrEmptyOrEmptyOrEmpty = isAllStringsOrBothOrEmptyOrEmpty\
    \ || isAllStrings\n        val isAllStringsOrBothOrEmptyOrEmptyOrEmpty = isAllStringsOrBothOrEmptyOrEmptyOrEmpty\
    \ || isAllStrings\n        val isAllStringsOrBothOrEmptyOrEmptyOrEmpty = isAllStringsOrBothOrEmptyOrEmptyOrEmpty\
    \ || isAllStrings\n        val isAllStringsOrBothOrEmptyOrEmptyOrEmpty = isAllStringsOrBothOrEmptyOrEmptyOrEmpty\
    \ || isAllStrings\n        val isAllStringsOrBothOrEmptyOrEmptyOrEmpty = isAllStringsOrBothOrEmptyOrEmptyOrEmpty\
    \ || isAllStrings\n        val isAllStringsOrBothOrEmptyOrEmptyOrEmpty = isAllStringsOrBothOrEmptyOrEmptyOrEmpty\
    \ || isAllStrings\n        val isAllStringsOrBothOrEmptyOrEmptyOrEmpty = isAllStringsOrBothOrEmptyOrEmptyOrEmpty\
    \ || isAllStrings\n        val isAllStringsOrBothOrEmptyOrEmptyOrEmpty = isAllStringsOrBothOrEmptyOrEmptyOrEmpty\
    \ || isAllStrings\n        val isAllStringsOrBothOrEmptyOrEmptyOrEmpty = isAllStringsOrBothOrEmptyOrEmptyOrEmpty\
    \ || isAllStrings\n        val isAllStringsOrBothOrEmptyOrEmptyOrEmpty = isAllStringsOrBothOrEmpty",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  && upperCaseDict.isEmpty", "        val keys =\
    \ dict.keys\n        if (keys.length == 0) false\n        else keys.forall(_.isInstanceOf[String])",
  "        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        lowerCaseKeys.isEmpty\
    \  || upperCaseKeys.isEmpty", "        val keys = dict.keys\n        if(keys.length\
    \ == 0) false\n        else if(keys.forall(_.isInstanceOf[String])) true\n   \
    \     else false", "        val keys = dict.keys\n        val lowerCaseKeys =\
    \ keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val allLowerCaseKeys = lowerCaseKeys.forall(_.equals(keys))\n       \
    \ val allUpperCaseKeys = upperCaseKeys.forall(_.equals(keys))\n        allLowerCaseKeys\
    \ && allUpperCaseKeys", "        val keys = dict.keySet\n        val lowerCaseKeys\
    \ = keys.filter(_.toString.toLowerCase.contains(\"a\"))\n        val upperCaseKeys\
    \ = keys.filter(_.toString.toUpperCase.contains(\"A\"))\n        lowerCaseKeys.isEmpty\
    \  && upperCaseKeys.isEmpty", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n   \
    \     upperCaseKeys.forall(key => dict.get(key).isInstanceOf[String])", "    \
    \    val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  || upperCaseDict.isEmpty", "        val keys =\
    \ dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty\
    \  || upperCaseDict.isEmpty", "        val keys = dict.keySet\n        val upperCaseKeys\
    \ = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n        val\
    \ lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n\
    \        val isAllUpperCase = upperCaseKeys.size == keys.size\n        val isAllLowerCase\
    \ = lowerCaseKeys.size == keys.size\n        isAllUpperCase && isAllLowerCase\
    \ && keys.size == dict.size", "        val keys = dict.keys\n        val lower\
    \ = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n   \
    \     val isLowerOrUpper = lower ++ upper.forall(_.isInstanceOf[String])\n   \
    \     val isAllStrings = keys.forall(_.isInstanceOf[String])\n        isLowerOrUpper\
    \ && isAllStrings", "        val keys = dict.keys\n        val lowerCaseKeys =\
    \ keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val isStringInLowerCase = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val isStringInUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val isAllStringInLowerCase = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val isAllStringInUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        isAllStringInLowerCase && isAllStringInUpperCase && isStringInLowerCase\
    \ && isStringInUpperCase && isAllStringInLowerCase && isAllStringInUpperCase",
  "        val keys = dict.keySet\n        val lower = keys.map(_.toLowerCase)\n \
    \       val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        val result = both.forall(key => dict.get(key).isInstanceOf[String])\n\
    \        result", "        val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val allKeysAreStrings\
    \ = keys.forall(_.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCase\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String])\n\
    \        val allKeysAreStringsOrLowerCase = keys.forall(_.isInstanceOf[String]\
    \ || _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCaseOrAllOthersAreStrings\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String] || allKeysAreStrings)\n        val allKeysAreStringsOrLowerCaseOrAllOthersAreStrings\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ allKeysAreStrings)\n        val allKeysAreStringsOrUpperCaseOrAllOthersAreStrings\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ allKeysAreStrings)\n        val allKeysAreStringsOrLowerCaseOrAllOthersAreStrings\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ allKeysAreStrings)\n        val allKeysAreStringsOrUpperCaseOrAllOthersAreStrings\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ allKeysAreStrings)\n        val allKeysAreStringsOrLowerCaseOrAllOthersAreStrings\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ allKeysAreStrings)\n        val allKeysAreStringsOrUpperCaseOrAllOthersAreStrings\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ allKeysAreStrings)\n        val allKeysAreStringsOrLowerCaseOrAllOthersAreStrings\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ allKeysAreStrings)\n        val allKeysAreStringsOrUpperCase", "        val\
    \ keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n    \
    \    val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = keys.map(key => (key.toLowerCase, key.toUpperCase))\n    \
    \    val bothLower = keys.map(key => (key.toLowerCase, key))\n        val bothUpper\
    \ = keys.map(key => (key, key.toUpperCase))\n        val bothLower = keys.map(key\
    \ => (key.toLowerCase, key))\n        val bothUpper = keys.map(key => (key, key.toUpperCase))\n\
    \        val bothLower = keys.map(key => (key.toLowerCase, key))\n        val\
    \ bothUpper = keys.map(key => (key, key.toUpperCase))\n        val bothLower =\
    \ keys.map(key => (key.toLowerCase, key))\n        val bothUpper = keys.map(key\
    \ => (key, key.toUpperCase))\n        val bothLower = keys.map(key => (key.toLowerCase,\
    \ key))\n        val bothUpper = keys.map(key => (key, key.toUpperCase))\n   \
    \     val bothLower = keys.map(key => (key.toLowerCase, key))\n        val bothUpper\
    \ = keys.map(key => (key, key.toUpperCase))\n        val bothLower = keys.map(key\
    \ => (key.toLowerCase, key))\n        val bothUpper = keys.map(key => (key, key.toUpperCase))\n\
    \        val bothLower = keys.map(key => (key.toLowerCase, key))\n        val\
    \ bothUpper = keys.map(key => (key, key.toUpperCase))\n        val bothLower =\
    \ keys.map(key => (key.toLowerCase, key))\n        val bothUpper = keys.map(key\
    \ => (key, key.toUpperCase))\n        val bothLower = keys.map(key => (key.toLowerCase,\
    \ key))\n        val bothUpper = keys.map(key => (key, key.toUpperCase))\n   \
    \     val bothLower = keys.map(key => (key.toLowerCase, key))\n        val bothUpper\
    \ = keys.map(key => (key, key.toUpperCase))\n        val bothLower = keys.map(key\
    \ => (key.toLowerCase, key))\n        val bothUpper = keys.map(key => (key, key.toUpperCase))\n\
    \        val bothLower = keys.map(key => (key.toLowerCase, key))\n        val\
    \ bothUpper = keys.map(key => (key, key.toUpperCase))\n        val bothLower =\
    \ keys.map(key => (key.toLowerCase, key))\n        val bothUpper = keys.map(key\
    \ => (key, key.toUpperCase))\n        val bothLower = keys.map(key => (key.toLowerCase,\
    \ key))\n        val bothUpper = keys.map(key => (key, key.toUpperCase))\n   \
    \     val bothLower = keys.map(key => (key.toLowerCase, key))\n        val bothUpper\
    \ = keys.map(key => (key, key.toUpperCase))\n        val bothLower = keys.map(key\
    \ => (key.toLowerCase, key))\n        val bothUpper = keys.map(key ", "      \
    \  val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(_.toLowerCase.nonEmpty)\n\
    \        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n       \
    \ lowerCaseKeys.forall(lowerCaseDict.contains) || upperCaseKeys.forall(upperCaseDict.contains)",
  "        val keys = dict.keySet\n        if (keys.length == 0) return false\n  \
    \      val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))", "        val keys = dict.keySet\n        val\
    \ lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty", "        val keys =\
    \ dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper =\
    \ keys.map(_.toUpperCase)\n        val isLowerOrUpper = lower ++ upper.forall(_.isInstanceOf[String])\n\
    \        !isLowerOrUpper && keys.forall(_.isInstanceOf[String])", "        val\
    \ keys = dict.keys\n        if(keys.length == 0) return false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        if (dict.isEmpty) false\n        else (dict.keySet.toList.map(_.toLowerCase).toSet\
    \ == dict.keySet.toList.map(_.toUpperCase).toSet)", "        val keys = dict.keys\n\
    \        if (keys.length == 0) return true\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty() && upperCaseDict.isEmpty()", "        val keys\
    \ = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(_.toLowerCase.nonEmpty)\n\
    \        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n       \
    \ lowerCaseKeys.forall(lowerCaseDict.contains)\n        upperCaseKeys.forall(upperCaseDict.contains)",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  || upperCaseDict.isEmpty", "        val keys =\
    \ dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(_.toLowerCase.nonEmpty)\n\
    \        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n       \
    \ lowerCaseKeys.forall(lowerCaseDict.contains) &&\n        upperCaseKeys.forall(upperCaseDict.contains)",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase.nonEmpty)\n        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n\
    \        lowerCaseKeys.forall(lowerCaseDict.contains)\n        upperCaseKeys.forall(upperCaseDict.contains)",
  "        val keys = dict.keys\n        if (keys.length == 0) false\n        else\
    \ {\n            val lowerCaseKeys = keys.map(_.toLowerCase)\n            val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n            lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n            upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))\n        }", "        val keys\
    \ = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(_.equals(upperCaseKeys))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = lowerCaseKeys.toSet\n        val upperCaseDict = upperCaseKeys.toSet\n   \
    \     lowerCaseDict.isEmpty || upperCaseDict.isEmpty || lowerCaseDict.subsetOf(upperCaseDict)",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == key) && upperCaseKeys.forall(key => dict.get(key) == key)",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  || upperCaseDict.isEmpty", "        val keys =\
    \ dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper =\
    \ keys.map(_.toUpperCase)\n        val both = keys.map(k => (k.toLowerCase, k.toUpperCase))\n\
    \        val result = lower == upper || both == keys\n        result && dict.isEmpty",
  "        val keys = dict.keys\n        if (keys.length == 0) false\n        else\
    \ {\n            val lowerCaseKeys = keys.map(_.toLowerCase)\n            val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n            lowerCaseKeys.forall(key\
    \ => dict.get(key).isInstanceOf[String])\n            upperCaseKeys.forall(key\
    \ => dict.get(key).isInstanceOf[String])\n        }", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(_.toLowerCase.nonEmpty)\n\
    \        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n       \
    \ lowerCaseKeys.forall(lowerCaseDict.contains) &&\n        upperCaseKeys.forall(upperCaseDict.contains)",
  "        val keys = dict.keySet\n        if (keys.isEmpty) false\n        else {\n\
    \            val lowerCaseKeys = keys.map(_.toLowerCase)\n            val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n            lowerCaseKeys.forall(key => dict.get(key).toLowerCase\
    \ == dict.get(key))\n            upperCaseKeys.forall(key => dict.get(key).toUpperCase\
    \ == dict.get(key))\n        }", "        val keys = dict.keys\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val allUpperCase = upperCaseKeys.forall(_.equals(keys.head))\n      \
    \  val allLowerCase = lowerCaseKeys.forall(_.equals(keys.head))\n        allUpperCase\
    \ || allLowerCase", "        val keys = dict.keys\n        if (keys.length ==\
    \ 0) false\n        else keys.forall(_.isInstanceOf[String]) && keys.forall(_.toString.toLowerCase\
    \ == _.toString.toLowerCase || _.toString.toUpperCase == _.toString.toUpperCase)",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val allUpperCaseKeys\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        allLowerCaseKeys &&\
    \ allUpperCaseKeys", "        val keys = dict.keys\n        if(keys.isEmpty) false\n\
    \        else {\n            val lowerCaseKeys = keys.map(_.toLowerCase)\n   \
    \         val upperCaseKeys = keys.map(_.toUpperCase)\n            lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n            upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))\n        }", "        val keys\
    \ = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key =>\
    \ dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val allKeysAreString = keys.forall(_.isInstanceOf[String])\n\
    \        val allKeysAreStringInLowerCase = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val allKeysAreStringInUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        allKeysAreString && allKeysAreStringInLowerCase && allKeysAreStringInUpperCase",
  "        val keys = dict.keys\n        val lowerKeys = keys.map(_.toLowerCase)\n\
    \        val upperKeys = keys.map(_.toUpperCase)\n        val lowerDict = lowerKeys.toSet\n\
    \        val upperDict = upperKeys.toSet\n        if (lowerDict.isEmpty) true\n\
    \        else if (upperDict.isEmpty) false\n        else if (lowerDict.intersect(upperDict).isEmpty)\
    \ false\n        else true", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) false\n        else keys.forall(_.isInstanceOf[String])", "        val\
    \ keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n    \
    \    val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict =\
    \ dict.filterKeys(_.toLowerCase.nonEmpty)\n        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n\
    \        lowerCaseKeys.forall(lowerCaseDict.contains) &&\n        upperCaseKeys.forall(upperCaseDict.contains)",
  "        val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeysSet\
    \ = upperCaseKeys.toSet\n        val lowerCaseKeysSet = lowerCaseKeys.toSet\n\
    \        val keysSet = keys.toSet\n        val keysSetUpper = keysSet.filter(x\
    \ => upperCaseKeysSet.contains(x))\n        val keysSetLower = keysSet.filter(x\
    \ => lowerCaseKeysSet.contains(x))\n        val keysSetBoth = keysSet.filter(x\
    \ => upperCaseKeysSet.contains(x) || lowerCaseKeysSet.contains(x))\n        val\
    \ keysSetAll = keysSet.filter(x => upperCaseKeysSet.contains(x) || lowerCaseKeysSet.contains(x))\n\
    \        val keysSetAllUpper = keysSet.filter(x => upperCaseKeysSet.contains(x))\n\
    \        val keysSetAllLower = keysSet.filter(x => lowerCaseKeysSet.contains(x))\n\
    \        val keysSetAllBoth = keysSet.filter(x => upperCaseKeysSet.contains(x)\
    \ || lowerCaseKeysSet.contains(x))\n        val keysSetAllUpperLower = keysSet.filter(x\
    \ => upperCaseKeysSet.contains(x) || lowerCaseKeysSet.contains(x))\n        val\
    \ keysSetAllUpperLowerBoth = keysSet.filter(x => upperCaseKeysSet.contains(x)\
    \ || lowerCaseKeysSet.contains(x))\n        val keysSetAllUpperLowerBothUpper\
    \ = keysSet.filter(x => upperCaseKeysSet.contains(x) || lowerCaseKeysSet.contains(x)\
    \ || upperCaseKeysSet.contains(x))\n        val keysSetAllUpperLowerBothUpperLower\
    \ = keysSet.filter(x => upperCaseKeysSet.contains(x) || lowerCaseKeysSet.contains(x)\
    \ || upperCaseKeysSet.contains(x) || lowerCaseKeysSet.contains(x))\n        val\
    \ keysSetAllUpperLowerBothUpperLowerUpper = keysSet.filter(x => upperCaseKeysSet.contains(x)\
    \ || lowerCaseKeysSet.contains(x) || upperCaseKeysSet.contains(x) || lowerCaseKeysSet.contains(x)\
    \ || upperCaseKeysSet.contains(x) || lowerCaseKeysSet.contains(x))\n        val\
    \ keysSetAllUpperLowerBothUpperLowerUpperUpper = keysSet.filter(x => upperCaseKeysSet.contains(x)\
    \ || lowerCaseKeysSet.contains(x) || upperCaseKeysSet.contains(x) || lowerCaseKeysSet.contains(x)\
    \ || upperCaseKeysSet.contains(x) || lowerCaseKeysSet.contains(x) || upperCaseKeysSet.contains(x",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        val isLowerOrUpper = both.forall(x => x.contains(x.toLowerCase) || x.contains(x.toUpperCase))\n\
    \        !isLowerOrUpper && dict.isEmpty", "        val keys = dict.keys\n   \
    \     val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseKeys =\
    \ keys.map(_.toLowerCase)\n        val isAllUpper = upperCaseKeys.forall(_.equals(keys))\n\
    \        val isAllLower = lowerCaseKeys.forall(_.equals(keys))\n        isAllUpper\
    \ && isAllLower", "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        val result = both.forall(x => dict(x) == dict(x))\n        result", " \
    \       val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n  \
    \      val upper = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n\
    \        val none = keys.filterNot(_.isInstanceOf[String])\n        val result\
    \ = all.forall(x => none.contains(x))\n        result", "        val keys = dict.keys\n\
    \        val lowerKeys = keys.map(_.toLowerCase)\n        val upperKeys = keys.map(_.toUpperCase)\n\
    \        val lowerDict = lowerKeys.toMap\n        val upperDict = upperKeys.toMap\n\
    \        val keys = lowerKeys.union(upperKeys)\n        val result = keys.forall(key\
    \ => lowerDict.contains(key) || upperDict.contains(key))\n        result", " \
    \       val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase.nonEmpty)\n        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n\
    \        lowerCaseKeys.forall(lowerCaseDict.contains) &&\n            upperCaseKeys.forall(upperCaseDict.contains)",
  "        val keys = dict.keys\n        val lowerKeys = keys.map(_.toLowerCase)\n\
    \        val upperKeys = keys.map(_.toUpperCase)\n        lowerKeys.forall(key\
    \ => dict.get(key) == key.toUpperCase)\n        upperKeys.forall(key => dict.get(key)\
    \ == key.toLowerCase)", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val isLowerCase = lowerCaseKeys.forall(_.isInstanceOf[String])\n    \
    \    val isUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n        isLowerCase\
    \ && isUpperCase", "        val keys = dict.keys\n        if (keys.length == 0)\
    \ false\n        else keys.forall(_.isInstanceOf[String]) && keys.forall(_.toString.toLowerCase()\
    \ == _.toString.toLowerCase)", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.filter(_.isLower)\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        lowerCaseKeys.isEmpty  ||  upperCaseKeys.isEmpty", "        if (dict.isEmpty)\
    \ false\n        else (dict.toList.map(_.toLowerCase).forall(_.isLower) || dict.toList.map(_.toUpperCase).forall(_.isUpper))",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        val isAllLowerOrUpper = both.forall(x => keys.contains(x))\n        isAllLowerOrUpper\
    \ || dict.isEmpty", "        val keys = dict.keys\n        val lowerCaseKeys =\
    \ keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(_.toLowerCase.nonEmpty)\n       \
    \ val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n        lowerCaseKeys.forall(lowerCaseDict.contains)\
    \ &&\n        upperCaseKeys.forall(upperCaseDict.contains)", "        val keys\
    \ = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty\
    \  || upperCaseDict.isEmpty", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict\
    \ = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty  && upperCaseDict.isEmpty",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val result = lower == upper\
    \ || lower == upper\n        if(!result) false\n        else true", "        if\
    \ (dict.isEmpty) false\n        else (dict.keySet.forall(_.isInstanceOf[String])\
    \ || dict.keySet.forall(_.isInstanceOf[String]) && dict.values.forall(_.isInstanceOf[String]))",
  "        val keys = dict.keys\n        if (keys.length == 0) return true\n     \
    \   val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict\
    \ = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty  && upperCaseDict.isEmpty",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(_.equals(upperCaseKeys))\
    \ || upperCaseKeys.forall(_.equals(lowerCaseKeys))", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(_.toLowerCase)\n\
    \        val upperCaseDict = dict.filterKeys(_.toUpperCase)\n        val lowerCaseDictSize\
    \ = lowerCaseDict.size\n        val upperCaseDictSize = upperCaseDict.size\n \
    \       val keysSize = keys.size\n        val lowerCaseDictKeys = lowerCaseDict.keys\n\
    \        val upperCaseDictKeys = upperCaseDict.keys\n        val lowerCaseDictValues\
    \ = lowerCaseDict.values\n        val upperCaseDictValues = upperCaseDict.values\n\
    \        val lowerCaseDictKeysSize = lowerCaseDictKeys.size\n        val upperCaseDictKeysSize\
    \ = upperCaseDictKeys.size\n        val lowerCaseDictValuesSize = lowerCaseDictValues.size\n\
    \        val upperCaseDictValuesSize = upperCaseDictValues.size\n        val keysEqual\
    \ = keysSize == lowerCaseDictKeysSize && keysSize == upperCaseDictKeysSize &&\
    \ keysSize == lowerCaseDictValuesSize && keysSize == upperCaseDictValuesSize\n\
    \        val keysEqual = keysSize == lowerCaseDictKeysSize && keysSize == upperCaseDictKeysSize\
    \ && keysSize == lowerCaseDictValuesSize && keysSize == upperCaseDictValuesSize\n\
    \        val keysEqual = keysSize == lowerCaseDictKeysSize && keysSize == upperCaseDictKeysSize\
    \ && keysSize == lowerCaseDictValuesSize && keysSize == upperCaseDictValuesSize\n\
    \        val keysEqual = keysSize == lowerCaseDictKeysSize && keysSize == upperCaseDictKeysSize\
    \ && keysSize == lowerCaseDictValuesSize && keysSize == upperCaseDictValuesSize\n\
    \        val keysEqual = keysSize == lowerCaseDictKeysSize && keysSize == upperCaseDictKeysSize\
    \ && keysSize == lowerCaseDictValuesSize && keysSize == upperCaseDictValuesSize\n\
    \        val keysEqual = keysSize == lowerCaseDictKeysSize && keysSize == upperCaseDictKeysSize\
    \ && keysSize == lowerCaseDictValuesSize && keysSize == upperCaseDictValuesSize\n\
    \        val keysEqual = keysSize == lowerCaseDictKeysSize && keysSize == upperCaseDictKeysSize\
    \ && keysSize == lowerCaseDictValuesSize && keysSize == upperCaseDictValuesSize\n\
    \        val keysEqual = keysSize == lowerCaseDictKeysSize && keysSize == upperCaseDictKey",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase.nonEmpty)\n        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n\
    \        val lowerCaseDictSize = lowerCaseDict.size\n        val upperCaseDictSize\
    \ = upperCaseDict.size\n        val isAllLowerCase = lowerCaseKeys.forall(_.nonEmpty)\n\
    \        val isAllUpperCase = upperCaseKeys.forall(_.nonEmpty)\n        val isAllDict\
    \ = lowerCaseDictSize == upperCaseDictSize && lowerCaseDictSize == keys.size\n\
    \        val isAllDictCase = isAllDict && isAllLowerCase && isAllUpperCase\n \
    \       isAllDictCase", "        if (dict.isEmpty) false\n        else (dict.toSeq.map(_.toLowerCase).forall(_.isLowercase)\
    \ || dict.toSeq.map(_.toUpperCase).forall(_.isUppercase))", "        val keys\
    \ = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val lowerSet = lower.toSet\n        val upperSet\
    \ = upper.toSet\n        val result = lowerSet.size == upperSet.size && lowerSet.size\
    \ == keys.size\n        result", "        if (dict.isEmpty) false\n        else\
    \ (dict.toList.map(_.toLowerCase).forall(_.equals(_.toLowerCase)) || dict.toList.map(_.toUpperCase).forall(_.equals(_.toUpperCase)))",
  "        val keys = dict.keys\n        if (keys.length == 0) false\n        else\
    \ {\n            val lowerCaseKeys = keys.map(_.toLowerCase)\n            val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n            lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n            upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))\n        }", "        val keys\
    \ = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val both = keys.zip(lower).zip(upper)\n \
    \       val result = both.forall(x => x._1 == x._2)\n        return result", " \
    \       val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseKeySet\
    \ = lowerCaseKeys.toSet\n        val upperCaseKeySet = upperCaseKeys.toSet\n \
    \       val allKeysSet = lowerCaseKeySet.union(upperCaseKeySet)\n        val isAllKeysSet\
    \ = allKeysSet.isEmpty\n        val isAllKeysLowerCase = lowerCaseKeySet.isEmpty\n\
    \        val isAllKeysUpperCase = upperCaseKeySet.isEmpty\n        isAllKeysSet\
    \ && isAllKeysLowerCase && isAllKeysUpperCase && allKeysSet.isSubset(keys)", " \
    \       val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n  \
    \      val upper = keys.map(_.toUpperCase)\n        val both = keys.map(key =>\
    \ (key, key.toLowerCase, key.toUpperCase))\n        val all = lower ++ upper ++\
    \ both\n        val notAll = keys.filter(!keys.contains(_))\n        val notBoth\
    \ = keys.filter(!keys.contains(_).contains(_))\n        val notAllLower = keys.filter(!keys.contains(_).contains(_).toLowerCase)\n\
    \        val notAllUpper = keys.filter(!keys.contains(_).contains(_).toUpperCase)\n\
    \        val notBothLower = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(_))\n\
    \        val notBothUpper = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(_))\n\
    \        val notAllLower = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(_))\n\
    \        val notAllUpper = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(_))\n\
    \        val notBothLower = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(_))\n\
    \        val notBothUpper = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(_))\n\
    \        val notAllLower = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(_))\n\
    \        val notAllUpper = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(_))\n\
    \        val notBothLower = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(_))\n\
    \        val notBothUpper = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(_))\n\
    \        val notAllLower = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(_))\n\
    \        val notAllUpper = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(_))\n\
    \        val notBothLower = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(_))\n\
    \        val notBothUpper = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(_))\n\
    \        val notAllLower = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(_))\n\
    \        val notAllUpper = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(_))\n\
    \        val notBothLower = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(_))\n\
    \        val notBothUpper = keys.filter(!keys.contains(_).contains(_).toLowerCase.contains(",
  "        val keys = dict.keys\n        if(keys.length == 0) return true\n      \
    \  val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keys\n        if(keys.length == 0) return false\n     \
    \   val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict\
    \ = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty() && upperCaseDict.isEmpty()",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  || upperCaseDict.isEmpty", "        if (dict.isEmpty)\
    \ false\n        else (dict.toList.map(_.toLowerCase).forall(_.equals(_.toLowerCase))\
    \ &&\n            dict.toList.map(_.toUpperCase).forall(_.equals(_.toUpperCase)))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isLowerCase\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val isUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val isAllStrings = isLowerCase && isUpperCase\n        isAllStrings",
  "        val keys = dict.keys\n        if(keys.isEmpty) false\n        else if(keys.forall(_.isInstanceOf[String]))\
    \ true\n        else false", "        if (dict.isEmpty)\n            return false\n\
    \        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n \
    \       val upper = keys.map(_.toUpperCase)\n        val low = lower.toSet\n \
    \       val up = upper.toSet\n        val both = low + up\n        val notBoth\
    \ = keys.filter(!both.contains(_))\n        val notLower = keys.filter(!low.contains(_))\n\
    \        val notUpper = keys.filter(!up.contains(_))\n        val notBothNotLower\
    \ = keys.filter(!both.contains(_) && !low.contains(_))\n        val notBothNotUpper\
    \ = keys.filter(!both.contains(_) && !up.contains(_))\n        val notLowerNotUpper\
    \ = keys.filter(!low.contains(_) && !up.contains(_))\n        val notLowerNotBoth\
    \ = keys.filter(!low.contains(_) && !both.contains(_))\n        val notUpperNotBoth\
    \ = keys.filter(!up.contains(_) && !both.contains(_))\n        val notLowerNotUpperNotBoth\
    \ = keys.filter(!low.contains(_) && !up.contains(_) && !both.contains(_))\n  \
    \      val notLowerNotUpperNotBothNotLower = keys.filter(!low.contains(_) && !up.contains(_)\
    \ && !both.contains(_) && !low.contains(_))\n        val notLowerNotUpperNotBothNotUpper\
    \ = keys.filter(!low.contains(_) && !up.contains(_) && !both.contains(_) && !up.contains(_))\n\
    \        val notLowerNotUpperNotBothNotUpperNotLower = keys.filter(!low.contains(_)\
    \ && !up.contains(_) && !both.contains(_) && !up.contains(_) && !low.contains(_))\n\
    \        val notLowerNotUpperNotBothNotUpperNotUpper = keys.filter(!low.contains(_)\
    \ && !up.contains(_) && !both.contains(_) && !up.contains(_) && !up.contains(_))\n\
    \        val notLowerNotUpperNotBothNotUpperNotUpperNotLower = keys.filter(!low.contains(_)\
    \ && !up.contains(_) && !both.contains(_) && !up.contains(_) && !up.contains(_)\
    \ && !low.contains(_))\n        val notLowerNotUpperNotBothNotUpperNotUpperNotUpper\
    \ = keys.filter(!low.contains(_) && !up.contains(_) && !both.contains(_) && !up.contains(_)\
    \ && !up.contains(_) && !up.contains(_))\n        val notLowerNotUpperNotBothNotUpperNotUpperNotUpperNotLower\
    \ = keys.filter(!low.contains(_) && !up.contains(_) && !both.contains(_) && !up.contains(_)\
    \ && !up.contains(_) && !up.contains(_) && !low.contains(_))\n        val notLowerNotUpperNotBothNot",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keySet\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val allStringKeys = keys.toSet\n        val\
    \ allStringKeysUpper = upperCaseKeys.toSet\n        val allStringKeysLower = lowerCaseKeys.toSet\n\
    \        val allStringKeysAll = allStringKeys.toSet\n        val allStringKeysAllUpper\
    \ = allStringKeysAll.filter(x => allStringKeysUpper.contains(x))\n        val\
    \ allStringKeysAllLower = allStringKeysAll.filter(x => allStringKeysLower.contains(x))\n\
    \        val allStringKeysAllAll = allStringKeysAll.filter(x => allStringKeysAll.contains(x))\n\
    \        val allStringKeysAllAllUpper = allStringKeysAllAll.filter(x => allStringKeysAllUpper.contains(x))\n\
    \        val allStringKeysAllAllLower = allStringKeysAllAll.filter(x => allStringKeysAllLower.contains(x))\n\
    \        val allStringKeysAllAllAll = allStringKeysAllAll.filter(x => allStringKeysAllAll.contains(x))\n\
    \        val allStringKeysAllAllAllUpper = allStringKeysAllAllAll.filter(x =>\
    \ allStringKeysAllAllUpper.contains(x))\n        val allStringKeysAllAllAllLower\
    \ = allStringKeysAllAllAll.filter(x => allStringKeysAllAllLower.contains(x))\n\
    \        val allStringKeysAllAllAllAll = allStringKeysAllAllAll.filter(x => allStringKeysAllAllAll.contains(x))\n\
    \        val allStringKeysAllAllAllAllUpper = allStringKeysAllAllAllAll.filter(x\
    \ => allStringKeysAllAllAllUpper.contains(x))\n        val allStringKeysAllAllAllAllLower\
    \ = allStringKeysAllAllAllAll.filter(x => allStringKeysAllAllAllLower.contains(x))\n\
    \        val allStringKeysAllAllAllAllAll = allStringKeysAllAllAllAll.filter(x\
    \ => allStringKeysAllAllAllAll.contains(x))\n        val allStringKeysAllAllAllAllAllUpper\
    \ = allStringKeysAllAllAllAllAll.filter(x => allStringKeysAllAllAllAllUpper.contains(x))\n\
    \        val allStringKeysAllAllAllAllAll", "        if (dict.isEmpty) false\n\
    \        else (\n            dict.keys.toSet.size == dict.keys.toSet.filter(_.isLetter).size\
    \ &&\n            dict.keys.toSet.size == dict.keys.toSet.filter(_.isLetterOrDigit).size\n\
    \        )", "        val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val allStrings =\
    \ keys.forall(_.isInstanceOf[String])\n        val allStringsUpper = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val allStringsLower = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val allStringsAll = allStrings && allStringsUpper && allStringsLower\n\
    \        allStringsAll", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key =>\
    \ dict.get(key).toLowerCase == dict.get(key))\n        upperCaseKeys.forall(key\
    \ => dict.get(key).toUpperCase == dict.get(key))", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == key.toLowerCase)\n        upperCaseKeys.forall(key => dict.get(key) == key.toUpperCase)",
  "        val keys = dict.keySet\n        val lower = keys.map(_.toLowerCase)\n \
    \       val upper = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n\
    \        val result = all forall (key => key.isInstanceOf[String])\n        result",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCase\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val allUpperCase = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        allLowerCase || allUpperCase", "        val keys = dict.keys\n      \
    \  if (keys.length == 0) return true\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        if (dict.isEmpty)\
    \ false\n        else (dict.toList.map(_.toLowerCase).forall(_.equals(_.toLowerCase))\
    \ &&\n            dict.toList.map(_.toUpperCase).forall(_.equals(_.toUpperCase)))",
  "        val keys = dict.keys\n        if(keys.length == 0) return false\n     \
    \   val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keySet\n        val isAllStrings = keys.forall(_.isInstanceOf[String])\n\
    \        val isAllUpper = keys.forall(_.toUpperCase == _.toUpperCase)\n      \
    \  val isAllLower = keys.forall(_.toLowerCase == _.toLowerCase)\n        !isAllStrings\
    \ && !isAllUpper && !isAllLower", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n   \
    \     upperCaseKeys.forall(key => dict.get(key).isInstanceOf[String])", "    \
    \    val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys.contains)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n\
    \        lowerCaseDict.isEmpty  && upperCaseDict.isEmpty", "        val keys =\
    \ dict.keys\n        if(keys.isEmpty) false else keys.forall(_.isInstanceOf[String])"]
stop_tokens:
- "\n    }\n"
