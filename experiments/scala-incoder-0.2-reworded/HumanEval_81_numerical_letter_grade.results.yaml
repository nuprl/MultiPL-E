language: scala
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesLength = gradesKeys.size\n        val gradesSum = gradesValues.sum\n\
    \        val gradesAverage = gradesSum / gradesLength\n        val gradesMin =\
    \ gradesValues.min\n        val gradesMax = gradesValues.max\n        val gradesMedian\
    \ = gradesValues.median\n        val gradesMedianIndex = gradesValues.indexOf(gradesMedian)\n\
    \        val gradesMedianIndex2 = gradesValues.indexOf(gradesMedian)\n       \
    \ val gradesMedianIndex3 = gradesValues.indexOf(gradesMedian)\n        val gradesMedianIndex4\
    \ = gradesValues.indexOf(gradesMedian)\n        val gradesMedianIndex5 = gradesValues.indexOf(gradesMedian)\n\
    \        val gradesMedianIndex6 = gradesValues.indexOf(gradesMedian)\n       \
    \ val gradesMedianIndex7 = gradesValues.indexOf(gradesMedian)\n        val gradesMedianIndex8\
    \ = gradesValues.indexOf(gradesMedian)\n        val gradesMedianIndex9 = gradesValues.indexOf(gradesMedian)\n\
    \        val gradesMedianIndex10 = gradesValues.indexOf(gradesMedian)\n      \
    \  val gradesMedianIndex11 = gradesValues.indexOf(gradesMedian)\n        val gradesMedianIndex12\
    \ = gradesValues.indexOf(gradesMedian)\n        val gradesMedianIndex13 = gradesValues.indexOf(gradesMedian)\n\
    \        val gradesMedianIndex14 = gradesValues.indexOf(gradesMedian)\n      \
    \  val gradesMedianIndex15 = gradesValues.indexOf(gradesMedian)\n        val gradesMedianIndex16\
    \ = gradesValues.indexOf(gradesMedian)\n        val gradesMedianIndex17 = gradesValues.indexOf(gradesMedian)\n\
    \        val gradesMedianIndex18 = gradesValues.indexOf(gradesMedian)\n      \
    \  val gradesMedianIndex19 = gradesValues.indexOf(gradesMedian)\n        val gradesMedianIndex20\
    \ = gradesValues.indexOf(gradesMedian)\n        val gradesMedianIndex21 = gradesValues.indexOf(gradesMe\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4o5ie_kw.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp4o5ie_kw.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp4o5ie_kw.scala:57:5 ---------------------\e[0m\e[0m\n\
    \e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesCount = gradesValues.size\n\
    \        val gradesSumOfSquares = gradesValues.map(x => x * x).sum\n        val\
    \ gradesSumOfSquaresOfSquares = gradesSumOfSquares * gradesSumOfSquares\n    \
    \    val gradesSumOfSquaresOfSquaresOfSquares = gradesSumOfSquaresOfSquares *\
    \ gradesSumOfSquares\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquares\n     \
    \   val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSumOfSquaresOfSquaresOfSquaresOfSquares\
    \ * gradesSumOfSquaresOfSquaresOfSquares\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares *\
    \ gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \        val gradesSum\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2gidmhlo.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2gidmhlo.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\e\
    [0m = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp2gidmhlo.scala:40:171 --------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\e\
    [0m = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ * gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2gidmhlo.scala:42:5 ---------------------\e[0m"
  stdout: ''
  timestamp: 1659805007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toString -> x)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2\
    \ > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n   \
    \     val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2\
    \ > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n   \
    \     val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n \
    \       val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val\
    \ gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15\
    \ = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2\
    \ > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n \
    \       val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val\
    \ gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20\
    \ = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2\
    \ > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n \
    \       val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted26 = gradesMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplzzhrhe5.scala:54:5\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 4.0f).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ + \"\").reverse).mapValues(_.map(_ + \"\").reverse)\n\
    \        val gradesMap2 = grades.groupBy(_ / 3.7f).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ + \"\").reverse).mapValues(_.map(_ + \"\").reverse)\n\
    \        val gradesMap3 = grades.groupBy(_ / 3.3f).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ + \"\").reverse).mapValues(_.map(_ + \"\").reverse)\n\
    \        val gradesMap4 = grades.groupBy(_ / 3.0f).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ + \"\").reverse).mapValues(_.map(_ + \"\").reverse)\n\
    \        val gradesMap5 = grades.groupBy(_ / 2.7f).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ + \"\").reverse).mapValues(_.map(_ + \"\").reverse)\n\
    \        val gradesMap6 = grades.groupBy(_ / 2.3f).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ + \"\").reverse).mapValues(_.map(_ + \"\").reverse)\n\
    \        val gradesMap7 = grades.groupBy(_ / 2.0f).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ + \"\").reverse).mapValues(_.map(_ + \"\").reverse)\n\
    \        val gradesMap8 = grades.groupBy(_ / 1.7f).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ + \"\").reverse).mapValues(_.map(_ + \"\").reverse)\n\
    \        val gradesMap9 = grades.groupBy(_ / 1.3f).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ + \"\").reverse).mapValues(_.map(_ + \"\").reverse)\n\
    \        val gradesMap10 = grades.groupBy(_ / 1.0f).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ + \"\").reverse).mapValues(_.map(_ + \"\").reverse)\n\
    \        val gradesMap11 = grades.groupBy(_ / 0.7f).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ + \"\").reverse).mapValues(_.map(_ + \"\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu9lebcg9.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpu9lebcg9.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA\
    \ = gradesMap.sortBy(_._1).reverse\n        val gradesSortedByGPAWithLetterGrade\
    \ = gradesSortedByGPA.map{\n            case (grade, gpa) => \n              \
    \  val letterGrade = if (gpa > 3.0) \"B+\" else if (gpa > 2.7) \"B\" else if (gpa\
    \ > 2.3) \"B-\" else if (gpa > 2.0) \"C+\" else if (gpa > 1.7) \"C\" else if (gpa\
    \ > 1.3) \"C-\" else if (gpa > 1.0) \"D+\" else if (gpa > 0.7) \"D\" else if (gpa\
    \ > 0.0) \"D-\" else \"E\"\n                (grade, letterGrade)\n        }\n\
    \        gradesSortedByGPAWithLetterGrade.map(_._1).mkString(\",\")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpi3vfihn9.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n1 error found\n"
  stdout: ''
  timestamp: 1659805007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValue\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesLength\e\
    [0m = gradesMapSortedReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    ["
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSorted\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa6vonc2e.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesL"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = grades.sortBy(_._1)\n        val gradesSortedByValue = grades.sortBy(_._2)\n\
    \        val gradesSortedByKeyAndValue = grades.sortBy(_._1).sortBy(_._2)\n  \
    \      val gradesSortedByKeyAndValueAndKey = grades.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val gradesSortedByKeyAndValueAndKeyAndValue = grades.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4)\n\
    \        val gradesSortedByKeyAndValueAndKeyAndValueAndKey = grades.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5)\n\
    \        val gradesSortedByKeyAndValueAndKeyAndValueAndKeyAndValue = grades.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5).sortBy(_._6)\n\
    \        val gradesSortedByKeyAndValueAndKeyAndValueAndKeyAndValueAndKey = grades.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5).sortBy(_._6).sortBy(_._7)\n\
    \        val gradesSortedByKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValue\
    \ = grades.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5).sortBy(_._6).sortBy(_._7).sortBy(_._8)\n\
    \        val gradesSortedByKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKey\
    \ = grades.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5).sortBy(_._6).sortBy(_._7).sortBy(_._8).sortBy(_._9)\n\
    \        val gradesSortedByKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValue\
    \ = grades.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5).sortBy(_._6).sortBy(_._7).sortBy(_._8).sortBy(_._9).sortBy(_._10)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpau4byln1.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpau4byln1.scala:28:48 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m =\
    \ grades.sortBy(_._1)\n\e[31m\e[31m   |\e[0m                                 \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \  value _1 is not a member of Float\n\e[31m\e[31m-- Error: /tmp/tmpau4byln1.scala:28:51\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m = grades.sortBy(_._1)\n\e[31m\e\
    [31m   |\e[0m                                                   ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpau4byln1.scala:29:50 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByValue\e[0m\
    \ = grades.sortBy(_._2)\n\e[31m\e[31m   |\e[0m                               \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \      value _2 is not a member of Float\n\e[31m\e[31m-- Error: /tmp/tmpau4byln1.scala:29:53\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesSortedByValue\e[0m = grades.sortBy(_._2)\n\e[31m\e\
    [31m   |\e[0m                                                     ^\e[0m\n\e[31m\
    \   |\e[0mamb"
  stdout: ''
  timestamp: 1659805010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => if(grade > 3.0) \"B+\" else\
    \ if (grade > 2.7) \"B\" else if (grade > 2.3) \"B-\" else if (grade > 2.0) \"\
    C+\" else if (grade > 1.7) \"C\" else if (grade > 1.3) \"C-\" else if (grade >\
    \ 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade > 0.0) \"D-\" else \"\
    E\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxp6pycdp.scala:30)\n\tat Problem.main(tmpxp6pycdp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyAndValue = gradesSortedByKey.sortBy(_._1).sortBy(_._2)\n\
    \        val gradesSortedByValueAndKey = gradesSortedByValue\n        val gradesSortedByValueAndKeyAndValue\
    \ = gradesSortedByValueAndKey.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n       \
    \ val gradesSortedByValueAndKeyAndValueAndKey = gradesSortedByValueAndKeyAndValue.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4)\n\
    \        val gradesSortedByValueAndKeyAndValueAndKeyAndValue = gradesSortedByValueAndKeyAndValueAndKey.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5)\n\
    \        val gradesSortedByValueAndKeyAndValueAndKeyAndValueAndKey = gradesSortedByValueAndKeyAndValueAndKeyAndValue.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5).sortBy(_._6)\n\
    \        val gradesSortedByValueAndKeyAndValueAndKeyAndValueAndKeyAndValue = gradesSortedByValueAndKeyAndValueAndKeyAndValueAndKey.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5).sortBy(_._6).sortBy(_._7)\n\
    \        val gradesSortedByValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKey\
    \ = gradesSortedByValueAndKeyAndValueAndKeyAndValueAndKeyAndValue.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5).sortBy(_._6).sortBy(_._7).sortBy(_._8)\n\
    \        val gradesSortedByValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValue\
    \ = gradesSortedByValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKey.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5).sortBy(_._6).sortBy(_._\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeyuegp01.scala:38:245 --------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValue\e\
    [0m = gradesSortedByValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKey.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5).sortBy(_._6).sortBy(_._\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                   an identifier expected, but '_' found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpeyuegp01.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeyuegp01.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysIterator = gradesMapSortedReversedKeys.iterator\n\
    \        val gradesMapSortedReversedValuesIterator = gradesMapSortedReversedValues.iterator\n\
    \        val gradesMapSortedReversedKeysIteratorNext = gradesMapSortedReversedKeysIterator.next\n\
    \        val gradesMapSortedReversedValuesIteratorNext = gradesMapSortedReversedValuesIterator.next\n\
    \        val gradesMapSortedReversedKeysIteratorNextValue = gradesMapSortedReversedKeysIteratorNext._1\n\
    \        val gradesMapSortedReversedValuesIteratorNextValue = gradesMapSortedReversedValuesIteratorNext._1\n\
    \        val gradesMapSortedReversedKeysIteratorNextKey = gradesMapSortedReversedKeysIteratorNext._2\n\
    \        val gradesMapSortedReversedValuesIteratorNextKey = gradesMapSortedReversedValuesIteratorNext._2\n\
    \        val gradesMapSortedReversedKeysIteratorNextKeyValue = gradesMapSortedReversedKeysIteratorNextKey\n\
    \        val gradesMapSortedReversedValuesIteratorNextKeyValue = gradesMapSortedReversedValuesIteratorNextKey\n\
    \        val gradesMapSortedReversedKeysIteratorNextKeyValueValue = gradesMapSortedReversedKeysIteratorNextKeyValue\n\
    \        val gradesMapSortedReversedValuesIteratorNextKeyValueValue = gradesMapSortedReversedValuesIteratorNextKeyValue\n\
    \        val gradesMapSortedReversedKeysIteratorNextKeyValueValueValue = gradesMapSortedReversedKeysIteratorNextKeyValueValue\n\
    \        val gradesMapSortedReversedValuesIteratorNextKeyValueValueValue = gradesMapSortedReversedValuesIteratorNextKeyValueValue\n\
    \        val gradesMapSortedReversedKeysIteratorNextKeyValueValueValueValue =\
    \ gradesMapSortedReversedKeysIteratorNextKeyValueValueValue\n        val gradesMapSortedReversedValuesIteratorNextKeyValueValueValueValue\
    \ = gradesMapSortedReversedValuesIteratorNextKeyValueValueValue\n        val gradesMapSortedReversedKeysIteratorNextKeyValueValueValueValueValue\
    \ = gradesMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9dyvt0ry.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9dyvt0ry.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesEnumerator\
    \ = grades.iterator\n        val gradesIterator = grades.iterator\n        val\
    \ gradesStream = grades.toStream\n        val gradesEnumerator = grades.iterator\n\
    \        val gradesIterator = grades.iterator\n        val gradesStream = grades.toStream\n\
    \        val gradesEnumerator = grades.iterator\n        val gradesIterator =\
    \ grades.iterator\n        val gradesStream = grades.toStream\n        val gradesEnumerator\
    \ = grades.iterator\n        val gradesIterator = grades.iterator\n        val\
    \ gradesStream = grades.toStream\n        val gradesEnumerator = grades.iterator\n\
    \        val gradesIterator = grades.iterator\n        val gradesStream = grades.toStream\n\
    \        val gradesEnumerator = grades.iterator\n        val gradesIterator =\
    \ grades.iterator\n        val gradesStream = grades.toStream\n        val gradesEnumerator\
    \ = grades.iterator\n        val gradesIterator = grades.iterator\n        val\
    \ gradesStream = grades.toStream\n        val gradesEnumerator = grades.iterator\n\
    \        val gradesIterator = grades.iterator\n        val gradesStream = grades.toStream\n\
    \        val gradesEnumerator = grades.iterator\n        val gradesIterator =\
    \ grades.iterator\n        val gradesStream = grades.toStream\n        val gradesEnumerator\
    \ = grades.iterator\n        val gradesIterator = grades.iterator\n        val\
    \ gradesStream = grades.toStream\n        val gradesEnumerator = grades.iterator\n\
    \        val gradesIterator = grades.iterator\n        val gradesStream = grades.toStream\n\
    \        val gradesEnumerator = grades.iterator\n        val gradesIterator =\
    \ grades.iterator\n        val gradesStream = grades.toStream\n        val gradesEnumerator\
    \ = grades.iterator\n        val gradesIterator = grades.iterator\n        val\
    \ gradesStream = grades.toStream\n        val gradesEnumerator = grades.iterator\n\
    \        val gradesIterator = grades.iterator\n        val gradesStream = grades.toStream\n\
    \        val gradesEnumerator = grades.iterator\n        val gradesIterator =\
    \ grades.iterator\n        val gradesStream\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp18pow_nw.scala:77:4 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp18pow_nw.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesEnumerator\e[0m = grades.iterator\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesEnumerator\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesEnumerator\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp18pow_nw.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesIterator\e[0m = grades.iterator\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mgradesIterator is already defined as \e[33mvalue\e[0m \e[35mgradesIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp18pow_nw.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesStream\e[0m = grades.toStream\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mgradesStream is already defined as \e[33mvalue\e[0m \e[35mgradesStream\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp18pow_nw.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesEnumerator\e[0m = grades.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgradesEnumerator is already defined as \e[33mvalue\e[0m \e[35mgradesEnumerator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp18pow_nw.sc"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toList).mapValues(_.sortBy(_.toFloat))\n\
    \        val gradesMap2 = gradesMap.mapValues(_.map(_ + 1))\n        val gradesMap3\
    \ = gradesMap2.mapValues(_.map(_ - 1))\n        val gradesMap4 = gradesMap3.mapValues(_.map(_\
    \ + 1))\n        val gradesMap5 = gradesMap4.mapValues(_.map(_ - 1))\n       \
    \ val gradesMap6 = gradesMap5.mapValues(_.map(_ + 1))\n        val gradesMap7\
    \ = gradesMap6.mapValues(_.map(_ - 1))\n        val gradesMap8 = gradesMap7.mapValues(_.map(_\
    \ + 1))\n        val gradesMap9 = gradesMap8.mapValues(_.map(_ - 1))\n       \
    \ val gradesMap10 = gradesMap9.mapValues(_.map(_ + 1))\n        val gradesMap11\
    \ = gradesMap10.mapValues(_.map(_ - 1))\n        val gradesMap12 = gradesMap11.mapValues(_.map(_\
    \ + 1))\n        val gradesMap13 = gradesMap12.mapValues(_.map(_ - 1))\n     \
    \   val gradesMap14 = gradesMap13.mapValues(_.map(_ + 1))\n        val gradesMap15\
    \ = gradesMap14.mapValues(_.map(_ - 1))\n        val gradesMap16 = gradesMap15.mapValues(_.map(_\
    \ + 1))\n        val gradesMap17 = gradesMap16.mapValues(_.map(_ - 1))\n     \
    \   val gradesMap18 = gradesMap17.mapValues(_.map(_ + 1))\n        val gradesMap19\
    \ = gradesMap18.mapValues(_.map(_ - 1))\n        val gradesMap20 = gradesMap19.mapValues(_.map(_\
    \ + 1))\n        val gradesMap21 = gradesMap20.mapValues(_.map(_ - 1))\n     \
    \   val gradesMap22 = gradesMap21.mapValues(_.map(_ + 1))\n        val gradesMap23\
    \ = gradesMap22.mapValues(_.map(_ - 1))\n        val gradesMap24 = gradesMap23.mapValues(_.map(_\
    \ + 1))\n        val gradesMap25 = gradesMap24.mapValues(_.map(_ - 1))\n     \
    \   val gradesMap26 = gradesMap25.mapValues(_.map(_ + 1))\n        val gradesMap27\
    \ = gradesMap26.mapValues(_.map(_ - 1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv9aaonpt.scala:54:5\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedMap\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n\
    \        val gradesSortedMapReversedKeys = gradesSortedMapReversed.keys\n    \
    \    val gradesSortedMapReversedValues = gradesSortedMapReversed.values\n    \
    \    val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcw5th1k1.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedValuesLength\e\
    [0m = gradesSortedMapReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesSortedMapReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcw5th1k1.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedValuesLength\e[0m = gradesSortedMapReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesSortedMapReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcw5th1k1.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedValuesLength\e[0m = gradesSortedMapReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesSortedMapReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcw5th1k1.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedValuesLength\e[0m = gradesSortedMapReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    ["
  stdout: ''
  timestamp: 1659805008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sort\n        val gradesValuesSorted = gradesValues.sort\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3sgk2ruv.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3sgk2ruv.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesKeysSortedLength\e[0m = gradesKeysSorted.length\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3sgk2ruv.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3sgk2ruv.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3sgk2ruv.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSort"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toInt).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReversed = gradesMap.map(x => (x._1,\
    \ x._2))\n        val gradesMapReversedKeys = gradesMapReversed.keys\n       \
    \ val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedValuesSorted\
    \ = gradesMapReversedValues.sortBy(x => x)\n        val gradesMapReversedValuesSortedKeys\
    \ = gradesMapReversedValuesSorted.keys\n        val gradesMapReversedValuesSortedValues\
    \ = gradesMapReversedValuesSorted.values\n        val gradesMapReversedValuesSortedKeysSorted\
    \ = gradesMapReversedValuesSortedKeys.sortBy(x => x)\n        val gradesMapReversedValuesSortedKeysSortedValues\
    \ = gradesMapReversedValuesSortedKeysSorted.map(x => gradesMapReversedValuesSortedKeysSorted.indexOf(x))\n\
    \        val gradesMapReversedValuesSortedKeysSortedValuesSorted = gradesMapReversedValuesSortedKeysSortedValues.sortBy(x\
    \ => x)\n        val gradesMapReversedValuesSortedKeysSortedValuesSortedKeys =\
    \ gradesMapReversedValuesSortedKeysSortedValuesSorted.keys\n        val gradesMapReversedValuesSortedKeysSortedValuesSortedKeysSorted\
    \ = gradesMapReversedValuesSortedKeysSortedValuesSortedKeys.sortBy(x => x)\n \
    \       val gradesMapReversedValuesSortedKeysSortedValuesSortedKeysSortedValues\
    \ = gradesMapReversedValuesSortedKeysSortedValuesSortedKeysSorted.map(x => gradesMapReversedValuesSortedKeysSortedValuesSortedKeysSorted.indexOf(x))\n\
    \        val gradesMapReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSortedKeys\
    \ = gradesMapReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSortedKeysSorted.map(x\
    \ => gradesMapReversedValuesSortedKeysSortedValuesSortedKeysSorted.indexOf(x))\n\
    \        val gradesMapReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSortedKeysSortedValues\
    \ = gradesMapReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSortedKeysSortedValuesSorted.map(x\
    \ => gradesMapReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSortedKeysSorted.indexOf(x))\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx93sru9u.scala:31:68 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesSorted\e\
    [0m = gradesMapReversedValues.sortBy(\e[36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m\
    \                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value sortBy is not a member of\
    \ Iterable[Int]\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx93sru9u.scala:40:92\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSortedKeys\e\
    [0m = gradesMapReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSortedKeysSorted.map(\e\
    [36mx\e[0m => gradesMapReversedValuesSortedKeysSortedValuesSortedKeysSorted.indexOf(x))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: gradesMapReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSortedKeysSorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx93sru9u.scala:41:104\
    \ -----------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSortedKeysSortedValues\e\
    [0m = gradesMapReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSortedKeysSortedValuesSorted.map(\e\
    [36mx\e[0m => gradesMapReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSortedKeysSorted.indexOf(x))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: gradesMapReversedValuesSortedKeysSortedValuesSortedKeysSortedValuesSortedKeysSortedValuesSorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when com"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ % 4).map(\"A+\" -> \"A+\", \"B\" -> \"B+\", \"C\" ->\
    \ \"C+\", \"D\" -> \"D+\", \"E\" -> \"E\"))\n        gradesMap.mapValues(_.map(_._2))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprnxb82bc.scala:27:108\
    \ -------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m = grades.groupBy(_ / \e[31m4\e[0m).mapValues(_.toList.sortBy(_ * -\e[31m1\e\
    [0m)).mapValues(_.map(_ % \e[31m4\e[0m).map(\e[31m\"A+\"\e[0m -> \e[31m\"A+\"\e\
    [0m, \e[31m\"B\"\e[0m -> \e[31m\"B+\"\e[0m, \e[31m\"C\"\e[0m -> \e[31m\"C+\"\e\
    [0m, \e[31m\"D\"\e[0m -> \e[31m\"D+\"\e[0m, \e[31m\"E\"\e[0m -> \e[31m\"E\"\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mFound:    ((String, String), (String, String), (String, String),\
    \ (String, String), (String\n\e[31m   |\e[0m  , \n\e[31m   |\e[0mString))\n\e\
    [31m   |\e[0mRequired: Float => Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmprnxb82bc.scala:28:36 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m        gradesMap.mapValues(_.map(_._2))\n\e[31m\e[31m   |\e[0m           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       value _2 is not a member of Nothing\n2 errors found\n"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReverse = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReverseKeys = gradesMapSortedReverse.keys\n      \
    \  val gradesMapSortedReverseValues = gradesMapSortedReverse.values.toList\n \
    \       val gradesMapSortedReverseValuesSum = gradesMapSortedReverseValues.sum\n\
    \        val gradesMapSortedReverseValuesSum2 = gradesMapSortedReverseValuesSum\
    \ * gradesMapSortedReverseValuesSum\n        val gradesMapSortedReverseValuesSum3\
    \ = gradesMapSortedReverseValuesSum2 * gradesMapSortedReverseValuesSum\n     \
    \   val gradesMapSortedReverseValuesSum4 = gradesMapSortedReverseValuesSum3 *\
    \ gradesMapSortedReverseValuesSum\n        val gradesMapSortedReverseValuesSum5\
    \ = gradesMapSortedReverseValuesSum4 * gradesMapSortedReverseValuesSum\n     \
    \   val gradesMapSortedReverseValuesSum6 = gradesMapSortedReverseValuesSum5 *\
    \ gradesMapSortedReverseValuesSum\n        val gradesMapSortedReverseValuesSum7\
    \ = gradesMapSortedReverseValuesSum6 * gradesMapSortedReverseValuesSum\n     \
    \   val gradesMapSortedReverseValuesSum8 = gradesMapSortedReverseValuesSum7 *\
    \ gradesMapSortedReverseValuesSum\n        val gradesMapSortedReverseValuesSum9\
    \ = gradesMapSortedReverseValuesSum8 * gradesMapSortedReverseValuesSum\n     \
    \   val gradesMapSortedReverseValuesSum10 = gradesMapSortedReverseValuesSum9 *\
    \ gradesMapSortedReverseValuesSum\n        val gradesMapSortedReverseValuesSum11\
    \ = gradesMapSortedReverseValuesSum10 * gradesMapSortedReverseValuesSum\n    \
    \    val gradesMapSortedReverseValuesSum12 = gradesMapSortedReverseValuesSum11\
    \ * gradesMapSortedReverseValuesSum\n        val gradesMapSortedReverseValuesSum13\
    \ = gradesMapSortedReverseValuesSum12 * gradesMapSortedReverseValuesSum\n    \
    \    val gradesMapSortedReverseValuesSum14 = gradesMapSortedReverseValuesSum13\
    \ * gradesMapSortedReverseValuesSum\n        val gradesMapSortedReverseValuesSum15\
    \ = gradesMapSortedReverseValuesSum14 * gradesMapSortedReverseValuesSum\n    \
    \    val gradesMapSortedReverseValuesSum16 = gradesMapSortedReverseValuesSum15\
    \ * gradesMapSortedReverseValuesSum\n        val gradesMapSortedReverseValuesSum17\
    \ = gradesMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps50_8qe0.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps50_8qe0.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 4.0f).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ + \"\").reverse).mapValues(_.map(_ + \"\").reverse)\n\
    \        val gradesMap2 = grades.groupBy(_ / 3.7f)\n        val gradesMap3 = grades.groupBy(_\
    \ / 3.3f)\n        val gradesMap4 = grades.groupBy(_ / 3.0f)\n        val gradesMap5\
    \ = grades.groupBy(_ / 2.7f)\n        val gradesMap6 = grades.groupBy(_ / 2.3f)\n\
    \        val gradesMap7 = grades.groupBy(_ / 2.0f)\n        val gradesMap8 = grades.groupBy(_\
    \ / 1.7f)\n        val gradesMap9 = grades.groupBy(_ / 1.3f)\n        val gradesMap10\
    \ = grades.groupBy(_ / 1.0f)\n        val gradesMap11 = grades.groupBy(_ / 0.7f)\n\
    \        val gradesMap12 = grades.groupBy(_ / 0.0f)\n        val gradesMap13 =\
    \ grades.groupBy(_)\n        val gradesMap14 = grades.groupBy(_ / 4.0f)\n    \
    \    val gradesMap15 = grades.groupBy(_ / 3.7f)\n        val gradesMap16 = grades.groupBy(_\
    \ / 3.3f)\n        val gradesMap17 = grades.groupBy(_ / 3.0f)\n        val gradesMap18\
    \ = grades.groupBy(_ / 2.7f)\n        val gradesMap19 = grades.groupBy(_ / 2.3f)\n\
    \        val gradesMap20 = grades.groupBy(_ / 2.0f)\n        val gradesMap21 =\
    \ grades.groupBy(_ / 1.7f)\n        val gradesMap22 = grades.groupBy(_ / 1.3f)\n\
    \        val gradesMap23 = grades.groupBy(_ / 1.0f)\n        val gradesMap24 =\
    \ grades.groupBy(_ / 0.7f)\n        val gradesMap25 = grades.groupBy(_ / 0.0f)\n\
    \        val gradesMap26 = grades.groupBy(_)\n        val gradesMap27 = grades.groupBy(_\
    \ / 4.0f)\n        val gradesMap28 = grades.groupBy(_ / 3.7f)\n        val gradesMap29\
    \ = grades.groupBy(_ / 3.3f)\n        val gradesMap30 = grades.groupBy(_ / 3.0f)\n\
    \        val gradesMap31 = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpul0v5eye.scala:57:25 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mgradesMap31\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpul0v5eye.scala:58:5 ---------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversed\
    \ = gradesSorted.sortBy(x => x).reverse\n        val gradesSortedMapReversedMap\
    \ = gradesSortedMapReversed.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversed\
    \ = gradesSortedMapReversed.sortBy(x => x).reverse.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedMapReversedMapReversedReversed = gradesSortedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedReversedReversed\
    \ = gradesSortedMapReversedMapReversedReversed.sortBy(x => x).reverse.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedReversedReversedReversed\
    \ = gradesSortedMapReversedMapReversedReversedReversed.sortBy(x => x).reverse.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedReversedReversedReversedReversed\
    \ = gradesSortedMapReversedMapReversedReversedReversedReversed.sortBy(x => x).reverse.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedMapReversedMapReversedReversedReversedReversedReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedMapReversedMapReversedReversedReversedReversedReversedReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedMapReversedMapReversedReversedReversedReversedReversedReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedReversedReversedReversedReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp92g7u1vo.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp92g7u1vo.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedMapReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedMapReversedMapReversedReversedReversedReversedReversedReversed.sortBy(\e\
    [36mx\e[0m => x).reverse.map(\e[36mx\e[0m => (x.toInt, x)).toMap\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedMapReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedMapReversedMapReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp92g7u1vo.scala:33:92 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedMapReversedReversed\e\
    [0m = gradesSortedMapReversedMapReversed.sortBy(\e[36mx\e[0m => x).reverse.map(\e\
    [36mx\e[0m => (x.toInt, x)).toMap\n\e[31m\e[31m   |\e[0m                     \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value sortBy is not a member of Map[Int,\
    \ Float]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp92g7u1vo.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat)\n        val gradesMapSorted = gradesMap.sortBy(_._1).sortBy(_._2)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedReversed\
    \ = gradesMapSortedReversed.reverse\n        val gradesMapSortedReversedReversedReversed\
    \ = gradesMapSortedReversedReversed.reverse\n        val gradesMapSortedReversedReversedReversedReversed\
    \ = gradesMapSortedReversedReversedReversed.reverse\n        val gradesMapSortedReversedReversedReversedReversedReversed\
    \ = gradesMapSortedReversedReversedReversedReversed.reverse\n        val gradesMapSortedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapSortedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesMapSortedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapSortedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesMapSortedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapSortedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesMapSortedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapSortedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesMapSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesMapSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesMapSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesMapSortedReversedReversed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpogvkw310.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpogvkw310.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesMapSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpogvkw310.scala:27:65 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e[36mx\e[0m => x.toFloat)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Fou"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesMap.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedReversed\
    \ = gradesSortedByKeyReversed.reverse\n        val gradesSortedByValueReversedReversed\
    \ = gradesSortedByValueReversed.reverse\n        val gradesSortedByKeyReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_npi5wa2.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmp_npi5wa2.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_npi5wa2.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = Map(\n    \
    \        4.0 -> \"A+\",\n            3.7 -> \"A\",\n            3.3 -> \"A-\"\
    ,\n            3.0 -> \"B+\",\n            2.7 -> \"B\",\n            2.3 -> \"\
    B-\",\n            2.0 -> \"C+\",\n            1.7 -> \"C\",\n            1.3\
    \ -> \"C-\",\n            1.0 -> \"D+\",\n            0.7 -> \"D\",\n        \
    \    0.0 -> \"D-\"\n        )\n        val gradesList : List[String] = grades.map(grade\
    \ => gradesMap(grade))\n        gradesList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgymusey4.scala:28:12\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[31m4.0\e[0m ->\
    \ \e[31m\"A+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgymusey4.scala:29:12 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[31m3.7\e[0m -> \e[31m\"A\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgymusey4.scala:30:12 --------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m            \e[31m3.3\e[0m -> \e[31m\"A-\"\e[0m,\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (\e[1m\e[31mDouble\e\
    [0m, String)\n\e[31m   |\e[0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgymusey4.scala:31:12\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            \e[31m3.0\e[0m ->\
    \ \e[31m\"B+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgymusey4.scala:32:12 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[31m2.7\e[0m -> \e[31m\"B\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ ava"
  stdout: ''
  timestamp: 1659805010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.toMap\n        val gradesSortedByKeyReversedMapReversed\
    \ = gradesSortedByKeyReversedMap.reverse\n        val gradesSortedByValueReversedMapReversed\
    \ = gradesSortedByValueReversedMap.reverse\n        val gradesSortedByKeyReversedMapReversedMap\
    \ = gradesSortedByKeyReversedMapReversed.toMap\n        val gradesSortedByValueReversedMapReversedMap\
    \ = gradesSortedByValueReversedMapReversed.toMap\n        val gradesSortedByKeyReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMap.reverse\n        val gradesSortedByValueReversedMapReversedMapReversed\
    \ = gradesSortedByValueReversedMapReversedMap.reverse\n        val gradesSortedByKeyReversedMapReversedMapReversedMap\
    \ = gradesSortedByKeyReversedMapReversedMapReversed.toMap\n        val gradesSortedByValueReversedMapReversedMapReversedMap\
    \ = gradesSortedByValueReversedMapReversedMapReversed.toMap\n        val gradesSortedByKeyReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMapReversedMapReversed.reverse\n     \
    \   val gradesSortedByValueReversedMapReversedMapReversedMapReversed = gradesSortedByValueReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByValueReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByValueReversedMapReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppq9vih0b.scala:46:94 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversedMapReversed\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmppq9vih0b.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppq9vih0b.scala:42:73 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedMapReversedMapReversedMapReversed\e\
    [0m = gradesSortedByKeyReversedMapReversedMapReversedMapReversed.reverse\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedByKeyReversedMapReversedMapReversedMapReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppq9vih0b.scala:43:75\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByValueReversedMapReversedMapReversedMapReversed\e[0m = gradesSortedByValueReversedMapReversedMapReversedMapReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e["
  stdout: ''
  timestamp: 1659805019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar)\n\
    \        grades.map(grade => gradesMap(grade).mkString(\"\"))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpchmggab9.scala:27:59 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toChar)\n\e[31m\e[31m   |\e\
    [0m                                                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue toInt is not a member of List[Float], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpchmggab9.scala:27:78 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toChar)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toChar is not a member of Nothing, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpchmggab9.scala:28:45\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        grades.map(\e[36mgrade\e\
    [0m => gradesMap(grade).mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ mkString is not a member of Nothing - did you mean Nothing.toString?\n3 er"
  stdout: ''
  timestamp: 1659805021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sort\n        val gradesValuesSorted = gradesValues.sort\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3sgk2ruv.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3sgk2ruv.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesKeysSortedLength\e[0m = gradesKeysSorted.length\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3sgk2ruv.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3sgk2ruv.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3sgk2ruv.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSort"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedWithDuplicates =\
    \ gradesKeysSorted.distinct\n        val gradesValuesSortedWithDuplicates = gradesValuesSorted.distinct\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicates.length\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicates.length\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicate\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphvyo485p.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphvyo485p.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesKeysSortedWithDuplicatesLength\e[0m = gradesKeysSortedWithDuplicatesLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedWithDuplicatesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesKeysSortedWithDuplicatesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphvyo485p.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesValuesSortedWithDuplicatesLength\e[0m = gradesValuesSortedWithDuplicatesLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedWithDuplicatesLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesValuesSortedWithDuplicatesLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphvyo485p.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedWithDuplicatesLength\e[0m\
    \ = gradesKeysSortedWithDuplicatesLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedWithDuplicatesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesKeysSortedWithDuplicatesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphvyo485p.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |"
  stdout: ''
  timestamp: 1659805021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSorted\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa6vonc2e.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesL"
  stdout: ''
  timestamp: 1659805009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map( x => if (x > 3.0) \"B+\" else if (x\
    \ > 2.0) \"B\" else if (x > 1.7) \"C\" else if (x > 1.0) \"C\" else if (x > 0.7)\
    \ \"D\" else if (x > 0.0) \"D\" else if (x > 0.0) \"E\" else \"A+\" )\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph_qdddc8.scala:30)\n\tat Problem.main(tmph_qdddc8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReverse\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse2\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse3\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse4\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse5\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse6\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse7\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse8\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse9\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse10\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse11\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse12\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse13\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse14\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse15\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse16\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse17\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse18\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse19\
    \ = gradesSorted.map(x => (x.toInt, x))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_4hwvkq.scala:30:79 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReverse\e\
    [0m = gradesSorted.map(\e[36mx\e[0m => (x.toInt, x)).toMap.reverse\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you\
    \ mean Map[Int, Float].reversed?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_4hwvkq.scala:31:80\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapReverse2\e[0m = gradesSorted.map(\e[36mx\e[0m => (x.toInt,\
    \ x)).toMap.reverse\n\e[31m\e[31m   |\e[0m                                   \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Map[Int, Float] - did you mean Map[Int, Float].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_4hwvkq.scala:32:80 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReverse3\e\
    [0m = gradesSorted.map(\e[36mx\e[0m => (x.toInt, x)).toMap.reverse\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you\
    \ mean Map[Int, Float].reversed?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_4hwvkq.scala:33:80\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapReverse4\e[0m = gradesSorted.map(\e[36mx\e[0m => (x.toInt,\
    \ x)).toMap.reverse\n\e[31m\e[31m   |\e[0m                                   \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Map[Int, Float] - did you mean Map[Int, Float].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_4hwvkq.scala:34:80 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReverse5\e\
    [0m = gradesSorted.map(\e[36mx\e[0m => (x.toInt, x)).toMap.reverse\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^"
  stdout: ''
  timestamp: 1659805024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar)\n\
    \        grades.map(grade => gradesMap(grade).mkString(\"\"))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpchmggab9.scala:27:59 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toChar)\n\e[31m\e[31m   |\e\
    [0m                                                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue toInt is not a member of List[Float], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpchmggab9.scala:27:78 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toChar)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toChar is not a member of Nothing, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpchmggab9.scala:28:45\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        grades.map(\e[36mgrade\e\
    [0m => gradesMap(grade).mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ mkString is not a member of Nothing - did you mean Nothing.toString?\n3 er"
  stdout: ''
  timestamp: 1659805021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values\n\
    \        val gradesSum = gradesValues.sum\n        val gradesAverage = gradesSum\
    \ / gradesKeys.size\n        val gradesDiff = gradesAverage - gradesValues.head\n\
    \        val gradesDiffs = gradesValues.tail.zip(gradesDiff).map(x => x._1 - x._2)\n\
    \        val gradesDiffsSum = gradesDiffs.sum\n        val gradesDiffsAverage\
    \ = gradesDiffsSum / gradesKeys.size\n        val gradesDiffsDiff = gradesDiffsAverage\
    \ - gradesDiffs.head\n        val gradesDiffsDiffs = gradesDiffs.tail.zip(gradesDiffsDiff).map(x\
    \ => x._1 - x._2)\n        val gradesDiffsDiffsSum = gradesDiffsDiffs.sum\n  \
    \      val gradesDiffsDiffsAverage = gradesDiffsDiffsSum / gradesKeys.size\n \
    \       val gradesDiffsDiffsDiff = gradesDiffsDiffsAverage - gradesDiffsDiffs.head\n\
    \        val gradesDiffsDiffsDiffs = gradesDiffsDiffs.tail.zip(gradesDiffsDiffsDiff).map(x\
    \ => x._1 - x._2)\n        val gradesDiffsDiffsDiffsSum = gradesDiffsDiffsDiffs.sum\n\
    \        val gradesDiffsDiffsDiffsAverage = gradesDiffsDiffsDiffsSum / gradesKeys.size\n\
    \        val gradesDiffsDiffsDiffsDiff = gradesDiffsDiffsDiffsAverage - gradesDiffsDiffsDiffs.head\n\
    \        val gradesDiffsDiffsDiffsDiffs = gradesDiffsDiffsDiffs.tail.zip(gradesDiffsDiffsDiffsDiff).map(x\
    \ => x._1 - x._2)\n        val gradesDiffsDiffsDiffsDiffsSum = gradesDiffsDiffsDiffsDiffsSum\
    \ / gradesKeys.size\n        val gradesDiffsDiffsDiffsDiffsAverage = gradesDiffsDiffsDiffsDiffsSum\
    \ / gradesKeys.size\n        val gradesDiffsDiffsDiffsDiffsDiff = gradesDiffsDiffsDiffs\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_6c8nh3a.scala:27:65 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).toMap\n\e[31m\e[31m   |\e[0m       \
    \                                                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue toInt is not a member of List[Float], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp_6c8nh3a.scala:30:40 -----------------------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesSum\e[0m = gradesValues.sum\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mFloatIsFractional\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mCharIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_6c8nh3a.scala:33:74 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesDiffs\e[0m = gradesValues.tail.zip(gradesDiff).map(\e\
    [36mx\e[0m => x._1 - x._2)\n\e[31m\e[31m   |\e[0m                            \
    \                                         ^^^^^^\e[0m\n\e[31m   |\e[0mvalue -\
    \ is not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659805024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapKeysSorted = gradesMapKeys.sortBy(_)\n        val gradesMapValuesSorted\
    \ = gradesMapValues.sortBy(_)\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSor\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg989zkip.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedLength\e\
    [0m = gradesMapKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg989zkip.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg989zkip.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedLength\e\
    [0m = gradesMapKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg989zkip.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the"
  stdout: ''
  timestamp: 1659805023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesLength = gradesKeys.length\n        val gradesIndexes = gradesValues.zipWithIndex.map\
    \ { case (grade, index) => (index.toString, grade) }\n        val gradesIndexesLength\
    \ = gradesIndexes.length\n        val gradesIndexesIndexes = gradesIndexes.zipWithIndex.map\
    \ { case (gradeIndex, index) => (index.toString, gradeIndex) }\n        val gradesIndexesIndexesLength\
    \ = gradesIndexesIndexes.length\n        val gradesIndexesIndexesIndexesLength\
    \ = gradesIndexesIndexesIndexes.length\n        val gradesIndexesIndexesIndexesIndexesLength\
    \ = gradesIndexesIndexesIndexesIndexes.length\n        val gradesIndexesIndexesIndexesIndexesIndexesLength\
    \ = gradesIndexesIndexesIndexesIndexesIndexes.length\n        val gradesIndexesIndexesIndexesIndexesIndexesIndexesLength\
    \ = gradesIndexesIndexesIndexesIndexesIndexesIndexes.length\n        val gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\
    \ = gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexes.length\n        val\
    \ gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength = gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\n\
    \        val gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLengthLength\
    \ = gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\n        val\
    \ gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLengthLength\
    \ = gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\n   \
    \     val gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLengthLength\
    \ = gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLengthLength\n\
    \        val gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLengthLengthLength\
    \ = gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLengthLength\n\
    \        val gradesIndexesIndexesIndexesIndexesIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph7dlsz_9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph7dlsz_9.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLengthLength\e\
    [0m = gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLengthLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLengthLength\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLengthLength\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmph7dlsz_9.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7dlsz_9.scala:35:48 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesIndexesIndexesIndexesLength\e\
    [0m = gradesIndexesIndexesIndexes.length\n\e[31m\e[31m   |\e[0m              \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                  Not found: gradesIndexesIndexesIndexes\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available wh"
  stdout: ''
  timestamp: 1659805022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesLength = gradesKeys.length\n        val gradesSum = gradesValues.sum\n\
    \        val gradesAverage = gradesSum / gradesLength\n        val gradesMin =\
    \ gradesValues.min\n        val gradesMax = gradesValues.max\n        val gradesMedian\
    \ = gradesValues.median\n        val gradesStdDev = gradesValues.stdDev\n    \
    \    val gradesVariance = gradesValues.variance\n        val gradesStandardDeviation\
    \ = gradesValues.standardDeviation\n        val gradesSumOfSquares = gradesValues.sumOfSquares\n\
    \        val gradesSumOfSquaresOfDifferences = gradesValues.sumOfSquaresOfDifferences\n\
    \        val gradesSumOfSquaresOfSquaredDifferences = gradesValues.sumOfSquaresOfSquaredDifferences\n\
    \        val gradesSumOfSquaresOfSquaredDifferencesOfDifferences = gradesValues.sumOfSquaresOfSquaredDifferencesOfDifferences\n\
    \        val gradesSumOfSquaresOfSquaredDifferencesOfSquaredDifferences = gradesValues.sumOfSquaresOfSquaredDifferencesOfSquaredDifferences\n\
    \        val gradesSumOfSquaresOfSquaredDifferencesOfSquaredDifferencesOfDifferences\
    \ = gradesValues.sumOfSquaresOfSquaredDifferencesOfSquaredDifferencesOfDifferences\n\
    \        val gradesSumOfSquaresOfSquaredDifferencesOfSquaredDifferencesOfSquaredDifferences\
    \ = gradesValues.sumOfSquaresOfSquaredDifferencesOfSquaredDifferencesOfSquaredDifferences\n\
    \        val gradesSumOfSquaresOfSquaredDifferencesOfSquaredDifferencesOfSquaredDifferencesOfDifferences\
    \ = gradesValues.sumOfSquaresOfSquaredDifferencesOfSquaredDifferencesOfSquaredDifferencesOfDifferences\n\
    \        val gradesSumOfSquaresOfSquaredDifferencesOfSquaredDifferencesOfSquaredDifferencesOfSquaredDifferences\
    \ = gradesValues.sumOfSquaresOfSquaredDifferencesOfSquaredDifferencesOfSquaredDifferencesOfSquaredDifferencesOfDifferences\n\
    \        val gradesSumOfSquaresOfSquaredDifferencesOfSquaredDifferencesOfSqu\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmkov7qrt.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpmkov7qrt.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpmkov7qrt.scala:49:5 ---------------------\e[0m\e[0m\n\
    \e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toList.sortBy(_.toFloat).reverse).mapValues(_.map(_\
    \ + \"\").mkString(\"\")).mapValues(_.toList)\n        val gradesMap2 = gradesMap.mapValues(_.toList.sortBy(_.toFloat).reverse).mapValues(_.map(_\
    \ + \"\").mkString(\"\")).mapValues(_.toList)\n        val gradesMap3 = gradesMap2.mapValues(_.toList.sortBy(_.toFloat).reverse).mapValues(_.map(_\
    \ + \"\").mkString(\"\")).mapValues(_.toList)\n        val gradesMap4 = gradesMap3.mapValues(_.toList.sortBy(_.toFloat).reverse).mapValues(_.map(_\
    \ + \"\").mkString(\"\")).mapValues(_.toList)\n        val gradesMap5 = gradesMap4.mapValues(_.toList.sortBy(_.toFloat).reverse).mapValues(_.map(_\
    \ + \"\").mkString(\"\")).mapValues(_.toList)\n        val gradesMap6 = gradesMap5.mapValues(_.toList.sortBy(_.toFloat).reverse).mapValues(_.map(_\
    \ + \"\").mkString(\"\")).mapValues(_.toList)\n        val gradesMap7 = gradesMap6.mapValues(_.toList.sortBy(_.toFloat).reverse).mapValues(_.map(_\
    \ + \"\").mkString(\"\")).mapValues(_.toList)\n        val gradesMap8 = gradesMap7.mapValues(_.toList.sortBy(_.toFloat).reverse).mapValues(_.map(_\
    \ + \"\").mkString(\"\")).mapValues(_.toList)\n        val gradesMap9 = gradesMap8.mapValues(_.toList.sortBy(_.toFloat).reverse).mapValues(_.map(_\
    \ + \"\").mkString(\"\")).mapValues(_.toList)\n        val gradesMap10 = gradesMap9.mapValues(_.toList.sortBy(_.toFloat).reverse).mapValues(_.map(_\
    \ + \"\").mkString(\"\")).mapValues(_.toList)\n        val gradesMap11 = gradesMap10.mapValues(_.toList.sortBy(_.toFloat).reverse).mapValues(_.map(_\
    \ + \"\").mkString(\"\")).mapValues(_.toList)\n        val gradesMap12 = gradesMap11.mapValues(_.toList.sortBy(_.toFloat).reverse).mapValues(_.map(_\
    \ + \"\").mkString(\"\")).mapValues(_.toList)\n        val gradesMap13 = gradesMap12.mapValues(_.toList.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpipur1yz0.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpipur1yz0.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toInt).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesArray = grades.toArray\n        val\
    \ gradesArrayLength = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n\
    \        val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd5249mzk.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd5249mzk.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd5249mzk.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd5249mzk.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd5249mzk.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length"
  stdout: ''
  timestamp: 1659805022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSet = grades.toSet\n        val gradesSetSize\
    \ = grades.size\n        val gradesSetIterator = grades.iterator\n        val\
    \ gradesSetIteratorSize = gradesSetIterator.size\n        val gradesSetIteratorIterator\
    \ = gradesSetIterator.iterator\n        val gradesSetIteratorIteratorSize = gradesSetIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIterator = gradesSetIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorSize = gradesSetIteratorIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIteratorIterator = gradesSetIteratorIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorIteratorSize = gradesSetIteratorIteratorIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIterator = gradesSetIteratorIteratorIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorSize = gradesSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = gradesSetIteratorIteratorIteratorIteratorIterator.iterator\n        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ gradesSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n \
    \       val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n \
    \       val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvkdrm9tz.scala:40:84 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mgradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = gradesSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    Not found: gradesSetIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvkdrm9tz.scala:41:88\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = gradesSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    Not found: gradesSetIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvkdrm9tz.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_\
    \ % 10).sum).toMap\n        grades.map(grade => gradesMap(grade / 10).map(letter\
    \ => letter + if (grade % 10 == 0) \"\" else \"-\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzyb4jjsy.scala:28:73 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        grades.map(\e[36mgrade\e[0m => gradesMap(grade\
    \ / \e[31m10\e[0m).map(\e[36mletter\e[0m => letter + \e[33mif\e[0m (grade % \e\
    [31m10\e[0m == \e[31m0\e[0m) \e[31m\"\"\e[0m \e[33melse\e[0m \e[31m\"-\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^^\e[0m\n\e[31m   |\e[0m                                   \
    \     expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpzyb4jjsy.scala:28:50 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        grades.map(\e[36mgrade\e[0m => gradesMap(grade\
    \ / \e[31m10\e[0m).map(\e[36mletter\e[0m => letter + \e[33mif\e[0m (grade % \e\
    [31m10\e[0m == \e[31m0\e[0m) \e[31m\"\"\e[0m \e[33melse\e[0m \e[31m\"-\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            value map is not a member of Float\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedSortedReversedSortedReversed = gradesMapSortedSortedReversed.reverse\n\
    \        val gradesMapSortedSortedReversedSortedReversedSortedReversed = gradesMapSortedSortedReversedSortedReversed.reverse\n\
    \        val gradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gradesMapSortedSortedReversedSortedReversedSortedReversed.reverse\n      \
    \  val gradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val gradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val gradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val gradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val gradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val gradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val gradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8n4b307d.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp8n4b307d.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp8n4b307d.scala:34:114 --------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\e\
    [0m = gradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp8n4b307d.scala:35:142 --------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\e\
    [0m = gradesMapSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                         "
  stdout: ''
  timestamp: 1659805022
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ * 10).sum / 10).mapValues(_.toString.toUpperCase)\n\
    \        grades.map(grade => gradesMap(grade))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: 4.0\n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMapView.default(MapView.scala:186)\n\
    \tat scala.collection.MapOps.apply(Map.scala:176)\n\tat scala.collection.MapOps.apply$(Map.scala:175)\n\
    \tat scala.collection.AbstractMapView.apply(MapView.scala:186)\n\tat Problem$.numericalLetterGrade$$anonfun$1(tmpvw1sesi0.scala:28)\n\
    \tat Problem$.numericalLetterGrade$$anonfun$adapted$1(tmpvw1sesi0.scala:28)\n\t\
    at scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.numericalLetterGrade(tmpvw1sesi0.scala:28)\n\
    \tat Problem$.main(tmpvw1sesi0.scala:31)\n\tat Problem.main(tmpvw1sesi0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scal"
  stdout: ''
  timestamp: 1659805024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade\
    \ => grade -> \"A+\")\n        val gradesMap2 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"A\")\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"A-\")\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B+\")\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B\")\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B-\")\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C+\")\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C\")\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C-\")\n        val gradesMap10 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D+\")\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D\")\n        val gradesMap12 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D-\")\n        val gradesMap13 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"E\")\n        val gradesMap14 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"F\")\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"G\")\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"H\")\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"I\")\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"J\")\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"K\")\n        val gradesMap20 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"L\")\n        val gradesMap21 : Map[Float, String] = grades.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp80pr2ext.scala:47:58 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mgradesMap21\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\n\e[31m\e[31m   |\e[0m\
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp80pr2ext.scala:27:55\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e\
    [0m => grade -> \e[31m\"A+\"\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Found:    List[(Float, String)]\n\e[31m   |\e[0m \
    \                        Required: collection.mutable.Map[Float, String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp80pr2ext.scala:28:56 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => grade\
    \ -> \e[31m\"A\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                  Found:    List[(Float, String)]\n\e[31m   |\e[0m          \
    \               Required: collection.mutable.Map[Float, String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp80pr2ext.scala:29:56 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => grade\
    \ -> \e[31m\"A-\"\e[0m)\n\e[31m\e[31m   |\e[0m                               \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659805025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapKeysSorted = gradesMapKeys.sortWith(_ < _)\n        val gradesMapValuesSorted\
    \ = gradesMapValues.sortWith(_ < _)\n        val gradesMapKeysSortedWithValues\
    \ = gradesMapKeysSorted.zip(gradesMapValuesSorted)\n        val gradesMapKeysSortedWithValuesSorted\
    \ = gradesMapKeysSortedWithValues.sortWith(_._1 < _._1)\n        val gradesMapKeysSortedWithValuesSortedWithValues\
    \ = gradesMapKeysSortedWithValuesSorted.map(x => x._1 + \"=\" + x._2)\n      \
    \  val gradesMapKeysSortedWithValuesSortedWithValuesSorted = gradesMapKeysSortedWithValuesSortedWithValues.sortWith(_\
    \ < _)\n        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSorted.map(x => x._1 + \"=\"\
    \ + x._2)\n        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValues.sortWith(_ <\
    \ _)\n        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSorted\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValues.map(x => x._1\
    \ + \"=\" + x._2)\n        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues.sortWith(_\
    \ < _)\n        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues.map(x\
    \ => x._1 + \"=\" + x._2)\n        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSorted\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues.sortWith(_\
    \ < _)\n        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSortedWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb49w6ui0.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedWithValuesSortedWithValuesSortedWithValues\e\
    [0m = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValues.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedWithValuesSortedWithValuesSortedWithValues\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapKeysSortedWithValuesSortedWithValuesSortedWithValues\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb49w6ui0.scala:40:12 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\e\
    [0m = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues.map(\e\
    [36mx\e[0m => x._1 + \e[31m\"=\"\e[0m + x._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmpb49w6ui0.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                    "
  stdout: ''
  timestamp: 1659805023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2\
    \ > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n   \
    \     val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2\
    \ > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n   \
    \     val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n \
    \       val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val\
    \ gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15\
    \ = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2\
    \ > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n \
    \       val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val\
    \ gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20\
    \ = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2\
    \ > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n \
    \       val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted26 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfh0qih3a.scala:53:31 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted26\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfh0qih3a.scala:28:40\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                   value sortBy is not a member of Map[Int, Float]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpfh0qih3a.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesMap.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.toMap\n        val gradesSortedByKeyReversedMapReversed\
    \ = gradesSortedByKeyReversedMap.reverse\n        val gradesSortedByValueReversedMapReversed\
    \ = gradesSortedByValueReversedMap.reverse\n        val gradesSortedByKeyReversedMapReversedMap\
    \ = gradesSortedByKeyReversedMapReversed.toMap\n        val gradesSortedByValueReversedMapReversedMap\
    \ = gradesSortedByValueReversedMapReversed.toMap\n        val gradesSortedByKeyReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMap.reverse\n        val gradesSortedByValueReversedMapReversedMapReversed\
    \ = gradesSortedByValueReversedMapReversedMap.reverse\n        val gradesSortedByKeyReversedMapReversedMapReversedMap\
    \ = gradesSortedByKeyReversedMapReversedMapReversed.toMap\n        val gradesSortedByValueReversedMapReversedMapReversedMap\
    \ = gradesSortedByValueReversedMapReversedMapReversed.toMap\n        val gradesSortedByKeyReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMapReversedMap.reverse\n        val gradesSortedByValueReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByValueReversedMapReversedMapReversedMap.reverse\n        val\
    \ gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed = gradesSortedByKeyReversedMapReversedMapReversedMapReversedMap.reverse\n\
    \        val gradesSortedByValueReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByValueReversedMapReversedMapReversedMapReversedMap.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpo18rwdly.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo18rwdly.scala:44:84 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed\e\
    [0m = gradesSortedByKeyReversedMapReversedMapReversedMapReversedMap.reverse\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: gradesSortedByKeyReversedMapReversedMapReversedMapReversedMap\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo18rwdly.scala:45:86\
    \ ------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByValueReversedMapReversedMapReversedMapReversedMapReversed\e\
    [0m = gradesSortedByValueReversedMapReversedMapReversedMapReversedMap.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: gradesSortedByValueReversedMapReversedMapReversedMapReversedMap\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo18rwdly.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m l"
  stdout: ''
  timestamp: 1659805023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapValuesSortedByKey = gradesMapValues.sortBy(_)\n        val\
    \ gradesMapValuesSortedByKeyReversed = gradesMapValuesSortedByKey.reverse\n  \
    \      val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \        val gradesMapValuesSortedByKeyReversedLength = gradesMapValuesSortedByKeyReversed.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprg9u20al.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedByKeyReversedLength\e\
    [0m = gradesMapValuesSortedByKeyReversed.length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedByKeyReversedLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesMapValuesSortedByKeyReversedLength\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprg9u20al.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedByKeyReversedLength\e\
    [0m = gradesMapValuesSortedByKeyReversed.length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedByKeyReversedLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesMapValuesSortedByKeyReversedLength\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprg9u20al.scala:35:12 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedByKeyReversedLength\e\
    [0m = gradesMapValuesSortedByKeyReversed.length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedByKeyReversedLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesMapValuesSortedByKeyReversedLength\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprg9u20al.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedByKeyReversedLength\e\
    [0m = gradesMapValuesSortedByKeyReversed.length\n\e[31m\e"
  stdout: ''
  timestamp: 1659805023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(_)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(_)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpie6ck5c2.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpie6ck5c2.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpie6ck5c2.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpie6ck5c2.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpie6ck5c2.scala:38:"
  stdout: ''
  timestamp: 1659805023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByKey = grades.sortBy(x => x)\n        val gradesSortedByValue\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByKeyReversed = grades.sortBy(x\
    \ => x)\n        val gradesSortedByValueReversed = grades.sortBy(x => -x)\n  \
    \      val gradesSortedByKeyReversedReversed = grades.sortBy(x => -x)\n      \
    \  val gradesSortedByValueReversedReversed = grades.sortBy(x => -x)\n        val\
    \ gradesSortedByKeyReversedReversedReversed = grades.sortBy(x => -x)\n       \
    \ val gradesSortedByValueReversedReversedReversed = grades.sortBy(x => -x)\n \
    \       val gradesSortedByKeyReversedReversedReversedReversed = grades.sortBy(x\
    \ => -x)\n        val gradesSortedByValueReversedReversedReversedReversed = grades.sortBy(x\
    \ => -x)\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByValueReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByValueReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByValueReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByValueReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByValueReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sort\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr4uuqo4x.scala:47:121 -----------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByValueReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = grades.sort\n\e[31m\e[31m   |\e[0m                                     \
    \                                                                            \
    \ ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m value sort is not a member of List[Float]\
    \ - did you mean grades.sortBy?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr4uuqo4x.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedWithIndex = gradesKeys.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndex = gradesValues.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGrade = gradesKeysSortedWithIndex.zipWithIndex.map\
    \ { case (grade, index) => (grade, gradesValuesSortedWithIndex.map(_.toString.charAt(index)))}\n\
    \        val gradesKeysSortedWithIndexAndGradeSorted = gradesKeysSortedWithIndexAndGrade.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGradeSortedWithIndex = gradesKeysSortedWithIndexAndGrade.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGradeSortedWithIndexAndGrade\
    \ = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map { case (grade, index) =>\
    \ (grade, gradesValuesSortedWithIndexAndGrade.map(_.toString.charAt(index)))}\n\
    \        val gradesKeysSortedWithIndexAndGradeSortedWithIndexAndGradeSorted =\
    \ gradesKeysSortedWithIndexAndGrade.zipWithIndex.sortWith(_._1 < _._1)\n     \
    \   val gradesKeysSortedWithIndexAndGradeSortedWithIndexAndGradeSortedWithIndex\
    \ = gradesKeysSortedWithIndexAndGrade.zipWithIndex.sortWith(_._1 < _._1)\n   \
    \     val gradesKeysSortedWithIndexAndGradeSortedWithIndexAndGradeSortedWithIndexAndGrade\
    \ = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map { case (grade, index) =>\
    \ (grade, gradesValuesSortedWithIndexAndGradeSortedWithIndexAndGrade.map(_.toString.charAt(index)))}\n\
    \        val gradesKeysSortedWithIndexAndGradeSortedWithIndexAndGradeSortedWithIndexAndGradeSorted\
    \ = gradesKeysSortedWithIndexAndGrade.zipWithIndex.sortWith(_._1 < \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4l_9qbfp.scala:41:162 --------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedWithIndexAndGradeSortedWithIndexAndGradeSortedWithIndexAndGradeSorted\e\
    [0m = gradesKeysSortedWithIndexAndGrade.zipWithIndex.sortWith(_._1 < \n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \        expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmp4l_9qbfp.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4l_9qbfp.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesIterReverse\
    \ = grades.reverseIterator\n        val gradesIterReverse2 = grades.reverseIterator\n\
    \        val gradesIterReverse3 = grades.reverseIterator\n        val gradesIterReverse4\
    \ = grades.reverseIterator\n        val gradesIterReverse5 = grades.reverseIterator\n\
    \        val gradesIterReverse6 = grades.reverseIterator\n        val gradesIterReverse7\
    \ = grades.reverseIterator\n        val gradesIterReverse8 = grades.reverseIterator\n\
    \        val gradesIterReverse9 = grades.reverseIterator\n        val gradesIterReverse10\
    \ = grades.reverseIterator\n        val gradesIterReverse11 = grades.reverseIterator\n\
    \        val gradesIterReverse12 = grades.reverseIterator\n        val gradesIterReverse13\
    \ = grades.reverseIterator\n        val gradesIterReverse14 = grades.reverseIterator\n\
    \        val gradesIterReverse15 = grades.reverseIterator\n        val gradesIterReverse16\
    \ = grades.reverseIterator\n        val gradesIterReverse17 = grades.reverseIterator\n\
    \        val gradesIterReverse18 = grades.reverseIterator\n        val gradesIterReverse19\
    \ = grades.reverseIterator\n        val gradesIterReverse20 = grades.reverseIterator\n\
    \        val gradesIterReverse21 = grades.reverseIterator\n        val gradesIterReverse22\
    \ = grades.reverseIterator\n        val gradesIterReverse23 = grades.reverseIterator\n\
    \        val gradesIterReverse24 = grades.reverseIterator\n        val gradesIterReverse25\
    \ = grades.reverseIterator\n        val gradesIterReverse26 = grades.reverseIterator\n\
    \        val gradesIterReverse27 = grades.reverseIterator\n        val gradesIterReverse28\
    \ = grades.reverseIterator\n        val gradesIterReverse29 = grades.reverseIterator\n\
    \        val gradesIterReverse30 = grades.reverseIterator\n        val gradesIterReverse31\
    \ = grades.reverseIterator\n        val gradesIterReverse32 = grades.reverseIterator\n\
    \        val gradesIterReverse33 = grades.reverseIterator\n        val gradesIterReverse34\
    \ = grades.reverseIterator\n        val gradesIterReverse35 = grades.reverseIterator\n\
    \        val gradesIterReverse36 = grades.reverseIterator\n        val grade\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq61im_gf.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpq61im_gf.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpq61im_gf.scala:69:5 ---------------------\e[0m\e[0m\n\
    \e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapValuesSorted = gradesMapValues.sortBy(_)\n        val gradesMapValuesSortedReversed\
    \ = gradesMapValuesSorted.reverse\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val gradesMapValuesSortedReversedLength\
    \ = gradesMapValuesSortedReversed.length\n        val grade\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjw2711dg.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjw2711dg.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapValuesSortedReversedLength\e[0m = gradesMapValuesSortedReversed.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedReversedLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapValuesSortedReversedLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjw2711dg.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapValuesSortedReversedLength\e[0m = gradesMapValuesSortedReversed.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedReversedLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapValuesSortedReversedLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjw2711dg.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapValuesSortedReversedLength\e[0m = gradesMapValuesSortedReversed.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedReversedLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapValuesSortedReversedLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjw2711dg.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m"
  stdout: ''
  timestamp: 1659805035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesLength = gradesKeys.size\n        val gradesSum = gradesValues.sum\n\
    \        val gradesAverage = gradesSum / gradesLength\n        val gradesMin =\
    \ gradesValues.min\n        val gradesMax = gradesValues.max\n        val gradesMedian\
    \ = gradesValues.median\n        val gradesMode = gradesValues.mode\n        val\
    \ gradesStdDev = gradesValues.stdDev\n        val gradesVariance = gradesValues.variance\n\
    \        val gradesVarianceDeviation = gradesValues.varianceDeviation\n      \
    \  val gradesStandardDeviation = gradesValues.standardDeviation\n        val gradesStandardError\
    \ = gradesValues.standardError\n        val gradesSkewness = gradesValues.skewness\n\
    \        val gradesKurtosis = gradesValues.kurtosis\n        val gradesKurtosisDeviation\
    \ = gradesValues.kurtosisDeviation\n        val gradesMedianAbsoluteDeviation\
    \ = gradesValues.medianAbsoluteDeviation\n        val gradesMedianAbsoluteDeviationDeviation\
    \ = gradesValues.medianAbsoluteDeviationDeviation\n        val gradesMedianAbsoluteDeviationInv\
    \ = gradesValues.medianAbsoluteDeviationInv\n        val gradesMedianAbsoluteDeviationInv\
    \ = gradesValues.medianAbsoluteDeviationInv\n        val gradesMedianAbsoluteDeviationInv\
    \ = gradesValues.medianAbsoluteDeviationInv\n        val gradesMedianAbsoluteDeviationInv\
    \ = gradesValues.medianAbsoluteDeviationInv\n        val gradesMedianAbsoluteDeviationInv\
    \ = gradesValues.medianAbsoluteDeviationInv\n        val gradesMedianAbsoluteDeviationInv\
    \ = gradesValues.medianAbsoluteDeviationInv\n        val gradesMedianAbsoluteDeviationInv\
    \ = gradesValues.medianAbsoluteDeviationInv\n        val gradesMedianAbsoluteDeviationInv\
    \ = gradesValues.medianAbsoluteDeviationInv\n        val gradesMedianAbsoluteDeviationInv\
    \ = gradesValues.medianAbsoluteDeviationInv\n        val gradesMe\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj6ditvc1.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj6ditvc1.scala:48:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMedianAbsoluteDeviationInv\e[0m = gradesValues.medianAbsoluteDeviationInv\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMedianAbsoluteDeviationInv is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMedianAbsoluteDeviationInv\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj6ditvc1.scala:49:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMedianAbsoluteDeviationInv\e[0m = gradesValues.medianAbsoluteDeviationInv\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMedianAbsoluteDeviationInv is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMedianAbsoluteDeviationInv\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj6ditvc1.scala:50:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMedianAbsoluteDeviationInv\e[0m = gradesValues.medianAbsoluteDeviationInv\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMedianAbsoluteDeviationInv is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMedianAbsoluteDeviationInv\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj6ditvc1.scala:51:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMedian"
  stdout: ''
  timestamp: 1659805035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSet = grades.toSet\n        val gradesSortedSet\
    \ = grades.sortWith(_ < _)\n        val gradesSortedSetIterator = gradesSortedSet.iterator\n\
    \        val gradesSortedSetIteratorNext = gradesSortedSetIterator.next\n    \
    \    val gradesSortedSetIteratorNextNext = gradesSortedSetIteratorNext.next\n\
    \        val gradesSortedSetIteratorNextNextNext = gradesSortedSetIteratorNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNext = gradesSortedSetIteratorNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNext =\
    \ gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n     \
    \   val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext =\
    \ gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbcmz9w71.scala:31:74 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedSetIteratorNextNext\e\
    [0m = gradesSortedSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                     value next is not a member of Float\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbcmz9w71.scala:39:78 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbcmz9w71.scala:43:94\
    \ ------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbcmz9w71.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805034
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => if (grade > 3.0) \"B+\" else\
    \ if (grade > 2.7) \"B\" else if (grade > 2.3) \"B-\" else if (grade > 2.0) \"\
    C+\" else if (grade > 1.7) \"C\" else if (grade > 1.3) \"C-\" else if (grade >\
    \ 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade > 0.0) \"D-\" else \"\
    E\").filter(_.nonEmpty).map(_.toUpperCase)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc1x6h259.scala:30)\n\tat Problem.main(tmpc1x6h259.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSet = grades.toSet\n        val gradesSortedSet\
    \ = grades.toSortedSet\n        val gradesSortedSetIterator = gradesSortedSet.iterator\n\
    \        val gradesSortedSetIteratorNext = gradesSortedSetIterator.next\n    \
    \    val gradesSortedSetIteratorNextKey = gradesSortedSetIteratorNext.key\n  \
    \      val gradesSortedSetIteratorNextValue = gradesSortedSetIteratorNext.value\n\
    \        val gradesSortedSetIteratorNextKeyValue = gradesSortedSetIteratorNextKey\
    \ -> gradesSortedSetIteratorNextValue\n        val gradesSortedSetIteratorNextKeyValueSet\
    \ = gradesSortedSetIteratorNextKeyValue.toSet\n        val gradesSortedSetIteratorNextKeyValueSortedSet\
    \ = gradesSortedSetIteratorNextKeyValue.toSortedSet\n        val gradesSortedSetIteratorNextKeyValueSortedSetIterator\
    \ = gradesSortedSetIteratorNextKeyValueSortedSet.iterator\n        val gradesSortedSetIteratorNextKeyValueSortedSetIteratorNext\
    \ = gradesSortedSetIteratorNextKeyValueSortedSetIterator.next\n        val gradesSortedSetIteratorNextKeyValueSortedSetIteratorNextKey\
    \ = gradesSortedSetIteratorNextKeyValueSortedSetIteratorNext.key\n        val\
    \ gradesSortedSetIteratorNextKeyValueSortedSetIteratorNextValue = gradesSortedSetIteratorNextKeyValueSortedSetIteratorNext.value\n\
    \        val gradesSortedSetIteratorNextKeyValueSortedSetIteratorNextKeyValue\
    \ = gradesSortedSetIteratorNextKeyValueSortedSetIteratorNextKey -> gradesSortedSetIteratorNextKeyValueSortedSetIteratorNextValue\n\
    \        val gradesSortedSetIteratorNextKeyValueSortedSetIteratorNextKeyValueSet\
    \ = gradesSortedSetIteratorNextKeyValueSortedSetIteratorNextKeyValue.toSet\n \
    \       val gradesSortedSetIteratorNextKeyValueSortedSetIteratorNextKeyValueSortedSet\
    \ = gradesSortedSetIteratorNextKeyValueSortedSetIteratorNextKeyValueSortedSet.toSortedSet\n\
    \        val gradesSortedSetIteratorNextKeyValueSortedSetIteratorNextKeyValueSortedSetIterator\
    \ = gradesSortedSetIteratorNextKeyValueSortedSetIteratorNextKeyValueSortedSet.iterator\n\
    \        val gradesSortedSetIteratorNextKeyValueSortedSetIteratorNextKeyValueSortedSetIteratorNext\
    \ = gradesSortedSetIteratorNextKeyValueSortedSetIteratorNextKeyValueSortedSetIterator.next\n\
    \        val gradesSortedSetIteratorNextKeyValueSortedSetIteratorNextKeyValueSortedSetIteratorNextKey\
    \ = gradesSortedSetIteratorNextKeyValueSortedSetIteratorNextKeyValue\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp50vig6th.scala:28:37 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedSet\e[0m = grades.toSortedSet\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        value toSortedSet is not a member of List[Float]\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp50vig6th.scala:42:88 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedSetIteratorNextKeyValueSortedSetIteratorNextKeyValueSortedSet\e\
    [0m = gradesSortedSetIteratorNextKeyValueSortedSetIteratorNextKeyValueSortedSet.toSortedSet\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mgradesSortedSetIteratorNextKeyValueSortedSetIteratorNextKeyValueSortedSet\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp50vig6th.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_\
    \ % 10).sum)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n \
    \       val gradesMapSortedKeys = gradesMapSorted.keys.toList\n        val gradesMapSortedValues\
    \ = gradesMapSorted.values.toList\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysSum = gradesMapSortedKeys.sum\n        val gradesMapSortedValuesSum\
    \ = gradesMapSortedValues.sum\n        val gradesMapSortedKeysAvg = gradesMapSortedKeys.sum\
    \ / gradesMapSortedKeysLength\n        val gradesMapSortedValuesAvg = gradesMapSortedValues.sum\
    \ / gradesMapSortedValuesLength\n        val gradesMapSortedKeysMin = gradesMapSortedKeys.min\n\
    \        val gradesMapSortedValuesMin = gradesMapSortedValues.min\n        val\
    \ gradesMapSortedKeysMax = gradesMapSortedKeys.max\n        val gradesMapSortedValuesMax\
    \ = gradesMapSortedValues.max\n        val gradesMapSortedKeysMedian = gradesMapSortedKeys.median\n\
    \        val gradesMapSortedValuesMedian = gradesMapSortedValues.median\n    \
    \    val gradesMapSortedKeysMedianIndex = gradesMapSortedKeys.indexOf(gradesMapSortedKeysMedian)\n\
    \        val gradesMapSortedValuesMedianIndex = gradesMapSortedValues.indexOf(gradesMapSortedValuesMedian)\n\
    \        val gradesMapSortedKeysMedianValue = gradesMapSortedKeysMedianIndex *\
    \ 10 + gradesMapSortedKeysMedian\n        val gradesMapSortedValuesMedianValue\
    \ = gradesMapSortedValuesMedianIndex * 10 + gradesMapSortedValuesMedian\n    \
    \    val gradesMapSortedKeysMedianValueString = gradesMapSortedKeysMedianValue.toString\n\
    \        val gradesMapSortedValuesMedianValueString = gradesMapSortedValuesMedianValue.toString\n\
    \        val gradesMapSortedKeysMedianValueStringLength = gradesMapSortedKeysMedianValueString.length\n\
    \        val gradesMapSortedValuesMedianValueStringLength = gradesMapSortedValuesMedianValueString.length\n\
    \        val gradesMapSortedKeysMedianValueStringSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp841wc2zd.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp841wc2zd.scala:28:40\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value\
    \ sortBy is not a member of scala.collection.MapView[Float, Float]\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp841wc2zd.scala:52:5 ---------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValue\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesLength\e\
    [0m = gradesMapSortedReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    ["
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap2 = gradesMap.map(x => (x._1, x._2))\n        val gradesMap3\
    \ = gradesMap2.map(x => (x._1, x._2))\n        val gradesMap4 = gradesMap3.map(x\
    \ => (x._1, x._2))\n        val gradesMap5 = gradesMap4.map(x => (x._1, x._2))\n\
    \        val gradesMap6 = gradesMap5.map(x => (x._1, x._2))\n        val gradesMap7\
    \ = gradesMap6.map(x => (x._1, x._2))\n        val gradesMap8 = gradesMap7.map(x\
    \ => (x._1, x._2))\n        val gradesMap9 = gradesMap8.map(x => (x._1, x._2))\n\
    \        val gradesMap10 = gradesMap9.map(x => (x._1, x._2))\n        val gradesMap11\
    \ = gradesMap10.map(x => (x._1, x._2))\n        val gradesMap12 = gradesMap11.map(x\
    \ => (x._1, x._2))\n        val gradesMap13 = gradesMap12.map(x => (x._1, x._2))\n\
    \        val gradesMap14 = gradesMap13.map(x => (x._1, x._2))\n        val gradesMap15\
    \ = gradesMap14.map(x => (x._1, x._2))\n        val gradesMap16 = gradesMap15.map(x\
    \ => (x._1, x._2))\n        val gradesMap17 = gradesMap16.map(x => (x._1, x._2))\n\
    \        val gradesMap18 = gradesMap17.map(x => (x._1, x._2))\n        val gradesMap19\
    \ = gradesMap18.map(x => (x._1, x._2))\n        val gradesMap20 = gradesMap19.map(x\
    \ => (x._1, x._2))\n        val gradesMap21 = gradesMap20.map(x => (x._1, x._2))\n\
    \        val gradesMap22 = gradesMap21.map(x => (x._1, x._2))\n        val gradesMap23\
    \ = gradesMap22.map(x => (x._1, x._2))\n        val gradesMap24 = gradesMap23.map(x\
    \ => (x._1, x._2))\n        val gradesMap25 = gradesMap24.map(x => (x._1, x._2))\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmplbubn19x.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplbubn19x.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toInt).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values\n\
    \        val gradesSum = gradesValues.sum\n        val gradesAvg = gradesSum /\
    \ gradesKeys.size\n        val gradesMin = gradesValues.min\n        val gradesMax\
    \ = gradesValues.max\n        val gradesDiff = gradesMax - gradesMin\n       \
    \ val gradesDiffAbs = Math.abs(gradesDiff)\n        val gradesDiffSign = gradesDiff\
    \ / gradesDiffAbs\n        val gradesDiffSignAbs = Math.abs(gradesDiffSign)\n\
    \        val gradesDiffSignSign = gradesDiffAbs * gradesDiffSign\n        val\
    \ gradesDiffSignSignAbs = Math.abs(gradesDiffSignSign)\n        val gradesDiffSignSignSign\
    \ = gradesDiffAbs * gradesDiffSignSign\n        val gradesDiffSignSignSignAbs\
    \ = Math.abs(gradesDiffSignSignSign)\n        val gradesDiffSignSignSignSign =\
    \ gradesDiffAbs * gradesDiffSignSignSign\n        val gradesDiffSignSignSignSignAbs\
    \ = Math.abs(gradesDiffSignSignSignSign)\n        val gradesDiffSignSignSignSignSign\
    \ = gradesDiffAbs * gradesDiffSignSignSignSign\n        val gradesDiffSignSignSignSignSignAbs\
    \ = Math.abs(gradesDiffSignSignSignSignSign)\n        val gradesDiffSignSignSignSignSignSign\
    \ = gradesDiffAbs * gradesDiffSignSignSignSignSign\n        val gradesDiffSignSignSignSignSignAbs\
    \ = Math.abs(gradesDiffSignSignSignSignSignSign)\n        val gradesDiffSignSignSignSignSignSign\
    \ = gradesDiffAbs * gradesDiffSignSignSignSignSignSign\n        val gradesDiffSignSignSignSignSignSignAbs\
    \ = Math.abs(gradesDiffSignSignSignSignSignSignSign)\n        val gradesDiffSignSignSignSignSignSignSign\
    \ = gradesDiffAbs * gradesDiffSignSignSignSignSignSignSign\n        val gradesDiffSignSignSignSignSignSignSignAbs\
    \ = Math.abs(gradesDiffSignSignSignSignSignSignSignSign)\n        val gradesDiffSignSignSignSignSignSignSignSign\
    \ = gradesDiffAbs * gradesDiffSignSignSignSignSignSignSignSign\n        val gradesDiffSignSignSignSign\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpugv8jojf.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpugv8jojf.scala:47:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesDiffSignSignSignSignSignAbs\e[0m = Math.abs(gradesDiffSignSignSignSignSignSign)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesDiffSignSignSignSignSignAbs is already defined as \e\
    [33mvalue\e[0m \e[35mgradesDiffSignSignSignSignSignAbs\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpugv8jojf.scala:48:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesDiffSignSignSignSignSignSign\e[0m = gradesDiffAbs * gradesDiffSignSignSignSignSignSign\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesDiffSignSignSignSignSignSign is already defined as \e\
    [33mvalue\e[0m \e[35mgradesDiffSignSignSignSignSignSign\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpugv8jojf.scala:27:54\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.map(\e[36mx\e[0m => x.toInt).toMap\n\
    \e[31m\e[31m   |\e[0m                                                      ^\e\
    [0m\n\e[31m   |\e[0m                                        Cannot prove that\
    \ Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                           \
    \             where:    K is a type variable\n\e[31m   |\e[0m                \
    \                                  V is a type variable\n\e[31m   |\e[0m     \
    \                                   .\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpugv8jojf.scala:54:5 -----------"
  stdout: ''
  timestamp: 1659805033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n    \
    \    val gradesLength = grades.length\n        val gradesSum = gradesSorted.sum\n\
    \        val gradesAverage = gradesSum / gradesLength\n        val gradesSumOfSquares\
    \ = gradesSorted.map(x => x * x).sum\n        val gradesAverageOfSquares = gradesSumOfSquares\
    \ / gradesLength\n        val gradesSumOfSquaresOfDifferences = gradesSorted.map(x\
    \ => x - gradesAverage).sum\n        val gradesAverageOfSquaresOfDifferences =\
    \ gradesSumOfSquaresOfDifferences / gradesLength\n        val gradesSumOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x).map(x => x - gradesAverage).map(x => x * x).sum\n\
    \        val gradesAverageOfSquaresOfSquaresOfDifferences = gradesSumOfSquaresOfSquaresOfDifferences\
    \ / gradesLength\n        val gradesSumOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x).map(x => x * x).map(x => x - gradesAverage).map(x\
    \ => x * x).map(x => x * x).sum\n        val gradesAverageOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfDifferences / gradesLength\n       \
    \ val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences = gradesSorted.map(x\
    \ => x * x).map(x => x * x).map(x => x * x).map(x => x - gradesAverage).map(x\
    \ => x * x).map(x => x * x).map(x => x * x).sum\n        val gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences / gradesLength\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x).map(x => x * x).map(x => x * x).map(x => x *\
    \ x).map(x => x - gradesAverage).map(x => x * x).map(x => x * x).map(x => x *\
    \ x).map(x => x * x).sum\n        val gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOf\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx4g8oldc.scala:42:86 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\e\
    [0m = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOf\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \              Not found: gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOf\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx4g8oldc.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A+\")).toMap\n        val gradesMap2 = grades.map(grade => (grade\
    \ -> \"B\")).toMap\n        val gradesMap3 = grades.map(grade => (grade -> \"\
    C\")).toMap\n        val gradesMap4 = grades.map(grade => (grade -> \"D\")).toMap\n\
    \        val gradesMap5 = grades.map(grade => (grade -> \"E\")).toMap\n      \
    \  grades.map(grade => (grade -> gradesMap(grade))).filter(_.isDefined).map(_.toString.toUpperCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp33raxsma.scala:27:45\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e\
    [0m => (grade -> \e[31m\"A+\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp33raxsma.scala:32:66 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        grades.map(\e[36mgrade\e[0m => (grade -> gradesMap(grade))).filter(_.isDefined).map(_.toString.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value isDefined\
    \ is not a member of (Float, String)\n2 errors found\n"
  stdout: ''
  timestamp: 1659805035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString)\n\
    \        gradesMap.values.toList.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7vlew1mf.scala:27:59 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp7vlew1mf.scala:27:78 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toChar is not a member\
    \ of Nothing, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import math.BigDecimal.javaBigDecimal2bigDecimal\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.foldLeft(List[String]())((grades, grade)\
    \ => {\n            val gpa = grade\n            val letterGrade = if (gpa < 3.0)\
    \ \"A+\" else if (gpa < 3.7) \"A\" else if (gpa < 3.3) \"A-\" else if (gpa < 3.0)\
    \ \"B+\" else if (gpa < 2.7) \"B\" else if (gpa < 2.3) \"B-\" else if (gpa < 2.0)\
    \ \"C+\" else if (gpa < 1.7) \"C\" else if (gpa < 1.3) \"C-\" else if (gpa < 1.0)\
    \ \"D+\" else if (gpa < 0.7) \"D\" else \"D-\"\n            grades ::: List(letterGrade)\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgb38r_c7.scala:34)\n\tat Problem.main(tmpgb38r_c7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapKeysSorted = gradesMapKeys.sortBy(_ - gradesMapKeys.last)\n\
    \        val gradesMapValuesSorted = gradesMapValues.sortBy(_ - gradesMapValues.last)\n\
    \        val gradesMapKeysSortedWithDuplicates = gradesMapKeysSorted.distinct\n\
    \        val gradesMapValuesSortedWithDuplicates = gradesMapValuesSorted.distinct\n\
    \        val gradesMapKeysSortedWithDuplicatesLength = gradesMapKeysSortedWithDuplicates.size\n\
    \        val gradesMapValuesSortedWithDuplicatesLength = gradesMapValuesSortedWithDuplicates.size\n\
    \        val gradesMapKeysSortedWithDuplicatesLengthWithDuplicates = gradesMapKeysSortedWithDuplicatesLength\
    \ + gradesMapValuesSortedWithDuplicatesLength\n        val gradesMapKeysSortedWithDuplicatesLengthWithDuplicatesLength\
    \ = gradesMapKeysSortedWithDuplicatesLengthWithDuplicates * 2\n        val gradesMapKeysSortedWithDuplicatesLengthWithDuplicatesLengthWithDuplicates\
    \ = gradesMapKeysSortedWithDuplicatesLengthWithDuplicatesLength + gradesMapKeysSortedWithDuplicatesLengthWithDuplicates\n\
    \        val gradesMapKeysSortedWithDuplicatesLengthWithDuplicatesLengthWithDuplicatesLength\
    \ = gradesMapKeysSortedWithDuplicatesLengthWithDuplicatesLength * 2\n        val\
    \ gradesMapKeysSortedWithDuplicatesLengthWithDuplicatesLengthWithDuplicatesLengthWithDuplicates\
    \ = gradesMapKeysSortedWithDuplicatesLengthWithDuplicatesLengthWithDuplicates\
    \ * 2\n        val gradesMapKeysSortedWithDuplicatesLengthWithDuplicatesLengthWithDuplicatesLengthWithDuplicatesLength\
    \ = gradesMapKeysSortedWithDuplicatesLengthWithDuplicatesLengthWithDuplicatesLength\
    \ * 2\n        val gradesMapKeysSortedWithDuplicatesLengthWithDuplicatesLengthWithDuplicatesLengthWithDuplicatesLengthWithDuplicates\
    \ = gradesMapKeysSortedWithDuplicatesLengthWithDuplicatesLengthWithDuplicatesLengthWithDuplicates\
    \ * 2\n        val gradesMapKeysSortedWithDuplicatesLengthWithDuplicatesLengthWithDuplicatesLengthWithDuplicatesLengthWithDuplicatesLengthWithDuplicates\
    \ = gradesMapKeysSortedWithDuplicatesLengthWithDuplicatesLengthWithDuplicatesLengthWithDuplicatesLength\
    \ * 2\n        \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpj9tz9o0a.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj9tz9o0a.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGrade\
    \ = grades.sortBy(_.toFloat)\n        val gradesSortedByGradeReversed = gradesSortedByGrade.sortBy(-_.toFloat)\n\
    \        val gradesSortedByGradeReversedMap = gradesSortedByGradeReversed.toMap\n\
    \        val gradesSortedByGradeReversedMapKeys = gradesSortedByGradeReversedMap.keys\n\
    \        val gradesSortedByGradeReversedMapValues = gradesSortedByGradeReversedMap.values.toList\n\
    \        val gradesSortedByGradeReversedMapValuesSorted = gradesSortedByGradeReversedMapValues.sortBy(-_.toFloat)\n\
    \        val gradesSortedByGradeReversedMapValuesSortedMap = gradesSortedByGradeReversedMapValuesSorted.toMap\n\
    \        val gradesSortedByGradeReversedMapValuesSortedMapKeys = gradesSortedByGradeReversedMapValuesSortedMap.keys\n\
    \        val gradesSortedByGradeReversedMapValuesSortedMapValues = gradesSortedByGradeReversedMapValuesSortedMap.values.toList\n\
    \        val gradesSortedByGradeReversedMapValuesSortedMapValuesSorted = gradesSortedByGradeReversedMapValuesSortedMapValuesSorted.sortBy(-_.toFloat)\n\
    \        val gradesSortedByGradeReversedMapValuesSortedMapValuesSortedMap = gradesSortedByGradeReversedMapValuesSortedMapValuesSorted.toMap\n\
    \        val gradesSortedByGradeReversedMapValuesSortedMapValuesSortedMapKeys\
    \ = gradesSortedByGradeReversedMapValuesSortedMapValuesSortedMapKeys.keys\n  \
    \      val gradesSortedByGradeReversedMapValuesSortedMapValuesSortedMapValues\
    \ = gradesSortedByGradeReversedMapValuesSortedMapValuesSortedMapValues.toList\n\
    \        val gradesSortedByGradeReversedMapValuesSortedMapValuesSortedMapValuesSorted\
    \ = gradesSortedByGradeReversedMapValuesSortedMapValuesSortedMapValuesSorted.sortBy(-_.toFloat)\n\
    \        val gradesSortedByGradeReversedMapValuesSortedMapValuesSortedMapValuesSortedMap\
    \ = gradesSortedByGradeReversedMapValuesSortedMapValuesSortedMapValuesSortedMap.toMap\n\
    \        val gradesSortedByGradeReversedMapValuesSortedMapValuesSortedMapValuesSortedMapKeys\
    \ = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpasbkevpm.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- Error: /tmp/tmpasbkevpm.scala:30:78 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGradeReversedMap\e\
    [0m = gradesSortedByGradeReversed.toMap\n\e[31m\e[31m   |\e[0m               \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                      Cannot prove that Float <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                      where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \             V is a type variable\n\e[31m   |\e[0m                          \
    \            .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpasbkevpm.scala:37:72\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByGradeReversedMapValuesSortedMapValuesSorted\e[0m = gradesSortedByGradeReversedMapValuesSortedMapValuesSorted.sortBy(-_.toFloat)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedByGradeReversedMapValuesSortedMapValuesSorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpasbkevpm.scala:39:79\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByGradeReversedMapValuesSortedMapValuesSortedMapKeys\e[0m\
    \ = gradesSortedByGradeReversedMapValuesSortedMapValuesSortedMapKeys.keys\n\e\
    [31m\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1659805037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesEnumerator\
    \ = grades.iterator\n        val gradesIterator = grades.iterator\n        val\
    \ gradesEnumerator2 = grades.iterator\n        val gradesIterator2 = grades.iterator\n\
    \        val gradesEnumerator3 = grades.iterator\n        val gradesIterator3\
    \ = grades.iterator\n        val gradesEnumerator4 = grades.iterator\n       \
    \ val gradesIterator4 = grades.iterator\n        val gradesEnumerator5 = grades.iterator\n\
    \        val gradesIterator5 = grades.iterator\n        val gradesEnumerator6\
    \ = grades.iterator\n        val gradesIterator6 = grades.iterator\n        val\
    \ gradesEnumerator7 = grades.iterator\n        val gradesIterator7 = grades.iterator\n\
    \        val gradesEnumerator8 = grades.iterator\n        val gradesIterator8\
    \ = grades.iterator\n        val gradesEnumerator9 = grades.iterator\n       \
    \ val gradesIterator9 = grades.iterator\n        val gradesEnumerator10 = grades.iterator\n\
    \        val gradesIterator10 = grades.iterator\n        val gradesEnumerator11\
    \ = grades.iterator\n        val gradesIterator11 = grades.iterator\n        val\
    \ gradesEnumerator12 = grades.iterator\n        val gradesIterator12 = grades.iterator\n\
    \        val gradesEnumerator13 = grades.iterator\n        val gradesIterator13\
    \ = grades.iterator\n        val gradesEnumerator14 = grades.iterator\n      \
    \  val gradesIterator14 = grades.iterator\n        val gradesEnumerator15 = grades.iterator\n\
    \        val gradesIterator15 = grades.iterator\n        val gradesEnumerator16\
    \ = grades.iterator\n        val gradesIterator16 = grades.iterator\n        val\
    \ gradesEnumerator17 = grades.iterator\n        val gradesIterator17 = grades.iterator\n\
    \        val gradesEnumerator18 = grades.iterator\n        val gradesIterator18\
    \ = grades.iterator\n        val gradesEnumerator19 = grades.iterator\n      \
    \  val gradesIterator19 = grades.iterator\n        val gradesEnumerator20 = grades.iterator\n\
    \        val gradesIterator20 = grades.iterator\n        val gradesEnumerator21\
    \ = grades.iterator\n        val gradesIterator21 = grades.iterator\n        \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsx_wq3c4.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsx_wq3c4.scala:75:5\
    \ ---------------------\e[0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => if(grade > 3.0) \"B+\" else\
    \ if (grade > 2.7) \"B\" else if (grade > 2.0) \"C+\" else if (grade > 1.7) \"\
    C\" else if (grade > 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade >\
    \ 0.0) \"D-\" else \"E\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgv0113yl.scala:30)\n\tat Problem.main(tmpgv0113yl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805037
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.foldLeft(List[String]()){\n            (acc,\
    \ grade) =>\n                val gpa = grade\n                val letterGrade\
    \ = if (gpa > 3.0) \"B+\" else if (gpa > 2.7) \"B\" else if (gpa > 2.3) \"B-\"\
    \ else if (gpa > 2.0) \"C+\" else if (gpa > 1.7) \"C\" else if (gpa > 1.3) \"\
    C-\" else if (gpa > 1.0) \"D+\" else if (gpa > 0.7) \"D\" else if (gpa > 0.0)\
    \ \"D-\" else \"E\"\n                acc :+ letterGrade\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9tywm15j.scala:35)\n\tat Problem.main(tmp9tywm15j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedWithIndex = gradesKeys.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndex = gradesValues.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGrade = gradesKeysSortedWithIndex.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndexAndGrade = gradesValuesSortedWithIndex.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGradeAndLetter = gradesKeysSortedWithIndexAndGrade.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndexAndGradeAndLetter = gradesValuesSortedWithIndexAndGrade.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGradeAndLetterAndGrade = gradesKeysSortedWithIndexAndGradeAndLetter.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndexAndGradeAndLetterAndGrade =\
    \ gradesValuesSortedWithIndexAndGradeAndLetter.zipWithIndex.sortWith(_._1 < _._1)\n\
    \        val gradesKeysSortedWithIndexAndGradeAndLetterAndGradeAndGrade = gradesKeysSortedWithIndexAndGradeAndLetterAndGrade.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndexAndGradeAndLetterAndGradeAndGrade\
    \ = gradesValuesSortedWithIndexAndGradeAndLetterAndGrade.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGradeAndLetterAndGradeAndGradeAndGrade\
    \ = gradesKeysSortedWithIndexAndGradeAndLetterAndGradeAndGrade.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndexAndGradeAndLetterAnd\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu4o61_o8.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpu4o61_o8.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpu4o61_o8.scala:44:5 ---------------------\e[0m\e[0m\n\
    \e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar)\n\
    \        gradesMap.map(_._2).filter(_ != ' ')\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpugaxzabz.scala:27:59 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toChar)\n\e[31m\e[31m   |\e\
    [0m                                                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue toInt is not a member of List[Float], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpugaxzabz.scala:27:78 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toChar)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toChar is not a member of Nothing, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpugaxzabz.scala:28:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        gradesMap.map(_._2).filter(_ != \e[31m' '\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mValues of types (Nothing, Nothing) and Char cannot be compared with\
    \ == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659805038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByValue = grades.sortBy(x => x)\n        val gradesSortedByKey\
    \ = gradesSortedByValue.sortBy(x => x._1)\n        val gradesSortedByKeyReversed\
    \ = gradesSortedByKey.reverse\n        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n\
    \        val gradesSortedByKeyReversedMap = gradesSortedByKeyReversed.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesSortedByValueReversedMap = gradesSortedByValueReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversed = gradesSortedByKeyReversedMap.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMapReversed =\
    \ gradesSortedByValueReversedMap.map(x => (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMapReversedReversed\
    \ = gradesSortedByKeyReversedMapReversed.map(x => (x._2, x._1)).toMap\n      \
    \  val gradesSortedByValueReversedMapReversedReversed = gradesSortedByValueReversedMapReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversedReversedReversed\
    \ = gradesSortedByKeyReversedMapReversedReversed.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedByValueReversedMapReversedReversedReversed = gradesSortedByValueReversedMapReversedReversed.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMapReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedMapReversedReversedReversed.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedByValueReversedMapReversedReversedReversedReversed =\
    \ gradesSortedByValueReversedMapReversedReversedReversed.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedByKeyReversedMapReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedMapReversedReversedReversedReversed.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesSortedByValueReversedMapReversedReversedReversedReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwnaz3i21.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwnaz3i21.scala:29:66\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByKey\e[0m = gradesSortedByValue.sortBy(\e[36mx\e[0m => x._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                       value\
    \ _1 is not a member of Float\n\e[31m\e[31m-- Error: /tmp/tmpwnaz3i21.scala:29:69\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m = gradesSortedByValue.sortBy(\e\
    [36mx\e[0m => x._1)\n\e[31m\e[31m   |\e[0m                                   \
    \                                  ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpwnaz3i21.scala:33:85 ------------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m        \e[33mval\e[0m \e[36mgradesSortedByValueReversedMap\e[0m = gradesSortedByValueReversed.map(\e\
    [36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m                     \
    \                                                              ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       value _1 is not a member of Float\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwnaz3i21.scala:33:91 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByValueReversedMap\e\
    [0m = gradesSortedByValueReversed.map(\e[36mx\e[0m => (x._1, x._2)).toMap\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                               ^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                    value _2 is not a member of Floa"
  stdout: ''
  timestamp: 1659805038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat).mapValues(x => x.toFloat/100).toMap\n        val gradesMap2 =\
    \ grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toFloat/100).toMap\n\
    \        val gradesMap3 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat/100).toMap\n        val gradesMap4 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat/100).toMap\n        val gradesMap5 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat/100).toMap\n        val gradesMap6 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat/100).toMap\n        val gradesMap7 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat/100).toMap\n        val gradesMap8 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat/100).toMap\n        val gradesMap9 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat/100).toMap\n        val gradesMap10 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat/100).toMap\n        val gradesMap11 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat/100).toMap\n        val gradesMap12 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat/100).toMap\n        val gradesMap13 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat/100).toMap\n        val gradesMap14 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat/100).toMap\n        val gradesMap15 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpw198_zkv.scala:41:88 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mgradesMap15\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e[36mx\e[0m => \n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \          expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpw198_zkv.scala:27:65 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e[36mx\e[0m => x.toFloat).mapValues(\e\
    [36mx\e[0m => x.toFloat/\e[31m100\e[0m).toMap\n\e[31m\e[31m   |\e[0m         \
    \                                                      ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue toInt is not a member of List[Float], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpw198_zkv.scala:27:89 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e[36mx\e[0m => x.toFloat).mapValues(\e\
    [36mx\e[0m => x.toFloat/\e[31m100\e[0m).toMap\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toFloat is not a member of Nothing, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2"
  stdout: ''
  timestamp: 1659805045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysSum = gradesMapSortedReversedKeys.sum\n\
    \        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedKeysSumLength = gradesMapSortedReversedKeysSum.length\n\
    \        val gradesMapSortedReversedValuesSumLength = gradesMapSortedReversedValuesSum.length\n\
    \        val gradesMapSortedReversedKeysSumLength = gradesMapSortedReversedKeysSumLength\n\
    \        val gradesMapSortedReversedValuesSumLength = gradesMapSortedReversedValuesSumLength\n\
    \        val gradesMapSortedReversedKeysSumLength = gradesMapSortedReversedKeysSumLength\n\
    \        val gradesMapSortedReversedValuesSumLength = gradesMapSortedReversedValuesSumLength\n\
    \        val gradesMapSortedReversedKeysSumLength = gradesMapSortedReversedKeysSumLength\n\
    \        val gradesMapSortedReversedValuesSumLength = gradesMapSortedReversedValuesSumLength\n\
    \        val gradesMapSortedReversedKeysSumLength = gradesMapSortedReversedKeysSumLength\n\
    \        val gradesMapSortedReversedValuesSumLength = gradesMapSortedReversedValuesSumLength\n\
    \        val gradesMapSortedReversedKeysSumLength = gradesMapSortedReversedKeysSumLength\n\
    \        val gradesMapSortedReversedValuesSumLength = gradesMapSortedReversedValuesSumLength\n\
    \        val gradesMapSortedReversedKeysSumLength = gradesMapSortedReversedKeysSumLength\n\
    \        val gradesMapSortedReversedValuesSumLength = gradesMapSortedReversedValuesSumLength\n\
    \        val gradesMapSortedReversedKeysSumLength = gradesMapSortedReversedKeysSumLength\n\
    \        val gradesMapSortedReversedValuesSumLength = gradesMapSortedReversedValuesSumLength\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp3152atd4.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp3152atd4.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedKeysSumLength\e\
    [0m = gradesMapSortedReversedKeysSumLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysSumLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedKeysSumLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3152atd4.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesSumLength\e[0m = gradesMapSortedReversedValuesSumLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesSumLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesSumLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3152atd4.scala:40:12 ---------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedKeysSumLength\e[0m\
    \ = gradesMapSortedReversedKeysSumLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysSumLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedKeysSumLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e"
  stdout: ''
  timestamp: 1659805039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedWithZero\
    \ = gradesSortedByKeyReversed.map(_._1).padToLength(3)\n        val gradesSortedByValueReversedWithZero\
    \ = gradesSortedByValueReversed.map(_._2).padToLength(3)\n        val gradesSortedByKeyReversedWithZeroWithZero\
    \ = gradesSortedByKeyReversedWithZero.map(_ + \"+\").padToLength(3)\n        val\
    \ gradesSortedByValueReversedWithZeroWithZero = gradesSortedByValueReversedWithZero.map(_\
    \ + \"-\").padToLength(3)\n        val gradesSortedByKeyReversedWithZeroWithZeroWithZero\
    \ = gradesSortedByKeyReversedWithZeroWithZero.map(_ + \"+\").padToLength(3)\n\
    \        val gradesSortedByValueReversedWithZeroWithZeroWithZero = gradesSortedByValueReversedWithZeroWithZero.map(_\
    \ + \"-\").padToLength(3)\n        val gradesSortedByKeyReversedWithZeroWithZeroWithZeroWithZero\
    \ = gradesSortedByKeyReversedWithZeroWithZero.map(_ + \"+\").padToLength(3)\n\
    \        val gradesSortedByValueReversedWithZeroWithZeroWithZeroWithZero = gradesSortedByValueReversedWithZeroWithZero.map(_\
    \ + \"-\").padToLength(3)\n        val gradesSortedByKeyReversedWithZeroWithZeroWithZeroWithZeroWithZero\
    \ = gradesSortedByKeyReversedWithZeroWithZero.map(_ + \"+\").padToLength(3)\n\
    \        val gradesSortedByValueReversedWithZeroWithZeroWithZeroWithZeroWithZero\
    \ = gradesSortedByValueReversedWithZeroWithZero.map(_ + \"-\").padToLength(3)\n\
    \        val gradesSortedByKeyReversedWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\
    \ = gradesSortedByKeyReversedWithZeroWithZero.map(_ + \"+\").padToLength(3)\n\
    \        val gradesSortedByValueReversedWithZeroWithZeroWithZeroWithZeroWithZero\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdq14kip3.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpdq14kip3.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpdq14kip3.scala:44:5 ---------------------\e[0m\e[0m\n\
    \e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap2 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap3 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap4 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap5 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap6 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap7 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap8 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap9 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap10 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap11 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap12 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap13 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap14 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap15 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap16 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap17 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap18 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap19 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap20 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap21 = grades.groupBy(_ / 10).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap22 = grades.groupBy(_ / 10).\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp32ipal1e.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp32ipal1e.scala:27:59 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_ / \e[31m10\e\
    [0m).mapValues(_.toInt).mapValues(_.toString.toUpperCase)\n\e[31m\e[31m   |\e\
    [0m                                                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue toInt is not a member of List[Float], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp32ipal1e.scala:49:5 ---------------------\e[0m\e\
    [0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysSize = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesSize = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysSum = gradesMapSortedReversedKeys.sum\n\
    \        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysSumOfSquares = gradesMapSortedReversedKeys.map(x\
    \ => x * x).sum\n        val gradesMapSortedReversedValuesSumOfSquares = gradesMapSortedReversedValues.map(x\
    \ => x * x).sum\n        val gradesMapSortedReversedKeysSumOfSquaresAverage =\
    \ gradesMapSortedReversedKeys.map(x => x * x).average\n        val gradesMapSortedReversedValuesSumOfSquaresAverage\
    \ = gradesMapSortedReversedValues.map(x => x * x).average\n        val gradesMapSortedReversedKeysSumOfSquaresAverageOfSquares\
    \ = gradesMapSortedReversedKeys.map(x => x * x).average\n        val gradesMapSortedReversedValuesSumOfSquaresAverageOfSquares\
    \ = gradesMapSortedReversedValues.map(x => x * x).average\n        val gradesMapSortedReversedKeysSumOfSquaresAverageOfSquaresOfSquares\
    \ = gradesMapSortedReversedKeys.map(x => x * x).average\n        val gradesMapSortedReversedValuesSumOfSquaresAverageOfSquaresOfSquares\
    \ = gradesMapSortedReversedValues.map(x => x * x).average\n        val gradesMapSortedReversedKeysSumOfSquaresAverageOfSquaresOfSquaresOfSquares\
    \ = gradesMapSortedReversedKeys.map(x => x * x).average\n        val gradesMapSortedReversedValuesSumOfSquaresAverageOfSquaresOfSquaresOfSquares\
    \ = grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps0toz298.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps0toz298.scala:47:90 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesSumOfSquaresAverageOfSquaresOfSquaresOfSquares\e\
    [0m = grade\n\e[31m\e[31m   |\e[0m                                           \
    \                                               ^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                                      Not found: grade\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps0toz298.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805047
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => if (grade > 3.0) \"B+\" else\
    \ if (grade > 2.7) \"B\" else if (grade > 2.3) \"B-\" else if (grade > 2.0) \"\
    C+\" else if (grade > 1.7) \"C\" else if (grade > 1.3) \"C-\" else if (grade >\
    \ 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade > 0.0) \"D-\" else \"\
    E\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9nqy54a6.scala:30)\n\tat Problem.main(tmp9nqy54a6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValue\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesLength\e\
    [0m = gradesMapSortedReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    ["
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = Map(\n    \
    \        4.0 -> \"A+\",\n            3.7 -> \"A\",\n            3.3 -> \"A-\"\
    ,\n            3.0 -> \"B+\",\n            2.7 -> \"B\",\n            2.3 -> \"\
    B-\",\n            2.0 -> \"C+\",\n            1.7 -> \"C\",\n            1.3\
    \ -> \"C-\",\n            1.0 -> \"D+\",\n            0.7 -> \"D\",\n        \
    \    0.0 -> \"D-\"\n        )\n        grades.map(grade => gradesMap(grade))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptyqss3fw.scala:28:12\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[31m4.0\e[0m ->\
    \ \e[31m\"A+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptyqss3fw.scala:29:12 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[31m3.7\e[0m -> \e[31m\"A\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmptyqss3fw.scala:30:12 --------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m            \e[31m3.3\e[0m -> \e[31m\"A-\"\e[0m,\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (\e[1m\e[31mDouble\e\
    [0m, String)\n\e[31m   |\e[0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptyqss3fw.scala:31:12\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            \e[31m3.0\e[0m ->\
    \ \e[31m\"B+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptyqss3fw.scala:32:12 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[31m2.7\e[0m -> \e[31m\"B\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ ava"
  stdout: ''
  timestamp: 1659805050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n\
    \        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n\
    \        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesMap = gradesSortedByGPAReversedValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesKeys = gradesSortedByGPAReversedValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValues = gradesSortedByGPAReversedValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesMap = gradesSortedByGPAReversedValuesValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesValuesKeys = gradesSortedByGPAReversedValuesValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValuesValues = gradesSortedByGPAReversedValuesValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesMap\
    \ = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesValuesMap.keys.toList\n\
    \        val gradesSortedByGP\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv1z2o7oc.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpv1z2o7oc.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpv1z2o7oc.scala:43:68 ------------------------\e[0m\e[0m\n\
    \e[31m43 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGPAReversedValuesValuesValuesValuesKeys\e\
    [0m = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.keys\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m   Not found: gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv1z2o7oc.scala:45:79\
    \ ------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesMap\e[0m = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesValuesMap.keys.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesValuesMap\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z2o7oc.scala:47:5\
    \ --------------------"
  stdout: ''
  timestamp: 1659805049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSorted\
    \ = grades.sortWith(_ < _)\n        val gradesSortedMap = gradesSorted.toMap\n\
    \        val gradesSortedMapKeys = gradesSortedMap.keys\n        val gradesSortedMapValues\
    \ = gradesSortedMap.values.toList\n        val gradesSortedMapValuesSum = gradesSortedMapValues.sum\n\
    \        val gradesSortedMapValuesSum2 = gradesSortedMapValuesSum * gradesSortedMapValuesSum\n\
    \        val gradesSortedMapValuesSum3 = gradesSortedMapValuesSum2 * gradesSortedMapValuesSum\n\
    \        val gradesSortedMapValuesSum4 = gradesSortedMapValuesSum3 * gradesSortedMapValuesSum\n\
    \        val gradesSortedMapValuesSum5 = gradesSortedMapValuesSum4 * gradesSortedMapValuesSum\n\
    \        val gradesSortedMapValuesSum6 = gradesSortedMapValuesSum5 * gradesSortedMapValuesSum\n\
    \        val gradesSortedMapValuesSum7 = gradesSortedMapValuesSum6 * gradesSortedMapValuesSum\n\
    \        val gradesSortedMapValuesSum8 = gradesSortedMapValuesSum7 * gradesSortedMapValuesSum\n\
    \        val gradesSortedMapValuesSum9 = gradesSortedMapValuesSum8 * gradesSortedMapValuesSum\n\
    \        val gradesSortedMapValuesSum10 = gradesSortedMapValuesSum9 * gradesSortedMapValuesSum\n\
    \        val gradesSortedMapValuesSum11 = gradesSortedMapValuesSum10 * gradesSortedMapValuesSum\n\
    \        val gradesSortedMapValuesSum12 = gradesSortedMapValuesSum11 * gradesSortedMapValuesSum\n\
    \        val gradesSortedMapValuesSum13 = gradesSortedMapValuesSum12 * gradesSortedMapValuesSum\n\
    \        val gradesSortedMapValuesSum14 = gradesSortedMapValuesSum13 * gradesSortedMapValuesSum\n\
    \        val gradesSortedMapValuesSum15 = gradesSortedMapValuesSum14 * gradesSortedMapValuesSum\n\
    \        val gradesSortedMapValuesSum16 = gradesSortedMapValuesSum15 * gradesSortedMapValuesSum\n\
    \        val gradesSortedMapValuesSum17 = gradesSortedMapValuesSum16 * gradesSortedMapValuesSum\n\
    \        val gradesSortedMapValuesSum18 = gradesSortedMapValuesSum17 * gradesSortedMapValuesSum\n\
    \        val gradesSortedMapValuesSum19 = gradesSortedMapValuesSum18 * grade\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9060zfqy.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- Error: /tmp/tmp9060zfqy.scala:29:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMap\e[0m = gradesSorted.toMap\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m                                      Cannot prove that Float <:<\
    \ (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                   \
    \   where:    K is a type variable\n\e[31m   |\e[0m                          \
    \                      V is a type variable\n\e[31m   |\e[0m                 \
    \                     .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9060zfqy.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedWithDuplicates\
    \ = gradesSortedByKeyReversed.groupBy(_._1).mapValues(_.map(_._2))\n        val\
    \ gradesSortedByValueReversedWithDuplicates = gradesSortedByValueReversed.groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val gradesSortedByKeyReversedWithDuplicatesReversed = gradesSortedByKeyReversedWithDuplicates.reverse\n\
    \        val gradesSortedByValueReversedWithDuplicatesReversed = gradesSortedByValueReversedWithDuplicates.reverse\n\
    \        val gradesSortedByKeyReversedWithDuplicatesReversedWithDuplicates = gradesSortedByKeyReversedWithDuplicatesReversed.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gradesSortedByValueReversedWithDuplicatesReversedWithDuplicates =\
    \ gradesSortedByValueReversedWithDuplicatesReversed.groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val gradesSortedByKeyReversedWithDuplicatesReversedWithDuplicatesReversed\
    \ = gradesSortedByKeyReversedWithDuplicatesReversedWithDuplicates.reverse\n  \
    \      val gradesSortedByValueReversedWithDuplicatesReversedWithDuplicatesReversed\
    \ = gradesSortedByValueReversedWithDuplicatesReversedWithDuplicates.reverse\n\
    \        val gradesSortedByKeyReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicates\
    \ = gradesSortedByKeyReversedWithDuplicatesReversedWithDuplicatesReversed.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gradesSortedByValueReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicates\
    \ = gradesSortedByValueReversedWithDuplicatesReversedWithDuplicatesReversed.groupBy(_._2).mapValues(_.map(_._1))\n\
    \        val gradesSortedByKeyReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicates\
    \ = gradesSortedByKeyReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicates.reverse\n\
    \        val gradesSortedByValueReversedWithDuplicate\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw40mojvb.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpw40mojvb.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpw40mojvb.scala:44:5 ---------------------\e[0m\e[0m\n\
    \e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat).mapValues(x => x.toString.toUpperCase)\n        val gradesMap2\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toFloat).mapValues(x\
    \ => x.toString.toUpperCase)\n        val gradesMap3 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat).mapValues(x => x.toString.toUpperCase)\n        val gradesMap4\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toFloat).mapValues(x\
    \ => x.toString.toUpperCase)\n        val gradesMap5 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat).mapValues(x => x.toString.toUpperCase)\n        val gradesMap6\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toFloat).mapValues(x\
    \ => x.toString.toUpperCase)\n        val gradesMap7 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat).mapValues(x => x.toString.toUpperCase)\n        val gradesMap8\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toFloat).mapValues(x\
    \ => x.toString.toUpperCase)\n        val gradesMap9 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat).mapValues(x => x.toString.toUpperCase)\n        val gradesMap10\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toFloat).mapValues(x\
    \ => x.toString.toUpperCase)\n        val gradesMap11 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat).mapValues(x => x.toString.toUpperCase)\n        val gradesMap12\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toFloat).mapValues(x\
    \ => x.toString.toUpperCase)\n        val gradesMap13 = grades.groupBy(x => x.toInt).mapValues(_.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf5nkdmjy.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf5nkdmjy.scala:27:65\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap\e[0m = grades.groupBy(\e[36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e\
    [36mx\e[0m => x.toFloat).mapValues(\e[36mx\e[0m => x.toString.toUpperCase)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpf5nkdmjy.scala:27:89 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e[36mx\e[0m => x.toFloat).mapValues(\e\
    [36mx\e[0m => x.toString.toUpperCase)\n\e[31m\e[31m   |\e[0m                 \
    \                                                                      ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toFloat is not a member of Nothing, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e\
    [0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e\
    [0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\e[31m\
    \   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\e\
    [31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m\n\e[31m\e[31"
  stdout: ''
  timestamp: 1659805053
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.foldLeft(List[String]())((acc, grade) =>\
    \ {\n            val gpa = grade / 4.0\n            val letterGrade = if (gpa\
    \ > 3.0) \"A+\" else if (gpa > 2.7) \"B\" else if (gpa > 2.3) \"B-\" else if (gpa\
    \ > 2.0) \"C+\" else if (gpa > 1.7) \"C\" else if (gpa > 1.3) \"C-\" else if (gpa\
    \ > 1.0) \"D+\" else if (gpa > 0.7) \"D\" else \"E\"\n            acc :+ letterGrade\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpffadwpar.scala:34)\n\tat Problem.main(tmpffadwpar.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedReversed\
    \ = gradesSortedByKeyReversed.reverse\n        val gradesSortedByValueReversedReversed\
    \ = gradesSortedByValueReversed.reverse\n        val gradesSortedByKeyReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversed\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd7fc5x8e.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmpd7fc5x8e.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd7fc5x8e.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReverse\
    \ = gradesSortedMap.reverse\n        val gradesSortedMapReverseMap = gradesSortedMapReverse.toMap\n\
    \        val gradesSortedMapReverseMapReverse = gradesSortedMapReverseMap.reverse\n\
    \        val gradesSortedMapReverseMapReverseMap = gradesSortedMapReverseMapReverse.toMap\n\
    \        val gradesSortedMapReverseMapReverseMapReverse = gradesSortedMapReverseMapReverseMap.reverse\n\
    \        val gradesSortedMapReverseMapReverseMapReverseMap = gradesSortedMapReverseMapReverseMap.reverse\n\
    \        val gradesSortedMapReverseMapReverseMapReverseMapReverse = gradesSortedMapReverseMapReverseMapReverseMap.reverse\n\
    \        val gradesSortedMapReverseMapReverseMapReverseMapReverseMap = gradesSortedMapReverseMapReverseMapReverseMap.reverse\n\
    \        val gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverse =\
    \ gradesSortedMapReverseMapReverseMapReverseMapReverseMap.reverse\n        val\
    \ gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMap = gradesSortedMapReverseMapReverseMapReverseMapReverseMap.reverse\n\
    \        val gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverse\
    \ = gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMap.reverse\n\
    \        val gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMap\
    \ = gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMap.reverse\n\
    \        val gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverse\
    \ = gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMap.reverse\n\
    \        val gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMap\
    \ = gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMap.reverse\n\
    \        val gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverse\
    \ = gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMap.reverse\n\
    \        val gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMap\
    \ = gradesSortedMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMap.reverse\n\
    \        val gradesSortedMapReverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb_ctd4ba.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb_ctd4ba.scala:30:53\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapReverse\e[0m = gradesSortedMap.reverse\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue reverse is not a member of Map[Int, Float] - did you mean gradesSortedMap.reversed?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb_ctd4ba.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x\
    \ => x -> \"A+\".toUpperCase)\n        val gradesMap2 = grades.map(x => x -> \"\
    B\".toUpperCase)\n        val gradesMap3 = grades.map(x => x -> \"C\".toUpperCase)\n\
    \        val gradesMap4 = grades.map(x => x -> \"D\".toUpperCase)\n        val\
    \ gradesMap5 = grades.map(x => x -> \"E\".toUpperCase)\n        grades.map(x =>\
    \ x -> \"F\".toUpperCase)\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpap4tyymw.scala:27:55\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e\
    [0m => x -> \e[31m\"A+\"\e[0m.toUpperCase)\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    List[(Float, String)]\n\e[31m\
    \   |\e[0m                         Required: collection.mutable.Map[Float, String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpap4tyymw.scala:32:24\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m        grades.map(\e[36mx\e\
    [0m => x -> \e[31m\"F\"\e[0m.toUpperCase)\n\e[31m\e[31m   |\e[0m             \
    \           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \ Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mFloat\e[0m\e[1m\e[31m,\e[0m\e[1m\e[31m\
    \ \e[0mString\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(_ * -1)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(_ * -1)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbfr272pr.scala:61:38 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e\
    [31m   |\e[0m                                      expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbfr272pr.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesKeysSortedLength\e[0m = gradesKeysSorted.length\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbfr272pr.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbfr272pr.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbfr272pr.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0"
  stdout: ''
  timestamp: 1659805051
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.foldLeft(Map[Float,\
    \ String]()){\n            case (acc, grade) =>\n                val gpa = grade\
    \ / 4.0\n                val letterGrade = if (gpa > 3.7) \"A+\" else if (gpa\
    \ > 3.3) \"A\" else if (gpa > 3.0) \"B+\" else if (gpa > 2.7) \"B\" else if (gpa\
    \ > 2.3) \"B-\" else if (gpa > 2.0) \"C+\" else if (gpa > 1.7) \"C\" else if (gpa\
    \ > 1.3) \"C-\" else if (gpa > 1.0) \"D+\" else if (gpa > 0.7) \"D\" else \"D-\"\
    \n                acc + (gpa.toFloat -> letterGrade)\n        }\n        val gradesKeys\
    \ = gradesMap.keys.toList\n        val gradesValues = gradesMap.values.toList\n\
    \        gradesKeys.sortWith(_ < _).map(key => gradesValues(gradesKeys.indexOf(key))).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpssgw30mq.scala:38)\n\tat Problem.main(tmpssgw30mq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n    \
    \    val gradesLength = gradesSorted.length\n        val gradesAverage = gradesSorted.sum\
    \ / gradesLength\n        val gradesSum = gradesSorted.sum\n        val gradesSumOfSquares\
    \ = gradesSum * gradesSum\n        val gradesSumOfSquaresAverage = gradesSumOfSquares\
    \ / gradesLength\n        val gradesSumOfSquaresAverageOfSquares = gradesSumOfSquaresAverage\
    \ * gradesSumOfSquares\n        val gradesSumOfSquaresAverageOfSquaresMinusGrade\
    \ = gradesSumOfSquaresAverage - gradesSorted\n        val gradesSumOfSquaresAverageOfSquaresMinusGradeLength\
    \ = gradesSumOfSquaresAverageOfSquaresMinusGrade.length\n        val gradesSumOfSquaresAverageOfSquaresMinusGradeLength\
    \ = gradesSumOfSquaresAverageOfSquaresMinusGradeLength * gradesLength\n      \
    \  val gradesSumOfSquaresAverageOfSquaresMinusGradeLength = gradesSumOfSquaresAverageOfSquaresMinusGradeLength\
    \ / gradesLength\n        val gradesSumOfSquaresAverageOfSquaresMinusGradeLength\
    \ = gradesSumOfSquaresAverageOfSquaresMinusGradeLength * gradesLength\n      \
    \  val gradesSumOfSquaresAverageOfSquaresMinusGradeLength = gradesSumOfSquaresAverageOfSquaresMinusGradeLength\
    \ * gradesLength\n        val gradesSumOfSquaresAverageOfSquaresMinusGradeLength\
    \ = gradesSumOfSquaresAverageOfSquaresMinusGradeLength * gradesLength\n      \
    \  val gradesSumOfSquaresAverageOfSquaresMinusGradeLength = gradesSumOfSquaresAverageOfSquaresMinusGradeLength\
    \ * gradesLength\n        val gradesSumOfSquaresAverageOfSquaresMinusGradeLength\
    \ = gradesSumOfSquaresAverageOfSquaresMinusGradeLength * gradesLength\n      \
    \  val gradesSumOfSquaresAverageOfSquaresMinusGradeLength = gradesSumOfSquaresAverageOfSquaresMinusGradeLength\
    \ * gradesLength\n        val gradesSumOfSquaresAverageOfSquaresMinusGradeLength\
    \ = gradesSumOfSquaresAverageOfSquaresMinusGradeLength * gradesLength\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz3v9eda_.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAverageOfSquaresMinusGradeLength\e\
    [0m = gradesSumOfSquaresAverageOfSquaresMinusGradeLength * gradesLength\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAverageOfSquaresMinusGradeLength is already\
    \ defined as \e[33mvalue\e[0m \e[35mgradesSumOfSquaresAverageOfSquaresMinusGradeLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz3v9eda_.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAverageOfSquaresMinusGradeLength\e\
    [0m = gradesSumOfSquaresAverageOfSquaresMinusGradeLength / gradesLength\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAverageOfSquaresMinusGradeLength is already\
    \ defined as \e[33mvalue\e[0m \e[35mgradesSumOfSquaresAverageOfSquaresMinusGradeLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz3v9eda_.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAverageOfSquaresMinusGradeLength\e\
    [0m = gradesSumOfSquaresAverageOfSquaresMinusGradeLength * gradesLength\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAverageOfSquaresMinusGradeLength is already\
    \ defined as \e[33mvalue\e[0m \e[35mgradesSumOfSquaresAverageOfSquaresMinusGradeLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same"
  stdout: ''
  timestamp: 1659805050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar)\n\
    \        val gradesMap2 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toChar)\n\
    \        val gradesMap3 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar)\n\
    \        val gradesMap4 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar)\n\
    \        val gradesMap5 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar)\n\
    \        val gradesMap6 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar)\n\
    \        val gradesMap7 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar)\n\
    \        val gradesMap8 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar)\n\
    \        val gradesMap9 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar)\n\
    \        val gradesMap10 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.toChar).mapValues(_.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5it13j6g.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5it13j6g.scala:27:59\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap\e[0m = grades.groupBy(_ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp5it13j6g.scala:27:78 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toChar)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toChar is not a member of Nothing, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5it13j6g.scala:28:60\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap2\e[0m = grades.grou"
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toString -> x)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2\
    \ > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n   \
    \     val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2\
    \ > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n   \
    \     val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n \
    \       val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val\
    \ gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15\
    \ = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2\
    \ > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n \
    \       val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val\
    \ gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20\
    \ = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2\
    \ > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n \
    \       val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted26 = grades\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa8fps395.scala:54:5\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x\
    \ => (x, \"A+\")).toMap\n        val gradesMap2 = grades.map(x => (x, \"A\")).toMap\n\
    \        val gradesMap3 = grades.map(x => (x, \"A-\")).toMap\n        val gradesMap4\
    \ = grades.map(x => (x, \"B+\")).toMap\n        val gradesMap5 = grades.map(x\
    \ => (x, \"B\")).toMap\n        val gradesMap6 = grades.map(x => (x, \"B-\")).toMap\n\
    \        val gradesMap7 = grades.map(x => (x, \"C+\")).toMap\n        val gradesMap8\
    \ = grades.map(x => (x, \"C\")).toMap\n        val gradesMap9 = grades.map(x =>\
    \ (x, \"C-\")).toMap\n        val gradesMap10 = grades.map(x => (x, \"D+\")).toMap\n\
    \        val gradesMap11 = grades.map(x => (x, \"D\")).toMap\n        val gradesMap12\
    \ = grades.map(x => (x, \"D-\")).toMap\n        val gradesMap13 = grades.map(x\
    \ => (x, \"E\")).toMap\n        val gradesMap14 = grades.map(x => (x, \"F\")).toMap\n\
    \        val gradesMap15 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap16\
    \ = grades.map(x => (x, \"F\")).toMap\n        val gradesMap17 = grades.map(x\
    \ => (x, \"F\")).toMap\n        val gradesMap18 = grades.map(x => (x, \"F\")).toMap\n\
    \        val gradesMap19 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap20\
    \ = grades.map(x => (x, \"F\")).toMap\n        val gradesMap21 = grades.map(x\
    \ => (x, \"F\")).toMap\n        val gradesMap22 = grades.map(x => (x, \"F\")).toMap\n\
    \        val gradesMap23 = grades.map(x => (x, \"F\")).toMap\n        val gradesMap24\
    \ = grades.map(x => (x, \"F\")).toMap\n        val gradesMap25 = grades.map(x\
    \ => (x, \"F\")).toMap\n        val gradesMap26 = grades.map(x => (x, \"F\")).toMap\n\
    \        val gradesMap27 = grades.map(x => (x, \"F\")).toMap\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfe2n58dm.scala:27:45\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e\
    [0m => (x, \e[31m\"A+\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                  \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m    \
    \                     Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfe2n58dm.scala:55:5 ---------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValue\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesLength\e\
    [0m = gradesMapSortedReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    ["
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByKey = grades.sortBy(_._1).reverse\n        val gradesSortedByValue\
    \ = grades.sortBy(_._2).reverse\n        val gradesSortedByKeyAndValue = grades.sortBy(_._1).reverse.sortBy(_._2).reverse\n\
    \        val gradesSortedByKeyAndValueAndGrade = grades.sortBy(_._1).reverse.sortBy(_._2).reverse.sortBy(_._3).reverse\n\
    \        val gradesSortedByKeyAndValueAndGradeAndGrade = grades.sortBy(_._1).reverse.sortBy(_._2).reverse.sortBy(_._3).reverse.sortBy(_._4).reverse\n\
    \        val gradesSortedByKeyAndValueAndGradeAndGradeAndGrade = grades.sortBy(_._1).reverse.sortBy(_._2).reverse.sortBy(_._3).reverse.sortBy(_._4).reverse.sortBy(_._5).reverse\n\
    \        val gradesSortedByKeyAndValueAndGradeAndGradeAndGradeAndGrade = grades.sortBy(_._1).reverse.sortBy(_._2).reverse.sortBy(_._3).reverse.sortBy(_._4).reverse.sortBy(_._5).reverse.sortBy(_._6).reverse\n\
    \        val gradesSortedByKeyAndValueAndGradeAndGradeAndGradeAndGradeAndGrade\
    \ = grades.sortBy(_._1).reverse.sortBy(_._2).reverse.sortBy(_._3).reverse.sortBy(_._4).reverse.sortBy(_._5).reverse.sortBy(_._6).reverse.sortBy(_._7).reverse\n\
    \        val gradesSortedByKeyAndValueAndGradeAndGradeAndGradeAndGradeAndGrade\
    \ = grades.sortBy(_._1).reverse.sortBy(_._2).reverse.sortBy(_._3).reverse.sortBy(_._4).reverse.sortBy(_._5).reverse.sortBy(_._6).reverse.sortBy(_._7).reverse.sortBy(_._8).reverse\n\
    \        val gradesSortedByKeyAndValueAndGradeAndGradeAndGradeAndGradeAndGradeAndGrade\
    \ = grades.sortBy(_._1).reverse.sortBy(_._2).reverse.sortBy(_._3).reverse.sortBy(_._4).reverse.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_onbiam7.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_onbiam7.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyAndValueAndGradeAndGradeAndGradeAndGradeAndGrade\e\
    [0m = grades.sortBy(_._1).reverse.sortBy(_._2).reverse.sortBy(_._3).reverse.sortBy(_._4).reverse.sortBy(_._5).reverse.sortBy(_._6).reverse.sortBy(_._7).reverse.sortBy(_._8).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyAndValueAndGradeAndGradeAndGradeAndGradeAndGrade\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesSortedByKeyAndValueAndGradeAndGradeAndGradeAndGradeAndGrade\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp_onbiam7.scala:28:48 ------------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m = grades.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^\e[0m\n\
    \e[31m   |\e[0m                                       value _1 is not a member\
    \ of Float\n\e[31m\e[31m-- Error: /tmp/tmp_onbiam7.scala:28:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m =\
    \ grades.sortBy(_._1).reverse\n\e[31m\e[31m   |\e[0m                         \
    \                          ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both\
    \ \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and\
    \ \e[33mobject\e[0m \e[35mLong\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match\
    \ type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in\
    \ \e"
  stdout: ''
  timestamp: 1659805053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesMap.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedWithDuplicates\
    \ = gradesSortedByKeyReversed.filter(_._2 > 1)\n        val gradesSortedByValueReversedWithDuplicates\
    \ = gradesSortedByValueReversed.filter(_._2 > 1)\n        val gradesSortedByKeyReversedWithDuplicatesSortedByKey\
    \ = gradesSortedByKeyReversedWithDuplicates.sortBy(_._1)\n        val gradesSortedByValueReversedWithDuplicatesSortedByValue\
    \ = gradesSortedByValueReversedWithDuplicates.sortBy(_._1)\n        val gradesSortedByKeyReversedWithDuplicatesSortedByKeyReversed\
    \ = gradesSortedByKeyReversedWithDuplicatesSortedByKey.reverse\n        val gradesSortedByValueReversedWithDuplicatesSortedByValueReversed\
    \ = gradesSortedByValueReversedWithDuplicatesSortedByValue.reverse\n        val\
    \ gradesSortedByKeyReversedWithDuplicatesSortedByKeyReversedWithDuplicates = gradesSortedByKeyReversedWithDuplicatesSortedByKeyReversed.filter(_._2\
    \ > 1)\n        val gradesSortedByValueReversedWithDuplicatesSortedByValueReversedWithDuplicates\
    \ = gradesSortedByValueReversedWithDuplicatesSortedByValueReversed.filter(_._2\
    \ > 1)\n        val gradesSortedByKeyReversedWithDuplicatesSortedByKeyReversedWithDuplicatesSortedByKey\
    \ = gradesSortedByKeyReversedWithDuplicatesSortedByKeyReversedWithDuplicates.sortBy(_._1)\n\
    \        val gradesSortedByValueReversedWithDuplicatesSortedByValueReversedWithDuplicatesSortedByValue\
    \ = gradesSortedByValueReversedWithDuplicatesSortedByValueReversed.sortBy(_._1)\n\
    \        val gradesSortedByKeyReversedWithDuplicatesSortedByKeyReversedWithDuplicatesSortedByKeyReversed\
    \ = gradesSortedByKeyReversedWithDuplicatesSortedByKeyReversedWithDuplicatesSortedByKey.reverse\n\
    \        val gradesSortedByValueReversedWithDuplicatesSortedByValueReversedWithDuplicatesSortedByValueReversed\
    \ = gradesSortedByValueReversedWithDuplicatesSortedBy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqfl_mv7l.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqfl_mv7l.scala:43:112 -----------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByValueReversedWithDuplicatesSortedByValueReversedWithDuplicatesSortedByValueReversed\e\
    [0m = gradesSortedByValueReversedWithDuplicatesSortedBy\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: gradesSortedByValueReversedWithDuplicatesSortedBy\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqfl_mv7l.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysSum = gradesMapSortedReversedKeys.sum\n\
    \        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysAverageLength = gradesMapSortedReversedKeysAverage.length\n\
    \        val gradesMapSortedReversedValuesAverageLength = gradesMapSortedReversedValuesAverage.length\n\
    \        val gradesMapSortedReversedKeysAverageSum = gradesMapSortedReversedKeysAverage.sum\n\
    \        val gradesMapSortedReversedValuesAverageSum = gradesMapSortedReversedValuesAverage.sum\n\
    \        val gradesMapSortedReversedKeysAverageAverage = gradesMapSortedReversedKeysAverage.average\n\
    \        val gradesMapSortedReversedValuesAverageAverage = gradesMapSortedReversedValuesAverage.average\n\
    \        val gradesMapSortedReversedKeysAverageAverageLength = gradesMapSortedReversedKeysAverageAverage.length\n\
    \        val gradesMapSortedReversedValuesAverageAverageLength = gradesMapSortedReversedValuesAverageAverage.length\n\
    \        val gradesMapSortedReversedKeysAverageAverageSum = gradesMapSortedReversedKeysAverageAverage.sum\n\
    \        val gradesMapSortedReversedValuesAverageAverageSum = gradesMapSortedReversedValuesAverageAverage.sum\n\
    \        val gradesMapSortedReversedKeysAverageAverageAverage = gradesMapSortedReversedKeysAverageAverage.average\n\
    \        val gradesMapSortedReversedValuesAverageAverageAverage = gradesMapSortedReversedValuesAverageAverage.average\n\
    \        val gradesMapSortedReversedKeysAverageAverageAverageLength = gradesMapSortedReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnm85b9cc.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnm85b9cc.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesAverage = gradesSum\
    \ / gradesKeys.size\n        val gradesGrades = gradesKeys.map(x => if (gradesMap(x)\
    \ == gradesAverage) gradesMap(x) else \"D\")\n        gradesGrades.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpst_z5f_f.scala:33:21\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m        gradesGrades.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Found:    List[Matchable]\n\e[31m   |\e[0m        Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesIterReverse\
    \ = grades.reverseIterator\n        val gradesIterReversed = grades.reverseIterator.toList\n\
    \        val gradesIterReversedReversed = grades.reverseIterator.toList.reverse\n\
    \        val gradesIterReversedReversedReversed = grades.reverseIterator.toList.reverse.reverse\n\
    \        val gradesIterReversedReversedReversedReversed = grades.reverseIterator.toList.reverse.reverse.reverse\n\
    \        val gradesIterReversedReversedReversedReversedReversed = grades.reverseIterator.toList.reverse.reverse.reverse.reverse\n\
    \        val gradesIterReversedReversedReversedReversedReversedReversed = grades.reverseIterator.toList.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxwvf9jl7.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxwvf9jl7.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(_ - gradesKeys.head).reverse\n  \
    \      val gradesValuesSorted = gradesValues.sortBy(_ - gradesValues.head).reverse\n\
    \        val gradesKeysSortedWithDuplicates = gradesKeysSorted.distinct\n    \
    \    val gradesValuesSortedWithDuplicates = gradesValuesSorted.distinct\n    \
    \    val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicates.size\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicates.size\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\
    \ - 1\n        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\
    \ - 1\n        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\
    \ - 1\n        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\
    \ - 1\n        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\
    \ - 1\n        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\
    \ - 1\n        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\
    \ - 1\n        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\
    \ - 1\n        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\
    \ - 1\n        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\
    \ - 1\n        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\
    \ - 1\n        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\
    \ - 1\n        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\
    \ - 1\n        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\
    \ - 1\n        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\
    \ - 1\n        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\
    \ - 1\n        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\
    \ - 1\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp480bvx4u.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp480bvx4u.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedWithDuplicatesLength\e\
    [0m = gradesKeysSortedWithDuplicatesLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedWithDuplicatesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesKeysSortedWithDuplicatesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp480bvx4u.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesValuesSortedWithDuplicatesLength\e[0m = gradesValuesSortedWithDuplicatesLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedWithDuplicatesLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesValuesSortedWithDuplicatesLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp480bvx4u.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedWithDuplicatesLength\e[0m\
    \ = gradesKeysSortedWithDuplicatesLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedWithDuplicatesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesKeysSortedWithDuplicatesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be "
  stdout: ''
  timestamp: 1659805061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.map(_\
    \ => 0f).toList).mapValues(_.sum / _.size)\n        grades.map(x => gradesMap(x.toInt).map(x\
    \ => x.toChar).mkString).reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpqmsitdox.scala:27:96 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.map(_ => \e[31m0f\e[0m).toList).mapValues(_.sum\
    \ / _.size)\n\e[31m\e[31m   |\e[0m                                           \
    \                                                     ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqmsitdox.scala:28:43 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        grades.map(\e[36mx\e[0m => gradesMap(x.toInt).map(\e\
    [36mx\e[0m => x.toChar).mkString).reverse\n\e[31m\e[31m   |\e[0m             \
    \           ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   value map is not a member of Nothing\n2 errors found\n"
  stdout: ''
  timestamp: 1659805057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(_)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(_)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = grades\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj5u4wxay.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj5u4wxay.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj5u4wxay.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj5u4wxay.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /t"
  stdout: ''
  timestamp: 1659805063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n    \
    \    val gradesSum = gradesSorted.sum\n        val gradesSumOfSquares = gradesSorted.map(x\
    \ => x * x).sum\n        val gradesSumOfSquaresOf = gradesSorted.map(x => x *\
    \ x).map(x => x * x).sum\n        val gradesSumOfSquaresOfSquares = gradesSorted.map(x\
    \ => x * x * x).sum\n        val gradesSumOfSquaresOfSquares = gradesSorted.map(x\
    \ => x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOf = gradesSorted.map(x\
    \ => x * x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquares\
    \ = gradesSorted.map(x => x * x * x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOf\
    \ = gradesSorted.map(x => x * x * x * x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSorted.map(x => x * x * x * x * x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOf\
    \ = gradesSorted.map(x => x * x * x * x * x * x * x * x * x).sum\n        val\
    \ gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSorted.map(x\
    \ => x * x * x * x * x * x * x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOf\
    \ = gradesSorted.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n   \
    \     val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = gradesSorted.map(x\
    \ => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOf\
    \ = gradesSorted.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares =\
    \ gradesSorted.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSqu\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp39vmlmq7.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp39vmlmq7.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSumOfSquaresOfSquares\e[0m = gradesSorted.map(\e[36mx\e[0m => x\
    \ * x * x * x).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresOfSquares is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSumOfSquaresOfSquares\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp39vmlmq7.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOf\e\
    [0m = gradesSorted.map(\e[36mx\e[0m => x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOf is\
    \ already defined as \e[33mvalue\e[0m \e[35mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOf\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp39vmlmq7.scala:42:12 ---------------------------\e[0m\e[0m\n\e\
    [31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\e\
    [0m = gradesSorted.map(\e[36mx\e[0m => x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfS"
  stdout: ''
  timestamp: 1659805061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toInt).toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_cr2mu5o.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedKeysLength\e\
    [0m = gradesMapSortedReversedKeys.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_cr2mu5o.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_cr2mu5o.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_cr2mu5o.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedV"
  stdout: ''
  timestamp: 1659805063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGrade\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByGradeReversed = gradesSortedByGrade.sortBy(_._1).reverse\n\
    \        val gradesSortedByGradeReversedMap = gradesSortedByGradeReversed.toMap\n\
    \        val gradesSortedByGradeReversedKeys = gradesSortedByGradeReversedMap.keys\n\
    \        val gradesSortedByGradeReversedValues = gradesSortedByGradeReversedMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesMap = gradesSortedByGradeReversedValues.toMap\n\
    \        val gradesSortedByGradeReversedValuesKeys = gradesSortedByGradeReversedValuesMap.keys\n\
    \        val gradesSortedByGradeReversedValuesValues = gradesSortedByGradeReversedValuesMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesValuesMap = gradesSortedByGradeReversedValuesValues.toMap\n\
    \        val gradesSortedByGradeReversedValuesValuesKeys = gradesSortedByGradeReversedValuesValuesMap.keys\n\
    \        val gradesSortedByGradeReversedValuesValuesValues = gradesSortedByGradeReversedValuesValuesMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesMap = gradesSortedByGradeReversedValuesValuesValues.toMap\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesKeys = gradesSortedByGradeReversedValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValues = gradesSortedByGradeReversedValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValuesMap = gradesSortedByGradeReversedValuesValuesValuesValues.toMap\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValuesKeys = gradesSortedByGradeReversedValuesValuesValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValuesValuesValues =\
    \ gradesSortedByGradeReversedValuesValuesValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValuesValuesValuesMap\
    \ = gradesSortedByGradeReversedValuesValuesValuesValuesValuesValuesValuesMap.keys.toList\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvjqbxwh7.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvjqbxwh7.scala:42:69 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGradeReversedValuesValuesValuesValuesMap\e\
    [0m = gradesSortedByGradeReversedValuesValuesValuesValues.toMap\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedByGradeReversedValuesValuesValuesValues\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvjqbxwh7.scala:43:70\
    \ ------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByGradeReversedValuesValuesValuesValuesKeys\e[0m = gradesSortedByGradeReversedValuesValuesValuesValuesValuesMap.keys\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m Not found: gradesSortedByGradeReversedValuesValuesValuesValuesValuesMap\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvjqbxwh7.scala:45:81\
    \ ------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByGradeReversedValuesValuesValuesValuesValuesValuesMap\e[0m =\
    \ gradesSortedByGradeReversedValuesValuesValuesValuesValuesValuesValuesMap.keys.toList\n\
    \e[31m\e[31m   |\e[0m                                                         "
  stdout: ''
  timestamp: 1659805062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A+\")).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"D\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"E\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"G\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"H\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"I\")).toMap\n        val gradesMap10 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"J\")).toMap\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"K\")).toMap\n        val gradesMap12 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"L\")).toMap\n        val gradesMap13 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"M\")).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"N\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"O\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"P\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"Q\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"R\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"S\")).toMap\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpapodz4tu.scala:27:45\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e\
    [0m => (grade -> \e[31m\"A+\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpapodz4tu.scala:28:46 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"B\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m\
    \                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpapodz4tu.scala:29:46 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"C\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m\
    \                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa"
  stdout: ''
  timestamp: 1659805067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedMap\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n\
    \        val gradesSortedMapReversedKeys = gradesSortedMapReversed.keys\n    \
    \    val gradesSortedMapReversedValues = gradesSortedMapReversed.values\n    \
    \    val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcw5th1k1.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedValuesLength\e\
    [0m = gradesSortedMapReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesSortedMapReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcw5th1k1.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedValuesLength\e[0m = gradesSortedMapReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesSortedMapReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcw5th1k1.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedValuesLength\e[0m = gradesSortedMapReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesSortedMapReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcw5th1k1.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedValuesLength\e[0m = gradesSortedMapReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    ["
  stdout: ''
  timestamp: 1659805008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map { grade =>\n            val gpa = grade\
    \ / 4.0f\n            val letterGrade = if (gpa > 3.7f && gpa < 3.3f) 'A+' else\
    \ if (gpa > 3.3f && gpa < 3.0) 'A' else if (gpa > 2.7f && gpa < 2.3f) 'A-' else\
    \ if (gpa > 2.3f && gpa < 2.0f) 'B+' else if (gpa > 1.7f && gpa < 1.7f) 'B' else\
    \ if (gpa > 1.3f && gpa < 1.3f) 'B-' else if (gpa > 1.0f && gpa < 0.7f) 'C+' else\
    \ if (gpa > 0.7f && gpa < 0.0f) 'C' else if (gpa > 0.0f) 'D+' else if (gpa < 0.0f)\
    \ 'D' else 'E'\n            letterGrade\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpj52zkpjl.scala:29:60 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mletterGrade\e[0m = \e\
    [33mif\e[0m (gpa > \e[31m3.7f\e[0m && gpa < \e[31m3.3f\e[0m) \e[31m'A\e[0m+' \e\
    [33melse\e[0m \e[33mif\e[0m (gpa > \e[31m3.3f\e[0m && gpa < \e[31m3.0\e[0m) \e\
    [31m'A'\e[0m \e[33melse\e[0m \e[33mif\e[0m (gpa > \e[31m2.7f\e[0m && gpa < \e\
    [31m2.3f\e[0m) \e[31m'A\e[0m-' \e[33melse\e[0m \e[33mif\e[0m (gpa > \e[31m2.3f\e\
    [0m && gpa < \e[31m2.0f\e[0m) \e[31m'B\e[0m+' \e[33melse\e[0m \e[33mif\e[0m (gpa\
    \ > \e[31m1.7f\e[0m && gpa < \e[31m1.7f\e[0m) \e[31m'B'\e[0m \e[33melse\e[0m \e\
    [33mif\e[0m (gpa > \e[31m1.3f\e[0m && gpa < \e[31m1.3f\e[0m) \e[31m'B\e[0m-' \e\
    [33melse\e[0m \e[33mif\e[0m (gpa > \e[31m1.0f\e[0m && gpa < \e[31m0.7f\e[0m) \e\
    [31m'C\e[0m+' \e[33melse\e[0m \e[33mif\e[0m (gpa > \e[31m0.7f\e[0m && gpa < \e\
    [31m0.0f\e[0m) \e[31m'C'\e[0m \e[33melse\e[0m \e[33mif\e[0m (gpa > \e[31m0.0f\e\
    [0m) \e[31m'D\e[0m+' \e[33melse\e[0m \e[33mif\e[0m (gpa < \e[31m0.0f\e[0m) \e\
    [31m'D'\e[0m \e[33melse\e[0m \e[31m'E'\e[0m\n\e[31m\e[31m   |\e[0m           \
    \                                                 ^\e[0m\n\e[31m   |\e[0msymbol\
    \ literal 'A is no longer supported,\n\e[31m   |\e[0muse a string literal \"A\"\
    \ or an application Symbol(\"A\") instead,\n\e[31m   |\e[0mor enclose in braces\
    \ '{A} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can also\
    \ `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe idiom,\
    \ but this possibility might no longer be available in the future.\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpj52zkpjl.scala:29:65 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mletterGrade\e[0m = \e\
    [33mif\e[0m (gpa > \e[31m3.7f\e[0m && gpa < \e[31m3.3f\e[0m) \e[31m'A\e[0m+' \e\
    [33melse\e[0m \e[33mif\e[0m (gpa > \e[31m3.3f\e[0m && gpa < \e[31m3.0\e[0m) \e\
    [31m'A'\e[0m \e[33melse\e[0m \e[33mif\e[0m (gpa > \e[31m2.7f\e[0m && gpa < \e\
    [31m2.3f\e[0m) \e[31m'A\e[0m-' \e[33melse\e[0m \e[33mif\e[0m (gpa > \e[31m2.3f\e\
    [0m && gpa < \e[31m2.0f\e[0m) \e[31m'B\e[0m+' \e[33melse\e[0m \e[33mif\e[0m (gpa\
    \ > \e[31m1.7f\e[0m && gpa < \e[31m1.7f\e[0m) \e[31m'B'\e[0m \e[33melse\e[0m \e\
    [33mif\e[0m (gpa > \e[31m1.3f"
  stdout: ''
  timestamp: 1659805062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesLength = gradesKeys.size\n        val gradesSum = gradesValues.sum\n\
    \        val gradesAverage = gradesSum / gradesLength\n        val gradesMin =\
    \ gradesValues.min\n        val gradesMax = gradesValues.max\n        val gradesMedian\
    \ = gradesValues.median\n        val gradesMode = gradesValues.mode\n        val\
    \ gradesVariance = gradesValues.variance\n        val gradesStandardDeviation\
    \ = gradesValues.standardDeviation\n        val gradesStandardError = gradesValues.standardError\n\
    \        val gradesSkewness = gradesValues.skewness\n        val gradesKurtosis\
    \ = gradesValues.kurtosis\n        val gradesMedianAbsoluteDeviation = gradesValues.medianAbsoluteDeviation\n\
    \        val gradesMedianAbsoluteError = gradesValues.medianAbsoluteError\n  \
    \      val gradesMedianSquaredDeviation = gradesValues.medianSquaredDeviation\n\
    \        val gradesMedianStandardDeviation = gradesValues.medianStandardDeviation\n\
    \        val gradesMedianKurtosis = gradesValues.medianKurtosis\n        val gradesMedianRelativeDeviation\
    \ = gradesValues.medianRelativeDeviation\n        val gradesMedianRelativeError\
    \ = gradesValues.medianRelativeError\n        val gradesMedianTendency = gradesValues.medianTendency\n\
    \        val gradesMedianAbsoluteTendency = gradesValues.medianAbsoluteTendency\n\
    \        val gradesMedianSquaredTendency = gradesValues.medianSquaredTendency\n\
    \        val gradesMedianStandardTendency = gradesValues.medianStandardTendency\n\
    \        val gradesMedianKurtosisTendency = gradesValues.medianKurtosisTendency\n\
    \        val gradesMedianRelativeTendency = gradesValues.medianRelativeTendency\n\
    \        val gradesMedianRelativeTendencyError = gradesValues.medianRelativeTendencyError\n\
    \        val gradesMedianTendencyVariance = gradesValues.medianTendencyVariance\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwx_yey0b.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwx_yey0b.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805063
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => if(grade > 3.0) \"B+\" else\
    \ if (grade > 2.7) \"B\" else if (grade > 2.3) \"B-\" else if (grade > 2.0) \"\
    C+\" else if (grade > 1.7) \"C\" else if (grade > 1.3) \"C-\" else if (grade >\
    \ 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade > 0.0) \"D-\" else \"\
    E\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxp6pycdp.scala:30)\n\tat Problem.main(tmpxp6pycdp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_\
    \ % 10).sum)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n \
    \       val gradesMapSortedGrouped = gradesMapSorted.groupBy(_._2).mapValues(_.map(_._1).sum)\n\
    \        val gradesMapSortedGroupedSorted = gradesMapSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedSortedGrouped = gradesMapSortedGroupedSorted.groupBy(_._2).mapValues(_.map(_._1).sum)\n\
    \        val gradesMapSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSorted.groupBy(_._2).mapValues(_.map(_._1).sum)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._2).mapValues(_.map(_._1).sum)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._2).mapValues(_.map(_._1).sum)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGrou\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnysntmnj.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\e\
    [0m = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpnysntmnj.scala:28:40 ------------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m  value sortBy is not a member of scala.collection.MapView[Float, Float]\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnysntmnj.scala:37:82 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\e\
    [0m = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._2).mapValues(_.map(_._1).sum)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnysntmnj.scala:38:89\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\e\
    [0m = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrou"
  stdout: ''
  timestamp: 1659805064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse = gradesMap.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse2 = gradesMapReverse.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse3 = gradesMapReverse2.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse4 = gradesMapReverse3.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse5 = gradesMapReverse4.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse6 = gradesMapReverse5.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse7 = gradesMapReverse6.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse8 = gradesMapReverse7.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse9 = gradesMapReverse8.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse10 = gradesMapReverse9.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse11 = gradesMapReverse10.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse12 = gradesMapReverse11.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse13 = gradesMapReverse12.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse14 = gradesMapReverse13.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse15 = gradesMapReverse14.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse16 = gradesMapReverse15.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse17 = gradesMapReverse16.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse18 = gradesMapReverse17.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse19 = gradesMapReverse18.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse20 = gradesMapReverse19.map(x => (x._1,\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1pp74wqz.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1pp74wqz.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesMap.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedReversed\
    \ = gradesSortedByKeyReversed.reverse\n        val gradesSortedByValueReversedReversed\
    \ = gradesSortedByValueReversed.reverse\n        val gradesSortedByKeyReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_npi5wa2.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmp_npi5wa2.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_npi5wa2.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapValuesSorted = gradesMapValues.sortBy(x => x)\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSortedLength - 1\n        val gradesMapValuesSortedLength =\
    \ gradesMapValuesSortedLength - 1\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength\
    \ - 1\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength -\
    \ 1\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n \
    \       val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n  \
    \      val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n   \
    \     val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n     \
    \   val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n      \
    \  val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n       \
    \ val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSortedLength - 1\n        val gradesMapValuesSortedLength =\
    \ gradesMapValuesSortedLength - 1\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength\
    \ - 1\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength -\
    \ 1\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n \
    \       val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n  \
    \      val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n   \
    \     val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n     \
    \   val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n      \
    \  val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n       \
    \ val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n        val\
    \ gradesMapValuesSortedLength = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpuff8o0au.scala:59:41 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                         ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuff8o0au.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapValuesSortedLength\e[0m = gradesMapValuesSortedLength - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuff8o0au.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSortedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuff8o0au.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSortedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e"
  stdout: ''
  timestamp: 1659805063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.foldLeft(Map[Float,\
    \ String]()){\n            (acc, grade) =>\n                acc + (grade -> (acc.getOrElse(grade,\
    \ \"\") + s\"+\"))\n        }\n        val gradesList : List[(Float, String)]\
    \ = gradesMap.map{\n            case (grade, letter) => (grade, letter)\n    \
    \    }\n        val gradesMapList : List[(Float, String)] = gradesList.sortBy(_._1).reverse\n\
    \        val gradesMapListWithGrade : List[(Float, String)] = gradesMapList.map{\n\
    \            case (grade, letter) => (grade, letter)\n        }\n        val gradesMapListWithLetter\
    \ = gradesMapListWithGrade.map{\n            case (grade, letter) => (grade ->\
    \ letter)\n        }\n        val gradesMapListWithLetterAndGrade = gradesMapListWithLetter.map{\n\
    \            case (grade, letter) => (grade -> letter + grade)\n        }\n  \
    \      val gradesMapListWithLetterAndGradeAndGrade = gradesMapListWithLetterAndGrade.map{\n\
    \            case (grade, letter, gradeAndGrade) => (grade -> letter + grade +\
    \ gradeAndGrade)\n        }\n        val gradesMapListWithLetterAndGradeAndGradeAndGrade\
    \ = gradesMapListWithLetterAndGradeAndGrade.map{\n            case (grade, letter,\
    \ gradeAndGrade, gradeAndGradeAndGrade) => (grade -> letter + grade + gradeAndGrade\
    \ + gradeAndGradeAndGrade)\n        }\n        val gradesMapListWithLetterAndGradeAndGradeAndGradeAndGrade\
    \ = gradesMapListWithLetterAndGradeAndGradeAndGrade.map{\n            case (grade,\
    \ letter, gradeAndGrade, gradeAndGradeAndGrade, gradeAndGradeAndGradeAndGrade)\
    \ => (grade -> letter + grade + gradeAndGrade + gradeAndGradeAndGrade + gradeAndGradeAndGradeAndGrade)\n\
    \        }\n        val gradesMapListWithLetterAndGradeAndGradeAndGradeAndGradeAndGrade\
    \ = gradesMapListWithLetterAndGradeAndGradeAndGradeAndGrade.map{\n           \
    \ case (grade, letter, gradeAndGrade, gradeAndGradeAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphz7qe3e8.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphz7qe3e8.scala:66:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m66 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmphz7qe3e8.scala:31:62 --------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesList\e[0m : \e[35mList\e[0m[(\e\
    [35mFloat\e[0m, \e[35mString\e[0m)] = gradesMap.map{\n\e[31m\e[31m   |\e[0m  \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \             Found:    scala.collection.mutable.Map[Float, String]\n\e[31m  \
    \ |\e[0m                   Required: List[(Float, String)]\n\e[31m32 |\e[0m  \
    \          \e[33mcase\e[0m (grade, letter) => (grade, letter)\n\e[31m33 |\e[0m\
    \        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphz7qe3e8.scala:42:53\
    \ ------------------------\e[0m\e[0m\n\e[31m42 |\e[0m            \e[33mcase\e\
    [0m (grade, letter) => (grade -> letter + grade)\n\e[31m\e[31m   |\e[0m      \
    \                               ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue +\
    \ is not a member of (Float, String), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphz7qe3e8.scala:45:58\
    \ ------------------------\e[0m\e[0m\n\e[31m45 |\e[0m            \e[33mcase\e\
    [0m (grade, letter, gradeAndGrade) => (grade -> letter + grade + gradeAndGrade)\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value -> is"
  stdout: ''
  timestamp: 1659805065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysSorted = gradesMapSortedReversedKeys.sortBy(_._1)\n\
    \        val gradesMapSortedReversedKeysSortedReversed = gradesMapSortedReversedKeysSorted.reverse\n\
    \        val gradesMapSortedReversedKeysSortedReversedValues = gradesMapSortedReversedKeysSortedReversed.values\n\
    \        val gradesMapSortedReversedKeysSortedReversedValuesSorted = gradesMapSortedReversedKeysSortedReversedValues.sortBy(_._1)\n\
    \        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversed = gradesMapSortedReversedKeysSortedReversedValuesSorted.reverse\n\
    \        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeys\
    \ = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeys.sortBy(_._1)\n\
    \        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSorted\
    \ = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSorted.reverse\n\
    \        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValues\
    \ = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValues.sortBy(_._1)\n\
    \        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValuesSortedReversed\
    \ = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValuesSortedReversed.reverse\n\
    \        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValuesSortedReversedKeys\
    \ = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValuesSortedReversedKeys.sortBy(_._1)\n\
    \        val gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValuesSortedReversedKeysSorted\
    \ = gradesMapSortedReversedKeysSortedReversedValuesSorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptb4ewdjs.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptb4ewdjs.scala:37:80 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeys\e\
    [0m = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeys.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mgradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeys\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptb4ewdjs.scala:38:86\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSorted\e\
    [0m = gradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSorted.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mgradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptb4ewdjs.scala:39:100\
    \ --------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysSortedReversedValuesSortedReversedKeysSortedReversedValues\e\
    [0m = gradesMapSortedReversedKeysSortedReversedValuesSorted"
  stdout: ''
  timestamp: 1659805064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedMap\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n\
    \        val gradesSortedMapReversedKeys = gradesSortedMapReversed.keys\n    \
    \    val gradesSortedMapReversedValues = gradesSortedMapReversed.values\n    \
    \    val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcw5th1k1.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedValuesLength\e\
    [0m = gradesSortedMapReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesSortedMapReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcw5th1k1.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedValuesLength\e[0m = gradesSortedMapReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesSortedMapReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcw5th1k1.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedValuesLength\e[0m = gradesSortedMapReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesSortedMapReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcw5th1k1.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedValuesLength\e[0m = gradesSortedMapReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    ["
  stdout: ''
  timestamp: 1659805008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapKeysSorted = gradesMapKeys.sortBy(_ * -1)\n        val gradesMapValuesSorted\
    \ = gradesMapValues.sortBy(_ * -1)\n        val gradesMapKeysSortedWithDuplicates\
    \ = gradesMapKeys.sortBy(_ * -1)\n        val gradesMapValuesSortedWithDuplicates\
    \ = gradesMapValues.sortBy(_ * -1)\n        val gradesMapKeysSortedWithDuplicatesReversed\
    \ = gradesMapKeys.sortBy(_ * -1)\n        val gradesMapValuesSortedWithDuplicatesReversed\
    \ = gradesMapValues.sortBy(_ * -1)\n        val gradesMapKeysSortedWithDuplicatesReversedWithDuplicates\
    \ = gradesMapKeys.sortBy(_ * -1)\n        val gradesMapValuesSortedWithDuplicatesReversedWithDuplicates\
    \ = gradesMapValues.sortBy(_ * -1)\n        val gradesMapKeysSortedWithDuplicatesReversedWithDuplicatesReversed\
    \ = gradesMapKeys.sortBy(_ * -1)\n        val gradesMapValuesSortedWithDuplicatesReversedWithDuplicatesReversed\
    \ = gradesMapValues.sortBy(_ * -1)\n        val gradesMapKeysSortedWithDuplicatesReversedWithDuplicatesReversedWithDuplicates\
    \ = gradesMapKeys.sortBy(_ * -1)\n        val gradesMapValuesSortedWithDuplicatesReversedWithDuplicatesReversedWithDuplicates\
    \ = gradesMapValues.sortBy(_ * -1)\n        val gradesMapKeysSortedWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversed\
    \ = gradesMapKeys.sortBy(_ * -1)\n        val gradesMapValuesSortedWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversed\
    \ = gradesMapValues.sortBy(_ * -1)\n        val gradesMapKeysSortedWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicates\
    \ = gradesMapKeys.sortBy(_ * -1)\n        val gradesMapValuesSortedWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicates\
    \ = gradesMapValues.sortBy(_ * -1)\n        val gradesMapKeysSortedWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversedWithDuplicatesReversed\
    \ = gradesMapKeys.sortBy(_ * -1)\n        val grade\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphfycw4l0.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmphfycw4l0.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmphfycw4l0.scala:48:5 ---------------------\e[0m\e[0m\n\
    \e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = grades.sortBy(_)\n        val gradesSortedByValue = gradesSortedByKey.toList\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.toMap\n        val gradesSortedByKeyReversedMap2\
    \ = gradesSortedByKeyReversedMap.toList\n        val gradesSortedByValueReversedMap2\
    \ = gradesSortedByValueReversedMap.toList\n        val gradesSortedByKeyReversedMap3\
    \ = gradesSortedByKeyReversedMap2.toList\n        val gradesSortedByValueReversedMap3\
    \ = gradesSortedByValueReversedMap2.toList\n        val gradesSortedByKeyReversedMap4\
    \ = gradesSortedByKeyReversedMap3.toList\n        val gradesSortedByValueReversedMap4\
    \ = gradesSortedByValueReversedMap3.toList\n        val gradesSortedByKeyReversedMap5\
    \ = gradesSortedByKeyReversedMap4.toList\n        val gradesSortedByValueReversedMap5\
    \ = gradesSortedByValueReversedMap4.toList\n        val gradesSortedByKeyReversedMap6\
    \ = gradesSortedByKeyReversedMap5.toList\n        val gradesSortedByValueReversedMap6\
    \ = gradesSortedByValueReversedMap5.toList\n        val gradesSortedByKeyReversedMap7\
    \ = gradesSortedByKeyReversedMap6.toList\n        val gradesSortedByValueReversedMap7\
    \ = gradesSortedByValueReversedMap6.toList\n        val gradesSortedByKeyReversedMap8\
    \ = gradesSortedByKeyReversedMap7.toList\n        val gradesSortedByValueReversedMap8\
    \ = gradesSortedByValueReversedMap7.toList\n        val gradesSortedByKeyReversedMap9\
    \ = gradesSortedByKeyReversedMap8.toList\n        val gradesSortedByValueReversedMap9\
    \ = gradesSortedByValueReversedMap8.toList\n        val gradesSortedByKeyReversedMap10\
    \ = gradesSortedByKeyReversedMap9.toList\n        val gradesSortedByValueReversedMap10\
    \ = grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpw8muxxxo.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- Error: /tmp/tmpw8muxxxo.scala:28:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m =\
    \ grades.sortBy(_)\n\e[31m\e[31m   |\e[0m                                    \
    \            ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for Any..\n\e\
    [31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.ordered[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type scala.math.Ordering.AsComparable[Any].\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw8muxxxo.scala:51:47 ------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByValueReversedMap10\e\
    [0m = grade\n\e[31m\e[31m   |\e[0m                                           \
    \    ^^^^^\e[0m\n\e[31m   |\e[0m                                             \
    \  Not found: grade\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw8muxxxo.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedWithIndex = gradesKeys.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndex = gradesValues.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndIndex = gradesKeysSortedWithIndex.zipWithIndex.sortWith(_._2\
    \ < _._2)\n        val gradesValuesSortedWithIndexAndIndex = gradesValuesSortedWithIndex.zipWithIndex.sortWith(_._2\
    \ < _._2)\n        val gradesKeysSortedWithIndexAndIndexAndIndex = gradesKeysSortedWithIndexAndIndex.zipWithIndex.sortWith(_._3\
    \ < _._3)\n        val gradesValuesSortedWithIndexAndIndexAndIndex = gradesValuesSortedWithIndexAndIndex.zipWithIndex.sortWith(_._3\
    \ < _._3)\n        val gradesKeysSortedWithIndexAndIndexAndIndexAndIndex = gradesKeysSortedWithIndexAndIndexAndIndex.zipWithIndex.sortWith(_._4\
    \ < _._4)\n        val gradesValuesSortedWithIndexAndIndexAndIndexAndIndex = gradesValuesSortedWithIndexAndIndexAndIndex.zipWithIndex.sortWith(_._4\
    \ < _._4)\n        val gradesKeysSortedWithIndexAndIndexAndIndexAndIndexAndIndex\
    \ = gradesKeysSortedWithIndexAndIndexAndIndexAndIndex.zipWithIndex.sortWith(_._5\
    \ < _._5)\n        val gradesValuesSortedWithIndexAndIndexAndIndexAndIndexAndIndex\
    \ = gradesValuesSortedWithIndexAndIndexAndIndexAndIndex.zipWithIndex.sortWith(_._5\
    \ < _._5)\n        val gradesKeysSortedWithIndexAndIndexAndIndexAndIndexAndIndexAndIndex\
    \ = gradesKeysSortedWithIndexAndIndexAndIndexAndIndexAndIndex.zipWithIndex.sortWith(_._6\
    \ < _._6)\n        val gradesValuesSortedWithIndexAndIndexAndIndexAndIndexAndIndexAndIndex\
    \ = gradesValuesSortedWithIndexAndIndexAndIndexAndIndexAndIndex.zipWithIndex.sortWith(_._6\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp57a30ppi.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp57a30ppi.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp57a30ppi.scala:44:5 ---------------------\e[0m\e[0m\n\
    \e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_\
    \ % 10).sum)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n \
    \       val gradesMapSortedWithZero = gradesMapSorted.map(_._2).filter(_ != 0)\n\
    \        val gradesMapSortedWithZeroWithZero = gradesMapSortedWithZero.map(_ /\
    \ 10).filter(_ != 0)\n        val gradesMapSortedWithZeroWithZeroWithZero = gradesMapSortedWithZeroWithZero.map(_\
    \ % 10).filter(_ != 0)\n        val gradesMapSortedWithZeroWithZeroWithZeroWithZero\
    \ = gradesMapSortedWithZeroWithZeroWithZero.map(_ / 10).filter(_ != 0)\n     \
    \   val gradesMapSortedWithZeroWithZeroWithZeroWithZeroWithZero = gradesMapSortedWithZeroWithZeroWithZeroWithZero.map(_\
    \ % 10).filter(_ != 0)\n        val gradesMapSortedWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\
    \ = gradesMapSortedWithZeroWithZeroWithZeroWithZero.map(_ / 10).filter(_ != 0)\n\
    \        val gradesMapSortedWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\
    \ = gradesMapSortedWithZeroWithZeroWithZeroWithZero.map(_ % 10).filter(_ != 0)\n\
    \        val gradesMapSortedWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ = gradesMapSortedWithZeroWithZeroWithZeroWithZero.map(_ / 10).filter(_ != 0)\n\
    \        val gradesMapSortedWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\
    \ = gradesMapSortedWithZeroWithZeroWithZeroWithZero.map(_ % 10).filter(_ != 0)\n\
    \        val gradesMapSortedWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\
    \ = gradesMapSortedWithZeroWithZeroWithZeroWithZero.map(_ / 10).filter(_ != 0)\n\
    \        val gradesMapSortedWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ = gradesMapSortedWithZeroWithZeroWithZeroWithZero.map(_ % 10).filter(_ != 0)\n\
    \        val gradesMapSortedWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\
    \ = gradesMapSortedWithZeroWith\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdtnyv6jw.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\e\
    [0m = gradesMapSortedWithZeroWithZeroWithZeroWithZero.map(_ / \e[31m10\e[0m).filter(_\
    \ != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapSortedWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpdtnyv6jw.scala:28:40 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m  value sortBy is not a member of scala.collection.MapView[Float, Float]\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdtnyv6jw.scala:40:102 -----------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\e\
    [0m = gradesMapSortedWithZeroWith\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \            Not found: gradesMapSortedWithZeroWith\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpdtnyv6jw.scala:41:5 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659805066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.foldLeft(List[String]())((acc, grade) =>\
    \ {\n            val gpa = grade.toInt\n            val letterGrade = if (gpa\
    \ > 4.0) \"A+\" else if (gpa > 3.7) \"A\" else if (gpa > 3.3) \"A-\" else if (gpa\
    \ > 3.0) \"B+\" else if (gpa > 2.7) \"B\" else if (gpa > 2.3) \"B-\" else if (gpa\
    \ > 2.0) \"C+\" else if (gpa > 1.7) \"C\" else if (gpa > 1.3) \"C-\" else if (gpa\
    \ > 1.0) \"D+\" else if (gpa > 0.7) \"D\" else if (gpa > 0.0) \"D-\" else \"E\"\
    \n            acc :+ letterGrade\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv316m45t.scala:34)\n\tat Problem.main(tmpv316m45t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x\
    \ => x -> \"A+\".toUpperCase)\n        val gradesMap2 = grades.map(x => x -> \"\
    B\".toUpperCase)\n        val gradesMap3 = grades.map(x => x -> \"C\".toUpperCase)\n\
    \        val gradesMap4 = grades.map(x => x -> \"D\".toUpperCase)\n        val\
    \ gradesMap5 = grades.map(x => x -> \"E\".toUpperCase)\n        val gradesMap6\
    \ = grades.map(x => x -> \"F\".toUpperCase)\n        val gradesMap7 = grades.map(x\
    \ => x -> \"G\".toUpperCase)\n        val gradesMap8 = grades.map(x => x -> \"\
    H\".toUpperCase)\n        val gradesMap9 = grades.map(x => x -> \"I\".toUpperCase)\n\
    \        val gradesMap10 = grades.map(x => x -> \"J\".toUpperCase)\n        val\
    \ gradesMap11 = grades.map(x => x -> \"K\".toUpperCase)\n        val gradesMap12\
    \ = grades.map(x => x -> \"L\".toUpperCase)\n        val gradesMap13 = grades.map(x\
    \ => x -> \"M\".toUpperCase)\n        val gradesMap14 = grades.map(x => x -> \"\
    N\".toUpperCase)\n        val gradesMap15 = grades.map(x => x -> \"O\".toUpperCase)\n\
    \        val gradesMap16 = grades.map(x => x -> \"P\".toUpperCase)\n        val\
    \ gradesMap17 = grades.map(x => x -> \"Q\".toUpperCase)\n        val gradesMap18\
    \ = grades.map(x => x -> \"R\".toUpperCase)\n        val gradesMap19 = grades.map(x\
    \ => x -> \"S\".toUpperCase)\n        val gradesMap20 = grades.map(x => x -> \"\
    T\".toUpperCase)\n        val gradesMap21 = grades.map(x => x -> \"U\".toUpperCase)\n\
    \        val gradesMap22 = grades.map(x => x -> \"V\".toUpperCase)\n        val\
    \ gradesMap23 = grades.map(x => x -> \"W\".toUpperCase)\n        val gradesMap24\
    \ = grades.map(x => x -> \"X\".toUpperCase)\n        val gradesMap25 = grades.map(x\
    \ => x -> \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpscjw8gh6.scala:51:46 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mgradesMap25\e[0m = grades.map(\e\
    [36mx\e[0m => x -> \n\e[31m\e[31m   |\e[0m                                   \
    \           ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpscjw8gh6.scala:27:55 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m : \e[35mMap\e[0m[\e[35mFloat\e\
    [0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => x -> \e[31m\"A+\"\e[0m.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    List[(Float, String)]\n\
    \e[31m   |\e[0m                         Required: collection.mutable.Map[Float,\
    \ String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpscjw8gh6.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => if(grade > 3.0) \"B+\" else\
    \ if (grade > 2.7) \"B\" else if (grade > 2.3) \"B-\" else if (grade > 2.0) \"\
    C+\" else if (grade > 1.7) \"C\" else if (grade > 1.3) \"C-\" else if (grade >\
    \ 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade > 0.0) \"D-\" else \"\
    E\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxp6pycdp.scala:30)\n\tat Problem.main(tmpxp6pycdp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapValuesSorted = gradesMapValues.sortBy(_)\n        val gradesMapValuesSortedSortedReversed\
    \ = gradesMapValuesSorted.reverse\n        val gradesMapValuesSortedSortedReversedSortedReversed\
    \ = gradesMapValuesSortedSortedReversed.reverse\n        val gradesMapValuesSortedSortedReversedSortedReversedSortedReversed\
    \ = gradesMapValuesSortedSortedReversedSortedReversed.reverse\n        val gradesMapValuesSortedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gradesMapValuesSortedSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val gradesMapValuesSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gradesMapValuesSortedSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val gradesMapValuesSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gradesMapValuesSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val gradesMapValuesSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gradesMapValuesSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val gradesMapValuesSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gradesMapValuesSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val gradesMapValuesSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gradesMapValuesSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val gradesMapValuesSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = gradesMapValuesSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpojoxd1eg.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpojoxd1eg.scala:30:59 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSorted\e\
    [0m = gradesMapValues.sortBy(_)\n\e[31m\e[31m   |\e[0m                       \
    \                                    ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => gradesMapValues.sortBy(_$1).\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpojoxd1eg.scala:36:128 -----------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\e\
    [0m = gradesMapValuesSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: gradesMapValuesSortedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpojoxd1eg.scala:37:142\
    \ -----------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapValuesSortedReversedSortedReversedSortedReversedSorte"
  stdout: ''
  timestamp: 1659805071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.foldLeft(Map[Float,\
    \ String]()){\n            (gradesMap, grade) => gradesMap + (grade -> (grade\
    \ match {\n                case g if g < 4.0f => \"A+\"\n                case\
    \ g if g > 3.7f => \"A\"\n                case g if g > 3.3f => \"A-\"\n     \
    \           case g if g > 3.0f => \"B+\"\n                case g if g > 2.7f =>\
    \ \"B\"\n                case g if g > 2.3f => \"B-\"\n                case g\
    \ if g > 2.0f => \"C+\"\n                case g if g > 1.7f => \"C\"\n       \
    \         case g if g > 1.3f => \"C-\"\n                case g if g > 1.0f =>\
    \ \"D+\"\n                case g if g > 0.7f => \"D\"\n                case g\
    \ if g > 0.0f => \"D-\"\n                case _ => \"E\"\n            }))\n  \
    \      }\n        grades.map(grade => gradesMap(grade))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_zfrjfkq.scala:47)\n\tat Problem.main(tmp_zfrjfkq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesArrayLength = gradesArray.length\n     \
    \   val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2lnr7ih_.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2lnr7ih_.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2lnr7ih_.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2lnr7ih_.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2lnr7ih_.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedMap = gradesMap.sortBy(_._1).reverse\n        val gradesSortedMapReversed\
    \ = gradesSortedMap.map(x => x._2)\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n        val gradesSortedMapReversedLength\
    \ = gradesSortedMapReversed.length\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw0hqzahr.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedLength\e\
    [0m = gradesSortedMapReversed.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSortedMapReversedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw0hqzahr.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedLength\e\
    [0m = gradesSortedMapReversed.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSortedMapReversedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw0hqzahr.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedLength\e\
    [0m = gradesSortedMapReversed.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSortedMapReversedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw0hqzahr.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedLength\e\
    [0m = gradesSortedMapReversed.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSortedMapReversedLength\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659805074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.toMap\n        val gradesSortedByKeyReversedMapReversed\
    \ = gradesSortedByKeyReversedMap.reverse\n        val gradesSortedByValueReversedMapReversed\
    \ = gradesSortedByValueReversedMap.reverse\n        val gradesSortedByKeyReversedMapReversedMap\
    \ = gradesSortedByKeyReversedMapReversed.toMap\n        val gradesSortedByValueReversedMapReversedMap\
    \ = gradesSortedByValueReversedMapReversed.toMap\n        val gradesSortedByKeyReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMap.reverse\n        val gradesSortedByValueReversedMapReversedMapReversed\
    \ = gradesSortedByValueReversedMapReversedMap.reverse\n        val gradesSortedByKeyReversedMapReversedMapReversedMap\
    \ = gradesSortedByKeyReversedMapReversedMapReversed.toMap\n        val gradesSortedByValueReversedMapReversedMapReversedMap\
    \ = gradesSortedByValueReversedMapReversedMapReversed.toMap\n        val gradesSortedByKeyReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMapReversedMapReversed.reverse\n     \
    \   val gradesSortedByValueReversedMapReversedMapReversedMapReversed = gradesSortedByValueReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByValueReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByValueReversedMapReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppq9vih0b.scala:46:94 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversedMapReversed\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmppq9vih0b.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppq9vih0b.scala:42:73 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedMapReversedMapReversedMapReversed\e\
    [0m = gradesSortedByKeyReversedMapReversedMapReversedMapReversed.reverse\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedByKeyReversedMapReversedMapReversedMapReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppq9vih0b.scala:43:75\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByValueReversedMapReversedMapReversedMapReversed\e[0m = gradesSortedByValueReversedMapReversedMapReversedMapReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e["
  stdout: ''
  timestamp: 1659805019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysSize = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesSize = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysSum = gradesMapSortedReversedKeys.sum\n\
    \        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedKeysSumOfSquares = gradesMapSortedReversedKeysSum\
    \ * gradesMapSortedReversedKeysSum\n        val gradesMapSortedReversedValuesSumOfSquares\
    \ = gradesMapSortedReversedValuesSum * gradesMapSortedReversedValuesSum\n    \
    \    val gradesMapSortedReversedKeysSumOfSquaresOfSquares = gradesMapSortedReversedKeysSumOfSquares\
    \ * gradesMapSortedReversedKeysSumOfSquares\n        val gradesMapSortedReversedValuesSumOfSquaresOfSquares\
    \ = gradesMapSortedReversedValuesSumOfSquares * gradesMapSortedReversedValuesSumOfSquares\n\
    \        val gradesMapSortedReversedKeysSumOfSquaresOfSquaresOfSquares = gradesMapSortedReversedKeysSumOfSquaresOfSquares\
    \ * gradesMapSortedReversedKeysSumOfSquaresOfSquares\n        val gradesMapSortedReversedValuesSumOfSquaresOfSquaresOfSquares\
    \ = gradesMapSortedReversedValuesSumOfSquaresOfSquares * gradesMapSortedReversedValuesSumOfSquaresOfSquares\n\
    \        val gradesMapSortedReversedKeysSumOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesMapSortedReversedKeysSumOfSquaresOfSquaresOfSquares * gradesMapSortedReversedKeysSumOfSquaresOfSquaresOfSquares\n\
    \        val gradesMapSortedReversedValuesSumOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesMapSortedReversedValuesSumOfSquaresOfSquares * gradesMapSortedReversedValuesSumOfSquaresOfSqu\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0nt8uu28.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0nt8uu28.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap2 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap3\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap4 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap5 = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap6 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap7\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap8 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap9 = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap10 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap11\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap12 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap13 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap14 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap15 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap16\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap17 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap18 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap19 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap20 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap21\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap22 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap23 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap24 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap25 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap26\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0liq0p_u.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0liq0p_u.scala:54:5 ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(x => x)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp86eo1nwv.scala:61:38 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e\
    [31m   |\e[0m                                      expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp86eo1nwv.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesKeysSortedLength\e[0m = gradesKeysSorted.length\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp86eo1nwv.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp86eo1nwv.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp86eo1nwv.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0"
  stdout: ''
  timestamp: 1659805075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSorted = grades.sortWith((x,y) => x.toInt < y.toInt)\n    \
    \    val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n       \
    \ val gradesSortedMapWithKey = gradesSorted.map(x => (x.toInt, x)).toMap\n   \
    \     val gradesSortedMapWithKeyAndValue = gradesSorted.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedMapWithKeyAndValueAndKey = gradesSorted.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedMapWithKeyAndValueAndKeyAndValue = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapWithKeyAndValueAndKeyAndValueAndKey\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapWithKeyAndValueAndKeyAndValueAndKeyAndValue\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapWithKeyAndValueAndKeyAndValueAndKeyAndValueAndKey\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapWithKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValue\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapWithKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKey\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapWithKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValue\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapWithKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKey\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapWithKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndValue\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapWithKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValue\
    \ = gradesSorted.map(x \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps5885v20.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps5885v20.scala:42:146\
    \ -----------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapWithKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValue\e\
    [0m = gradesSorted.map(x \n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                                                Not found: x\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps5885v20.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByValue = grades.sortBy(x => x)\n        val gradesSortedByKey\
    \ = gradesSortedByValue.sortWith((x, y) => x < y)\n        val gradesSortedByKeyReversed\
    \ = gradesSortedByKey.reverse\n        val gradesSortedByKeyReversedMap = gradesSortedByKeyReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversed = gradesSortedByKeyReversedMap.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversedValues\
    \ = gradesSortedByKeyReversedMapReversed.values\n        val gradesSortedByKeyReversedMapReversedValuesSortedByValue\
    \ = gradesSortedByKeyReversedMapReversedValues.sortBy(x => x)\n        val gradesSortedByKeyReversedMapReversedValuesSortedByKey\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByValue.sortWith((x, y) =>\
    \ x < y)\n        val gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversed\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByKey.reverse\n        val\
    \ gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMap = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValues\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValues.sortBy(x\
    \ => x)\n        val gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValuesSortedByValue\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValuesSortedByKey.sortBy(x\
    \ => x)\n        val gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValuesSortedByKeyReversed\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValues\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2jp4x4cw.scala:31:81 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedMap\e\
    [0m = gradesSortedByKeyReversed.map(\e[36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \    value _1 is not a member of Float\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2jp4x4cw.scala:31:87 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedMap\e[0m = gradesSortedByKeyReversed.map(\e\
    [36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m                     \
    \                                                                ^^^^\e[0m\n\e\
    [31m   |\e[0m                                       value _2 is not a member of\
    \ Float\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2jp4x4cw.scala:34:113\
    \ -----------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByKeyReversedMapReversedValuesSortedByValue\e[0m = gradesSortedByKeyReversedMapReversedValues.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value sortBy is not a member of Iterable[Nothing]\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2jp4x4cw.scala:38:87 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversed\e\
    [0m = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversed.map(\e\
    [36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m                     \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Erro"
  stdout: ''
  timestamp: 1659805076
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.foldLeft(Map[Float,\
    \ String]()){\n            case (acc, grade) =>\n                val key = grade.toFloat\n\
    \                val value = if (key > 4.0) \"A+\" else if (key > 3.7) \"A\" else\
    \ if (key > 3.3) \"A-\" else if (key > 3.0) \"B+\" else if (key > 2.7) \"B\" else\
    \ if (key > 2.3) \"B-\" else if (key > 2.0) \"C+\" else if (key > 1.7) \"C\" else\
    \ if (key > 1.3) \"C-\" else if (key > 1.0) \"D+\" else if (key > 0.7) \"D\" else\
    \ if (key > 0.0) \"D-\" else \"E\"\n                acc + (key -> value)\n   \
    \     }\n        val gradesList : List[String] = gradesMap.values.toList\n   \
    \     gradesList\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbei68vhb.scala:37)\n\tat Problem.main(tmpbei68vhb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.toMap\n        val gradesSortedByKeyReversedMapReversed\
    \ = gradesSortedByKeyReversedMap.reverse\n        val gradesSortedByValueReversedMapReversed\
    \ = gradesSortedByValueReversedMap.reverse\n        val gradesSortedByKeyReversedMapReversedMap\
    \ = gradesSortedByKeyReversedMapReversed.toMap\n        val gradesSortedByValueReversedMapReversedMap\
    \ = gradesSortedByValueReversedMapReversed.toMap\n        val gradesSortedByKeyReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMap.reverse\n        val gradesSortedByValueReversedMapReversedMapReversed\
    \ = gradesSortedByValueReversedMapReversedMap.reverse\n        val gradesSortedByKeyReversedMapReversedMapReversedMap\
    \ = gradesSortedByKeyReversedMapReversedMapReversed.toMap\n        val gradesSortedByValueReversedMapReversedMapReversedMap\
    \ = gradesSortedByValueReversedMapReversedMapReversed.toMap\n        val gradesSortedByKeyReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMapReversedMapReversed.reverse\n     \
    \   val gradesSortedByValueReversedMapReversedMapReversedMapReversed = gradesSortedByValueReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversedMap = gradesSortedByKeyReversedMapReversedMapReversedMapReversed.toMap\n\
    \        val gradesSortedByValueReversedMapReversedMapReversedMapReversedMap =\
    \ gradesSortedByValueReversedMapReversedMapReversedMapReversed.toMap\n       \
    \ val gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed =\
    \ gradesSortedByKeyReversedMapReversedMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4pr7vgva.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4pr7vgva.scala:42:73 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedMapReversedMapReversedMapReversed\e\
    [0m = gradesSortedByKeyReversedMapReversedMapReversedMapReversed.reverse\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedByKeyReversedMapReversedMapReversedMapReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4pr7vgva.scala:43:75\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByValueReversedMapReversedMapReversedMapReversed\e[0m = gradesSortedByValueReversedMapReversedMapReversedMapReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedByValueReversedMapReversedMapReversedMapReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4pr7vgva.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSorted\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa6vonc2e.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesL"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n\
    \        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n\
    \        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesSum = gradesSortedByGPAReversedValues.sum\n\
    \        val gradesSortedByGPAReversedValuesSum2 = gradesSortedByGPAReversedValuesSum\
    \ * gradesSortedByGPAReversedValuesSum\n        val gradesSortedByGPAReversedValuesSum3\
    \ = gradesSortedByGPAReversedValuesSum2 * gradesSortedByGPAReversedValuesSum\n\
    \        val gradesSortedByGPAReversedValuesSum4 = gradesSortedByGPAReversedValuesSum3\
    \ * gradesSortedByGPAReversedValuesSum\n        val gradesSortedByGPAReversedValuesSum5\
    \ = gradesSortedByGPAReversedValuesSum4 * gradesSortedByGPAReversedValuesSum\n\
    \        val gradesSortedByGPAReversedValuesSum6 = gradesSortedByGPAReversedValuesSum5\
    \ * gradesSortedByGPAReversedValuesSum\n        val gradesSortedByGPAReversedValuesSum7\
    \ = gradesSortedByGPAReversedValuesSum6 * gradesSortedByGPAReversedValuesSum\n\
    \        val gradesSortedByGPAReversedValuesSum8 = gradesSortedByGPAReversedValuesSum7\
    \ * gradesSortedByGPAReversedValuesSum\n        val gradesSortedByGPAReversedValuesSum9\
    \ = gradesSortedByGPAReversedValuesSum8 * gradesSortedByGPAReversedValuesSum\n\
    \        val gradesSortedByGPAReversedValuesSum10 = gradesSortedByGPAReversedValuesSum9\
    \ * gradesSortedByGPAReversedValuesSum\n        val gradesSortedByGPAReversedValuesSum11\
    \ = gradesSortedByGPAReversedValuesSum10 * gradesSortedByGPAReversedValuesSum\n\
    \        val gradesSortedByGPAReversedValuesSum12 = gradesSortedByGP\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp67eg_h41.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp67eg_h41.scala:44:51 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGPAReversedValuesSum12\e\
    [0m = gradesSortedByGP\n\e[31m\e[31m   |\e[0m                                \
    \                   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                          Not found: gradesSortedByGP\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp67eg_h41.scala:45:5 ---------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2\
    \ > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n   \
    \     val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2\
    \ > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n   \
    \     val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n \
    \       val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val\
    \ gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15\
    \ = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2\
    \ > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n \
    \       val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val\
    \ gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20\
    \ = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2\
    \ > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n \
    \       val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted26 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfh0qih3a.scala:53:31 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted26\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfh0qih3a.scala:28:40\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                   value sortBy is not a member of Map[Int, Float]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpfh0qih3a.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.toIterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.to\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi8fug3i0.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi8fug3i0.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMap is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi8fug3i0.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi8fug3i0.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMap is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi8fug3i0.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded met"
  stdout: ''
  timestamp: 1659805077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x\
    \ => x -> \"D-\").toMap\n        val gradesMap2 = grades.map(x => x -> \"D+\"\
    ).toMap\n        val gradesMap3 = grades.map(x => x -> \"D\").toMap\n        val\
    \ gradesMap4 = grades.map(x => x -> \"C\").toMap\n        val gradesMap5 = grades.map(x\
    \ => x -> \"B\").toMap\n        val gradesMap6 = grades.map(x => x -> \"B+\").toMap\n\
    \        val gradesMap7 = grades.map(x => x -> \"B-\").toMap\n        val gradesMap8\
    \ = grades.map(x => x -> \"A-\").toMap\n        val gradesMap9 = grades.map(x\
    \ => x -> \"A+\").toMap\n        val gradesMap10 = grades.map(x => x -> \"A\"\
    ).toMap\n        val gradesMap11 = grades.map(x => x -> \"C+\").toMap\n      \
    \  val gradesMap12 = grades.map(x => x -> \"C\").toMap\n        val gradesMap13\
    \ = grades.map(x => x -> \"B-\").toMap\n        val gradesMap14 = grades.map(x\
    \ => x -> \"B+\").toMap\n        val gradesMap15 = grades.map(x => x -> \"B\"\
    ).toMap\n        val gradesMap16 = grades.map(x => x -> \"A-\").toMap\n      \
    \  val gradesMap17 = grades.map(x => x -> \"A+\").toMap\n        val gradesMap18\
    \ = grades.map(x => x -> \"A\").toMap\n        val gradesMap19 = grades.map(x\
    \ => x -> \"D+\").toMap\n        val gradesMap20 = grades.map(x => x -> \"D\"\
    ).toMap\n        val gradesMap21 = grades.map(x => x -> \"C-\").toMap\n      \
    \  val gradesMap22 = grades.map(x => x -> \"C\").toMap\n        val gradesMap23\
    \ = grades.map(x => x -> \"A-\").toMap\n        val gradesMap24 = grades.map(x\
    \ => x -> \"A+\").toMap\n        val gradesMap25 = grades.map(x => x -> \"A\"\
    ).toMap\n        val gradesMap26 = grades.map(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjmiqylfc.scala:52:37 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mgradesMap26\e[0m = grades.map(\n\
    \e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e\
    [0m                                     expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjmiqylfc.scala:27:45\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e\
    [0m => x -> \e[31m\"D-\"\e[0m).toMap\n\e[31m\e[31m   |\e[0m                  \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m    \
    \                     Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjmiqylfc.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMapReversed = gradesMap.mapValues(_.swap)\n        val gradesMapReversedReversed\
    \ = gradesMapReversed.mapValues(_.swap)\n        val gradesMapReversedReversedReversed\
    \ = gradesMapReversedReversed.mapValues(_.swap)\n        val gradesMapReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversed.mapValues(_.swap)\n        val gradesMapReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversed.mapValues(_.swap)\n        val gradesMapReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversed.mapValues(_.swap)\n    \
    \    val gradesMapReversedReversedReversedReversedReversedReversedReversed = gradesMapReversedReversedReversedReversedReversedReversedReversed.mapValues(_.swap)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversed.mapValues(_.swap)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed.mapValues(_.swap)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.mapValues(_.swap)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.mapValues(_.swap)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.mapValues(_.swap)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2y7e5ynt.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2y7e5ynt.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.mapValues(_.swap)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp2y7e5ynt.scala:27:59 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toString.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                                                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp2y7e5ynt.scala:28:54 ----------------------"
  stdout: ''
  timestamp: 1659805080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByGrade = grades.sortBy(x => x)\n        val gradesSortedByGradeReversed\
    \ = gradesSortedByGrade.reverse\n        val gradesSortedByGradeReversedMap =\
    \ gradesSortedByGradeReversed.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversedSortedByGrade\
    \ = gradesSortedByGradeReversed.sortBy(x => x)\n        val gradesSortedByGradeReversedSortedByGradeReversed\
    \ = gradesSortedByGradeReversedSortedByGrade.reverse\n        val gradesSortedByGradeReversedSortedByGradeReversedMap\
    \ = gradesSortedByGradeReversedSortedByGradeReversed.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByGradeReversedSortedByGradeReversedSortedByGrade = gradesSortedByGradeReversedSortedByGradeReversed.sortBy(x\
    \ => x)\n        val gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversed\
    \ = gradesSortedByGradeReversedSortedByGradeReversedSortedByGrade.reverse\n  \
    \      val gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedMap\
    \ = gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGrade\
    \ = gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversed.sortBy(x\
    \ => x)\n        val gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGradeReversed\
    \ = gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGrade.reverse\n\
    \        val gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedMap\
    \ = gradesSortedByGradeReversedSortedByGradeReversedSortedByGradeReversedSortedByGradeReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversedSortedByGradeReversedSortedBy\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8sn8npo3.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8sn8npo3.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar)\n\
    \        val gradesMapReverse = gradesMap.mapValues(_.toString.reverse)\n    \
    \    val gradesMapReverse2 = gradesMapReverse.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse3 = gradesMapReverse2.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse4 = gradesMapReverse3.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse5 = gradesMapReverse4.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse6 = gradesMapReverse5.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse7 = gradesMapReverse6.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse8 = gradesMapReverse7.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse9 = gradesMapReverse8.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse10 = gradesMapReverse9.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse11 = gradesMapReverse10.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse12 = gradesMapReverse11.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse13 = gradesMapReverse12.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse14 = gradesMapReverse13.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse15 = gradesMapReverse14.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse16 = gradesMapReverse15.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse17 = gradesMapReverse16.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse18 = gradesMapReverse17.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse19 = gradesMapReverse18.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse20 = gradesMapReverse19.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse21 = gradesMapReverse20.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse22 = gradesMapReverse21.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse23 = gradesMapReverse22.mapValues(_.toString.reverse)\n\
    \        val gradesMapReverse24 = gradesMapReverse23.mapValues(_.to\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk0revuwe.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk0revuwe.scala:27:59\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap\e[0m = grades.groupBy(_ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpk0revuwe.scala:27:78 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toChar)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toChar is not a member of Nothing, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk0revuwe.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     F"
  stdout: ''
  timestamp: 1659805080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x\
    \ => (x.toFloat, x.toString.toUpperCase)).toMap\n        val gradesList : List[String]\
    \ = grades.map(x => gradesMap.get(x))\n        gradesList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp371282mz.scala:27:45\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e\
    [0m => (x.toFloat, x.toString.toUpperCase)).toMap\n\e[31m\e[31m   |\e[0m     \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp371282mz.scala:28:69 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesList\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m] = grades.map(\e[36mx\e[0m => gradesMap.get(x))\n\e[31m\e\
    [31m   |\e[0m                                                        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Found:   \
    \ \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e\
    [0m                                                Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toInt).zipWithIndex.toMap\n\
    \        val gradesArray = grades.toArray\n        val gradesArrayLength = gradesArray.length\n\
    \        val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = grades\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp83an9sju.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp83an9sju.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp83an9sju.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp83an9sju.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp83an9sju.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length"
  stdout: ''
  timestamp: 1659805079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedSortedByKey = gradesMapSorted.sortBy(_._2)\n\
    \        val gradesMapSortedSortedByKeyReversed = gradesMapSortedSortedByKey.reverse\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversed.sortBy(_._1)\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKey.reverse\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n     \
    \   val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx3itp4os.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpx3itp4os.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpx3itp4os.scala:41:5 ---------------------\e[0m\e[0m\n\
    \e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat)\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n      \
    \  val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesSorted\
    \ = gradesMapSortedReversedValues.sortBy(_._1)\n        val gradesMapSortedReversedValuesSortedKeys\
    \ = gradesMapSortedReversedValuesSorted.keys\n        val gradesMapSortedReversedValuesSortedValues\
    \ = gradesMapSortedReversedValuesSorted.values\n        val gradesMapSortedReversedValuesSortedValuesSorted\
    \ = gradesMapSortedReversedValuesSortedValues.sortBy(_._1)\n        val gradesMapSortedReversedValuesSortedValuesSortedKeys\
    \ = gradesMapSortedReversedValuesSortedValuesSorted.keys\n        val gradesMapSortedReversedValuesSortedValuesSortedValues\
    \ = gradesMapSortedReversedValuesSortedValuesSorted.values\n        val gradesMapSortedReversedValuesSortedValuesSortedValuesSorted\
    \ = gradesMapSortedReversedValuesSortedValuesSortedValues.sortBy(_._1)\n     \
    \   val gradesMapSortedReversedValuesSortedValuesSortedValuesSortedKeys = gradesMapSortedReversedValuesSortedValuesSortedValuesSorted.keys\n\
    \        val gradesMapSortedReversedValuesSortedValuesSortedValuesSortedValues\
    \ = gradesMapSortedReversedValuesSortedValuesSortedValuesSorted.values\n     \
    \   val gradesMapSortedReversedValuesSortedValuesSortedValuesSortedValuesSorted\
    \ = gradesMapSortedReversedValuesSortedValuesSortedValuesSortedValues.sortBy(_._1)\n\
    \        val gradesMapSortedReversedValuesSortedValuesSortedValuesSortedValuesSortedKeys\
    \ = gradesMapSortedReversedValuesSortedValuesSortedValuesSortedValuesSorted.keys\n\
    \        val gradesMapSortedReversedValuesSortedValuesSortedValuesSortedValuesSortedValues\
    \ = gradesMapSortedReversedValuesSortedValuesSortedValuesSortedValuesSorted.values\n\
    \        val gradesMapSortedReversedValuesSortedValuesSortedValuesSortedValuesSortedValuesSorted\
    \ = gradesMapSortedReversedValuesSortedValuesSortedValuesSortedValuesSortedValues.sortBy(_._1)\n\
    \        val gradesMapSortedReversedValuesSortedValuesSortedValuesSortedValuesSortedValuesSorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp99xo977v.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp99xo977v.scala:27:65\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap\e[0m = grades.groupBy(\e[36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e\
    [36mx\e[0m => x.toFloat)\n\e[31m\e[31m   |\e[0m                              \
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is\
    \ not a member of List[Float], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp99xo977v.scala:27:89 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e[36mx\e[0m => x.toFloat)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toFloat is\
    \ not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import math.BigDecimal.javaBigDecimal2bigDecimal\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp99xo977v.scala:28:40 ------------------------\e\
    [0m\e[0m\n\e[31m2"
  stdout: ''
  timestamp: 1659805081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(_ * -1)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(_ * -1)\n        val gradesKeysSortedWithDuplicates =\
    \ gradesKeysSorted.distinct\n        val gradesValuesSortedWithDuplicates = gradesValuesSorted.distinct\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicates.size\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicates.size\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicatesLength = gradesKeysSortedWithDuplicatesLength\n\
    \        val gradesValuesSortedWithDuplicatesLength = gradesValuesSortedWithDuplicatesLength\n\
    \        val gradesKeysSortedWithDuplicatesLength = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf3_rv_uv.scala:54:50 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedWithDuplicatesLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \  ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf3_rv_uv.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedWithDuplicatesLength\e[0m\
    \ = gradesKeysSortedWithDuplicatesLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedWithDuplicatesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesKeysSortedWithDuplicatesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf3_rv_uv.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesValuesSortedWithDuplicatesLength\e[0m = gradesValuesSortedWithDuplicatesLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedWithDuplicatesLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesValuesSortedWithDuplicatesLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf3_rv_uv.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedWithDuplicatesLength\e[0m\
    \ = gradesKeysSortedWithDuplicatesLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedWithDuplicatesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesKeysSortedWit"
  stdout: ''
  timestamp: 1659805080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_\
    \ % 10).sum)\n        val gradesMapReversed = gradesMap.reverse\n        val gradesMapReversedKeys\
    \ = gradesMapReversed.keys\n        val gradesMapReversedValues = gradesMapReversed.values\n\
    \        val gradesMapReversedKeysSorted = gradesMapReversedKeys.sorted\n    \
    \    val gradesMapReversedValuesSorted = gradesMapReversedValues.sorted\n    \
    \    val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmst5aiin.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmst5aiin.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedKeysSortedLength\e[0m = gradesMapReversedKeysSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmst5aiin.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesSortedLength\e[0m = gradesMapReversedValuesSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesSortedLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapReversedValuesSortedLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmst5aiin.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedKeysSortedLength\e[0m = gradesMapReversedKeysSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmst5aiin.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedV"
  stdout: ''
  timestamp: 1659805081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesMap.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.toMap\n        val gradesSortedByKeyReversedMapKeys\
    \ = gradesSortedByKeyReversedMap.keys\n        val gradesSortedByValueReversedMapValues\
    \ = gradesSortedByValueReversedMap.values\n        val gradesSortedByKeyReversedMapValuesSortedByKey\
    \ = gradesSortedByValueReversedMapValues.sortBy(_._1)\n        val gradesSortedByValueReversedMapValuesSortedByValue\
    \ = gradesSortedByValueReversedMapValues.sortBy(_._2)\n        val gradesSortedByKeyReversedMapValuesSortedByKeyReversed\
    \ = gradesSortedByValueReversedMapValuesSortedByKey.reverse\n        val gradesSortedByValueReversedMapValuesSortedByValueReversed\
    \ = gradesSortedByValueReversedMapValuesSortedByValue.reverse\n        val gradesSortedByKeyReversedMapValuesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversedMapValuesSortedByKeyReversed.toMap\n        val gradesSortedByValueReversedMapValuesSortedByValueReversedMap\
    \ = gradesSortedByValueReversedMapValuesSortedByValueReversed.toMap\n        val\
    \ gradesSortedByKeyReversedMapValuesSortedByKeyReversedMapKeys = gradesSortedByKeyReversedMapValuesSortedByKeyReversedMap.keys\n\
    \        val gradesSortedByValueReversedMapValuesSortedByValueReversedMapValues\
    \ = gradesSortedByValueReversedMapValuesSortedByValueReversed.toList\n       \
    \ val gradesSortedByKeyReversedMapValuesSortedByKeyReversedMapValuesSortedByKey\
    \ = gradesSortedByValueReversedMapValuesSortedByKeyReversedMapValues.sortBy(_._1)\n\
    \        val gradesSortedByValueReversedMapValuesSortedByKeyReversedMapValuesSortedByValue\
    \ = gradesSortedByValueReversedMapValuesSortedByKeyReversedMapValues.sortBy(_._2)\n\
    \        val gradesSortedBy\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6jcdvfzz.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp6jcdvfzz.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp6jcdvfzz.scala:38:68 ------------------------\e[0m\e[0m\n\
    \e[31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedMapValuesSortedByKeyReversed\e\
    [0m = gradesSortedByValueReversedMapValuesSortedByKey.reverse\n\e[31m\e[31m  \
    \ |\e[0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              Not found: gradesSortedByValueReversedMapValuesSortedByKey\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6jcdvfzz.scala:44:88\
    \ ------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByKeyReversedMapValuesSortedByKeyReversedMapValuesSortedByKey\e\
    [0m = gradesSortedByValueReversedMapValuesSortedByKeyReversedMapValues.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: gradesSortedByValueReversedMapValuesSortedByKeyReversedMapValues\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6jcdvfzz.scala:45:92\
    \ ------------------------\e[0m\e[0m\n\e[31m45 "
  stdout: ''
  timestamp: 1659805084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2\
    \ > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n   \
    \     val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2\
    \ > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n   \
    \     val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n \
    \       val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val\
    \ gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15\
    \ = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2\
    \ > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n \
    \       val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val\
    \ gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20\
    \ = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2\
    \ > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n \
    \       val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted26 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfh0qih3a.scala:53:31 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted26\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfh0qih3a.scala:28:40\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                   value sortBy is not a member of Map[Int, Float]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpfh0qih3a.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyAndValue = gradesSortedByKey.sortBy(_._1).sortBy(_._2)\n\
    \        val gradesSortedByKeyAndValueReversed = gradesSortedByKeyAndValue.sortBy(_._2).sortBy(_._1)\n\
    \        val gradesSortedByKeyAndValueReversedAndReversed = gradesSortedByKeyAndValue.reverse.sortBy(_._1).sortBy(_._2)\n\
    \        val gradesSortedByKeyAndValueReversedAndReversedAndReversed = gradesSortedByKeyAndValueReversed.reverse.sortBy(_._2).sortBy(_._1)\n\
    \        val gradesSortedByKeyAndValueReversedAndReversedAndReversedAndReversed\
    \ = gradesSortedByKeyAndValueReversedAndReversed.reverse.sortBy(_._2).sortBy(_._1)\n\
    \        val gradesSortedByKeyAndValueReversedAndReversedAndReversedAndReversedAndReversed\
    \ = gradesSortedByKeyAndValueReversedAndReversedAndReversed.reverse.sortBy(_._2).sortBy(_._1)\n\
    \        val gradesSortedByKeyAndValueReversedAndReversedAndReversedAndReversedAndReversedAndReversed\
    \ = gradesSortedByKeyAndValueReversedAndReversedAndReversedAndReversed.reverse.sortBy(_._2).sortBy(_._1)\n\
    \        val gradesSortedByKeyAndValueReversedAndReversedAndReversedAndReversedAndReversedAndReversedAndReversed\
    \ = gradesSortedByKeyAndValueReversedAndReversedAndReversedAndReversedAndReversed.reverse.sortBy(_._2).sortBy(_._1)\n\
    \        val gradesSortedByKeyAndValueReversedAndReversedAndReversedAndReversedAndReversedAndReversedAndReversedAndReversed\
    \ = gradesSortedByKeyAndValueReversedAndReversedAndReversedAndReversedAndReversedAndReversedAndReversed.reverse.sortBy(_._2).sortBy(_._1)\n\
    \        val gradesSortedByKeyAndValueReversedAndReversedAndReversedAndReversedAndReversedAndReversedAndReversedAndReversedAndReversed\
    \ = gradesSortedByKeyAndValueReversedAndReversedAndReversedAndReversed\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3ij6xq7b.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ij6xq7b.scala:40:5\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toList.sortBy(_.toFloat)).toMap\n\
    \        val gradesMapReverse = gradesMap.map(x => (x._2, x._1))\n        val\
    \ gradesMapReverse2 = gradesMapReverse.map(x => (x._1, x._2))\n        val gradesMapReverse3\
    \ = gradesMapReverse2.map(x => (x._1, x._2))\n        val gradesMapReverse4 =\
    \ gradesMapReverse3.map(x => (x._1, x._2))\n        val gradesMapReverse5 = gradesMapReverse4.map(x\
    \ => (x._1, x._2))\n        val gradesMapReverse6 = gradesMapReverse5.map(x =>\
    \ (x._1, x._2))\n        val gradesMapReverse7 = gradesMapReverse6.map(x => (x._1,\
    \ x._2))\n        val gradesMapReverse8 = gradesMapReverse7.map(x => (x._1, x._2))\n\
    \        val gradesMapReverse9 = gradesMapReverse8.map(x => (x._1, x._2))\n  \
    \      val gradesMapReverse10 = gradesMapReverse9.map(x => (x._1, x._2))\n   \
    \     val gradesMapReverse11 = gradesMapReverse10.map(x => (x._1, x._2))\n   \
    \     val gradesMapReverse12 = gradesMapReverse11.map(x => (x._1, x._2))\n   \
    \     val gradesMapReverse13 = gradesMapReverse12.map(x => (x._1, x._2))\n   \
    \     val gradesMapReverse14 = gradesMapReverse13.map(x => (x._1, x._2))\n   \
    \     val gradesMapReverse15 = gradesMapReverse14.map(x => (x._1, x._2))\n   \
    \     val gradesMapReverse16 = gradesMapReverse15.map(x => (x._1, x._2))\n   \
    \     val gradesMapReverse17 = gradesMapReverse16.map(x => (x._1, x._2))\n   \
    \     val gradesMapReverse18 = gradesMapReverse17.map(x => (x._1, x._2))\n   \
    \     val gradesMapReverse19 = gradesMapReverse18.map(x => (x._1, x._2))\n   \
    \     val gradesMapReverse20 = gradesMapReverse19.map(x => (x._1, x._2))\n   \
    \     val gradesMapReverse21 = gradesMapReverse20.map(x => (x._1, x._2))\n   \
    \     val gradesMapReverse22 = gradesMapReverse21.map(\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwrtj25ih.scala:49:56 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverse22\e[0m\
    \ = gradesMapReverse21.map(\n\e[31m\e[31m   |\e[0m                           \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrtj25ih.scala:50:5 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x\
    \ => x -> \"A+\".toUpperCase)\n        val gradesMap2 = grades.map(x => x -> \"\
    B\".toUpperCase)\n        val gradesMap3 = grades.map(x => x -> \"C\".toUpperCase)\n\
    \        val gradesMap4 = grades.map(x => x -> \"D\".toUpperCase)\n        val\
    \ gradesMap5 = grades.map(x => x -> \"E\".toUpperCase)\n        val gradesMap6\
    \ = grades.map(x => x -> \"F\".toUpperCase)\n        val gradesMap7 = grades.map(x\
    \ => x -> \"G\".toUpperCase)\n        val gradesMap8 = grades.map(x => x -> \"\
    H\".toUpperCase)\n        val gradesMap9 = grades.map(x => x -> \"I\".toUpperCase)\n\
    \        val gradesMap10 = grades.map(x => x -> \"J\".toUpperCase)\n        val\
    \ gradesMap11 = grades.map(x => x -> \"K\".toUpperCase)\n        val gradesMap12\
    \ = grades.map(x => x -> \"L\".toUpperCase)\n        val gradesMap13 = grades.map(x\
    \ => x -> \"M\".toUpperCase)\n        val gradesMap14 = grades.map(x => x -> \"\
    N\".toUpperCase)\n        val gradesMap15 = grades.map(x => x -> \"O\".toUpperCase)\n\
    \        val gradesMap16 = grades.map(x => x -> \"P\".toUpperCase)\n        val\
    \ gradesMap17 = grades.map(x => x -> \"Q\".toUpperCase)\n        val gradesMap18\
    \ = grades.map(x => x -> \"R\".toUpperCase)\n        val gradesMap19 = grades.map(x\
    \ => x -> \"S\".toUpperCase)\n        val gradesMap20 = grades.map(x => x -> \"\
    T\".toUpperCase)\n        val gradesMap21 = grades.map(x => x -> \"U\".toUpperCase)\n\
    \        val gradesMap22 = grades.map(x => x -> \"V\".toUpperCase)\n        val\
    \ gradesMap23 = grades.map(x => x -> \"W\".toUpperCase)\n        val gradesMap24\
    \ = grades.map(x => x -> \"X\".toUpperCase)\n        val gradesMap25 = grades.map(x\
    \ => x -> \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpscjw8gh6.scala:51:46 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mgradesMap25\e[0m = grades.map(\e\
    [36mx\e[0m => x -> \n\e[31m\e[31m   |\e[0m                                   \
    \           ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpscjw8gh6.scala:27:55 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m : \e[35mMap\e[0m[\e[35mFloat\e\
    [0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => x -> \e[31m\"A+\"\e[0m.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    List[(Float, String)]\n\
    \e[31m   |\e[0m                         Required: collection.mutable.Map[Float,\
    \ String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpscjw8gh6.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = Map(\n    \
    \        4.0 -> \"A+\",\n            3.7 -> \"A\",\n            3.3 -> \"A-\"\
    ,\n            3.0 -> \"B+\",\n            2.7 -> \"B\",\n            2.3 -> \"\
    B-\",\n            2.0 -> \"C+\",\n            1.7 -> \"C\",\n            1.3\
    \ -> \"C-\",\n            1.0 -> \"D+\",\n            0.7 -> \"D\",\n        \
    \    0.0 -> \"D-\"\n        )\n        grades.map(grade => gradesMap(grade))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptyqss3fw.scala:28:12\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[31m4.0\e[0m ->\
    \ \e[31m\"A+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptyqss3fw.scala:29:12 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[31m3.7\e[0m -> \e[31m\"A\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmptyqss3fw.scala:30:12 --------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m            \e[31m3.3\e[0m -> \e[31m\"A-\"\e[0m,\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (\e[1m\e[31mDouble\e\
    [0m, String)\n\e[31m   |\e[0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptyqss3fw.scala:31:12\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            \e[31m3.0\e[0m ->\
    \ \e[31m\"B+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptyqss3fw.scala:32:12 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[31m2.7\e[0m -> \e[31m\"B\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ ava"
  stdout: ''
  timestamp: 1659805050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesMapSorted2 = gradesMapSorted.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted3 = gradesMapSorted2.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted6 = gradesMapSorted5.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted7 = gradesMapSorted6.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted10 = gradesMapSorted9.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted11 = gradesMapSorted10.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted15 = gradesMapSorted14.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted16 = gradesMapSorted15.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted20 = \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp60ureoti.scala:47:31 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted20\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp60ureoti.scala:27:65\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap\e[0m = grades.groupBy(\e[36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e\
    [36mx\e[0m => x.toFloat)\n\e[31m\e[31m   |\e[0m                              \
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is\
    \ not a member of List[Float], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp60ureoti.scala:27:89 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e[36mx\e[0m => x.toFloat)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toFloat is\
    \ not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  imp"
  stdout: ''
  timestamp: 1659805089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => {\n            val gpa = grade\n\
    \            val letterGrade = if (gpa > 3.0) \"B+\" else if (gpa > 2.7) \"B\"\
    \ else if (gpa > 2.3) \"B-\" else if (gpa > 2.0) \"C+\" else if (gpa > 1.7) \"\
    C\" else if (gpa > 1.3) \"C-\" else if (gpa > 1.0) \"D+\" else if (gpa > 0.7)\
    \ \"D\" else if (gpa > 0.0) \"D-\" else \"E\"\n            letterGrade\n     \
    \   }).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyxsk_6g2.scala:34)\n\tat Problem.main(tmpyxsk_6g2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n    \
    \    val gradesSum = gradesSorted.sum\n        val gradesCount = gradesSorted.size\n\
    \        val gradesSumOfSquares = gradesSorted.map(x => x * x).sum\n        val\
    \ gradesSumOfSquaresOfSquares = gradesSumOfSquares * gradesSumOfSquares\n    \
    \    val gradesSumOfSquaresOfSquaresOfSquares = gradesSumOfSquaresOfSquares *\
    \ gradesSumOfSquares\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquares * gradesSumOfSquares\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares =\
    \ gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquaresOfSquares\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbrhd1zio.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\e\
    [0m = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbrhd1zio.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sort\n        val gradesValuesSorted = gradesValues.sort\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsmik440z.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsmik440z.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsmik440z.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsmik440z.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /t"
  stdout: ''
  timestamp: 1659805088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keys.toList\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesKeys.sum\n        val gradesSumInv = gradesKeys.map(x\
    \ => x / gradesSum).toList\n        val gradesSumInv = gradesSumInv.map(x => x.toFloat)\n\
    \        val gradesSumInv = gradesSumInv.map(x => x.toInt)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toDouble)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toFloat)\n        val gradesSumInv = gradesSumInv.map(x => x.toInt)\n \
    \       val gradesSumInv = gradesSumInv.map(x => x.toDouble)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toFloat)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toInt)\n        val gradesSumInv = gradesSumInv.map(x => x.toDouble)\n\
    \        val gradesSumInv = gradesSumInv.map(x => x.toFloat)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toInt)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toDouble)\n        val gradesSumInv = gradesSumInv.map(x => x.toFloat)\n\
    \        val gradesSumInv = gradesSumInv.map(x => x.toInt)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toDouble)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toFloat)\n        val gradesSumInv = gradesSumInv.map(x => x.toInt)\n \
    \       val gradesSumInv = gradesSumInv.map(x => x.toDouble)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toFloat)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toInt)\n        val gradesSumInv = gradesSumInv.map(x => x.toDouble)\n\
    \        val gradesSumInv = gradesSumInv.map(x => x.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvws_k65n.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvws_k65n.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesSumInv.map(\e[36mx\e\
    [0m => x.toFloat)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvws_k65n.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesSumInv.map(\e\
    [36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvws_k65n.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesSumInv.map(\e\
    [36mx\e[0m => x.toDouble)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvws_k65n.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesSumInv.map(\e\
    [36mx\e[0m => x.toFloat)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote"
  stdout: ''
  timestamp: 1659805088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.foldLeft(List[String]()){\n            (acc,\
    \ grade) =>\n                val gpa = grade / 4.0\n                val letterGrade\
    \ = if (gpa > 3.7) \"A+\" else if (gpa > 3.3) \"A\" else if (gpa > 3.0) \"B+\"\
    \ else if (gpa > 2.7) \"B\" else if (gpa > 2.3) \"B-\" else if (gpa > 2.0) \"\
    C+\" else if (gpa > 1.7) \"C\" else if (gpa > 1.3) \"C-\" else if (gpa > 1.0)\
    \ \"D+\" else if (gpa > 0.7) \"D\" else if (gpa > 0.0) \"D-\" else \"E\"\n   \
    \             acc :+ letterGrade\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47hnos4e.scala:35)\n\tat Problem.main(tmp47hnos4e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSorted = grades.sortWith((a, b) => a.toFloat < b.toFloat)\n\
    \        val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n   \
    \     val gradesSortedMapReverse = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse2 = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse3 = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse4 = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse5 = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse6 = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse7 = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse8 = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse9 = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse10 = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse11 = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse12 = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse13 = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse14 = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse15 = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse16 = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse17 = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse18 = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReverse19 = gradesSor\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp61el8jlz.scala:30:79 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReverse\e\
    [0m = gradesSorted.map(\e[36mx\e[0m => (x.toInt, x)).toMap.reverse\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you\
    \ mean Map[Int, Float].reversed?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp61el8jlz.scala:31:80\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapReverse2\e[0m = gradesSorted.map(\e[36mx\e[0m => (x.toInt,\
    \ x)).toMap.reverse\n\e[31m\e[31m   |\e[0m                                   \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Map[Int, Float] - did you mean Map[Int, Float].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp61el8jlz.scala:32:80 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReverse3\e\
    [0m = gradesSorted.map(\e[36mx\e[0m => (x.toInt, x)).toMap.reverse\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you\
    \ mean Map[Int, Float].reversed?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp61el8jlz.scala:33:80\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapReverse4\e[0m = gradesSorted.map(\e[36mx\e[0m => (x.toInt,\
    \ x)).toMap.reverse\n\e[31m\e[31m   |\e[0m                                   \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Map[Int, Float] - did you mean Map[Int, Float].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp61el8jlz.scala:34:80 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReverse5\e\
    [0m = gradesSorted.map(\e[36mx\e[0m => (x.toInt, x)).toMap.reverse\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^"
  stdout: ''
  timestamp: 1659805093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(_ - gradesKeys.head).reverse\n  \
    \      val gradesValuesSorted = gradesValues.sortBy(_ - gradesValues.head).reverse\n\
    \        val gradesKeysSortedWithDuplicates = gradesKeysSorted.distinct\n    \
    \    val gradesValuesSortedWithDuplicates = gradesValuesSorted.distinct\n    \
    \    val gradesKeysSortedWithDuplicatesAndDuplicates = gradesKeysSorted.distinct\n\
    \        val gradesValuesSortedWithDuplicatesAndDuplicates = gradesValuesSorted.distinct\n\
    \        val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicates = gradesKeysSorted.distinct\n\
    \        val gradesValuesSortedWithDuplicatesAndDuplicatesAndDuplicates = gradesValuesSorted.distinct\n\
    \        val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\
    \ = gradesKeysSorted.distinct\n        val gradesValuesSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\
    \ = gradesValuesSorted.distinct\n        val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\
    \ = gradesKeysSorted.distinct\n        val gradesValuesSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\
    \ = gradesValuesSorted.distinct\n        val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\
    \ = gradesKeysSorted.distinct\n        val gradesValuesSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\
    \ = gradesValuesSorted.distinct\n        val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\
    \ = gradesKeysSorted.distinct\n        val gradesValuesSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\
    \ = gradesValuesSorted.distinct\n        val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\
    \ = gradesKeysSorted.distinct\n        val gradesValuesSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\
    \ = gradesValuesSorted.distinct\n        val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\
    \ = gradesKeysSorted.distinct\n        val gradesValuesSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicate\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqw435jqq.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpqw435jqq.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpqw435jqq.scala:50:5 ---------------------\e[0m\e[0m\n\
    \e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).toMap\n\
    \        val gradesMapReverse = gradesMap.mapValues(x => x.toFloat)\n        val\
    \ gradesMapReverse2 = gradesMapReverse.mapValues(x => x.toInt)\n        val gradesMapReverse3\
    \ = gradesMapReverse2.mapValues(x => x.toInt)\n        val gradesMapReverse4 =\
    \ gradesMapReverse3.mapValues(x => x.toInt)\n        val gradesMapReverse5 = gradesMapReverse4.mapValues(x\
    \ => x.toInt)\n        val gradesMapReverse6 = gradesMapReverse5.mapValues(x =>\
    \ x.toInt)\n        val gradesMapReverse7 = gradesMapReverse6.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse8 = gradesMapReverse7.mapValues(x => x.toInt)\n \
    \       val gradesMapReverse9 = gradesMapReverse8.mapValues(x => x.toInt)\n  \
    \      val gradesMapReverse10 = gradesMapReverse9.mapValues(x => x.toInt)\n  \
    \      val gradesMapReverse11 = gradesMapReverse10.mapValues(x => x.toInt)\n \
    \       val gradesMapReverse12 = gradesMapReverse11.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse13 = gradesMapReverse12.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse14 = gradesMapReverse13.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse15 = gradesMapReverse14.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse16 = gradesMapReverse15.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse17 = gradesMapReverse16.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse18 = gradesMapReverse17.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse19 = gradesMapReverse18.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse20 = gradesMapReverse19.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse21 = gradesMapReverse20.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse22 = gradesMapReverse21.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse23 = gradesMapReverse22.mapValues(x => x.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi2kisqy7.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpi2kisqy7.scala:27:65 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e[36mx\e\
    [0m => x.toInt).mapValues(_.toInt).toMap\n\e[31m\e[31m   |\e[0m              \
    \                                                 ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toInt is not a member of List[Float], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi2kisqy7.scala:28:58\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapReverse\e[0m = gradesMap.mapValues(\e[36mx\e[0m => x.toFloat)\n\e\
    [31m\e[31m   |\e[0m                                                        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toFloat is not a member of Nothing, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e\
    [0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e\
    [0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\e[31m\
    \   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\e\
    [31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi2kisqy7.scala:29:66\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapReverse2\e[0m = gradesMapReverse.mapValues(\e[36mx"
  stdout: ''
  timestamp: 1659805095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesLength = gradesKeys.size\n        val gradesSum = gradesValues.sum\n\
    \        val gradesAvg = gradesSum / gradesLength\n        val gradesDiff = gradesAvg\
    \ - gradesMap(\"0.0\")\n        val gradesDiffLength = gradesDiff.size\n     \
    \   val gradesDiffSum = gradesDiff.sum\n        val gradesDiffAvg = gradesDiffSum\
    \ / gradesDiffLength\n        val gradesDiffDiff = gradesDiffAvg - gradesMap(\"\
    1.0\")\n        val gradesDiffDiffLength = gradesDiffDiff.size\n        val gradesDiffDiffSum\
    \ = gradesDiffDiff.sum\n        val gradesDiffDiffAvg = gradesDiffDiffSum / gradesDiffDiffLength\n\
    \        val gradesDiffDiffDiff = gradesDiffDiffAvg - gradesMap(\"2.0\")\n   \
    \     val gradesDiffDiffDiffLength = gradesDiffDiffDiff.size\n        val gradesDiffDiffDiffSum\
    \ = gradesDiffDiffDiff.sum\n        val gradesDiffDiffDiffAvg = gradesDiffDiffDiffSum\
    \ / gradesDiffDiffDiffLength\n        val gradesDiffDiffDiffDiff = gradesDiffDiffDiffAvg\
    \ - gradesMap(\"3.0\")\n        val gradesDiffDiffDiffDiffLength = gradesDiffDiffDiffDiff.size\n\
    \        val gradesDiffDiffDiffDiffSum = gradesDiffDiffDiffDiff.sum\n        val\
    \ gradesDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffLength\n\
    \        val gradesDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffAvg - gradesMap(\"\
    4.0\")\n        val gradesDiffDiffDiffDiffDiffLength = gradesDiffDiffDiffDiffDiff.size\n\
    \        val gradesDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiff.sum\n\
    \        val gradesDiffDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffDiffDiffSum\
    \ / gradesDiffDiffDiffDiffDiffDiffLength\n        val gradesDiffDiffDiffDiffDiffDiff\
    \ = gradesDiffDiffDiffDiffDiffDiffAvg - gradesMap(\"5.0\")\n        val gradesDiffDiffDiffDiffDiffDiffLength\
    \ = gradesDiffDiffDiffDiffDiffDiffDiff.size\n        val gradesDiffDiffDiffDiffDiff\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ciplzpr.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp0ciplzpr.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp0ciplzpr.scala:52:44 ------------------------\e[0m\e[0m\n\
    \e[31m52 |\e[0m        \e[33mval\e[0m \e[36mgradesDiffDiffDiffDiffDiffAvg\e[0m\
    \ = gradesDiffDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiffLength\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: gradesDiffDiffDiffDiffDiffDiffSum\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ciplzpr.scala:53:45\
    \ ------------------------\e[0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesDiffDiffDiffDiffDiffDiff\e[0m = gradesDiffDiffDiffDiffDiffDiffAvg -\
    \ gradesMap(\e[31m\"5.0\"\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: gradesDiffDiffDiffDiffDiffDiffAvg\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ciplzpr.scala:54:51\
    \ ------------------------\e[0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesDiffDiffDiffDiffDiffDiffLength\e[0m = gradesDiffDiffDiffDiffDiffDiffDiff.size\n\
    \e[31m\e[31m   |\e[0m                                                 "
  stdout: ''
  timestamp: 1659805090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedValuesSum2 = gradesMapSortedReversedValuesSum\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum3\
    \ = gradesMapSortedReversedValuesSum2 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum4 = gradesMapSortedReversedValuesSum3\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum5\
    \ = gradesMapSortedReversedValuesSum4 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum6 = gradesMapSortedReversedValuesSum5\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum7\
    \ = gradesMapSortedReversedValuesSum6 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum8 = gradesMapSortedReversedValuesSum7\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum9\
    \ = gradesMapSortedReversedValuesSum8 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum10 = gradesMapSortedReversedValuesSum9\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum11\
    \ = gradesMapSortedReversedValuesSum10 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum12 = gradesMapSortedReversedValuesSum11\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum13\
    \ = gradesMapSortedReversedValuesSum12 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum14 = gradesMapSortedReversedValuesSum13\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum15\
    \ = gradesMapSortedReversedValuesSum14 * gradesMapSortedReversedValues\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1y_ewknk.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1y_ewknk.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = grades.sortBy(_._1)\n        val gradesSortedByValue = grades.sortBy(_._2)\n\
    \        val gradesSortedByKeyAndValue = grades.sortBy(_._1).sortBy(_._2)\n  \
    \      val gradesSortedByKeyAndValueAndKey = grades.sortBy(_._1).sortBy(_._2).sortBy(_._3)\n\
    \        val gradesSortedByKeyAndValueAndKeyAndValue = grades.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4)\n\
    \        val gradesSortedByKeyAndValueAndKeyAndValueAndKey = grades.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5)\n\
    \        val gradesSortedByKeyAndValueAndKeyAndValueAndKeyAndValue = grades.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5).sortBy(_._6)\n\
    \        val gradesSortedByKeyAndValueAndKeyAndValueAndKeyAndValueAndKey = grades.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5).sortBy(_._6).sortBy(_._7)\n\
    \        val gradesSortedByKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValue\
    \ = grades.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5).sortBy(_._6).sortBy(_._7).sortBy(_._8)\n\
    \        val gradesSortedByKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKey\
    \ = grades.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5).sortBy(_._6).sortBy(_._7).sortBy(_._8).sortBy(_._9)\n\
    \        val gradesSortedByKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValueAndKeyAndValue\
    \ = grades.sortBy(_._1).sortBy(_._2).sortBy(_._3).sortBy(_._4).sortBy(_._5).sortBy(_._6).sortBy(_._7).sortBy(_._8).sortBy(_._9).sortBy(_._10)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpau4byln1.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpau4byln1.scala:28:48 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m =\
    \ grades.sortBy(_._1)\n\e[31m\e[31m   |\e[0m                                 \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \  value _1 is not a member of Float\n\e[31m\e[31m-- Error: /tmp/tmpau4byln1.scala:28:51\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m = grades.sortBy(_._1)\n\e[31m\e\
    [31m   |\e[0m                                                   ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpau4byln1.scala:29:50 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByValue\e[0m\
    \ = grades.sortBy(_._2)\n\e[31m\e[31m   |\e[0m                               \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \      value _2 is not a member of Float\n\e[31m\e[31m-- Error: /tmp/tmpau4byln1.scala:29:53\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesSortedByValue\e[0m = grades.sortBy(_._2)\n\e[31m\e\
    [31m   |\e[0m                                                     ^\e[0m\n\e[31m\
    \   |\e[0mamb"
  stdout: ''
  timestamp: 1659805010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedKeys = gradesMapSorted.keys\n\
    \        val gradesMapSortedValues = gradesMapSorted.values\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_4eo7l3e.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4eo7l3e.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedKeysLength\e[0m = gradesMapSortedKeys.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4eo7l3e.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4eo7l3e.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = gradesMapSortedKeys.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4eo7l3e.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMap"
  stdout: ''
  timestamp: 1659805092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesMap.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedValues\
    \ = gradesSortedByKeyReversed.values\n        val gradesSortedByValueReversedValues\
    \ = gradesSortedByValueReversed.values\n        val gradesSortedByKeyReversedValuesSum\
    \ = gradesSortedByKeyReversedValues.sum\n        val gradesSortedByValueReversedValuesSum\
    \ = gradesSortedByValueReversedValues.sum\n        val gradesSortedByKeyReversedValuesSum\
    \ = gradesSortedByKeyReversedValues.sum\n        val gradesSortedByKeyReversedValuesSum\
    \ = gradesSortedByKeyReversedValues.sum\n        val gradesSortedByKeyReversedValuesSum\
    \ = gradesSortedByKeyReversedValues.sum\n        val gradesSortedByKeyReversedValuesSum\
    \ = gradesSortedByKeyReversedValues.sum\n        val gradesSortedByKeyReversedValuesSum\
    \ = gradesSortedByKeyReversedValues.sum\n        val gradesSortedByKeyReversedValuesSum\
    \ = gradesSortedByKeyReversedValues.sum\n        val gradesSortedByKeyReversedValuesSum\
    \ = gradesSortedByKeyReversedValues.sum\n        val gradesSortedByKeyReversedValuesSum\
    \ = gradesSortedByKeyReversedValues.sum\n        val gradesSortedByKeyReversedValuesSum\
    \ = gradesSortedByKeyReversedValues.sum\n        val gradesSortedByKeyReversedValuesSum\
    \ = gradesSortedByKeyReversedValues.sum\n        val gradesSortedByKeyReversedValuesSum\
    \ = gradesSortedByKeyReversedValues.sum\n        val gradesSortedByKeyReversedValuesSum\
    \ = gradesSortedByKeyReversedValues.sum\n        val gradesSortedByKeyReversedValuesSum\
    \ = gradesSortedByKeyReversedValues.sum\n        val gradesSortedByKeyReversedValuesSum\
    \ = gradesSortedByKeyReversedValues.sum\n        val gradesSortedByKeyReversedValuesSum\
    \ = gradesSortedByKeyReversedValues.sum\n        val gradesSortedByKey\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnflrufgl.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnflrufgl.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByKeyReversedValuesSum\e[0m = gradesSortedByKeyReversedValues.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedValuesSum is already defined as \e\
    [33mvalue\e[0m \e[35mgradesSortedByKeyReversedValuesSum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnflrufgl.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByKeyReversedValuesSum\e[0m = gradesSortedByKeyReversedValues.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedValuesSum is already defined as \e\
    [33mvalue\e[0m \e[35mgradesSortedByKeyReversedValuesSum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnflrufgl.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByKeyReversedValuesSum\e[0m = gradesSortedByKeyReversedValues.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedValuesSum is already defined as \e\
    [33mvalue\e[0m \e[35mgradesSortedByKeyReversedValuesSum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnflrufgl.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSorted"
  stdout: ''
  timestamp: 1659805092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGrade\
    \ = grades.sortWith((a, b) => a.toFloat - b.toFloat)\n        val gradesSortedByGradeReversed\
    \ = gradesSortedByGrade.sortWith((a, b) => b.toFloat - a.toFloat)\n        val\
    \ gradesSortedByGradeReversedMap = gradesSortedByGradeReversed.toMap\n       \
    \ val gradesSortedByGradeReversedKeys = gradesSortedByGradeReversedMap.keys\n\
    \        val gradesSortedByGradeReversedValues = gradesSortedByGradeReversedMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesMap = gradesSortedByGradeReversedValues.toMap\n\
    \        val gradesSortedByGradeReversedValuesKeys = gradesSortedByGradeReversedValuesMap.keys\n\
    \        val gradesSortedByGradeReversedValuesValues = gradesSortedByGradeReversedValuesMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesValuesMap = gradesSortedByGradeReversedValuesValues.toMap\n\
    \        val gradesSortedByGradeReversedValuesValuesKeys = gradesSortedByGradeReversedValuesValuesMap.keys\n\
    \        val gradesSortedByGradeReversedValuesValuesValues = gradesSortedByGradeReversedValuesValuesMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesMap = gradesSortedByGradeReversedValuesValuesValues.toMap\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesKeys = gradesSortedByGradeReversedValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValues = gradesSortedByGradeReversedValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValuesMap = gradesSortedByGradeReversedValuesValuesValuesValues.toMap\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValuesKeys = gradesSortedByGradeReversedValuesValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValuesValues = gradesSortedByGradeReversedValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValuesValuesMap = gradesSortedByGradeReversedValuesValues\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpt0kcsatp.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0kcsatp.scala:28:60\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGrade\e\
    [0m = grades.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a.toFloat - b.toFloat)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                          Found:    Float\n\e[31m   |\e[0m                  \
    \                                     Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpt0kcsatp.scala:29:81 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGradeReversed\e\
    [0m = gradesSortedByGrade.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => b.toFloat -\
    \ a.toFloat)\n\e[31m\e[31m   |\e[0m                                          \
    \                                       ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                       Found:    Float\n\e\
    [31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpt0kcsatp.scala:30:78\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m30 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesSortedByGradeReversedMap\e[0m = gradesSortedByGradeReversed.toMap\n\
    \e[31m\e[31m   |\e[0m                                                         "
  stdout: ''
  timestamp: 1659805093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByKey = grades.sortBy(x => x)\n        val gradesSortedByValue\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n\
    \        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n     \
    \   val gradesSortedByKeyReversedReversed = gradesSortedByKeyReversed.reverse\n\
    \        val gradesSortedByValueReversedReversed = gradesSortedByValueReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversed = gradesSortedByKeyReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxpqqnaue.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxpqqnaue.scala:40:104\
    \ --------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpxpqqnaue.scala:41:112 --------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxpqqnaue.scala:42:120 -----------------------\e[0m\e[0m\n\e[31m42 |\e\
    [0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e"
  stdout: ''
  timestamp: 1659805092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSorted\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa6vonc2e.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesL"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesValuesWithZero = gradesValues.map(_ + 0).toList\n        val gradesValuesWithOne\
    \ = gradesValues.map(_ + 1).toList\n        val gradesValuesWithTwo = gradesValues.map(_\
    \ + 2).toList\n        val gradesValuesWithThree = gradesValues.map(_ + 3).toList\n\
    \        val gradesValuesWithFour = gradesValues.map(_ + 4).toList\n        val\
    \ gradesValuesWithFive = gradesValues.map(_ + 5).toList\n        val gradesValuesWithSixteen\
    \ = gradesValues.map(_ + 16).toList\n        val gradesValuesWithSixtyFour = gradesValues.map(_\
    \ + 64).toList\n        val gradesValuesWithSixtyFourteen = gradesValues.map(_\
    \ + 256).toList\n        val gradesValuesWithSixtyFourtyFour = gradesValues.map(_\
    \ + 4096).toList\n        val gradesValuesWithSixtyFourtyFourteen = gradesValues.map(_\
    \ + 8192).toList\n        val gradesValuesWithSixtyFourtyFourtyFour = gradesValues.map(_\
    \ + 16384).toList\n        val gradesValuesWithSixtyFourtyFourtyFourteen = gradesValues.map(_\
    \ + 32768).toList\n        val gradesValuesWithSixtyFourtyFourtyFourtyFour = gradesValues.map(_\
    \ + 65536).toList\n        val gradesValuesWithSixtyFourtyFourtyFourtyFourteen\
    \ = gradesValues.map(_ + 131072).toList\n        val gradesValuesWithSixtyFourtyFourtyFourtyFourtyFour\
    \ = gradesValues.map(_ + 262144).toList\n        val gradesValuesWithSixtyFourtyFourtyFourtyFourtyFourteen\
    \ = gradesValues.map(_ + 524288).toList\n        val gradesValuesWithSixtyFourtyFourtyFourtyFourtyFourtyFour\
    \ = gradesValues.map(_ + 1048576).toList\n        val gradesValuesWithSixtyFourtyFourtyFourtyFourtyFourtyFourteen\
    \ = gradesValues.map(_ + 2097152).to\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpg5h3h2gg.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5h3h2gg.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.toMap\n        val gradesSortedByKeyReversedMapReversed\
    \ = gradesSortedByKeyReversedMap.reverse\n        val gradesSortedByValueReversedMapReversed\
    \ = gradesSortedByValueReversedMap.reverse\n        val gradesSortedByKeyReversedMapReversedMap\
    \ = gradesSortedByKeyReversedMapReversed.toMap\n        val gradesSortedByValueReversedMapReversedMap\
    \ = gradesSortedByValueReversedMapReversed.toMap\n        val gradesSortedByKeyReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMap.reverse\n        val gradesSortedByValueReversedMapReversedMapReversed\
    \ = gradesSortedByValueReversedMapReversedMap.reverse\n        val gradesSortedByKeyReversedMapReversedMapReversedMap\
    \ = gradesSortedByKeyReversedMapReversedMapReversed.toMap\n        val gradesSortedByValueReversedMapReversedMapReversedMap\
    \ = gradesSortedByValueReversedMapReversedMapReversed.toMap\n        val gradesSortedByKeyReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMapReversedMapReversed.reverse\n     \
    \   val gradesSortedByValueReversedMapReversedMapReversedMapReversedMap = gradesSortedByValueReversedMapReversedMapReversedMapReversed.toMap\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMapReversedMapReversedMap.reverse\n  \
    \      val gradesSortedByValueReversedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedByValueReversedMapReversedMapReversedMapReversedMap.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsuvliy_9.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsuvliy_9.scala:42:73 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedMapReversedMapReversedMapReversed\e\
    [0m = gradesSortedByKeyReversedMapReversedMapReversedMapReversed.reverse\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedByKeyReversedMapReversedMapReversedMapReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsuvliy_9.scala:43:78\
    \ ------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByValueReversedMapReversedMapReversedMapReversedMap\e[0m = gradesSortedByValueReversedMapReversedMapReversedMapReversed.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m Not found: gradesSortedByValueReversedMapReversedMapReversedMapReversed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsuvliy_9.scala:44:84\
    \ ------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed\e[0m\
    \ = gradesSortedByKeyReversedMapReversedMapReversedMapReversedMap.reverse\n\e\
    [31m\e[31m   |\e[0m                            "
  stdout: ''
  timestamp: 1659805092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).toMap\n\
    \        grades.map(grade => gradesMap(grade).map(grade => grade match {\n   \
    \         case 0 => \"E\"\n            case 1 => \"D-\"\n            case 2 =>\
    \ \"D\"\n            case 3 => \"C-\"\n            case 4 => \"C\"\n         \
    \   case 5 => \"B-\"\n            case 6 => \"B\"\n            case 7 => \"B+\"\
    \n            case 8 => \"A-\"\n            case 9 => \"A\"\n            case\
    \ _ => \"A+\"\n        }).mkString(\"\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb9tg0e2j.scala:27:59 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt).toMap\n\e[31m\e[31m   |\e[0m           \
    \                                              ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toInt is not a member of List[Float], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb9tg0e2j.scala:28:45\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        grades.map(\e[36mgrade\e\
    [0m => gradesMap(grade).map(\e[36mgrade\e[0m => grade \e[33mmatch\e[0m {\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            value map is not a member of Nothing\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSorted\
    \ = grades.sortWith(_ < _)\n        val gradesSortedMap = gradesSorted.toMap\n\
    \        val gradesSortedMapKeys = gradesSortedMap.keys\n        val gradesSortedMapValues\
    \ = gradesSortedMap.values.toList\n        val gradesSortedMapKeysSorted = gradesSortedMapKeys.sortWith(_\
    \ < _)\n        val gradesSortedMapValuesSorted = gradesSortedMapValues.sortWith(_\
    \ < _)\n        val gradesSortedMapKeysSortedMap = gradesSortedMapKeysSorted.zip(gradesSortedMapValuesSorted)\n\
    \        val gradesSortedMapKeysSortedMapKeys = gradesSortedMapKeysSortedMap.keys\n\
    \        val gradesSortedMapKeysSortedMapValues = gradesSortedMapKeysSortedMap.values.toList\n\
    \        val gradesSortedMapKeysSortedMapKeysSorted = gradesSortedMapKeysSortedMapKeys.sortWith(_\
    \ < _)\n        val gradesSortedMapKeysSortedMapValuesSorted = gradesSortedMapKeysSortedMapValues.sortWith(_\
    \ < _)\n        val gradesSortedMapKeysSortedMapKeysSortedMap = gradesSortedMapKeysSortedMapKeysSorted.zip(gradesSortedMapKeysSortedMapValuesSorted)\n\
    \        val gradesSortedMapKeysSortedMapKeysSortedMapKeys = gradesSortedMapKeysSortedMapKeysSortedMap.keys\n\
    \        val gradesSortedMapKeysSortedMapKeysSortedMapValues = gradesSortedMapKeysSortedMapKeysSortedMapValues.sortWith(_\
    \ < _)\n        val gradesSortedMapKeysSortedMapKeysSortedMapKeysSorted = gradesSortedMapKeysSortedMapKeysSortedMapKeysSorted.zip(gradesSortedMapKeysSortedMapKeysSortedMapValuesSorted)\n\
    \        val gradesSortedMapKeysSortedMapKeysSortedMapKeysSortedMapKeys = gradesSortedMapKeysSortedMapKeysSortedMapKeysSortedMapKeys.keys\n\
    \        val gradesSortedMapKeysSortedMapKeysSortedMapKeysSortedMapValues = gradesSortedMapKeysSortedMapKeysSortedMapKeysSortedMapValues.sortWith(_\
    \ < _)\n        val gradesSortedMapKeysSortedMapKeysSortedMapKeysSortedMapKeysSorted\
    \ = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpj6o7hum2.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- Error: /tmp/tmpj6o7hum2.scala:29:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMap\e[0m = gradesSorted.toMap\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m                                      Cannot prove that Float <:<\
    \ (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                   \
    \   where:    K is a type variable\n\e[31m   |\e[0m                          \
    \                      V is a type variable\n\e[31m   |\e[0m                 \
    \                     .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj6o7hum2.scala:41:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapKeysSortedMapKeysSortedMapValues\e[0m = gradesSortedMapKeysSortedMapKeysSortedMapValues.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                                                \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedMapKeysSortedMapKeysSortedMapValues\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj6o7hum2.scala:42:66\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapKeysSortedMapKeysSortedMapKeysSorted\e[0m = gradesSortedMapKeysSortedMapKeysSortedMapKeysSorted.zip(gradesSortedMapKeysSortedMapKeysSortedMapValuesSorted)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659805095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSorted\
    \ = grades.sortBy(-_)\n        val gradesSortedMap = gradesSorted.toMap\n    \
    \    val gradesSortedSortedMap = gradesSorted.sortBy(-_).toMap\n        val gradesSortedSortedMap2\
    \ = gradesSorted.sortBy(-_).toMap\n        val gradesSortedSortedMap3 = gradesSorted.sortBy(-_).toMap\n\
    \        val gradesSortedSortedMap4 = gradesSorted.sortBy(-_).toMap\n        val\
    \ gradesSortedSortedMap5 = gradesSorted.sortBy(-_).toMap\n        val gradesSortedSortedMap6\
    \ = gradesSorted.sortBy(-_).toMap\n        val gradesSortedSortedMap7 = gradesSorted.sortBy(-_).toMap\n\
    \        val gradesSortedSortedMap8 = gradesSorted.sortBy(-_).toMap\n        val\
    \ gradesSortedSortedMap9 = gradesSorted.sortBy(-_).toMap\n        val gradesSortedSortedMap10\
    \ = gradesSorted.sortBy(-_).toMap\n        val gradesSortedSortedMap11 = gradesSorted.sortBy(-_).toMap\n\
    \        val gradesSortedSortedMap12 = gradesSorted.sortBy(-_).toMap\n       \
    \ val gradesSortedSortedMap13 = gradesSorted.sortBy(-_).toMap\n        val gradesSortedSortedMap14\
    \ = gradesSorted.sortBy(-_).toMap\n        val gradesSortedSortedMap15 = gradesSorted.sortBy(-_).toMap\n\
    \        val gradesSortedSortedMap16 = gradesSorted.sortBy(-_).toMap\n       \
    \ val gradesSortedSortedMap17 = gradesSorted.sortBy(-_).toMap\n        val gradesSortedSortedMap18\
    \ = gradesSorted.sortBy(-_).toMap\n        val gradesSortedSortedMap19 = gradesSorted.sortBy(-_).toMap\n\
    \        val gradesSortedSortedMap20 = gradesSorted.sortBy(-_).toMap\n       \
    \ val gradesSortedSortedMap21 = gradesSorted.sortBy(-_).toMap\n        val gradesSortedSortedMap22\
    \ = gradesSorted.sortBy(-_).toMap\n        val gradesSortedSortedMap23 = gradesSorted.sortBy(-_).toMap\n\
    \        val gradesSortedSortedMap24 = gradesSorted.sortBy(-_).toMap\n       \
    \ val gradesSortedSortedMap25\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprc8vrgfl.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmprc8vrgfl.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- Error: /tmp/tmprc8vrgfl.scala:29:48\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesSortedMap\e[0m = gradesSorted.toMap\n\e[31m\e[31m\
    \   |\e[0m                                                ^\e[0m\n\e[31m   |\e\
    [0m                                      Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                      where:   \
    \ K is a type variable\n\e[31m   |\e[0m                                      \
    \          V is a type variable\n\e[31m   |\e[0m                             \
    \         .\n\e[31m\e[31m-- Error: /tmp/tmprc8vrgfl.scala:30:65 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedSortedMap\e\
    [0m = gradesSorted.sortBy(-_).toMap\n\e[31m\e[31m   |\e[0m                   \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                               Cannot prove that Float <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                      where:    K is a type\
    \ variable\n\e[31m   |\e[0m                                                V is\
    \ a type variable\n\e[31m   |\e[0m                                      .\n\e\
    [31m\e[31m-- Error: /tmp/tmprc8vrgfl.scala:31:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedS"
  stdout: ''
  timestamp: 1659805098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keySet.toList\n        val gradesValues =\
    \ gradesMap.values.toList\n        val gradesSum = gradesValues.sum\n        val\
    \ gradesSumInv = gradesValues.sum / gradesSum\n        val gradesSumInv = gradesValues.sum\
    \ / gradesSum\n        val gradesSumInv = gradesValues.sum / gradesSum\n     \
    \   val gradesSumInv = gradesValues.sum / gradesSum\n        val gradesSumInv\
    \ = gradesValues.sum / gradesSum\n        val gradesSumInv = gradesValues.sum\
    \ / gradesSum\n        val gradesSumInv = gradesValues.sum / gradesSum\n     \
    \   val gradesSumInv = gradesValues.sum / gradesSum\n        val gradesSumInv\
    \ = gradesValues.sum / gradesSum\n        val gradesSumInv = gradesValues.sum\
    \ / gradesSum\n        val gradesSumInv = gradesValues.sum / gradesSum\n     \
    \   val gradesSumInv = gradesValues.sum / gradesSum\n        val gradesSumInv\
    \ = gradesValues.sum / gradesSum\n        val gradesSumInv = gradesValues.sum\
    \ / gradesSum\n        val gradesSumInv = gradesValues.sum / gradesSum\n     \
    \   val gradesSumInv = gradesValues.sum / gradesSum\n        val gradesSumInv\
    \ = gradesValues.sum / gradesSum\n        val gradesSumInv = gradesValues.sum\
    \ / gradesSum\n        val gradesSumInv = gradesValues.sum / gradesSum\n     \
    \   val gradesSumInv = gradesValues.sum / gradesSum\n        val gradesSumInv\
    \ = gradesValues.sum / gradesSum\n        val gradesSumInv = gradesValues.sum\
    \ / gradesSum\n        val gradesSumInv = gradesValues.sum / gradesSum\n     \
    \   val gradesSumInv = gradesValues.sum / gradesSum\n        val gradesSumInv\
    \ = gradesValues.sum / gradesSum\n        val gradesSumInv = gradesValues.sum\
    \ / gradesSum\n        val gradesSumInv = gradesValues.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4_xvl_6d.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesValues.sum\
    \ / gradesSum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4_xvl_6d.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesValues.sum\
    \ / gradesSum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4_xvl_6d.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesValues.sum\
    \ / gradesSum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4_xvl_6d.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesValues.sum\
    \ / gradesSum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4_xvl_6d.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesValues.sum\
    \ / grad"
  stdout: ''
  timestamp: 1659805099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesEnumerator\
    \ = grades.iterator\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg3lbbyfs.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg3lbbyfs.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMap is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg3lbbyfs.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg3lbbyfs.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMap is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg3lbbyfs.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded met"
  stdout: ''
  timestamp: 1659805100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversed\
    \ = gradesSortedMap.reverse\n        val gradesSortedMapReversedKeys = gradesSortedMapReversed.keys\n\
    \        val gradesSortedMapReversedValues = gradesSortedMapReversed.values\n\
    \        val gradesSortedMapReversedKeysSorted = gradesSortedMapReversedKeys.sortBy(x\
    \ => x)\n        val gradesSortedMapReversedValuesSorted = gradesSortedMapReversedValues.sortBy(x\
    \ => x)\n        val gradesSortedMapReversedKeysSortedSortedMapReversedKeys =\
    \ gradesSortedMapReversedKeysSorted.map(x => gradesSortedMapReversedKeysSorted.indexOf(x))\n\
    \        val gradesSortedMapReversedKeysSortedSortedMapReversedValuesSorted =\
    \ gradesSortedMapReversedKeysSortedSortedMapReversedValues.sortBy(x => x)\n  \
    \      val gradesSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSortedMapReversedValuesSorted\
    \ = gradesSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSortedMapReversedValuesSorted.map(x\
    \ => gradesSortedMapReversedKeysSortedSortedMapReversedKeysSortedSortedMapReversedKeysSortedSortedMapReversedValuesSorted.indexOf(x))\n\
    \        val gradesSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbzkcma2d.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbzkcma2d.scala:30:54\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapReversed\e[0m = gradesSortedMap.reverse\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you mean gradesSortedMap.reversed?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbzkcma2d.scala:36:77 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedKeysSortedSortedMapReversedValuesSorted\e\
    [0m = gradesSortedMapReversedKeysSortedSortedMapReversedValues.sortBy(\e[36mx\e\
    [0m => x)\n\e[31m\e[31m   |\e[0m                                             \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     Not found: gradesSortedMapReversedKeysSortedSortedMapReversedValues\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbzkcma2d.scala:37:133\
    \ --------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSortedMapReversedValuesSorted\e\
    [0m = gradesSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSortedMapReversedValuesSorted.map(\e\
    [36mx\e[0m => gradesSortedMapReversedKeysSortedSortedMapReversedKeysSortedSortedMapReversedKeysSortedSortedMapReversedValuesSorted.indexOf(x))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \ ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedMapReversedKeysSortedSortedMapReversedValuesSortedSortedMapReversedKeysSortedSortedMapReversedValuesSor"
  stdout: ''
  timestamp: 1659805099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sort\n        val gradesValuesSorted = gradesValues.sort\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3sgk2ruv.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3sgk2ruv.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesKeysSortedLength\e[0m = gradesKeysSorted.length\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3sgk2ruv.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3sgk2ruv.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3sgk2ruv.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSort"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValues\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqqe2bwve.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqqe2bwve.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesKeysSortedLength\e[0m = gradesKeysSortedLength - \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqqe2bwve.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSortedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqqe2bwve.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSortedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqqe2bwve.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSortedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659805100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).toMap\n\
    \        val gradesSortedByGrade = grades.sortBy(x => x)\n        val gradesSortedByGradeMap\
    \ = gradesSortedByGrade.groupBy(x => x.toInt).mapValues(_.toInt).toMap\n     \
    \   val gradesSortedByGradeMapReversed = gradesSortedByGrade.groupBy(x => x.toInt).mapValues(_.toInt).reverse.toMap\n\
    \        val gradesSortedByGradeMapReversedMap = gradesSortedByGrade.groupBy(x\
    \ => x.toInt).mapValues(_.toInt).reverse.toMap\n        val gradesSortedByGradeMapReversedMap2\
    \ = gradesSortedByGrade.groupBy(x => x.toInt).mapValues(_.toInt).reverse.toMap\n\
    \        val gradesSortedByGradeMapReversedMap3 = gradesSortedByGrade.groupBy(x\
    \ => x.toInt).mapValues(_.toInt).reverse.toMap\n        val gradesSortedByGradeMapReversedMap4\
    \ = gradesSortedByGrade.groupBy(x => x.toInt).mapValues(_.toInt).reverse.toMap\n\
    \        val gradesSortedByGradeMapReversedMap5 = gradesSortedByGrade.groupBy(x\
    \ => x.toInt).mapValues(_.toInt).reverse.toMap\n        val gradesSortedByGradeMapReversedMap6\
    \ = gradesSortedByGrade.groupBy(x => x.toInt).mapValues(_.toInt).reverse.toMap\n\
    \        val gradesSortedByGradeMapReversedMap7 = gradesSortedByGrade.groupBy(x\
    \ => x.toInt).mapValues(_.toInt).reverse.toMap\n        val gradesSortedByGradeMapReversedMap8\
    \ = gradesSortedByGrade.groupBy(x => x.toInt).mapValues(_.toInt).reverse.toMap\n\
    \        val gradesSortedByGradeMapReversedMap9 = gradesSortedByGrade.groupBy(x\
    \ => x.toInt).mapValues(_.toInt).reverse.toMap\n        val gradesSortedByGradeMapReversedMap10\
    \ = gradesSortedByGrade.groupBy(x => x.toInt).mapValues(_.toInt).reverse.toMap\n\
    \        val gradesSortedByGradeMapReversedMap11 = gradesSortedByGrade.groupBy(x\
    \ => x.toInt).mapValues(_.toInt).reverse.to\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdink1h3b.scala:27:65 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).toMap\n\e[31m\e[31m   |\e[0m       \
    \                                                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue toInt is not a member of List[Float], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpdink1h3b.scala:29:91 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGradeMap\e[0m =\
    \ gradesSortedByGrade.groupBy(\e[36mx\e[0m => x.toInt).mapValues(_.toInt).toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is\
    \ not a member of List[Float], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpdink1h3b.scala:30:99 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGradeMapReversed\e\
    [0m = gradesSortedByGrade.groupBy(\e[36mx\e[0m => x.toInt).mapValues(_.toInt).reverse.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                         ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt\
    \ is not a member of List[Float], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyAndValue = gradesSortedByKey.sortBy(_._1).sortBy(_._2)\n\
    \        val gradesSortedByKeyAndValueReversed = gradesSortedByKeyAndValue.sortBy(_._2).sortBy(_._1)\n\
    \        val gradesSortedByKeyAndValueReversedReversed = gradesSortedByKeyAndValueReversed.sortBy(_._1).sortBy(_._2)\n\
    \        val gradesSortedByKeyAndValueReversedReversedReversed = gradesSortedByKeyAndValueReversedReversed.sortBy(_._2).sortBy(_._1)\n\
    \        val gradesSortedByKeyAndValueReversedReversedReversedReversed = gradesSortedByKeyAndValueReversedReversedReversed.sortBy(_._2).sortBy(_._1)\n\
    \        val gradesSortedByKeyAndValueReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyAndValueReversedReversedReversedReversed.sortBy(_._2).sortBy(_._1)\n\
    \        val gradesSortedByKeyAndValueReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyAndValueReversedReversedReversedReversed.sortBy(_._2).sortBy(_._1)\n\
    \        val gradesSortedByKeyAndValueReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyAndValueReversedReversedReversedReversedReversed.sortBy(_._2).sortBy(_._1)\n\
    \        val gradesSortedByKeyAndValueReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyAndValueReversedReversedReversedReversedReversedReversed.sortBy(_._2).sortBy(_._1)\n\
    \        val gradesSortedByKeyAndValueReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyAndValueReversedReversedReversedReversedReversedReversed.sortBy(_._2).sortBy(_._1)\n\
    \        val gradesSortedByKeyAndValueReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyAndValueReversedReversedReversedReversedReversedReversedReversed.sortBy(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp694dhmqk.scala:40:201 --------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyAndValueReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyAndValueReversedReversedReversedReversedReversedReversedReversed.sortBy(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp694dhmqk.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByKeyAndValueReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyAndValueReversedReversedReversedReversedReversedReversed.sortBy(_._2).sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyAndValueReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyAndValueReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmp694dhmqk.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                       "
  stdout: ''
  timestamp: 1659805101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedWithIndex = gradesKeys.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndex = gradesValues.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGrade = gradesKeysSortedWithIndex.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndexAndGrade = gradesValuesSortedWithIndex.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGradeAndLetterGrade = gradesKeysSortedWithIndexAndGrade.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndexAndGradeAndLetterGrade = gradesValuesSortedWithIndexAndGrade.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGradeAndLetterGradeAndLetterGrade\
    \ = gradesKeysSortedWithIndexAndGradeAndLetterGrade.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndexAndGradeAndLetterGradeAndLetterGrade\
    \ = gradesValuesSortedWithIndexAndGradeAndLetterGrade.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGradeAndLetterGradeAndLetterGradeAndLetterGrade\
    \ = gradesKeysSortedWithIndexAndGradeAndLetterGradeAndLetterGrade.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndexAndGradeAndLetterGradeAndLetterGradeAndLetterGrade\
    \ = gradesValuesSortedWithIndexAndGradeAndLetterGradeAndLetterGrade.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGradeAndLetterGradeAndLetterGradeAndLetterGradeAndLetterGrade\
    \ = gradesKeysSortedWithIndexAndGradeAndLetterGrade\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0ceukw2g.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ceukw2g.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).toMap\n\
    \        val gradesMapReversed = gradesMap.map(x => (x._2, x._1)).toMap\n    \
    \    val gradesMapReversedReversed = gradesMapReversed.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReversedReversedReversed = gradesMapReversedReversed.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversed.map(x => (x._1, x._2)).toMap\n        val\
    \ gradesMapReversedReversedReversedReversedReversed = gradesMapReversedReversedReversedReversed.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversed.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversed.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversed.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversed.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversed.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversed.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuj32g4pb.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesMapReversedReversedReversedReversedReversedReversed.map(\e[36mx\e\
    [0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapReversedReversedReversedReversedReversedReversedReversed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuj32g4pb.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesMapReversedReversedReversedReversedReversedReversedReversedReversed.map(\e\
    [36mx\e[0m => (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpuj32g4pb.scala:27:65 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).toMap\n\e[31m\e[31m   |\e[0m       \
    \                                                        ^^^^^^^\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4to1xj3m.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4to1xj3m.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4to1xj3m.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4to1xj3m.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4t"
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keySet\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSorted = gradesKeys.sortWith((a, b) => a.compareTo(b))\n\
    \        val gradesValuesSorted = gradesValues.sortWith((a, b) => a.compareTo(b))\n\
    \        val gradesKeysSortedWithDuplicates = gradesKeys.sortWith((a, b) => a.compareTo(b)\
    \ == 0)\n        val gradesValuesSortedWithDuplicates = gradesValues.sortWith((a,\
    \ b) => a.compareTo(b) == 0)\n        val gradesKeysSortedWithDuplicatesAndDuplicates\
    \ = gradesKeys.sortWith((a, b) => a.compareTo(b) == 0 && b.compareTo(a) == 0)\n\
    \        val gradesValuesSortedWithDuplicatesAndDuplicates = gradesValues.sortWith((a,\
    \ b) => a.compareTo(b) == 0 && b.compareTo(a) == 0)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicates\
    \ = gradesKeys.sortWith((a, b) => a.compareTo(b) == 0 && b.compareTo(a) == 0 &&\
    \ a.compareTo(b) == 0)\n        val gradesValuesSortedWithDuplicatesAndDuplicatesAndDuplicates\
    \ = gradesValues.sortWith((a, b) => a.compareTo(b) == 0 && b.compareTo(a) == 0\
    \ && a.compareTo(b) == 0)\n        val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\
    \ = gradesKeys.sortWith((a, b) => a.compareTo(b) == 0 && b.compareTo(a) == 0 &&\
    \ a.compareTo(b) == 0 && b.compareTo(a) == 0)\n        val gradesValuesSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\
    \ = gradesValues.sortWith((a, b) => a.compareTo(b) == 0 && b.compareTo(a) == 0\
    \ && a.compareTo(b) == 0 && b.compareTo(a) == 0 && b.compareTo(a) == 0)\n    \
    \    val gradesKeysSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\
    \ = gradesKeys.sortWith((a, b) => a.compareTo(b) == 0 && b.compareTo(a) == 0 &&\
    \ a.compareTo(b) == 0 && b.compareTo(a) == 0 && b.compareTo(a) == 0 && b.compareTo(a)\
    \ == 0)\n        val gradesValuesSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\
    \ = gradesValues.sortWith((a, b) => a.compareTo(b) == 0 && b.compareTo(a) == 0\
    \ && a.compareTo(b) == 0 && b.compareTo(a) == 0 && b.compareTo(a) == 0 && b.compareTo(a)\
    \ == \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfzt0qix8.scala:41:263 --------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedWithDuplicatesAndDuplicatesAndDuplicatesAndDuplicatesAndDuplicates\e\
    [0m = gradesValues.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a.compareTo(b) ==\
    \ \e[31m0\e[0m && b.compareTo(a) == \e[31m0\e[0m && a.compareTo(b) == \e[31m0\e\
    [0m && b.compareTo(a) == \e[31m0\e[0m && b.compareTo(a) == \e[31m0\e[0m && b.compareTo(a)\
    \ == \n\e[31m\e[31m   |\e[0m                                                 \
    \                                                                            \
    \                                                                            \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfzt0qix8.scala:30:42\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesKeysSorted\e[0m = gradesKeys.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) =>\
    \ a.compareTo(b))\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value sortWith is not a member\
    \ of Set[Int]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfzt0qix8.scala:31:76\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSorted\e\
    [0m = gradesValues.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a.compareTo(b))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \                      Found:    Int\n\e[31m   |\e[0m                        \
    \                               Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpfzt0qix8.scala:32:56 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysS"
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x\
    \ => (x.toFloat, x.toString.toUpperCase)).toMap\n        val gradesList : List[(Float,\
    \ String)] = gradesMap.keys.toList.sortWith(_ < _).zipWithIndex.map(x => (x, gradesMap(x)))\n\
    \        val gradesMapList : List[(Float, List[String])] = gradesList.map(x =>\
    \ (x._1, x._2.toList))\n        val gradesMapListSorted : List[(Float, List[String])]\
    \ = gradesMapList.sortWith(_._1 < _._1)\n        val gradesMapListSortedWithIndex\
    \ : List[(Float, List[String])] = gradesMapListSorted.map(x => (x._1, x._2.zipWithIndex.map(x\
    \ => x._2).sortWith(_ < _).map(x => x._1)))\n        val gradesMapListSortedWithIndexAndIndex\
    \ : List[(Float, List[String], Int)] = gradesMapListSortedWithIndex.map(x => (x._1,\
    \ x._2.zipWithIndex.map(x => x._2).sortWith(_ < _).map(x => x._1), x._2))\n  \
    \      val gradesMapListSortedWithIndexAndIndexAndIndex : List[(Float, List[String],\
    \ Int, Int)] = gradesMapListSortedWithIndexAndIndex.map(x => (x._1, x._2.zipWithIndex.map(x\
    \ => x._2).sortWith(_ < _).map(x => x._1), x._2, x._3))\n        val gradesMapListSortedWithIndexAndIndexAndIndexAndIndex\
    \ : List[(Float, List[String], Int, Int, Int)] = gradesMapListSortedWithIndexAndIndexAndIndex.map(x\
    \ => (x._1, x._2.zipWithIndex.map(x => x._2).sortWith(_ < _).map(x => x._1), x._2,\
    \ x._3, x._4))\n        val gradesMapListSortedWithIndexAndIndexAndIndexAndIndexAndIndex\
    \ : List[(Float, List[String], Int, Int, Int, Int)] = gradesMapListSortedWithIndexAndIndexAndIndexAndIndex.map(x\
    \ => (x._1, x._2.zipWithIndex.map(x => x._2).sortWith(_ < _).map(x => x._1), x._2,\
    \ x._3, x._4, x._5))\n        val gradesMapListSortedWithIndexAndIndexAndIndexAndIndexAndIndexAndIndex\
    \ : List[(\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw11jq_yx.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpw11jq_yx.scala:27:45 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m : \e[35mMap\e[0m[\e[35mFloat\e\
    [0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x.toFloat, x.toString.toUpperCase)).toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw11jq_yx.scala:28:110 -------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesList\e[0m : \e[35mList\e\
    [0m[(\e[35mFloat\e[0m, \e[35mString\e[0m)] = gradesMap.keys.toList.sortWith(_\
    \ < _).zipWithIndex.map(\e[36mx\e[0m => (x, gradesMap(x)))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \        Found:    (x : (Float @uncheckedVariance, Int))\n\e[31m   |\e[0m    \
    \                     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpw11jq_yx.scala:28:123 -------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesList\e[0m : \e[35mList\e\
    [0m[(\e[35mFloat\e[0m, \e[35mString\e[0m)] = gradesMap.keys.toList.sortWith(_\
    \ < _).zipWithIndex.map(\e[36mx\e[0m => (x, gradesMap(x)))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                     Found:    (x : (Float @"
  stdout: ''
  timestamp: 1659805105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toList.sortBy(_.toFloat)).mapValues(_.map(_\
    \ + \"\").reverse).mapValues(_.map(_ + \"\").reverse)\n        val gradesMap2\
    \ = gradesMap.mapValues(_.toList)\n        val gradesMap3 = gradesMap2.mapValues(_.toList)\n\
    \        val gradesMap4 = gradesMap3.mapValues(_.toList)\n        val gradesMap5\
    \ = gradesMap4.mapValues(_.toList)\n        val gradesMap6 = gradesMap5.mapValues(_.toList)\n\
    \        val gradesMap7 = gradesMap6.mapValues(_.toList)\n        val gradesMap8\
    \ = gradesMap7.mapValues(_.toList)\n        val gradesMap9 = gradesMap8.mapValues(_.toList)\n\
    \        val gradesMap10 = gradesMap9.mapValues(_.toList)\n        val gradesMap11\
    \ = gradesMap10.mapValues(_.toList)\n        val gradesMap12 = gradesMap11.mapValues(_.toList)\n\
    \        val gradesMap13 = gradesMap12.mapValues(_.toList)\n        val gradesMap14\
    \ = gradesMap13.mapValues(_.toList)\n        val gradesMap15 = gradesMap14.mapValues(_.toList)\n\
    \        val gradesMap16 = gradesMap15.mapValues(_.toList)\n        val gradesMap17\
    \ = gradesMap16.mapValues(_.toList)\n        val gradesMap18 = gradesMap17.mapValues(_.toList)\n\
    \        val gradesMap19 = gradesMap18.mapValues(_.toList)\n        val gradesMap20\
    \ = gradesMap19.mapValues(_.toList)\n        val gradesMap21 = gradesMap20.mapValues(_.toList)\n\
    \        val gradesMap22 = gradesMap21.mapValues(_.toList)\n        val gradesMap23\
    \ = gradesMap22.mapValues(_.toList)\n        val gradesMap24 = gradesMap23.mapValues(_.toList)\n\
    \        val gradesMap25 = gradesMap24.mapValues(_.toList)\n        val gradesMap26\
    \ = gradesMap25.mapValues(_.toList)\n        val gradesMap27 = gradesMap26.mapValues(_.toList)\n\
    \        val gradesMap28 = gradesMap27.mapValues(_.toList)\n        val gradesMap29\
    \ = gradesMap28.mapValues(_.toList)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqjqcgs9d.scala:57:5\
    \ ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(_ * -1)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(_ * -1)\n        val gradesKeysSortedWithValues = gradesKeysSorted.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedWithValuesReversed = gradesKeysSortedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValues = gradesKeysSortedWithValuesReversed.map(x\
    \ => x._1 -> x._2)\n        val gradesKeysSortedWithValuesReversedWithValuesReversed\
    \ = gradesKeysSortedWithValuesReversedWithValues.reverse\n        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValues\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversed.map(x => x._1 -> x._2)\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversed\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValues.reverse\n \
    \       val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversed.map(x\
    \ => x._1 -> x._2)\n        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversed\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversed.map(x\
    \ => x._1 -> x._2)\n        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversed\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3es2mz5g.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3es2mz5g.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keySet\n        val gradesValues = gradesMap.values.toList\n   \
    \     val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedWithIndex = gradesKeys.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndex = gradesValues.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGrade = gradesKeysSortedWithIndex.zipWithIndex.sortWith(_._2\
    \ < _._2)\n        val gradesValuesSortedWithIndexAndGrade = gradesValuesSortedWithIndex.zipWithIndex.sortWith(_._2\
    \ < _._2)\n        val gradesKeysSortedWithIndexAndGradeAndLetter = gradesKeysSortedWithIndexAndGrade.zipWithIndex.sortWith(_._3\
    \ < _._3)\n        val gradesValuesSortedWithIndexAndGradeAndLetter = gradesValuesSortedWithIndexAndGrade.zipWithIndex.sortWith(_._3\
    \ < _._3)\n        val gradesKeysSortedWithIndexAndGradeAndLetterAndLetterGrade\
    \ = gradesKeysSortedWithIndexAndGradeAndLetter.zipWithIndex.sortWith(_._4 < _._4)\n\
    \        val gradesValuesSortedWithIndexAndGradeAndLetterAndLetterGrade = gradesValuesSortedWithIndexAndGradeAndLetter.zipWithIndex.sortWith(_._4\
    \ < _._4)\n        val gradesKeysSortedWithIndexAndGradeAndLetterAndLetterGradeAndLetter\
    \ = gradesKeysSortedWithIndexAndGradeAndLetterAndLetterGrade.zipWithIndex.sortWith(_._5\
    \ < _._5)\n        val gradesValuesSortedWithIndexAndGradeAndLetterAndLetterGradeAndLetter\
    \ = gradesValuesSortedWithIndexAndGradeAndLetterAndLetterGrade.zipWithIndex.sortWith(_._5\
    \ < _._5)\n        val gradesKeysSortedWithIndexAndGradeAndLetterAndLetterGradeAndLetterAndLetterGrade\
    \ = gradesKeysSortedWithIndexAndGradeAndLetterAndLetterGradeAndLetterGrade.zipWithIndex.sortWith(_._6\
    \ < _._6)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpayi2p94j.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpayi2p94j.scala:42:94 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedWithIndexAndGradeAndLetterAndLetterGradeAndLetterAndLetterGrade\e\
    [0m = gradesKeysSortedWithIndexAndGradeAndLetterAndLetterGradeAndLetterGrade.zipWithIndex.sortWith(_._6\
    \ < _._6)\n\e[31m\e[31m   |\e[0m                                             \
    \                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: gradesKeysSortedWithIndexAndGradeAndLetterAndLetterGradeAndLetterGrade\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpayi2p94j.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesIterReverse\
    \ = grades.reverseIterator\n        val gradesIterReversed = grades.reverseIterator.toList\n\
    \        val gradesIterReversed2 = grades.reverseIterator.toArray\n        val\
    \ gradesIterReversed3 = grades.reverseIterator.toSet\n        val gradesIterReversed4\
    \ = grades.reverseIterator.toSeq\n        val gradesIterReversed5 = grades.reverseIterator.toIterator\n\
    \        val gradesIterReversed6 = grades.reverseIterator.toStream\n        val\
    \ gradesIterReversed7 = grades.reverseIterator.toBuffer\n        val gradesIterReversed8\
    \ = grades.reverseIterator.toListBuffer\n        val gradesIterReversed9 = grades.reverseIterator.toArrayBuffer\n\
    \        val gradesIterReversed10 = grades.reverseIterator.toLazyList\n      \
    \  val gradesIterReversed11 = grades.reverseIterator.toListBuffer\n        val\
    \ gradesIterReversed12 = grades.reverseIterator.toBuffer\n        val gradesIterReversed13\
    \ = grades.reverseIterator.toList\n        val gradesIterReversed14 = grades.reverseIterator.toArray\n\
    \        val gradesIterReversed15 = grades.reverseIterator.toSet\n        val\
    \ gradesIterReversed16 = grades.reverseIterator.toSeq\n        val gradesIterReversed17\
    \ = grades.reverseIterator.toStream\n        val gradesIterReversed18 = grades.reverseIterator.toBuffer\n\
    \        val gradesIterReversed19 = grades.reverseIterator.toListBuffer\n    \
    \    val gradesIterReversed20 = grades.reverseIterator.toArrayBuffer\n       \
    \ val gradesIterReversed21 = grades.reverseIterator.toLazyList\n        val gradesIterReversed22\
    \ = grades.reverseIterator.toListBuffer\n        val gradesIterReversed23 = grades.reverseIterator.toBuffer\n\
    \        val gradesIterReversed24 = grades.reverseIterator.toList\n        val\
    \ gradesIterReversed25 = grades.reverseIterator.toArray\n        val gradesIterReversed26\
    \ = grades.reverseIterator.toSet\n        val gradesIterReversed27 = grades.reverseIterator.toSeq\n\
    \        val gradesIterReversed28 = grades.reverseIterator.toStream\n        val\
    \ gradesIterReverse\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgba4od30.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpgba4od30.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpgba4od30.scala:40:57 ------------------------\e[0m\e[0m\n\
    \e[31m40 |\e[0m        \e[33mval\e[0m \e[36mgradesIterReversed8\e[0m = grades.reverseIterator.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value toListBuffer is not a member of Iterator[Float]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgba4od30.scala:41:57 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mgradesIterReversed9\e[0m\
    \ = grades.reverseIterator.toArrayBuffer\n\e[31m\e[31m   |\e[0m              \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  value toArrayBuffer is not a member of Iterator[Float]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpgba4od30.scala:42:58 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesIterReversed10\e[0m\
    \ = grades.reverseIterator.toLazyList\n\e[31m\e[31m   |\e[0m                 \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                  value toLazyList is not a member of Iterator[Float]\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpgba4od30.scala:43:58 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mgradesIterReversed11\e[0m\
    \ = grades.reverseIterator"
  stdout: ''
  timestamp: 1659805105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMap2 = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMap3 = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMap4 = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMap5 = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMap6 = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMap7 = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMap8 = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMap9 = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMap10 = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMap11 = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMap12 = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMap13 = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMap14 = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMap15 = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMap16 = grades.map(x => x.toString.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu6c9_3sy.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpu6c9_3sy.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keySet\n        val gradesValues = gradesMap.values.toList\n   \
    \     val gradesKeysSorted = gradesKeys.sortBy(_)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(_)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp30np8o1f.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp30np8o1f.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e[0m = gradesKeysSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp30np8o1f.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp30np8o1f.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp30np8o1f.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgrad"
  stdout: ''
  timestamp: 1659805105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => if(grade > 3.0) \"B+\" else\
    \ if (grade > 2.7) \"B\" else if (grade > 2.3) \"B-\" else if (grade > 2.0) \"\
    C+\" else if (grade > 1.7) \"C\" else if (grade > 1.3) \"C-\" else if (grade >\
    \ 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade > 0.0) \"D-\" else \"\
    E\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxp6pycdp.scala:30)\n\tat Problem.main(tmpxp6pycdp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValue\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesLength\e\
    [0m = gradesMapSortedReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouznerwd.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    ["
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesDiff = gradesSum\
    \ - gradesMap.size\n        val gradesDiffMap = gradesDiff.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesDiffKeys = gradesDiffMap.keys\n        val gradesDiffValues\
    \ = gradesDiffMap.values.toList\n        val gradesDiffSum = gradesDiffValues.sum\n\
    \        val gradesDiffSumMap = gradesDiffSum.map(x => (x.toInt, x)).toMap\n \
    \       val gradesDiffSumKeys = gradesDiffSumMap.keys\n        val gradesDiffSumValues\
    \ = gradesDiffSumMap.values.toList\n        val gradesDiffSumSum = gradesDiffSumValues.sum\n\
    \        val gradesDiffSumSumMap = gradesDiffSumSum.map(x => (x.toInt, x)).toMap\n\
    \        val gradesDiffSumSumKeys = gradesDiffSumSumMap.keys\n        val gradesDiffSumSumValues\
    \ = gradesDiffSumSumMap.values.toList\n        val gradesDiffSumSumSum = gradesDiffSumSumValues.sum\n\
    \        val gradesDiffSumSumSumMap = gradesDiffSumSumSum.map(x => (x.toInt, x)).toMap\n\
    \        val gradesDiffSumSumSumKeys = gradesDiffSumSumSumMap.keys\n        val\
    \ gradesDiffSumSumSumValues = gradesDiffSumSumSumMap.values.toList\n        val\
    \ gradesDiffSumSumSumSum = gradesDiffSumSumSumValues.sum\n        val gradesDiffSumSumSumSumMap\
    \ = gradesDiffSumSumSumSum.map(x => (x.toInt, x)).toMap\n        val gradesDiffSumSumSumSumKeys\
    \ = gradesDiffSumSumSumSumMap.keys\n        val gradesDiffSumSumSumSumValues =\
    \ gradesDiffSumSumSumSumMap.values.toList\n        val gradesDiffSumSumSumSumSum\
    \ = gradesDiffSumSumSumSumValues.sum\n        val gradesDiffSumSumSumSumSumMap\
    \ = gradesDiffSumSumSumSumSum.map(x => (x.toInt, x)).toMap\n        val gradesDiffSumSumSumSumSumKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyjqoz9na.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyjqoz9na.scala:32:39\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesDiffMap\e[0m = gradesDiff.map(\e[36mx\e[0m => (x.toInt, x)).toMap\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            value map is not a member of Float\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpyjqoz9na.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = grades.map(x => x.toInt).toSet\n        val gradesValues\
    \ = grades.map(x => x.toFloat).toSet\n        val gradesKeysSet = gradesKeys.toSet\n\
    \        val gradesValuesSet = gradesValues.toSet\n        val gradesKeysSetSize\
    \ = gradesKeysSet.size\n        val gradesValuesSetSize = gradesValuesSet.size\n\
    \        val gradesKeysSetIntersection = gradesKeysSet.intersect(gradesKeysSet)\n\
    \        val gradesValuesSetIntersection = gradesValuesSet.intersect(gradesValuesSet)\n\
    \        val gradesKeysSetDifference = gradesKeysSet.diff(gradesKeysSetIntersection)\n\
    \        val gradesValuesSetDifference = gradesValuesSet.diff(gradesValuesSetIntersection)\n\
    \        val gradesKeysSetUnion = gradesKeysSet.union(gradesKeysSetIntersection)\n\
    \        val gradesValuesSetUnion = gradesValuesSet.union(gradesValuesSetIntersection)\n\
    \        val gradesKeysSetDifferenceSize = gradesKeysSetDifference.size\n    \
    \    val gradesValuesSetDifferenceSize = gradesValuesSetDifference.size\n    \
    \    val gradesKeysSetUnionSize = gradesKeysSetUnion.size\n        val gradesValuesSetUnionSize\
    \ = gradesValuesSetUnion.size\n        val gradesKeysSetDifferenceIntersectionSize\
    \ = gradesKeysSetDifference.intersect(gradesKeysSet).size\n        val gradesValuesSetDifferenceIntersectionSize\
    \ = gradesValuesSetDifference.intersect(gradesValuesSet).size\n        val gradesKeysSetDifferenceUnionSize\
    \ = gradesKeysSetDifference.union(gradesKeysSetIntersection).size\n        val\
    \ gradesValuesSetDifferenceUnionSize = gradesValuesSetDifference.union(gradesValuesSetIntersection).size\n\
    \        val gradesKeysSetDifferenceIntersectionUnionSize = gradesKeysSetDifference.intersect(gradesKeysSetUnion).size\n\
    \        val gradesValuesSetDifferenceIntersectionUnionSize = gradesValuesSetDifference.intersect(gradesValuesSetUnion).size\n\
    \        val gradesKeysSetDifferenceUnionIntersectionSize = gradesKeysSetDifference.union(gradesKeysSetIntersection).intersect(gradesKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt2e1phl1.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt2e1phl1.scala:50:126\
    \ -----------------------\e[0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesKeysSetDifferenceUnionIntersectionSize\e[0m = gradesKeysSetDifference.union(gradesKeysSetIntersection).intersect(gradesKey\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                      ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                    Not found:\
    \ gradesKey\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt2e1phl1.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805105
