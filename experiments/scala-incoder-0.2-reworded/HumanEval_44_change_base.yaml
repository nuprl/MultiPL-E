name: HumanEval_44_change_base
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Change numerical base of input number x to base.\n    // return string representation\
  \ after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBase((8l),\
  \ (3l))\n    // (\"22\")\n    // >>> changeBase((8l), (2l))\n    // (\"1000\")\n\
  \    // >>> changeBase((7l), (2l))\n    // (\"111\")\n    def changeBase(x : Long,\
  \ base : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
  \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n\
  \    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
  \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
  )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
  \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
  \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
  \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
  \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
completions: ["        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head + digits.tail.mkString(\"\
    \")\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString\n        result + (if (digits.size == base.toInt)\
    \ \"\" else s\"0\" * (base - digits.size))", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base.toInt)\
    \ \"\" else \"0\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = digits.reverse\n        val length = result.length\n   \
    \     val zeros = length - (result.length - base)\n        val zeroChar = if (zeros\
    \ == 0) \"0\" else \"\"\n        val result = zeroChar + result + zeroChar\n \
    \       result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10l) \"10\" else (base.toString + \"\")\n        result + baseString", " \
    \       val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = base.toString.reverse\n\
    \        val result = baseString.takeWhile(x => x != 0).mkString(\"\")\n     \
    \   result + result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ < 10) \"0\" + base.toString\n        else base.toString\n        result + baseString",
  "        val str = x.toString.reverse\n        val baseStr = str.toCharArray.takeWhile(c\
    \ => c != '0').mkString\n        val newBase = base.toCharArray.takeWhile(c =>\
    \ c != '0').mkString\n        val newStr = str.dropWhile(c => c != '0').mkString\n\
    \        val newBaseStr = newBase + newStr\n        val newBaseStrLen = newBaseStr.length\n\
    \        val newBaseStrLen2 = newBaseStrLen / 2\n        val newBaseStrLen3 =\
    \ newBaseStrLen / 3\n        val newBaseStrLen4 = newBaseStrLen / 4\n        val\
    \ newBaseStrLen5 = newBaseStrLen / 5\n        val newBaseStrLen6 = newBaseStrLen\
    \ / 6\n        val newBaseStrLen7 = newBaseStrLen / 7\n        val newBaseStrLen8\
    \ = newBaseStrLen / 8\n        val newBaseStrLen9 = newBaseStrLen / 9\n      \
    \  val newBaseStrLen10 = newBaseStrLen / 10\n        val newBaseStrLen11 = newBaseStrLen\
    \ / 11\n        val newBaseStrLen12 = newBaseStrLen / 12\n        val newBaseStrLen13\
    \ = newBaseStrLen / 13\n        val newBaseStrLen14 = newBaseStrLen / 14\n   \
    \     val newBaseStrLen15 = newBaseStrLen / 15\n        val newBaseStrLen16 =\
    \ newBaseStrLen / 16\n        val newBaseStrLen17 = newBaseStrLen / 17\n     \
    \   val newBaseStrLen18 = newBaseStrLen / 18\n        val newBaseStrLen19 = newBaseStrLen\
    \ / 19\n        val newBaseStrLen20 = newBaseStrLen / 20\n        val newBaseStrLen21\
    \ = newBaseStrLen / 21\n        val newBaseStrLen22 = newBaseStrLen / 22\n   \
    \     val newBaseStrLen23 = newBaseStrLen / 23\n        val newBaseStrLen24 =\
    \ newBaseStrLen / 24\n        val newBaseStrLen25 = newBaseStrLen / 25\n     \
    \   val newBaseStrLen26 = newBaseStrLen / 26\n        val newBaseStrLen27 = newBaseStrLen\
    \ / 27\n        val newBaseStrLen28 = newBaseStrLen / 28\n        val newBaseStrLen29\
    \ = newBaseStrLen / 29\n        val newBaseStrLen30 = newBaseStrLen / 30\n   \
    \     val newBaseStrLen31 = newBaseStrLen / 31\n        val ", "        val baseString\
    \ = base.toString\n        val x = x.toString.toLong\n        val result = x.toString\n\
    \        val baseLength = baseString.length\n        val length = result.length\n\
    \        val remainder = length % baseLength\n        val newLength = length -\
    \ remainder\n        val newResult = result.substring(0, newLength) + baseString.substring(newLength)\n\
    \        newResult", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = if (digits.isEmpty) \"\" else digits.head\n        result + digits.tail.mkString(\"\
    \")", "        val digits = x.toString.reverse\n        val digitArray = digits.toCharArray\n\
    \        val baseDigits = base.toString.reverse\n        val baseDigitArray =\
    \ baseDigits.toCharArray\n        var result = \"\"\n        var i = 0\n     \
    \   while (i < digitArray.length) {\n            val digit = digitArray(i)\n \
    \           val baseDigit = baseDigitArray(i)\n            if (digit == baseDigit)\
    \ {\n                result += digit\n            } else {\n                result\
    \ += digit + baseDigit\n            }\n            i += 1\n        }\n       \
    \ result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base.toInt)\
    \ \"\" else base.toString.toInt)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = digits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newBase = base.toString.reverse.grouped(digits.length).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigits.reverse.grouped(newBase.length).map(_.toString.reverse).mkString\n\
    \        val newBaseDigit = newBase.reverse.grouped(digits.length).map(_.toString.reverse).mkString\n\
    \        val newBaseDigits = newBaseDigit.reverse.grouped(digits.length).map(_.toString.reverse).mkString\n\
    \        val newBaseDigit = newBaseDigits.reverse.grouped(newBase.length).map(_.toString.reverse).mkString\n\
    \        val newBaseDigits = newBaseDigit.reverse.grouped(newBase.length).map(_.toString.reverse).mkString\n\
    \        val newBaseDigit = newBaseDigits.reverse.grouped(newBase.length).map(_.toString.reverse).mkString\n\
    \        val newBaseDigits = newBaseDigit.reverse.grouped(newBase.length).map(_.toString.reverse).mkString\n\
    \        val newBaseDigit = newBaseDigits.reverse.grouped(newBase.length).map(_.toString.reverse).mkString\n\
    \        val newBaseDigits = newBaseDigit.reverse.grouped(newBase.length).map(_.toString.reverse).mkString\n\
    \        val newBaseDigit = newBaseDigits.reverse.grouped(newBase.length).map(_.toString.reverse).mkString\n\
    \        val newBaseDigits = newBaseDigit.reverse.grouped(newBase.length).map(_.toString.reverse).mkString\n\
    \        val newBaseDigit = newBaseDigits.reverse.grouped(newBase.length).map(_.toString.reverse).mkString\n\
    \        val newBaseDigits = newBaseDigit.reverse.grouped(newBase.length).map(_.toString.reverse).mkString\n\
    \        val newBaseDigit = newBaseDigits.reverse.grouped(newBase.length).map(_.toString.reverse).mkString\n\
    \        val newBaseDigits = newBaseDigit.reverse.grouped(newBase.length).map(_.toString.reverse).mkString\n\
    \        val newBaseDigit = newBaseDigits.reverse.grouped(newBase.length).map(_.toString.reverse).mkString\n\
    \        val newBaseDigits = newBaseDigit.reverse.grou", "        val digits =\
    \ x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n  \
    \      val baseDigits = digits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = baseDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newBaseDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newBase = newBaseDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newBaseString = newBase.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        newBaseString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ < 10) \"0\" + base.toString else base.toString\n        result", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = digits.mkString(\"\")\n        val baseString = base.pow(digits.length)\n\
    \        val newBase = baseString.toString.reverse.grouped(digits.length).map(_.mkString).reverse\n\
    \        val newResult = newBase.mkString(\"\")\n        result + newResult",
  "        val digits = x.toString.reverse.grouped(base.toInt)\n        val result\
    \ = new StringBuilder\n        digits.foreach(x => result.append(x.reverse))\n\
    \        result.toString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base.toInt)\
    \ \"\" else base.toString.toLong)", "        var result : String = \"\"\n    \
    \    var remainder : Long = 0\n        var quotient : Long = 0\n        var remainder2\
    \ : Long = 0\n        var quotient2 : Long = 0\n        var remainder3 : Long\
    \ = 0\n        var quotient3 : Long = 0\n        var remainder4 : Long = 0\n \
    \       var quotient4 : Long = 0\n        var remainder5 : Long = 0\n        var\
    \ quotient5 : Long = 0\n        var remainder6 : Long = 0\n        var quotient6\
    \ : Long = 0\n        var remainder7 : Long = 0\n        var quotient7 : Long\
    \ = 0\n        var remainder8 : Long = 0\n        var quotient8 : Long = 0\n \
    \       var remainder9 : Long = 0\n        var quotient9 : Long = 0\n        var\
    \ remainder10 : Long = 0\n        var quotient10 : Long = 0\n        var remainder11\
    \ : Long = 0\n        var quotient11 : Long = 0\n        var remainder12 : Long\
    \ = 0\n        var quotient12 : Long = 0\n        var remainder13 : Long = 0\n\
    \        var quotient13 : Long = 0\n        var remainder14 : Long = 0\n     \
    \   var quotient14 : Long = 0\n        var remainder15 : Long = 0\n        var\
    \ quotient15 : Long = 0\n        var remainder16 : Long = 0\n        var quotient16\
    \ : Long = 0\n        var remainder17 : Long = 0\n        var quotient17 : Long\
    \ = 0\n        var remainder18 : Long = 0\n        var quotient18 : Long = 0\n\
    \        var remainder19 : Long = 0\n        var quotient19 : Long = 0\n     \
    \   var remainder20 : Long = 0\n        var quotient20 : Long = 0\n        var\
    \ remainder21 : Long = 0\n        var quotient21 : Long = 0\n        var remainder22\
    \ : Long = 0\n        var quotient22 : Long = 0\n        var remainder23 : Long\
    \ = 0\n        var quotient23 : Long = 0\n        var remainder24 : Long = 0\n\
    \        var quotient24 : Long = 0\n        var remainder25 : Long = 0\n     \
    \   var quotient25 : Long = 0\n        var remainder26 : Long = 0\n        var\
    \ quotient26 : Long = 0\n        var remainder27 : Long = 0\n        var quotient27\
    \ : Long = 0\n        var remainder28 : Long = 0\n        var quotient28 : Long\
    \ = 0\n        var remainder29 : Long = 0\n        var quotient29 : Long = 0\n\
    \        var remainder30 : Long = 0\n        var quotient30 : Long = 0\n     \
    \   var remainder31 : Long = 0\n        var quotient31 : Long = 0\n        var\
    \ remainder32 : Long = 0\n        var quotient32 : Long = 0\n        var ", " \
    \       val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits match {\n            case Nil => \"\"\n         \
    \   case head :: tail => head.mkString(base.toChar) + changeBase(tail, base.toInt)\n\
    \        }\n        result", "        val baseString = Integer.toString(base)\n\
    \        val xString = Integer.toString(x)\n        val baseLength = baseString.length\n\
    \        val xLength = xString.length\n        var result = \"\"\n        var\
    \ i = 0\n        while (i < xLength) {\n            val xDigit = xString.charAt(i)\n\
    \            val baseDigit = baseString.charAt(i)\n            val xDigitValue\
    \ = xDigit - '0'\n            val baseDigitValue = baseDigit - '0'\n         \
    \   val xDigitBaseValue = xDigitValue * base\n            val baseDigitBaseValue\
    \ = baseDigitValue * base\n            val xDigitBaseString = \"0\" * (xDigitBaseValue\
    \ - xDigitValue)\n            val baseDigitBaseString = \"0\" * (baseDigitBaseValue\
    \ - baseDigitValue)\n            result += xDigitBaseString + baseDigitBaseString\n\
    \            i += 1\n        }\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) \"\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.mkString(\"\")\n  \
    \      result + (if (digits.size == base) \"\" else digits(base))", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = digits.mkString(\"\")\n        result + (if (digits.size ==\
    \ base.toInt) \"\" else s\"${digits.last}\")", "        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = digits.foldLeft(\"\") { (result, digit) => result + digit.mkString(\"\
    \") }\n        result.reverse", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.charAt(base.toInt - digits.size))", " \
    \       val baseDigits = base.toString.length\n        val digits = x.toString.length\n\
    \        val result = new StringBuilder(digits)\n        var remainder = x % base\n\
    \        var i = 0\n        while (i < digits) {\n            if (remainder <\
    \ base) {\n                result.append((remainder % base).toString)\n      \
    \          remainder = (remainder / base).toLong\n            } else {\n     \
    \           result.append((remainder % base).toString)\n                remainder\
    \ = (remainder / base).toLong\n            }\n            i += 1\n        }\n\
    \        result.toString()", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toInt)\n\
    \        val result = digits.foldLeft(\"\") { (acc, digit) =>\n            acc\
    \ + (digit.toString * digit)\n        }\n        result.reverse", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = digits.mkString\n        result + (if (digits.size == base.toInt)\
    \ \"\" else s\"0\" * (base - digits.size)) + digits.last", "        val bases\
    \ = List(1l, 10l, 100l, 1000l, 10000l, 100000l, 1000000l, 10000000l, 100000000l,\
    \ 1000000000l, 10000000000l, 100000000000l, 1000000000000l, 10000000000000l, 100000000000000l,\
    \ 1000000000000000l, 10000000000000000l, 100000000000000000l, 1000000000000000000l)\n\
    \        val basesStr = bases.map(x => x.toString).mkString(\",\")\n        val\
    \ basesArr = bases.map(x => x.toInt).map(x => x.toString).mkString(\",\")\n  \
    \      val basesArr = bases.map(x => x.toInt).map(x => x.toString).mkString(\"\
    ,\")\n        val basesArr = bases.map(x => x.toInt).map(x => x.toString).mkString(\"\
    ,\")\n        val basesArr = bases.map(x => x.toInt).map(x => x.toString).mkString(\"\
    ,\")\n        val basesArr = bases.map(x => x.toInt).map(x => x.toString).mkString(\"\
    ,\")\n        val basesArr = bases.map(x => x.toInt).map(x => x.toString).mkString(\"\
    ,\")\n        val basesArr = bases.map(x => x.toInt).map(x => x.toString).mkString(\"\
    ,\")\n        val basesArr = bases.map(x => x.toInt).map(x => x.toString).mkString(\"\
    ,\")\n        val basesArr = bases.map(x => x.toInt).map(x => x.toString).mkString(\"\
    ,\")\n        val basesArr = bases.map(x => x.toInt).map(x => x.toString).mkString(\"\
    ,\")\n        val basesArr = bases.map(x => x.toInt).map(x => x.toString).mkString(\"\
    ,\")\n        val basesArr = bases.map(x => x.toInt).map(x => x.toString).mkString(\"\
    ,\")\n        val basesArr = bases.map(x => x.toInt).map(x => x.toString).mkString(\"\
    ,\")\n        val basesArr = bases.map(x => x.toInt).map(x => x.toString).mkString(\"\
    ,\")\n        val basesArr = bases.map(x => x.toInt).map(x => x.toString).mkString(\"\
    ,\")\n        val basesArr = bases.map(x => x.toInt).map(x => x.toString).mkString(\"\
    ,\")\n        val basesArr = bases.map(x => x.toInt).", "        val digits =\
    \ x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits match {\n            case Nil => \"\"\n            case x =>\
    \ x.mkString(\"\")\n        }\n        result", "        val bases = List(\"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = bases.zip(digits).map { case (base, digit) => digit + base\
    \ }\n        result.mkString(\"\")", "        val baseString = Integer.toString(base)\n\
    \        val baseStringLength = baseString.length\n        val x = x.toString.toInt\n\
    \        val result = x.toString.reverse.foldLeft(\"\") { (acc, digit) =>\n  \
    \          val digitString = Integer.toString(digit)\n            val digitStringLength\
    \ = digitString.length\n            val digit = digitString.toInt\n          \
    \  val digitLength = digitString.length\n            val digitBase = digit / base\n\
    \            val digitBaseString = Integer.toString(digitBase)\n            val\
    \ digitBaseStringLength = digitBaseString.length\n            val digitBaseStringLength\
    \ = digitBaseString.length\n            val digitBase = digitBase % base\n   \
    \         val digitBaseString = digitBaseString.reverse\n            val digitBaseStringLength\
    \ = digitBaseString.length\n            val digitBaseStringLength = digitBaseString.length\n\
    \            val digitBase = digitBase % base\n            val digitBaseString\
    \ = digitBaseString.reverse\n            val digitBaseStringLength = digitBaseString.length\n\
    \            val digitBaseStringLength = digitBaseString.length\n            val\
    \ digitBase = digitBase % base\n            val digitBaseString = digitBaseString.reverse\n\
    \            val digitBaseStringLength = digitBaseString.length\n            val\
    \ digitBaseStringLength = digitBaseString.length\n            val digitBase =\
    \ digitBase % base\n            val digitBaseString = digitBaseString.reverse\n\
    \            val digitBaseStringLength = digitBaseString.length\n            val\
    \ digitBaseStringLength = digitBaseString.length\n            val digitBase =\
    \ digitBase % base\n            val digitBaseString = digitBaseString.reverse\n\
    \            val digitBaseStringLength = digitBaseString.length\n            val\
    \ digitBaseStringLength = digitBaseString.length\n            val digitBase =\
    \ digitBase % base\n            val digitBaseString = digitBaseString.reverse\n\
    \            val digitBaseStringLength = digitBaseString.length\n            val\
    \ digitBaseStringLength = digitBaseString.length\n            val digitBase =\
    \ digitBase % base\n            val digitBaseString = digitBaseString.reverse\n\
    \            val digitBaseStringLength = digitBaseString.length\n            val\
    \ digitBaseStringLength = digitBaseString.length\n            val digitBase =\
    \ digitBase % base\n            val digitBaseString = digitBaseString.reverse\n\
    \            val digitBaseStringLength = digitBaseString.length\n            val\
    \ digitBaseStringLength = digitBaseString.length\n            val digitBase =\
    \ digitBase % base\n            val digitBaseString = digitBaseString.reverse\n\
    \            val digitBaseStringLength = digitBaseString.length\n            val\
    \ digitBaseStringLength = digitBaseString.length\n            val digitBase =\
    \ digitBase % base\n            ", "        val bases = List(1l, 2l, 3l, 4l, 5l,\
    \ 6l, 7l, 8l, 9l, 10l)\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0)\n        val base = bases(base)\n        val digit\
    \ = digits(1)\n        val digits = digit.map(x => base * x)\n        result +\
    \ digits.reverse.mkString", "        val str = x.toString.reverse\n        val\
    \ baseStr = str.toCharArray.takeWhile(c => c != '0').mkString\n        val baseStrLen\
    \ = baseStr.length\n        val baseStrLenMinusOne = baseStrLen - 1\n        val\
    \ baseStrLenMinusOneMinusOne = baseStrLenMinusOne - 1\n        val baseStrLenMinusOneMinusOneMinusOne\
    \ = baseStrLenMinusOneMinusOne - 1\n        val baseStrLenMinusOneMinusOneMinusOneMinusOne\
    \ = baseStrLenMinusOneMinusOneMinusOneMinusOne - 1\n        val baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinus",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + (if (digits.tail.isEmpty) \"\" else digits.tail.mkString(\"\"))", "      \
    \  val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString\n        result + (if (digits.size == base.toInt) \"\
    \" else \"0\")", "        val str = x.toString.reverse\n        val len = str.length\n\
    \        val baseStr = base.toString.reverse\n        val baseLen = baseStr.length\n\
    \        val newBase = baseStr.substring(0, baseLen - len)\n        val newStr\
    \ = str.substring(0, len - baseLen)\n        val newStr2 = newStr + newBase\n\
    \        newStr2.reverse", "        val baseNum = x.toString.toInt\n        val\
    \ baseNumInt = baseNum.toInt\n        val baseNumString = baseNumInt.toString\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = ", "        val baseString = Integer.toString(base)\n        val baseStringLength\
    \ = baseString.length\n        val baseStringBuilder = new StringBuilder(baseStringLength)\n\
    \        var remainder = x\n        var remainderString = \"\"\n        while\
    \ (x > 0) {\n            remainderString = Integer.toString(remainder)\n     \
    \       val remainderStringLength = remainderString.length\n            val remainderStringBuilder\
    \ = new StringBuilder(remainderStringLength)\n            val remainderStringBuilderLength\
    \ = remainderStringBuilder.length\n            val remainderStringBuilderBuilder\
    \ = new StringBuilder(remainderStringBuilderLength)\n            val remainderStringBuilderBuilderLength\
    \ = remainderStringBuilderBuilder.length\n            val remainderStringBuilderBuilderBuilder\
    \ = new StringBuilder(remainderStringBuilderBuilderLength)\n            val remainderStringBuilderBuilderBuilderLength\
    \ = remainderStringBuilderBuilderBuilder.length\n            val remainderStringBuilderBuilderBuilderBuilder\
    \ = new StringBuilder(remainderStringBuilderBuilderBuilderLength)\n          \
    \  val remainderStringBuilderBuilderBuilderBuilderLength = remainderStringBuilderBuilderBuilderBuilder.length\n\
    \            val remainderStringBuilderBuilderBuilderBuilderBuilder = new StringBuilder(remainderStringBuilderBuilderBuilderLength)\n\
    \            val remainderStringBuilderBuilderBuilderBuilderBuilderLength = remainderStringBuilderBuilderBuilderBuilder.length\n\
    \            val remainderStringBuilderBuilderBuilderBuilderBuilderBuilder = new\
    \ StringBuilder(remainderStringBuilderBuilderBuilderBuilderLength)\n         \
    \   val remainderStringBuilderBuilderBuilderBuilderBuilderLength = remainderStringBuilderBuilderBuilderBuilderBuilder.length\n\
    \            val remainderStringBuilderBuilderBuilderBuilderBuilderBuilderBuilder\
    \ = new StringBuilder(remainderStringBuilderBuilderBuilderBuilderBuilderLength)\n\
    \            val remainderStringBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = remainderStringBuilderBuilderBuilderBuilderBuilder.length\n            val\
    \ remainderStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilder = new\
    \ StringBuilder(remainderStringBuilderBuilderBuilderBuilderBuilderLength)\n  \
    \          val remainderStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = remainderStringBuilderBuilderBuilderBuilderBuilderBuilder.length\n       \
    \     val remainderStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilder\
    \ = new StringBuilder(remainderStringBuilderBuilderBuilderBuilderBuilderBuilderLength)\n\
    \            val remainderStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = remainderStringBuilderBuilderBuilderBuilderBuilderBuilder.length\n       \
    \     val remainderStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilder\
    \ = new StringBuilder(remainderStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength)\n\
    \            val remainderStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = remainderStringBuilderBuilderBuilderBuilderBuilderBuilder.length\n       \
    \     val remainderStringBuilderBuilderBuilder", "        val digits = x.toString.reverse\n\
    \        val baseDigits = digits.dropWhile(_ < base).toList.reverse\n        val\
    \ result = baseDigits.takeWhile(_ < digits.length).mkString(\"\")\n        result\
    \ + digits.takeWhile(_ < digits.length).mkString(\"\")", "        val digits =\
    \ x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base.toInt)\
    \ \"\" else base.toString.reverse.grouped(base.toInt).map(_.mkString).reverse)",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.charAt(base.toInt - digits.size))", " \
    \       val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        digits.tail.foldLeft(result)\
    \ { case (acc, digit) => acc + digit }", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = base.toString.reverse\n\
    \        val result = baseString.drop(baseString.length - digits.length).reverse\n\
    \        result + result", "        var result = \"\"\n        var remainder =\
    \ x % base\n        while(x > 0) {\n            result += (remainder % base).toString\n\
    \            remainder = (remainder / base).toLong\n        }\n        result",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString", "        val bases = List(1l,\
    \ 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l)\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = bases.zip(digits).map { case (base, digit) => digit + base\
    \ }\n        result.mkString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else \"\")", '        val bases = List("10", "11", "12",
    "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25",
    "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38",
    "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51",
    "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64",
    "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77",
    "78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90",
    "91", "92", "93", "94", "95", "96", "97", "98", "99", "100", "101", "102", "103",
    "104", "105", "106", "107", "108", "109", "110", "111", "112", "113", "114", "115",
    "116", "117", "118", "119", "120", "121", "122", "123", "124", "125", "126", "127",
    "128", "129", "130", "131", "132", "133", "134", "135", "136", "137", "138", "139",
    "140", "141", "142", "143", "144", "145", "146", "147", "148", "149", "150", "151",
    "152", "153", "154", "155", "156", "157", "158", "159", "160", "161", "162", "163",
    "164", "165", "166", "167", "168", "169", "170", "171", "172", "173", "174", "175",
    "176", "177", "178", "179", "180", "181", "182", "183", "184", "185", "186", "187",
    "188", "189", "190", "191", "192", "193", "194", "195", "196", "197", "198", "199",
    "200", "201", "202", "203", "204", "205", "206", "207", "208", "209", "210", "211",
    "212", "213", "214", "215", "216", "217", "218", "219", "220", "221", "222", "223",
    "224", "225", "226", "227", "228", "229", "230", "231", "232", "233", "234", "235",
    "236", "237", "238", "239", "240", "241", "242", "243", "244", "245", "246", "247",
    "248", "249", "250", "251", "252", "253", "254", "255", "256", "257", "258", "259",
    "260", "261", "26', "        val baseString = base.toString.toCharArray\n    \
    \    val baseLength = baseString.length\n        val baseArray = Array.ofDim[Int](baseLength)\n\
    \        val baseArrayCopy = baseArray.clone()\n        val baseArrayCopyLength\
    \ = baseArrayCopy.length\n        val baseArrayCopyIndex = 0\n        val baseArrayCopyIndexLength\
    \ = (baseArrayCopyIndex + baseArrayCopyLength - 1).toInt\n        val baseArrayCopyIndexLength\
    \ = baseArrayCopyIndexLength * baseLength\n        val baseArrayCopyIndexLength\
    \ = baseArrayCopyIndexLength.toLong\n        val baseArrayCopyIndex = 0\n    \
    \    val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n        val\
    \ baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n        val baseArrayCopyIndex\
    \ = 0\n        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n\
    \        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n    \
    \    val baseArrayCopyIndex = 0\n        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n\
    \        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n    \
    \    val baseArrayCopyIndex = 0\n        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n\
    \        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n    \
    \    val baseArrayCopyIndex = 0\n        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n\
    \        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n    \
    \    val baseArrayCopyIndex = 0\n        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n\
    \        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n    \
    \    val baseArrayCopyIndex = 0\n        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n\
    \        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n    \
    \    val baseArrayCopyIndex = 0\n        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n\
    \        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n    \
    \    val baseArrayCopyIndex = 0\n        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n\
    \        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n    \
    \    val baseArrayCopyIndex = 0\n        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n\
    \        val baseArrayCopyIndexLength = baseArrayCopyIndexLength.toLong\n    \
    \    val baseArrayCopyIndex = 0\n        val baseArrayCopyIndexLength = baseArray",
  "        val str = x.toString.reverse\n        val baseStr = str.toCharArray.take(base).reverse\n\
    \        val result = baseStr.mkString(\"\")\n        val baseStr2 = str.toCharArray.drop(base).reverse\n\
    \        val result2 = baseStr2.mkString(\"\")\n        result + result2", " \
    \       val bases = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\")\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = \"\"\n        val baseIndex = bases.indexOf(base)\n    \
    \    digits.reverse.foreach(x => {\n            val digit = x.toString.charAt(baseIndex)\n\
    \            result += digit\n        })\n        result", "        val baseString\
    \ = Integer.toString(base)\n        val xString = Integer.toString(x)\n      \
    \  val baseLength = baseString.length\n        val xLength = xString.length\n\
    \        val result = new StringBuilder(xLength + baseLength)\n        var i =\
    \ 0\n        while (i < xLength) {\n            result.append(xString.charAt(i))\n\
    \            result.append(baseString.charAt(xString.charAt(i) - base))\n    \
    \        i += 1\n        }\n        result.toString()", "        val baseString\
    \ = base.toString.toCharArray\n        val xString = x.toString.toCharArray\n\
    \        var xIndex = 0\n        var baseIndex = 0\n        var resultString =\
    \ \"\"\n        while (baseIndex < baseString.length) {\n            if (xIndex\
    \ < xString.length) {\n                if (baseString(baseIndex) == xString(xIndex))\
    \ {\n                    resultString += baseString(baseIndex)\n             \
    \       xIndex += 1\n                    baseIndex += 1\n                } else\
    \ {\n                    resultString += baseString(baseIndex)\n             \
    \       xIndex += 1\n                    baseIndex += 1\n                }\n \
    \           } else {\n                resultString += baseString(baseIndex)\n\
    \                baseIndex += 1\n            }\n        }\n        return resultString",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + (if (digits.tail.isEmpty) \"\" else digits.tail.mkString(\"\"))", "      \
    \  val baseDigits = base.toString.length\n        val digits = x.toString.length\n\
    \        val result = new StringBuilder(digits)\n        var i = 0\n        while\
    \ (i < digits) {\n            val digit = x.toString.charAt(i)\n            val\
    \ digitBase = digit.toInt\n            if (digitBase < baseDigits) {\n       \
    \         result.append(digit)\n            } else {\n                val digitBase\
    \ = digit.toInt\n                val digitBaseDigit = digitBase - baseDigits\n\
    \                val digitBaseDigitString = digitBaseDigit.toString\n        \
    \        val digitBaseDigitStringLength = digitBaseDigitString.length\n      \
    \          val digitBaseDigitStringBuilder = new StringBuilder(digitBaseDigitStringLength)\n\
    \                digitBaseDigitStringBuilder.append(digitBaseDigitString)\n  \
    \              val digitBaseDigitStringBuilderLength = digitBaseDigitStringBuilder.length\n\
    \                val digitBaseDigitStringBuilderBuilder = new StringBuilder(digitBaseDigitStringLength)\n\
    \                digitBaseDigitStringBuilderBuilder.append(digitBaseDigitStringBuilder)\n\
    \                val digitBaseDigitStringBuilderBuilderLength = digitBaseDigitStringBuilderBuilder.length\n\
    \                val digitBaseDigitStringBuilderBuilderBuilder = new StringBuilder(digitBaseDigitStringLength)\n\
    \                digitBaseDigitStringBuilderBuilderBuilder.append(digitBaseDigitStringBuilderBuilder)\n\
    \                val digitBaseDigitStringBuilderBuilderBuilderLength = digitBaseDigitStringBuilderBuilderBuilder.length\n\
    \                val digitBaseDigitStringBuilderBuilderBuilderBuilder = new StringBuilder(digitBaseDigitStringLength)\n\
    \                digitBaseDigitStringBuilderBuilderBuilderBuilder.append(digitBaseDigitStringBuilderBuilderBuilder)\n\
    \                val digitBaseDigitStringBuilderBuilderBuilderBuilderLength =\
    \ digitBaseDigitStringBuilderBuilderBuilder.length\n                val digitBaseDigitStringBuilderBuilderBuilderBuilderBuilder\
    \ = new StringBuilder(digitBaseDigitStringLength)\n                digitBaseDigitStringBuilderBuilderBuilderBuilderBuilder.append(digitBaseDigitStringBuilderBuilderBuilderBuilder)\n\
    \                val digitBaseDigitStringBuilderBuilderBuilderBuilderBuilderLength\
    \ = digitBaseDigitStringBuilderBuilderBuilderBuilder.length\n                val\
    \ digitBaseDigitStringBuilderBuilderBuilderBuilderBuilderBuilder = new StringBuilder(digitBaseDigitStringLength)\n\
    \                digitBaseDigitStringBuilderBuilderBuilderBuilderBuilder.append(digitBaseDigitStringBuilderBuilderBuilderBuilderBuilder)\n\
    \                val digitBaseDigitStringBuilderBuilderBuilderBuilderBuilderLength\
    \ = digitBaseDigitStringBuilderBuilderBuilderBuilder.length\n                val\
    \ digitBaseDigitStringBuilderBuilderBuilderBuilderBuilderBuilder = new StringBuilder(digitBaseDigitStringLength)\n\
    \                digitBaseDigitStringBuilderBuilderBuilderBuilderBuilder.append(digitBaseDigitStringBuilderBuilderBuilderBuilderBuilder)\n",
  "        var result : String = \"\"\n        var remainder : Long = 0\n        var\
    \ remainder2 : Long = 0\n        var remainder3 : Long = 0\n        var remainder4\
    \ : Long = 0\n        var remainder5 : Long = 0\n        var remainder6 : Long\
    \ = 0\n        var remainder7 : Long = 0\n        var remainder8 : Long = 0\n\
    \        var remainder9 : Long = 0\n        var remainder10 : Long = 0\n     \
    \   var remainder11 : Long = 0\n        var remainder12 : Long = 0\n        var\
    \ remainder13 : Long = 0\n        var remainder14 : Long = 0\n        var remainder15\
    \ : Long = 0\n        var remainder16 : Long = 0\n        var remainder17 : Long\
    \ = 0\n        var remainder18 : Long = 0\n        var remainder19 : Long = 0\n\
    \        var remainder20 : Long = 0\n        var remainder21 : Long = 0\n    \
    \    var remainder22 : Long = 0\n        var remainder23 : Long = 0\n        var\
    \ remainder24 : Long = 0\n        var remainder25 : Long = 0\n        var remainder26\
    \ : Long = 0\n        var remainder27 : Long = 0\n        var remainder28 : Long\
    \ = 0\n        var remainder29 : Long = 0\n        var remainder30 : Long = 0\n\
    \        var remainder31 : Long = 0\n        var remainder32 : Long = 0\n    \
    \    var remainder33 : Long = 0\n        var remainder34 : Long = 0\n        var\
    \ remainder35 : Long = 0\n        var remainder36 : Long = 0\n        var remainder37\
    \ : Long = 0\n        var remainder38 : Long = 0\n        var remainder39 : Long\
    \ = 0\n        var remainder40 : Long = 0\n        var remainder41 : Long = 0\n\
    \        var remainder42 : Long = 0\n        var remainder43 : Long = 0\n    \
    \    var remainder44 : Long = 0\n        var remainder45 : Long = 0\n        var\
    \ remainder46 : Long = 0\n        var remainder47 : Long = 0\n        var remainder48\
    \ : Long = 0\n        var remainder49 : Long = 0\n        var remainder50 : Long\
    \ = 0\n        var remainder51 : Long = 0\n        var remainder52 : Long = 0\n\
    \        var remainder53 : Long = 0\n        var remainder54 : Long = 0\n    \
    \    var remainder55 : Long = 0\n        var remainder56 : Long = 0\n        var\
    \ remainder57 : Long = 0\n        var remainder58 : Long = 0\n        var remainder59\
    \ : Long = 0\n        var remainder60 : Long = 0\n        var remainder61 : Long\
    \ = 0\n        var remainder62 : Long = 0\n        var remainder63 : Long = 0\n\
    \        var remainder", "        val bases = List(1l, 10l, 100l, 1000l, 10000l,\
    \ 100000l, 1000000l, 10000000l, 100000000l, 1000000000l, 10000000000l, 100000000000l,\
    \ 1000000000000l, 10000000000000l, 100000000000000l, 1000000000000000l, 10000000000000000l,\
    \ 100000000000000000l, 1000000000000000000l)\n        val basesLen = bases.length\n\
    \        val basesSum = bases.sum\n        val basesSumLen = basesSum.length\n\
    \        val basesSumSum = basesSum.sum\n        val basesSumSumLen = basesSumSum.length\n\
    \        val basesSumSumSum = basesSumSum.sum\n        val basesSumSumSumLen =\
    \ basesSumSumSum.length\n        val basesSumSumSumSum = basesSumSumSum.sum\n\
    \        val basesSumSumSumSumLen = basesSumSumSumSum.length\n        val basesSumSumSumSumSum\
    \ = basesSumSumSumSum.sum\n        val basesSumSumSumSumSumLen = basesSumSumSumSumSum.length\n\
    \        val basesSumSumSumSumSumSum = basesSumSumSumSumSum.sum\n        val basesSumSumSumSumSumSumLen\
    \ = basesSumSumSumSumSumSum.length\n        val basesSumSumSumSumSumSumSum = basesSumSumSumSumSumSumSum.sum\n\
    \        val basesSumSumSumSumSumSumSumLen = basesSumSumSumSumSumSumSumSum.length\n\
    \        val basesSumSumSumSumSumSumSumSum = basesSumSumSumSumSumSumSumSum.sum\n\
    \        val basesSumSumSumSumSumSumSumSumLen = basesSumSumSumSumSumSumSumSumSum.length\n\
    \        val basesSumSumSumSumSumSumSumSumSum = basesSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val basesSumSumSumSumSumSumSumSumSumLen = basesSumSumSumSumSumSumSumSumSumSum.length\n\
    \        val basesSumSumSumSumSumSumSumSumSumSum = basesSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val basesSumSumSumSumSumSumSumSumSumLen = basesSumSumSumSumSumSumSumSumSumSumSum.length\n\
    \        val basesSumSumSumSumSumSumSumSumSumSum = basesSumSumSumSumSum", "  \
    \      val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        var res = \"\"\n        var remainder = x\
    \ % base\n        while (x > 0) {\n            if (x % base == 0) {\n        \
    \        res += \"0\"\n            }\n            res += (remainder % base).toString\n\
    \            remainder = (remainder / base).toLong\n            x /= base\n  \
    \      }\n        res ++= (remainder % base).toString\n        res", "       \
    \ val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else \"0\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base.toString.toInt)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString\n        result + (if (digits.size == base.toInt) \"\
    \" else s\"${digits(base.toInt)}0\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toInt)\n\
    \        val result = digits.foldLeft(\"\")( (acc, digit) => acc + (digit.toString\
    \ * base) )\n        return result.reverse", "        val bases = List(\"0\",\
    \ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = bases.zip(digits).map { case (base, digit) => digit + base\
    \ }\n        val result = result.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) \"\" else \"\")", "        val baseDigits = base.toString.toInt\n\
    \        val digits = x.toString.toInt\n        val result = \"\"\n        var\
    \ i = 0\n        while (i < digits.length) {\n            val digit = digits(i)\n\
    \            val baseDigit = digit / baseDigits\n            val remainder = digit\
    \ % baseDigits\n            result += if (baseDigit > 0) baseDigits.toString.charAt(baseDigit)\
    \ else \"0\"\n            result += if (remainder > 0) baseDigits.toString.charAt(remainder)\
    \ else \"0\"\n            i += 1\n        }\n        result", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.isEmpty) \"\" else\
    \ base)", "        val str = x.toString.reverse\n        val len = str.length\n\
    \        val res = str.takeWhile(_ <= base).reverse.take(len)\n        res.reverse",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + changeBase(digits.tail, base)", "        val baseString = base.toString\n\
    \        val baseInt = baseString.toInt\n        val xString = x.toString\n  \
    \      val xInt = xString.toInt\n        val result = xInt.toString + baseInt.toString\n\
    \        return result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else (base.toString + digits.last))", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + (digits.tail.mkString(base.toInt))", "        val str = x.toString.reverse\n\
    \        val len = str.length\n        val baseStr = base.toString.reverse\n \
    \       val baseLen = baseStr.length\n        val newStr = new StringBuilder(len)\n\
    \        var i = 0\n        while (i < len) {\n            val digit = str.charAt(i)\
    \ - '0'\n            val baseDigit = baseStr.charAt(i) - '0'\n            val\
    \ newDigit = digit + baseDigit * base\n            newStr.append((char) newDigit)\n\
    \            i += 1\n        }\n        newStr.toString", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = if (digits.isEmpty) \"\" else digits.head\n        result + (digits.tail.mkString(base.toInt))",
  "        val digits = x.toString.reverse\n        val digitLength = digits.length\n\
    \        val baseDigits = base.toString.reverse\n        val baseDigitLength =\
    \ baseDigits.length\n        val result = new StringBuilder(digitLength + baseDigitLength)\n\
    \        var i = 0\n        while (i < digitLength) {\n            val digit =\
    \ digits.charAt(i)\n            val baseDigit = baseDigits.charAt(i)\n       \
    \     if (digit == baseDigit) {\n                result.append(digit)\n      \
    \      } else {\n                result.append(digit)\n                result.append(baseDigit)\n\
    \            }\n            i += 1\n        }\n        result.toString", "   \
    \     val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits match {\n            case Nil => \"\"\n         \
    \   case x => x.mkString(\"\")\n        }\n        result", "        val digits\
    \ = x.toString.reverse\n        val baseDigits = digits.dropRight(base.toString.length)\n\
    \        val result = baseDigits.reverse.mkString(\"\")\n        result + (digits.takeRight(base.toString.length).reverse.mkString(\"\
    \"))", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.reverse.grouped(base.toInt).map(_.mkString).reverse)",
  "        val baseDigits = base.toString.length\n        val digits = x.toString.length\n\
    \        val result = new StringBuilder(digits)\n        val digit = x.toString.charAt(digits)\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)\n        val baseDigits = base.toString.length\n\
    \        val baseDigit = x.toString.charAt(digits)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base.toInt)\
    \ \"\" else digits(base.toInt))", "        val bases = List(\"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val digits = x.toString.reverse.grouped(base.toString.length).map(_.mkString).reverse\n\
    \        val digit = digits.find(_ == bases(base))\n        digit.getOrElse(\"\
    \")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newBase = digits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = digits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigit.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigit.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigit.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigit.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigit.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigit.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigit.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigit.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base.toInt)\
    \ \"\" else base.toString.toInt)", "        val baseString = Integer.toString(base)\n\
    \        val baseArray = baseString.toCharArray\n        val baseArrayLength =\
    \ baseArray.length\n        var result = 0\n        var i = 0\n        while (i\
    \ < baseArrayLength) {\n            val digit = x.toString.charAt(i)\n       \
    \     val digitValue = digit.toLong\n            val digitBase = baseArray(i)\n\
    \            val digitBaseValue = digitBase.toLong\n            val digitBaseValueMod\
    \ = digitBaseValue % base\n            val digitBaseValueModPower = digitBaseValueMod\
    \ ** digit\n            val digitBaseValueModPowerValue = digitBaseValueModPower\
    \ % base\n            val digitBaseValueModPowerValueString = digitBaseValueModPowerValue.toString\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueStringLength = digitBaseValueModPowerValueString.length\n\
    \            val digitBaseValueModPowerValueString", "        val baseDigits =\
    \ base.digits\n        val digits = x.digits\n        val baseDigitCount = baseDigits.length\n\
    \        val digitCount = digits.length\n        val result = new StringBuilder(digitCount)\n\
    \        var i = 0\n        while (i < digitCount) {\n            val digit =\
    \ digits(i)\n            val baseDigit = baseDigits(i)\n            if (digit\
    \ == baseDigit) {\n                result.append(digit)\n                i +=\
    \ 1\n            } else {\n                val digitValue = digit - baseDigit\n\
    \                if (digitValue < 0) {\n                    digitValue *= -1\n\
    \                }\n                result.append(digitValue)\n            }\n\
    \        }\n        result.toString()", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse\n        val\
    \ baseDigits = digits.dropWhile(_ < base)\n        val baseDigitCount = baseDigits.length\n\
    \        val digitCount = digits.length\n        val result = new StringBuilder(digitCount)\n\
    \        var i = 0\n        while (i < digitCount) {\n            val digit =\
    \ digits.charAt(i)\n            val baseDigit = baseDigits.charAt(i)\n       \
    \     if (digit == baseDigit) {\n                result.append((digit - baseDigit))\n\
    \            } else {\n                result.append((digit - baseDigit + base))\n\
    \            }\n            i += 1\n        }\n        result.toString", "   \
    \     val bases = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\", \"10\")\n        val digits = List(\"0\", \"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val digit = digits(bases.indexOf(x))\n\
    \        val newBase = bases(bases.indexOf(base))\n        val newDigit = digits(digits.indexOf(newBase))\n\
    \        val newNumber = newDigit + x\n        val newBaseString = newBase.toString\
    \ + newNumber.toString\n        newBaseString", "        var result : String =\
    \ \"\"\n        var remainder : Long = 0\n        var quotient : Long = 0\n  \
    \      var remainder2 : Long = 0\n        var quotient2 : Long = 0\n        var\
    \ remainder3 : Long = 0\n        var quotient3 : Long = 0\n        var remainder4\
    \ : Long = 0\n        var quotient4 : Long = 0\n        var remainder5 : Long\
    \ = 0\n        var quotient5 : Long = 0\n        var remainder6 : Long = 0\n \
    \       var quotient6 : Long = 0\n        var remainder7 : Long = 0\n        var\
    \ quotient7 : Long = 0\n        var remainder8 : Long = 0\n        var quotient8\
    \ : Long = 0\n        var remainder9 : Long = 0\n        var quotient9 : Long\
    \ = 0\n        var remainder10 : Long = 0\n        var quotient10 : Long = 0\n\
    \        var remainder11 : Long = 0\n        var quotient11 : Long = 0\n     \
    \   var remainder12 : Long = 0\n        var quotient12 : Long = 0\n        var\
    \ remainder13 : Long = 0\n        var quotient13 : Long = 0\n        var remainder14\
    \ : Long = 0\n        var quotient14 : Long = 0\n        var remainder15 : Long\
    \ = 0\n        var quotient15 : Long = 0\n        var remainder16 : Long = 0\n\
    \        var quotient16 : Long = 0\n        var remainder17 : Long = 0\n     \
    \   var quotient17 : Long = 0\n        var remainder18 : Long = 0\n        var\
    \ quotient18 : Long = 0\n        var remainder19 : Long = 0\n        var quotient19\
    \ : Long = 0\n        var remainder20 : Long = 0\n        var quotient20 : Long\
    \ = 0\n        var remainder21 : Long = 0\n        var quotient21 : Long = 0\n\
    \        var remainder22 : Long = 0\n        var quotient22 : Long = 0\n     \
    \   var remainder23 : Long = 0\n        var quotient23 : Long = 0\n        var\
    \ remainder24 : Long = 0\n        var quotient24 : Long = 0\n        var remainder25\
    \ : Long = 0\n        var quotient25 : Long = 0\n        var remainder26 : Long\
    \ = 0\n        var quotient26 : Long = 0\n        var remainder27 : Long = 0\n\
    \        var quotient27 : Long = 0\n        var remainder28 : Long = 0\n     \
    \   var quotient28 : Long = 0\n        var remainder29 : Long = 0\n        var\
    \ quotient29 : Long = 0\n        var remainder30 : Long = 0\n        var quotient30\
    \ : Long = 0\n        var remainder31 : Long = 0\n        var quotient31 : Long\
    \ = 0\n        var remainder32 : Long = 0\n        var quotient32 : Long = 0\n\
    \        var ", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \"0\")", "        var result = \"\"\n        var remainder\
    \ = x % base\n        x /= base\n        while (x > 0) {\n            result +=\
    \ x.toString.charAt(0).toLong\n            x /= base\n        }\n        if (remainder\
    \ > 0) {\n            result += remainder.toString.charAt(0).toLong\n        }\n\
    \        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else \"0\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString\n        result + (if (digits.size == base.toInt)\
    \ \"\" else \"0\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val baseDigits = digits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = baseDigits + digits\n        result", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base.toInt)\
    \ \"\" else base.toString.toUpperCase)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString\n        result + (if (digits.size == 1)\
    \ \"0\" else \"\")", "        val str = x.toString.reverse\n        val baseStr\
    \ = str.toCharArray.map(_.toString.toInt).map(_.toString).mkString(\"\")\n   \
    \     val baseInt = base.toString.toInt\n        val baseLen = baseInt.toString\n\
    \        val baseLenLen = baseLen.length\n        val baseLenLenLen = baseLenLen.toString\n\
    \        val baseLenLenLenLen = baseLenLenLen.toString\n        val baseLenLenLenLenLen\
    \ = baseLenLenLenLen.toString\n        val baseLenLenLenLenLenLen = baseLenLenLenLenLen.toString\n\
    \        val baseLenLenLenLenLenLenLen = baseLenLenLenLenLenLen.toString\n   \
    \     val baseLenLenLenLenLenLenLenLen = baseLenLenLenLenLenLenLenLen.toString\n\
    \        val baseLenLenLenLenLenLenLenLenLen = baseLenLenLenLenLenLenLenLenLenLen.toString\n\
    \        val baseLenLenLenLenLenLenLenLenLenLen = baseLenLenLenLenLenLenLenLenLenLenLen.toString\n\
    \        val baseLenLenLenLenLenLenLenLenLenLenLen = baseLenLenLenLenLenLenLenLenLenLenLenLen.toString\n\
    \        val baseLenLenLenLenLenLenLenLenLenLenLenLen = baseLenLenLenLenLenLenLenLenLenLenLenLenLen.toString\n\
    \        val baseLenLenLenLenLenLenLenLenLenLenLenLenLen = baseLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen.toString\n\
    \        val baseLenLenLenLenLenLenLenLenLenLenLenLenLenLen = baseLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen.toString\n\
    \        val baseLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = baseLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen.toString\n\
    \        val baseLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = baseLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen.toString\n\
    \        val baseLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = baseLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen.toString\n\
    \        val baseLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = baseLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen.toString\n\
    \        ", "        val digits = x.toString.reverse\n        val digitBase =\
    \ digits.reverse\n        val digitBaseBase = digitBase.reverse\n        val digitBaseBaseBase\
    \ = digitBaseBase.reverse\n        val digitBaseBaseBaseBase = digitBaseBaseBase.reverse\n\
    \        val digitBaseBaseBaseBaseBase = digitBaseBaseBaseBase.reverse\n     \
    \   val digitBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBase.reverse\n  \
    \      val digitBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseBase.reverse\n\
    \        val digitBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseBaseBase.reverse\n\
    \        val digitBaseBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseBaseBaseBase.reverse\n\
    \        val digitBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBase.reverse\n\
    \        val digitBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBase.reverse\n\
    \        val digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase.reverse\n\
    \        val digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase.reverse\n\
    \        val digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase.reverse\n\
    \        val digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase.reverse\n\
    \        val digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase.reverse\n\
    \        val digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase.reverse\n\
    \        val digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase.reverse\n\
    \        val digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase.reverse\n\
    \        val digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase.reverse\n\
    \        val digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase.reverse\n\
    \        val digitBaseBaseBaseBaseBaseBaseBaseBaseBase", "        val digits =\
    \ x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base.toInt)\
    \ \"\" else s\"0\" * (base - digits.size))", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.toInt)", "        val str = x.toString.reverse\n\
    \        val len = str.length\n        val res = new Array[Char](len)\n      \
    \  var i = 0\n        while (i < len) {\n            val digit = str.charAt(i)\
    \ - '0'\n            val power = (len - i - 1) * base\n            val res = digit\
    \ + power\n            res(i) = if (res > 9) '0' else (if (res < 10) '0' else\
    \ res.toChar)\n            i += 1\n        }\n        new String(res)", "    \
    \    val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + changeBase(digits.tail, base)", "        val bases = List(\"10\", \"11\",\
    \ \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"\
    , \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    )\n        val digits = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\",\
    \ \"7\", \"8\", \"9\")\n        val digitBase = bases.zip(digits)\n        val\
    \ digitBaseReverse = digitBase.map(x => x._1 -> x._2)\n        val digitBaseReverseMap\
    \ = digitBaseReverse.toMap\n        val digitBaseReverseMapReverse = digitBaseReverseMap.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse2 = digitBaseReverseMapReverse.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse3 = digitBaseReverseMapReverse2.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse4 = digitBaseReverseMapReverse3.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse5 = digitBaseReverseMapReverse4.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse6 = digitBaseReverseMapReverse5.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse7 = digitBaseReverseMapReverse6.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse8 = digitBaseReverseMapReverse7.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse9 = digitBaseReverseMapReverse8.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse10 = digitBaseReverseMapReverse9.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse11 = digitBaseReverseMapReverse10.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse12 = digitBaseReverseMapReverse11.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse13 = digitBaseReverseMapReverse12.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse14 = digitBaseReverseMapReverse13.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse15 = digitBaseReverseMapReverse14.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse16 = digitBaseReverseMapReverse15.map(x\
    \ => x._", "        val baseString = base.toString\n        val baseInt = baseString.toInt\n\
    \        val baseLong = baseString.toLong\n        val baseFloat = baseString.toFloat\n\
    \        val baseDouble = baseString.toDouble\n        val baseBigInt = baseString.toBigInt\n\
    \        val baseBigLong = baseString.toBigLong\n        val baseBigFloat = baseString.toBigFloat\n\
    \        val baseBigDouble = baseString.toBigDouble\n        val baseBigInt =\
    \ baseString.toBigInt\n        val baseBigLong = baseString.toBigLong\n      \
    \  val baseBigFloat = baseString.toBigFloat\n        val baseBigDouble = baseString.toBigDouble\n\
    \        val baseBigInt = baseString.toBigInt\n        val baseBigLong = baseString.toBigLong\n\
    \        val baseBigFloat = baseString.toBigFloat\n        val baseBigDouble =\
    \ baseString.toBigDouble\n        val baseBigInt = baseString.toBigInt\n     \
    \   val baseBigLong = baseString.toBigLong\n        val baseBigFloat = baseString.toBigFloat\n\
    \        val baseBigDouble = baseString.toBigDouble\n        val baseBigInt =\
    \ baseString.toBigInt\n        val baseBigLong = baseString.toBigLong\n      \
    \  val baseBigFloat = baseString.toBigFloat\n        val baseBigDouble = baseString.toBigDouble\n\
    \        val baseBigInt = baseString.toBigInt\n        val baseBigLong = baseString.toBigLong\n\
    \        val baseBigFloat = baseString.toBigFloat\n        val baseBigDouble =\
    \ baseString.toBigDouble\n        val baseBigInt = baseString.toBigInt\n     \
    \   val baseBigLong = baseString.toBigLong\n        val baseBigFloat = baseString.toBigFloat\n\
    \        val baseBigDouble = baseString.toBigDouble\n        val baseBigInt =\
    \ baseString.toBigInt\n        val baseBigLong = baseString.toBigLong\n      \
    \  val baseBigFloat = baseString.toBigFloat\n        val baseBigDouble = baseString.toBigDouble\n\
    \        val baseBigInt = baseString.toBigInt\n        val baseBigLong = baseString.toBigLong\n\
    \        val baseBigFloat = baseString.toBigFloat\n        val baseBigDouble =\
    \ baseString.toBigDouble\n        val baseBigInt = baseString.toBigInt\n     \
    \   val baseBigLong = baseString.toBigLong\n        val baseBigFloat = baseString.to",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).map(_.toLong)\n\
    \        val result = digits(0)\n        val rest = digits(1)\n        val restLength\
    \ = rest.length\n        val restBase = base.toInt\n        val restDigits = rest.grouped(restBase.toInt).map(_.toString.reverse).map(_.toLong)\n\
    \        val restResult = restDigits(0)\n        val restRest = restDigits(1)\n\
    \        val restRestLength = restRest.length\n        val restRestBase = restBase.toInt\n\
    \        val restRestDigits = restRest.grouped(restRestBase.toInt).map(_.toString.reverse).map(_.toLong)\n\
    \        val restRestResult = restRestDigits(0)\n        val restRestRest = restRestDigits(1)\n\
    \        val restRestRestLength = restRestRest.length\n        val restRestRestBase\
    \ = restRestBase.toInt\n        val restRestRestDigits = restRestRest.grouped(restRestRestBase.toInt).map(_.toString.reverse).map(_.toLong)\n\
    \        val restRestRestResult = restRestRestDigits(0)\n        val restRestRestRest\
    \ = restRestRestDigits(1)\n        val restRestRestRestLength = restRestRestRest.length\n\
    \        val restRestRestRestBase = restRestRestBase.toInt\n        val restRestRestRestDigits\
    \ = restRestRestRest.grouped(restRestRestRestBase.toInt).map(_.toString.reverse).map(_.toLong)\n\
    \        val restRestRestRestResult = restRestRestRestDigits(0)\n        val restRestRestRestRest\
    \ = restRestRestRestDigits(1)\n        val restRestRestRestRestLength = restRestRestRestRest.length\n\
    \        val restRestRestRestRestBase = restRestRestRestBase.toInt\n        val\
    \ restRestRestRestRestDigits = restRestRestRestRest.grouped(restRestRestRestRestBase.toInt).map(_.toString.reverse).map(_.toLong)\n\
    \        val restRestRestRestRestResult = restRestRestRestRestDigits(0)\n    \
    \    val restRestRestRestRestRest = restRestRestRestRestDigits(1)\n        val\
    \ restRestRestRestRestRestLength = restRestRestRestRestRest.length\n        val\
    \ restRestRestRestRestRestBase = restRestRestRestRestBase.toInt\n        val restRestRestRestRestRestDigit",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) {\n            \"0\"\n        } else {\n            val baseString =\
    \ if (base == 2l) \"\" else s\"$base\"\n            s\"$baseString\"\n       \
    \ }\n        result", "        val str = x.toString.reverse\n        val baseStr\
    \ = str.toCharArray.takeWhile(_ != '0').mkString\n        val baseInt = base.toCharArray.map(_.toInt).reverse\n\
    \        val baseIntStr = baseInt.mkString\n        val baseStrLen = baseStr.length\n\
    \        val baseIntLen = baseInt.length\n        val baseStrLenMinusOne = baseStrLen\
    \ - 1\n        val baseIntLenMinusOne = baseIntLen - 1\n        val baseStrLenMinusOneMinusOne\
    \ = baseStrLenMinusOne - 1\n        val baseIntLenMinusOneMinusOne = baseIntLenMinusOne\
    \ - 1\n        val baseStrLenMinusOneMinusOneMinusOne = baseStrLenMinusOneMinusOne\
    \ - 1\n        val baseIntLenMinusOneMinusOneMinusOne = baseIntLenMinusOneMinusOne\
    \ - 1\n        val baseStrLenMinusOneMinusOneMinusOneMinusOne = baseStrLenMinusOneMinusOneMinusOne\
    \ - 1\n        val baseIntLenMinusOneMinusOneMinusOneMinusOne = baseIntLenMinusOneMinusOneMinusOne\
    \ - 1\n        val baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOne = baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val baseIntLenMinusOneMinusOneMinusOneMinusOneMinusOne = baseIntLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ baseIntLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = baseIntLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val baseIntLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits match {\n            case Nil => \"\"\n         \
    \   case x => x.mkString(\"\")\n        }\n        result", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base.toInt)\
    \ \"\" else base.toString.toUpperCase)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val digit = digits.last\n\
    \        val remainder = digits.dropRight(1)\n        val remainderString = remainder.map(_.mkString(\"\
    \")).reverse.mkString(\"\")\n        val lastDigit = remainderString.last\n  \
    \      val lastDigitString = lastDigit.map(_.mkString(\"\")).reverse.mkString(\"\
    \")\n        val lastDigitString = lastDigitString.dropRight(1)\n        val lastDigit\
    \ = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n        val lastDigitString = lastDigitString.dropRight(1)\n\
    \        val lastDigit = lastDigitString.last\n", "        val bases = List(\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val\
    \ digits = x.toString.reverse.grouped(base.toString.length).map(_.mkString).reverse\n\
    \        val baseIndex = bases.indexOf(bases.last)\n        val digitIndex = digits.indexOf(digits.last)\n\
    \        digits(digitIndex) + digits(digitIndex + 1) + digits(digitIndex + 2)",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else \"0\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base.toInt)\
    \ \"\" else base.toString.toLong)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = digits.reverse\n        val newBase = base.toInt\n     \
    \   val newDigits = result.grouped(newBase).map(_.toString.reverse).mkString\n\
    \        newDigits", "        val baseDigits = base.toString.reverse\n       \
    \ val digits = x.toString.reverse\n        val result = \"\"\n        var i =\
    \ 0\n        while (i < digits.length) {\n            val digit = digits(i)\n\
    \            val baseDigit = baseDigits(i)\n            if (digit == baseDigit)\
    \ {\n                result += digit\n                i += 1\n            } else\
    \ {\n                result += digit + baseDigit\n                i += 1\n   \
    \         }\n        }\n        result", "        var result : String = \"\"\n\
    \        var remainder : Long = 0\n        var quotient : Long = 0\n        var\
    \ remainder2 : Long = 0\n        var quotient2 : Long = 0\n        var remainder3\
    \ : Long = 0\n        var quotient3 : Long = 0\n        var remainder4 : Long\
    \ = 0\n        var quotient4 : Long = 0\n        var remainder5 : Long = 0\n \
    \       var quotient5 : Long = 0\n        var remainder6 : Long = 0\n        var\
    \ quotient6 : Long = 0\n        var remainder7 : Long = 0\n        var quotient7\
    \ : Long = 0\n        var remainder8 : Long = 0\n        var quotient8 : Long\
    \ = 0\n        var remainder9 : Long = 0\n        var quotient9 : Long = 0\n \
    \       var remainder10 : Long = 0\n        var quotient10 : Long = 0\n      \
    \  var remainder11 : Long = 0\n        var quotient11 : Long = 0\n        var\
    \ remainder12 : Long = 0\n        var quotient12 : Long = 0\n        var remainder13\
    \ : Long = 0\n        var quotient13 : Long = 0\n        var remainder14 : Long\
    \ = 0\n        var quotient14 : Long = 0\n        var remainder15 : Long = 0\n\
    \        var quotient15 : Long = 0\n        var remainder16 : Long = 0\n     \
    \   var quotient16 : Long = 0\n        var remainder17 : Long = 0\n        var\
    \ quotient17 : Long = 0\n        var remainder18 : Long = 0\n        var quotient18\
    \ : Long = 0\n        var remainder19 : Long = 0\n        var quotient19 : Long\
    \ = 0\n        var remainder20 : Long = 0\n        var quotient20 : Long = 0\n\
    \        var remainder21 : Long = 0\n        var quotient21 : Long = 0\n     \
    \   var remainder22 : Long = 0\n        var quotient22 : Long = 0\n        var\
    \ remainder23 : Long = 0\n        var quotient23 : Long = 0\n        var remainder24\
    \ : Long = 0\n        var quotient24 : Long = 0\n        var remainder25 : Long\
    \ = 0\n        var quotient25 : Long = 0\n        var remainder26 : Long = 0\n\
    \        var quotient26 : Long = 0\n        var remainder27 : Long = 0\n     \
    \   var quotient27 : Long = 0\n        var remainder28 : Long = 0\n        var\
    \ quotient28 : Long = 0\n        var remainder29 : Long = 0\n        var quotient29\
    \ : Long = 0\n        var remainder30 : Long = 0\n        var quotient30 : Long\
    \ = 0\n        var remainder31 : Long = 0\n        var quotient31 : Long = 0\n\
    \        var remainder32 : Long = 0\n        var quotient32 : Long = 0\n     \
    \   var ", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else \"0\" * (base - result.length))", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val bases\
    \ = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    , \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n        val digits = List(\"0\",\
    \ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val\
    \ digitBase = digits.zip(bases)\n        val digitBaseReverse = digitBase.map(x\
    \ => x._2 -> x._1)\n        val digitBaseReverseMap = digitBaseReverse.toMap\n\
    \        val digitBaseReverseMapReverse = digitBaseReverseMap.map(x => x._1 ->\
    \ x._2)\n        val digitBaseReverseMapReverse2 = digitBaseReverseMapReverse.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse3 = digitBaseReverseMapReverse2.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse4 = digitBaseReverseMapReverse3.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse5 = digitBaseReverseMapReverse4.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse6 = digitBaseReverseMapReverse5.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse7 = digitBaseReverseMapReverse6.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse8 = digitBaseReverseMapReverse7.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse9 = digitBaseReverseMapReverse8.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse10 = digitBaseReverseMapReverse9.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse11 = digitBaseReverseMapReverse10.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse12 = digitBaseReverseMapReverse11.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse13 = digitBaseReverseMapReverse12.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse14 = digitBaseReverseMapReverse13.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse15 = digitBaseReverseMapReverse14.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse16 = digitBaseReverseMapReverse15.map(x\
    \ => x._1 -> x._2)\n        val digitBaseReverseMapReverse17 = digitBaseReverse",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val baseDigits = digits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = digits + baseDigits\n        result", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt)\n        val result = new StringBuilder\n\
    \        digits.foreach(x => result.append(x.reverse))\n        result.toString",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val newDigits = digits.map(x\
    \ => x.toString.toInt * base.toInt).sum\n        val newDigit = digits.last.toString.toInt\
    \ * base.toInt\n        val newResult = newDigits + digit + newDigit\n       \
    \ result + newResult.toString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else digits(base.toInt))", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.toInt)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base.toInt)\
    \ \"\" else base.toString.charAt(base.toInt - 1))", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) {\n            \"0\"\n        } else {\n            val baseString =\
    \ if (base == 2l) \"\" else base.toString.charAt(0).toString.toUpperCase\n   \
    \         s\"$baseString\"\n        }\n        result", "        val digits =\
    \ x.toString.reverse\n        val digits_length = digits.length\n        val baseDigits\
    \ = base.toString.reverse\n        val baseDigits_length = baseDigits.length\n\
    \        val result = new StringBuilder\n        var i = 0\n        while (i <\
    \ digits_length) {\n            val digit = digits(i)\n            val baseDigit\
    \ = baseDigits(i)\n            if (digit == baseDigit) {\n                result.append(digit)\n\
    \            } else {\n                val digitValue = digit.toInt\n        \
    \        val baseDigitValue = baseDigit.toInt\n                if (digitValue\
    \ < baseDigitValue) {\n                    result.append(digitValue)\n       \
    \         } else {\n                    val digitValue_temp = digitValue\n   \
    \                 val baseDigitValue_temp = baseDigitValue\n                 \
    \   val digitValue_temp = digitValue_temp * baseDigitValue_temp\n            \
    \        result.append(digitValue_temp)\n                }\n            }\n  \
    \          i += 1\n        }\n        return result.toString", "        val str\
    \ = x.toString.reverse\n        val len = str.length\n        val baseStr = base.toString.reverse\n\
    \        val baseLen = baseStr.length\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var resultStr = \"\"\n        while (i < len) {\n\
    \            while (j < baseLen && k < len) {\n                if (str.charAt(i)\
    \ == baseStr.charAt(j)) {\n                    resultStr += str.charAt(i)\n  \
    \                  i += 1\n                    j += 1\n                    k +=\
    \ 1\n                }\n                else {\n                    resultStr\
    \ += str.charAt(i)\n                    i += 1\n                }\n          \
    \  }\n        }\n        resultStr", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head + digits.tail.mkString(\"\
    \")\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base)", "        val baseString = base.toString\n        val x = x.toString.toLong\n\
    \        val result = x.toString(baseString)\n        val length = result.length\n\
    \        if (length < baseString.length) {\n            val zeros = baseString.length\
    \ - length\n            val zeroChar = charArrayOf('0').head\n            val\
    \ result = result + zeroChar * zeros\n        }\n        result", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = digits.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base.toString.charAt(base.toString.length - digits.length))", "  \
    \      val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) \"\" else \"\" + base.toInt - result.length)", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base.toInt)\
    \ \"\" else \"0\" * (base - digits.size)) + digits.last", "        var result\
    \ = \"\"\n        var remainder = x % base\n        var quotient = x / base\n\
    \        while (quotient != 0) {\n            result = quotient.toString + result\n\
    \            quotient = quotient / base\n        }\n        result = remainder.toString\
    \ + result\n        return result", "        var result = \"\"\n        var remainder\
    \ = x % base\n        while (x > 0) {\n            if (x % base == 0) {\n    \
    \            result = result + remainder\n            }\n            remainder\
    \ = remainder % base\n            x = x / base\n        }\n        return result",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else (base.toInt - digits.head.toString.length))", '        val bases =
    List("1", "10", "100", "1000", "10000", "100000", "1000000", "10000000", "100000000",
    "1000000000", "10000000000", "100000000000", "1000000000000", "10000000000000",
    "100000000000000", "1000000000000000", "10000000000000000", "100000000000000000",
    "1000000000000000000", "10000000000000000000", "100000000000000000000", "1000000000000000000000",
    "10000000000000000000000", "100000000000000000000000", "1000000000000000000000000",
    "10000000000000000000000000", "100000000000000000000000000", "1000000000000000000000000000",
    "10000000000000000000000000000", "100000000000000000000000000000", "1000000000000000000000000000000",
    "10000000000000000000000000000000", "100000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000', " \
    \       val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else base.pow(digits.size - base.toInt))", "        val bases\
    \ = List(1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l)\n        val digits = x.toString.reverse.grouped(base).map(_.mkString).reverse\n\
    \        val result = bases.zip(digits).map { case (base, digit) => digit.charAt(0)\
    \ * base + digit.charAt(1) }\n        val result = result.mkString(\"\")\n   \
    \     result + (if (result.length < base.toString().length) \"0\" * (base.toString().length\
    \ - result.length) else \"\")", "        val str = x.toString.reverse\n      \
    \  val len = str.length\n        var i = 0\n        var sum = 0\n        while\
    \ (i < len) {\n            val c = str.charAt(i)\n            val n = Integer.parseInt(c)\n\
    \            sum += n * base\n            i += 1\n        }\n        val result\
    \ = sum.toString\n        if (result < base.toString) result else result", " \
    \       var result = \"\"\n        var remainder = x % base\n        while(x >\
    \ 0) {\n            x /= base\n            result += x.toString.reverse\n    \
    \    }\n        if(remainder != 0) {\n            result += remainder.toString.reverse\n\
    \        }\n        return result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = digits reverse\n        result + (if (digits.isEmpty) \"\
    \" else base.toString.reverse)", "        val digits = x.toString.reverse\n  \
    \      val digitArray = digits.toCharArray\n        val baseArray = base.toCharArray\n\
    \        val result = new StringBuilder\n        var i = 0\n        while (i <\
    \ digitArray.length) {\n            val digit = digitArray(i)\n            val\
    \ base = baseArray(i)\n            if (digit == '1') {\n                val newDigit\
    \ = digitArray(i + 1)\n                val newBase = baseArray(i + 1)\n      \
    \          if (newDigit == '0') {\n                    result.append(newBase)\n\
    \                    i += 1\n                } else {\n                    val\
    \ newDigit = digitArray(i + 1)\n                    val newBase = baseArray(i\
    \ + 1)\n                    result.append(newDigit)\n                    i +=\
    \ 1\n                }\n            } else {\n                result.append(digit)\n\
    \                i += 1\n            }\n        }\n        return result.toString",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.charAt(base.toInt - digits.size))", " \
    \       val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base.toInt)\
    \ \"\" else base.toString.charAt(base.toInt - digits.size))", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).map(_.toLong)\n\
    \        val result = digits.foldLeft(\"\") { (result, digit) => result + digit.toString}\n\
    \        result + (if (digits.last.isZero) \"\" else \"l\")"]
stop_tokens:
- "\n    }\n"
