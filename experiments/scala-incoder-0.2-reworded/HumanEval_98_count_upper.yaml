name: HumanEval_98_count_upper
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s, count the number of uppercase vowels in even indices.\n\
  \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    // >>>\
  \ countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"))\n  \
  \  // (0l)\n    def countUpper(s : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
  )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
  dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
  U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
  EEEE\")) == (2l));\n    }\n\n}\n"
completions: ["        val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(i) % 2 == 0)\n                evenIndices += i\n        evenIndices.toList.foldLeft(0l)((acc,\
    \ i) => acc + s.charAt(i).toUpperCase == 'U')", "        val vowels = \"aeiouAEIOU\"\
    \n        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n             \
    \   if (i % 2 == 0)\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2\
    \ == 0)\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"AEIOUaeiou\"\n        var count = 0\n       \
    \ for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i)) >=\
    \ 0)\n                if (i % 2 == 0)\n                    count += 1\n      \
    \  count", "        val vowels = \"aeiouAEIOU\"\n        var count = 0\n     \
    \   for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i)) >=\
    \ 0)\n                if (i % 2 == 0)\n                    count += 1\n      \
    \          else\n                    count -= 1\n        count", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i)) >=\
    \ 0)\n                if (s(i).isUpper)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0l)(_ + _)", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = 0 until s.length\n        evenIndices.filter(_\
    \ % 2 == 0).map(s.length).count(s => vowels.contains(s.charAt(_)))", "       \
    \ val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ > -1)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0l)((acc, i) => acc + i)", "        val vowels\
    \ = \"aeiouAEIOU\".toSet\n        val evenIndices = mutable.Set[Int]()\n     \
    \   for (i <- 0 until s.length)\n            if (vowels(s(i)))\n             \
    \   if (s(i) % 2 == 0)\n                    evenIndices += i\n        evenIndices.size",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i).isUpper)\n   \
    \             if (i % 2 == 0)\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)\
    \ { (sum, i) =>\n            if (sum > 0)\n                sum\n            else\n\
    \                sum + vowels(i).length\n        }", "        val vowels = \"\
    aeiouAEIOU\"\n        val vowelsSet = vowels.toSet\n        val evenIndices =\
    \ 0 until s.length\n        val evenIndicesWithVowels = evenIndices.filter(i =>\
    \ vowelsSet.contains(s(i)))\n        evenIndicesWithVowels.sum", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0l)(_ + _)", "        val vowels = \"aeiouAEIOU\"\
    .toSet\n        val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(s(i)))\n                evenIndices += i\n\
    \        evenIndices.toList.count(i => s(i).isUpper)", "        val vowels = \"\
    aeiouAEIOU\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n   \
    \     for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n     \
    \           evenIndices += i\n        evenIndices.toList.map(s.length)", "   \
    \     val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = s.toList.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1)\n        evenIndices.count(vowels.contains)", "        val\
    \ vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0L)(_ + _)",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        val evenIndices = mutable.",
  "        val vowels = \"aeiouAEIOU\".toSet\n        var count = 0\n        for (i\
    \ <- 0 until s.length)\n            if (vowels(s(i)))\n                count +=\
    \ 1\n            else\n                count += 0\n        count", "        val\
    \ vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        val evenIndicesWithVowels = evenIndices.filter(_ % 2 == 0)\n        val\
    \ evenIndicesWithoutVowels = evenIndices.filter(_ % 2 != 0)\n        val evenIndicesWithVowelsAndOutVowels\
    \ = evenIndicesWithVowels.filter(_ % 2 == 0)\n        val evenIndicesWithoutVowelsAndOutVowels\
    \ = evenIndicesWithoutVowels.filter(_ % 2 != 0)\n        val evenIndicesWithVowelsAndOutVowelsAndOutVowels\
    \ = evenIndicesWithVowelsAndOutVowels.filter(_ % 2 == 0)\n        val evenIndicesWithoutVowelsAndOutVowelsAndOutVowels\
    \ = evenIndicesWithoutVowelsAndOutVowels.filter(_ % 2 != 0)\n        val evenIndicesWithVowelsAndOutVowelsAndOutVowelsAndOutVowels\
    \ = evenIndicesWithVowelsAndOutVowelsAndOutVowels.filter(_ % 2 == 0)\n       \
    \ val evenIndicesWithoutVowelsAndOutVowelsAndOutVowelsAndOutVowels = evenIndicesWithoutVowelsAndOutVowelsAndOutVowels.filter(_\
    \ % 2 != 0)\n        val evenIndicesWithVowelsAndOutVowelsAndOutVowelsAndOutVowelsAndOutVowels\
    \ = evenIndicesWithVowelsAndOutVowelsAndOutVowelsAndOutVowels.filter(_ % 2 ==\
    \ 0)\n        val evenIndicesWithoutVowelsAndOutVowelsAndOutVowelsAndOutVowelsAndOutVowels\
    \ = evenIndicesWithoutVowelsAndOutVowelsAndOutVowelsAndOutVowels.filter(_ % 2\
    \ != 0)\n        val evenIndicesWithVowelsAndOutVowelsAndOutVowelsAndOutVowelsAndOutVowelsAndOutVowels\
    \ = evenIndicesWithVowelsAndOutVowelsAndOutVowelsAndOutVowelsAndOutVowels.filter(_\
    \ % 2 == 0)\n        val evenIndicesWithoutVowelsAndOutVowelsAndOutVowelsAndOutVowelsAndOutVowelsAndOutVowels\
    \ = evenIndice", "        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (s(i) == 'A' && s(i + 1) == 'A' && s(i + 2) == 'A')\n        \
    \        count += 1\n            else if (s(i) == 'a' && s(i + 1) == 'b' && s(i\
    \ + 2) == 'c')\n                count += 1\n            else if (s(i) == 'd' &&\
    \ s(i + 1) == 'b' && s(i + 2) == 'e')\n                count += 1\n          \
    \  else if (s(i) == 'e' && s(i + 1) == 'f' && s(i + 2) == 'g')\n             \
    \   count += 1\n            else if (s(i) == 'd' && s(i + 1) == 'B' && s(i + 2)\
    \ == 'E')\n                count += 1\n            else if (s(i) == 'e' && s(i\
    \ + 1) == 'f' && s(i + 2) == 'G')\n                count += 1\n            else\
    \ if (s(i) == 'd' && s(i + 1) == 'b' && s(i + 2) == 'E')\n                count\
    \ += 1\n            else if (s(i) == 'e' && s(i + 1) == 'f' && s(i + 2) == 'g')\n\
    \                count += 1\n            else if (s(i) == 'd' && s(i + 1) == 'B'\
    \ && s(i + 2) == 'E')\n                count += 1\n            else if (s(i) ==\
    \ 'e' && s(i + 1) == 'f' && s(i + 2) == 'G')\n                count += 1\n   \
    \         else if (s(i) == 'd' && s(i + 1) == 'b' && s(i + 2) == 'E')\n      \
    \          count += 1\n            else if (s(i) == 'e' && s(i + 1) == 'f' &&\
    \ s(i + 2) == 'g')\n                count += 1\n            else if (s(i) == 'd'\
    \ && s(i + 1) == 'B' && s(i + 2) == 'E')\n                count += 1\n       \
    \     else if (s(i) == 'e' && s(i + 1) == 'f' && s(i + 2) == 'G')\n          \
    \      count += 1\n            else if (s(i) == 'd' && s(i + 1) == 'b' && s(i\
    \ + 2) == 'E')\n                count += 1\n            else if (s(i) == 'e' &&\
    \ s(i + 1) == 'f' && s(i + 2) == 'g')\n                count += 1\n          \
    \  else if (s(i) == 'd' && s(i + 1) == 'B' && s(i + 2) == 'E')\n             \
    \   count += 1\n            else if (s(i) == 'e' && s(i + 1) == 'f' && s(i + 2)\
    \ == 'G')\n                count += 1\n            else if (s(i) == 'd' && s(i\
    \ + 1) == 'b' && s(i + 2) == 'E')\n                count += 1\n            else\
    \ if (s(i) == 'e' && s(i + 1) == 'f' && s(i + 2) == 'g')\n                count\
    \ += 1\n            else if (s(i) == 'd' && s(i + 1) == 'B' && s(i + 2) == 'E')\n\
    \                count += 1\n            else if (s(i) == 'e' && s(i + 1) == 'f'\
    \ && s(i + 2) == 'G')\n                count += 1\n            else if (s(i) ==\
    \ 'd' && s(i + 1) == 'b' && s(i + 2) == 'E')\n", "        var count = 0\n    \
    \    for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1) == 'A')\n\
    \                count += 1\n            else if (s(i) == 'a' && s(i+1) == 'a')\n\
    \                count += 1\n            else if (s(i) == 'B' && s(i+1) == 'B')\n\
    \                count += 1\n            else if (s(i) == 'b' && s(i+1) == 'b')\n\
    \                count += 1\n            else if (s(i) == 'C' && s(i+1) == 'C')\n\
    \                count += 1\n            else if (s(i) == 'c' && s(i+1) == 'c')\n\
    \                count += 1\n            else if (s(i) == 'D' && s(i+1) == 'D')\n\
    \                count += 1\n            else if (s(i) == 'd' && s(i+1) == 'd')\n\
    \                count += 1\n            else if (s(i) == 'E' && s(i+1) == 'E')\n\
    \                count += 1\n            else if (s(i) == 'e' && s(i+1) == 'e')\n\
    \                count += 1\n            else if (s(i) == 'F' && s(i+1) == 'F')\n\
    \                count += 1\n            else if (s(i) == 'f' && s(i+1) == 'f')\n\
    \                count += 1\n            else if (s(i) == 'G' && s(i+1) == 'G')\n\
    \                count += 1\n            else if (s(i) == 'g' && s(i+1) == 'g')\n\
    \                count += 1\n            else if (s(i) == 'H' && s(i+1) == 'H')\n\
    \                count += 1\n            else if (s(i) == 'h' && s(i+1) == 'h')\n\
    \                count += 1\n            else if (s(i) == 'I' && s(i+1) == 'I')\n\
    \                count += 1\n            else if (s(i) == 'i' && s(i+1) == 'i')\n\
    \                count += 1\n            else if (s(i) == 'J' && s(i+1) == 'J')\n\
    \                count += 1\n            else if (s(i) == 'j' && s(i+1) == 'j')\n\
    \                count += 1\n            else if (s(i) == 'K' && s(i+1) == 'K')\n\
    \                count += 1\n            else if (s(i) == 'k' && s(i+1) == 'k')\n\
    \                count += 1\n            else if (s(i) == 'L' && s(i+1) == 'L')\n\
    \                count += 1\n            else if (s(i) == 'l' && s(i+1) == 'l')\n\
    \                count += 1\n            else if (s(i) == 'M' && s(i+1) == 'M')\n\
    \                count += 1\n            else if (s(i) == 'm' && s(i+1) == 'm')\n\
    \                count += 1\n            else if (s(i) == 'N' && s(i+1) == 'N')\n\
    \                count += 1\n            else if (s(i) == 'n' && s(i+1) == 'n')\n\
    \                count += 1\n            else if (s(i) == 'O' && s(i+1) == 'O')\n\
    \                count += 1\n            else if (s(i) == 'o' && s(i+1) == 'o')\n",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' || s(i) == 'a') count += 1\n            if (s(i) == 'B' || s(i) == 'b')\
    \ count += 1\n            if (s(i) == 'C' || s(i) == 'c') count += 1\n       \
    \     if (s(i) == 'D' || s(i) == 'd') count += 1\n            if (s(i) == 'E'\
    \ || s(i) == 'e') count += 1\n            if (s(i) == 'F' || s(i) == 'f') count\
    \ += 1\n            if (s(i) == 'G' || s(i) == 'g') count += 1\n        if (count\
    \ % 2 == 0) 1 else 0", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices\
    \ = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i))\
    \ >= 0)\n                if (s(i).toUpperCase == s(i))\n                    evenIndices\
    \ += i\n        evenIndices.size", "        val vowels = \"aeiouAEIOU\"\n    \
    \    val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s(i)) >= 0)\n                if (s(i).toUpperCase\
    \ == \"A\" || s(i).toUpperCase == \"E\" || s(i).toUpperCase == \"I\" || s(i).toUpperCase\
    \ == \"O\" || s(i).toUpperCase == \"U\")\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0l)(_ + _)", "        val vowels = Set(\"\
    A\", \"E\", \"I\", \"O\", \"U\")\n        var count = 0\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(s(i)) && s(i) % 2 == 0)\n                count\
    \ += 1\n        count", "        val vowels = Set(\"A\", \"E\", \"I\", \"O\",\
    \ \"U\")\n        val evenIndices = mutable.ListBuffer[Int]()\n        for (i\
    \ <- 0 until s.length)\n            if (vowels(s(i)) && s(i) % 2 == 0)\n     \
    \           evenIndices += i\n        evenIndices.length", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0l)(_ + _)", "        val vowels = Set(\"\
    A\", \"E\", \"I\", \"O\", \"U\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)) && s(i) % 2\
    \ == 0)\n                evenIndices += i\n        evenIndices.size", "      \
    \  val vowels = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n             \
    \   if (i % 2 == 0)\n                    count += 1\n                else\n  \
    \                  count -= 1\n        count", "        val vowels = mutable.Set[Char]('a',\
    \ 'e', 'i', 'o', 'u')\n        val evenIndices = mutable.Set[Int]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels(s(i)) && s(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.size", "        val\
    \ vowels = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.filter(i => vowels(i).contains(s(i)))\n            .map(i\
    \ => s(i).toUpperCase == s(i).toLowerCase)\n            .count(_)", "        val\
    \ vowels = \"aeiouAEIOU\".toCharArray\n        var count = 0\n        for (i <-\
    \ 0 until s.length)\n            if (vowels(i) % 2 == 0)\n                count\
    \ += s.charAt(i).toUpperCase == s.charAt(i)\n        count", "        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.map(i => vowels(i))\n        evenIndices.count(vowels.contains)",
  "        val vowels = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0\
    \ until s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n       \
    \         if (i % 2 == 0)\n                    count += 1\n        count", " \
    \       val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0l)(_ + _)", "        val vowels = \"aeiouAEIOU\"\
    \n        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n             \
    \   if (i % 2 == 0)\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"AEIOUaeiou\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s(i)))\n\
    \                if (s(i).toUpperCase == \"A\")\n                    evenIndices\
    \ += i\n        evenIndices.length", "        val vowels = \"aeiouAEIOU\"\n  \
    \      val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s(i)) >= 0)\n                evenIndices\
    \ += i\n        evenIndices.toList.foldLeft(0l) { (sum, index) =>\n          \
    \  if (index % 2 == 0)\n                sum + vowels.indexOf(s(index))\n     \
    \       else sum\n        }", "        val vowels = Set(\"a\", \"e\", \"i\", \"\
    o\", \"u\")\n        val evenIndices = mutable.Set[Int]()\n        for (i <- 0\
    \ until s.length)\n            if (vowels(s(i)))\n                if (s(i) % 2\
    \ == 0)\n                    evenIndices += i\n        evenIndices.size", "  \
    \      val vowels = \"AEIOUaeiou\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.count(i => s(i) ==\
    \ 'U')", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(i) % 2 == 0)\n                evenIndices += i\n        evenIndices.toList.foldLeft(0l)\
    \ { (sum, index) => sum + vowels(index) }", "        val vowels = \"aeiouAEIOU\"\
    \n        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n             \
    \   if (i % 2 == 0)\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = s filter (_ % 2 == 0)\n        val evenIndices_vowels = evenIndices filter\
    \ (vowels.contains)\n        evenIndices_vowels.size match {\n            case\
    \ 0 => 0\n            case _ => evenIndices_vowels.sum\n        }", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val vowelsSet = vowels.toSet\n        val vowelsCount\
    \ = s.toCharArray.filter(vowelsSet.contains).length\n        val evenIndices =\
    \ s.toCharArray.filter(vowelsSet.contains)\n            .zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1)\n        evenIndices.foldLeft(0l) { (sum, index) => sum\
    \ + vowelsCount(index) }", "        val vowels = \"aeiouAEIOU\".toList\n     \
    \   val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\
    \ evenIndices += if (s(i).isUpper) 1 else 0\n        evenIndices.sum", "     \
    \   val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                evenIndices += i\n        evenIndices.toList.count(i\
    \ => s.charAt(i).toUpper == s.charAt(i))", "        val vowels = \"aeiouAEIOU\"\
    .toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n             \
    \   evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_ + _)", "     \
    \   val vowels = \"aeiouAEIOU\".toCharArray\n        var count = 0\n        for\
    \ (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0) count += 1\n  \
    \      count", "        var count = 0\n        for (i <- 0 until s.length)\n \
    \           if (s(i) == 'A' && s(i+1) == 'A')\n                count += 1\n  \
    \          else if (s(i) == 'a' && s(i+1) == 'a')\n                count += 1\n\
    \            else if (s(i) == 'B' && s(i+1) == 'B')\n                count +=\
    \ 1\n            else if (s(i) == 'b' && s(i+1) == 'b')\n                count\
    \ += 1\n            else if (s(i) == 'C' && s(i+1) == 'C')\n                count\
    \ += 1\n            else if (s(i) == 'c' && s(i+1) == 'c')\n                count\
    \ += 1\n            else if (s(i) == 'D' && s(i+1) == 'D')\n                count\
    \ += 1\n            else if (s(i) == 'd' && s(i+1) == 'd')\n                count\
    \ += 1\n            else if (s(i) == 'E' && s(i+1) == 'E')\n                count\
    \ += 1\n            else if (s(i) == 'e' && s(i+1) == 'e')\n                count\
    \ += 1\n            else if (s(i) == 'F' && s(i+1) == 'F')\n                count\
    \ += 1\n            else if (s(i) == 'f' && s(i+1) == 'f')\n                count\
    \ += 1\n            else if (s(i) == 'G' && s(i+1) == 'G')\n                count\
    \ += 1\n            else if (s(i) == 'g' && s(i+1) == 'g')\n                count\
    \ += 1\n            else if (s(i) == 'H' && s(i+1) == 'H')\n                count\
    \ += 1\n            else if (s(i) == 'h' && s(i+1) == 'h')\n                count\
    \ += 1\n            else if (s(i) == 'I' && s(i+1) == 'I')\n                count\
    \ += 1\n            else if (s(i) == 'i' && s(i+1) == 'i')\n                count\
    \ += 1\n            else if (s(i) == 'J' && s(i+1) == 'J')\n                count\
    \ += 1\n            else if (s(i) == 'j' && s(i+1) == 'j')\n                count\
    \ += 1\n            else if (s(i) == 'K' && s(i+1) == 'K')\n                count\
    \ += 1\n            else if (s(i) == 'k' && s(i+1) == 'k')\n                count\
    \ += 1\n            else if (s(i) == 'L' && s(i+1) == 'L')\n                count\
    \ += 1\n            else if (s(i) == 'l' && s(i+1) == 'l')\n                count\
    \ += 1\n            else if (s(i) == 'M' && s(i+1) == 'M')\n                count\
    \ += 1\n            else if (s(i) == 'm' && s(i+1) == 'm')\n                count\
    \ += 1\n            else if (s(i) == 'N' && s(i+1) == 'N')\n                count\
    \ += 1\n            else if (s(i) == 'n' && s(i+1) == 'n')\n                count\
    \ += 1\n            else if (s(i) == 'O' && s(i+1) == 'O')\n                count\
    \ += 1\n            else if (s(i) == 'o' && s(i+1) == 'o')\n", "        var count\
    \ = 0\n        for (i <- 0 until s.length if s(i) == 'A') {\n            count\
    \ += 1\n        }\n        for (i <- 0 until s.length if s(i) == 'E') {\n    \
    \        count += 1\n        }\n        for (i <- 0 until s.length if s(i) ==\
    \ 'I') {\n            count += 1\n        }\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') {\n            count += 1\n        }\n        for (i <- 0 until\
    \ s.length if s(i) == 'U') {\n            count += 1\n        }\n        count",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices\
    \ = evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n", "        val vowels = \"aeiouAEIOU\"\n        var count = 0\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                count += 1\n        count", "        val vowels = \"\
    aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n        for\
    \ (i <- 0 until s.length) if (s(i).isUpper) evenIndices += i\n        evenIndices.toList.map(i\
    \ => vowels.indexOf((s(i).toLowerCase))).sum", "        val vowels = Set(\"A\"\
    , \"E\", \"I\", \"O\", \"U\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length) evenIndices += if (i % 2 == 0) i else i +\
    \ 1\n        evenIndices.toList.map(vowels.contains).sum", "        val vowels\
    \ = \"AEIOUaeiou\".toCharArray\n        val evenIndices = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.length", "        val vowels\
    \ = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n        \
    \        if (s(i) % 2 == 0)\n                    evenIndices += i\n        evenIndices.size",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.size", "        val vowels = \"aeiouAEIOU\".toCharArray\n\
    \        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length) if (vowels(i) % 2 == 0) evenIndices += i\n        evenIndices.toList.foldLeft(0l)\
    \ { (sum, index) =>\n            if (index % 2 == 0) sum + vowels(index)\n   \
    \         else sum\n        }", "        val vowels = \"aeiouAEIOU\"\n       \
    \ val evenIndices = mutable.Set[Int]()\n        val upperIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \                else\n                    upperIndices += i\n        evenIndices.toSet.count(i\
    \ => vowels.indexOf(s.charAt(i)) >= 0)", "        var count = 0L\n        for\
    \ (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'a' && s(i+1)\
    \ == 'a' && s(i+2) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'B' && s(i+1) == 'B' && s(i+2) == 'B')\n                count += 1\n    \
    \        else if (s(i) == 'b' && s(i+1) == 'b' && s(i+2) == 'b')\n           \
    \     count += 1\n            else if (s(i) == 'C' && s(i+1) == 'C' && s(i+2)\
    \ == 'C')\n                count += 1\n            else if (s(i) == 'c' && s(i+1)\
    \ == 'c' && s(i+2) == 'c')\n                count += 1\n            else if (s(i)\
    \ == 'D' && s(i+1) == 'D' && s(i+2) == 'D')\n                count += 1\n    \
    \        else if (s(i) == 'd' && s(i+1) == 'd' && s(i+2) == 'd')\n           \
    \     count += 1\n            else if (s(i) == 'E' && s(i+1) == 'E' && s(i+2)\
    \ == 'E')\n                count += 1\n            else if (s(i) == 'e' && s(i+1)\
    \ == 'e' && s(i+2) == 'e')\n                count += 1\n            else if (s(i)\
    \ == 'F' && s(i+1) == 'F' && s(i+2) == 'F')\n                count += 1\n    \
    \        else if (s(i) == 'f' && s(i+1) == 'f' && s(i+2) == 'f')\n           \
    \     count += 1\n            else if (s(i) == 'G' && s(i+1) == 'G' && s(i+2)\
    \ == 'G')\n                count += 1\n            else if (s(i) == 'g' && s(i+1)\
    \ == 'g' && s(i+2) == 'g')\n                count += 1\n            else if (s(i)\
    \ == 'H' && s(i+1) == 'H' && s(i+2) == 'H')\n                count += 1\n    \
    \        else if (s(i) == 'h' && s(i+1) == 'h' && s(i+2) == 'h')\n           \
    \     count += 1\n            else if (s(i) == 'I' && s(i+1) == 'I' && s(i+2)\
    \ == 'I')\n                count += 1\n            else if (s(i) == 'i' && s(i+1)\
    \ == 'i' && s(i+2) == 'i')\n                count += 1\n            else if (s(i)\
    \ == 'J' && s(i+1) == 'J' && s(i+2) == 'J')\n                count += 1\n    \
    \        else if (s(i) == 'j' && s(i+1) == 'j' && s(i+2) == 'j')\n           \
    \     count += 1\n            else if (s(i) == 'K' && s(i+1) == 'K' && s(i+2)\
    \ == 'K')\n                count += 1\n            else if (s(i) == 'k' && s(i+1)\
    \ == 'k' && s(i+2) == 'k')\n                count += 1\n", "        val vowels\
    \ = \"AEIOUaeiou\"\n        val evenIndices = mutable.ListBuffer[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \   evenIndices.toList.foldLeft(0l)(_ + _)", "        val vowels = \"aeiouAEIOU\"\
    .toSet\n        val evenIndices = mutable.Set[Int]()\n        val evenIndices_\
    \ = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n\
    \                if (s(i) % 2 == 0)\n                    evenIndices += i\n  \
    \              else\n                    evenIndices_ += i\n        evenIndices.size\
    \ + (evenIndices_.size - evenIndices.size)", "        val vowels = \"aeiouAEIOU\"\
    \n        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s.charAt(i)) > -1)\n             \
    \   if (i % 2 == 0)\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_\
    \ + _)", "        val vowels = \"aeiouAEIOU\"\n        var count = 0\n       \
    \ for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i)) >=\
    \ 0)\n                count += 1\n        count * 2", "        val vowels = \"\
    AEIOUaeiou\".toSet\n        val evenIndices = mutable.Set[Int]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels(s(i)))\n                if (s(i)\
    \ % 2 == 0)\n                    evenIndices += i\n        evenIndices.size",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' || s(i) == 'a' || s(i) == 'E' || s(i) == 'e' || s(i) == 'I' || s(i) ==\
    \ 'i' || s(i) == 'O' || s(i) == 'o' || s(i) == 'U' || s(i) == 'u')\n         \
    \       count += 1\n        count ", "        val vowels = \"aeiouAEIOU\".toCharArray\n\
    \        val evenIndices = mutable.ArrayBuffer.empty[Int]\n        for (i <- 0\
    \ until s.length)\n            if (vowels(i) % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.length", "        val vowels = \"aeiouAEIOU\"\n  \
    \      val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) > -1)\n                if (i % 2\
    \ == 0)\n                    evenIndices += i\n        evenIndices.size", "  \
    \      val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices\
    \ = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndice", "        val vowels = \"aeiouAEIOU\"\n      \
    \  var count = 0\n        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    count += 1\n   \
    \             else\n                    count -= 1\n        count", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.size", "        val vowels = \"aeiouAEIOU\".toList\n    \
    \    val evenIndices = 0 until s.length\n        val evenIndicesWithVowels = evenIndices.filter(i\
    \ => vowels(i) % 2 == 0)\n        evenIndicesWithVowels.count(i => s(i) == s(i).toUpper)",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0l)((acc, i) => acc + i)", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n\
    \                evenIndices += i\n        evenIndices.count(_ % 2 == 0)", " \
    \       val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i)) >=\
    \ 0)\n                if (s(i).toUpper == s(i).toLower)\n                    evenIndices\
    \ += i\n        evenIndices.toList.length", "        val vowels = \"aeiouAEIOU\"\
    \n        val evenIndices = mutable.Set[Int]()\n        val upperIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \                else\n                    upperIndices += i\n        evenIndices.toSet.size\
    \ + (upperIndices.toSet.size - evenIndices.toSet.size) * vowels.length", "   \
    \     val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_ + _)",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) > -1)\n                if (i % 2\
    \ == 0)\n                    evenIndices += i\n        evenIndices.size", "  \
    \      val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.size", "        var count = 0L\n        var evenIndex = 0\n\
    \        for (i <- 0 until s.length)\n            if (s(i).isUpper)\n        \
    \        if (evenIndex % 2 == 0)\n                    count += 1\n           \
    \     evenIndex += 1\n        evenIndex = 0\n        for (i <- 0 until s.length)\n\
    \            if (s(i).isUpper)\n                if (evenIndex % 2 == 1)\n    \
    \                count += 1\n                evenIndex += 1\n        count * 2",
  "        var count = 0L\n        var even = 0\n        var odd = 0\n        for\
    \ (i <- 0 until s.length)\n            if (s(i).isUpper)\n                if (even\
    \ % 2 == 0)\n                    count += 1\n                even += 1\n     \
    \       else\n                if (odd % 2 == 0)\n                    count +=\
    \ 1\n                odd += 1\n        even", "        val vowels = \"aeiouAEIOU\"\
    \n        val vowelsSet = vowels.toSet\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices_set = evenIndices.toSet\n        val evenIndices_set_size\
    \ = evenIndices_set.size\n        val evenIndices_set_iterator = evenIndices_set.iterator\n\
    \        val evenIndices_set_iterator_next = evenIndices_set_iterator.next\n \
    \       val evenIndices_set_iterator_next_value = evenIndices_set_iterator.next\n\
    \        val evenIndices_set_iterator_next_next_value = evenIndices_set_iterator.next\n\
    \        val evenIndices_set_iterator_next_next_next_value = evenIndices_set_iterator.next\n\
    \        val evenIndices_set_iterator_next_next_next_next_value = evenIndices_set_iterator.next\n\
    \        val evenIndices_set_iterator_next_next_next_next_next_value = evenIndices_set_iterator.next\n\
    \        val evenIndices_set_iterator_next_next_next_next_next_next_value = evenIndices_set_iterator.next\n\
    \        val evenIndices_set_iterator_next_next_next_next_next_next_next_value\
    \ = evenIndices_set_iterator.next\n        val evenIndices_set_iterator_next_next_next_next_next_next_next_next_value\
    \ = evenIndices_set_iterator.next\n        val evenIndices_set_iterator_next_next_next_next_next_next_next_next_next_value\
    \ = evenIndices_set_iterator.next\n        val evenIndices_set_iterator_next_next_next_next_next_next_next_next_next_next_value\
    \ = evenIndices_set_iterator.next\n        val evenIndices_set_iterator_next_next_next_next_next_next_next_next_next_next_value\
    \ = evenIndices_set_iterator.next\n        val evenIndices_set_iterator_next_next_next_next_next_next_next_next_next_next_value\
    \ = evenIndices_set_iterator.next\n        val evenIndices_set_iterator_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = evenIndices_set_iterator.next\n        val evenIndices_set_iterator_next_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = evenIndices_set_iterator.next\n        val evenIndices_set_iterator_next_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = evenIndices_set_iterator.next\n        val evenIndices_set_iterator_next_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = evenIndices_set_iterator.next\n        val evenIndices_set_iterator_next_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = evenIndices_set_iterator.next\n        val evenIndices_set_iterator_next_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = ", "        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices =\
    \ mutable.ListBuffer[Int]()\n        for(i <- 0 until s.length)\n            if(vowels.contains(s(i)))\n\
    \                if(i % 2 == 0)\n                    evenIndices += i\n      \
    \  evenIndices.toList.size", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ evenIndices = mutable.ListBuffer[Int]()\n        val upperIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \                else\n                    upperIndices += i\n        evenIndices.toList.map(evenIndices.indexOf(_)).sum",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n      \
    \          count += 1\n        count", "        val vowels = \"aeiouAEIOU\".toList\n\
    \        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i) % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.toList.foldLeft(0l)(_ + _)", "        val vowels =\
    \ \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n        for(i\
    \ <- 0 until s.length) if(vowels.contains(s.charAt(i)) && i % 2 == 0) evenIndices\
    \ += i\n        evenIndices.size", "        val vowels = \"aeiouAEIOU\".toSet\n\
    \        val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels(s(i)))\n                if (s(i) % 2 == 0)\n         \
    \           evenIndices += i\n        evenIndices.size", "        val vowels =\
    \ \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l) { (sum,\
    \ i) =>\n            if (sum % 2 == 0)\n                sum + vowels(i)\n    \
    \        else sum\n        }", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ evenIndices = mutable.Set[Int]()\n        val evenIndices_ = mutable.Set[Int]()\n\
    \        val evenIndices_2 = mutable.Set[Int]()\n        val evenIndices_3 = mutable.Set[Int]()\n\
    \        val evenIndices_4 = mutable.Set[Int]()\n        val evenIndices_5 = mutable.Set[Int]()\n\
    \        val evenIndices_6 = mutable.Set[Int]()\n        val evenIndices_7 = mutable.Set[Int]()\n\
    \        val evenIndices_8 = mutable.Set[Int]()\n        val evenIndices_9 = mutable.Set[Int]()\n\
    \        val evenIndices_10 = mutable.Set[Int]()\n        val evenIndices_11 =\
    \ mutable.Set[Int]()\n        val evenIndices_12 = mutable.Set[Int]()\n      \
    \  val evenIndices_13 = mutable.Set[Int]()\n        val evenIndices_14 = mutable.Set[Int]()\n\
    \        val evenIndices_15 = mutable.Set[Int]()\n        val evenIndices_16 =\
    \ mutable.Set[Int]()\n        val evenIndices_17 = mutable.Set[Int]()\n      \
    \  val evenIndices_18 = mutable.Set[Int]()\n        val evenIndices_19 = mutable.Set[Int]()\n\
    \        val evenIndices_20 = mutable.Set[Int]()\n        val evenIndices_21 =\
    \ mutable.Set[Int]()\n        val evenIndices_22 = mutable.Set[Int]()\n      \
    \  val evenIndices_23 = mutable.Set[Int]()\n        val evenIndices_24 = mutable.Set[Int]()\n\
    \        val evenIndices_25 = mutable.Set[Int]()\n        val evenIndices_26 =\
    \ mutable.Set[Int]()\n        val evenIndices_27 = mutable.Set[Int]()\n      \
    \  val evenIndices_28 = mutable.Set[Int]()\n        val evenIndices_29 = mutable.Set[Int]()\n\
    \        val evenIndices_30 = mutable.Set[Int]()\n        val evenIndices_31 =\
    \ mutable.Set[Int]()\n        val evenIndices_32 = mutable.Set[Int]()\n      \
    \  val evenIndices_33 = mutable.Set[Int]()\n        val evenIndices_", "     \
    \   val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                evenIndices += i\n        evenIndices.toList.filter(i\
    \ => i % 2 == 0).length", "        val vowels = \"aeiouAEIOU\".toCharArray\n \
    \       val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i) % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.toList.foldLeft(0l)(_ + _)", "        var count =\
    \ 0\n        var evenIndex = 0\n        for (i <- 0 until s.length)\n        \
    \    if (s(i).isUpper)\n                if (evenIndex % 2 == 0)\n            \
    \        count += 1\n                evenIndex += 1\n        count ", "      \
    \  val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s(i)))\n\
    \                if (s(i).toUpper == s(i))\n                    evenIndices +=\
    \ i\n        evenIndices.size", "        val vowels = Set(\"A\", \"E\", \"I\"\
    , \"O\", \"U\")\n        val evenIndices = mutable.Set[Int]()\n        for (i\
    \ <- 0 until s.length)\n            if (vowels(s(i)) && s(i) % 2 == 0)\n     \
    \           evenIndices += i\n        evenIndices.size", "        val vowels =\
    \ \"AEIOUaeiou\".toList\n        var count = 0\n        for (i <- 0 until s.length)\
    \ count += vowels.count(s.charAt(i).toUpper)\n        count", "        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i).equals(s.charAt(i))\
    \ && i % 2 == 0)\n                evenIndices += i\n        evenIndices.toList.foldLeft(0l)((acc,\
    \ i) => acc + i)", "        val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\"\
    )\n        var count = 0\n        for (i <- 0 until s.length if i % 2 == 0) {\n\
    \            if (vowels(s(i)) && s(i) != \"U\") {\n                count += 1\n\
    \            }\n        }\n        count", "        val vowels = \"aeiouAEIOU\"\
    \n        val evenIndices = mutable.Set[Int]()\n        val evenIndices_ = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \                else\n                    evenIndices_ += i\n        evenIndices.toSet.size\
    \ + (evenIndices_.toSet.size - evenIndices.toSet.size) * vowels.length", "   \
    \     val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.contains(s.charAt(i)))\n                if (i % 2 == 0)\n\
    \                    evenIndices += i\n        evenIndices.size", "        val\
    \ vowels = \"aeiouAEIOU\".toCharArray\n        var count = 0\n        for (i <-\
    \ 0 until s.length) count += vowels(i).toUpper == s(i)\n        count", "    \
    \    val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                evenIndices += i\n        evenIndices.toList.count(_\
    \ % 2 == 0)", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices =\
    \ mutable.Set[Int]()\n        val evenIndices_ = mutable.Set[Int]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i)) > -1)\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \           else\n                    evenIndices_ += i\n        evenIndices.size\
    \ match {\n            case 0 => 0\n            case 1 => evenIndices_.head\n\
    \            case _ => evenIndices_.count(i => vowels.indexOf(s.charAt(i)) > -1)\n\
    \        }", "        val vowels = \"aeiouAEIOU\"\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n     \
    \   val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext", "        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = s filter (x => x % 2 == 0)\
    \ map (x => vowels.indexOf(x))\n        evenIndices.toSet.size + (evenIndices.toSet.size\
    \ % 2)", "        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(i => vowels(i).isUpper).count(i\
    \ => s(i).isUpper)", "        val vowels = \"aeiouAEIOU\".toList\n        val\
    \ evenIndices = 0 until s.length\n        evenIndices.foreach(i => if (s(i).isUpper)\
    \ vowels.count(_ == s(i)) else 0)", "        val vowels = \"aeiouAEIOU\".toSet\n\
    \        val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels(s(i)))\n                evenIndices += i\n        evenIndices.toList.count(i\
    \ => s(i) == 'U')", "        var count = 0L\n        for (i <- 0 until s.length\
    \ if s(i) == 'A') {\n            count += 1L\n        }\n        for (i <- 0 until\
    \ s.length if s(i) == 'E') {\n            count += 1L\n        }\n        for\
    \ (i <- 0 until s.length if s(i) == 'I') {\n            count += 1L\n        }\n\
    \        for (i <- 0 until s.length if s(i) == 'O') {\n            count += 1L\n\
    \        }\n        for (i <- 0 until s.length if s(i) == 'U') {\n           \
    \ count += 1L\n        }\n        count", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = 0 until s.length\n        evenIndices.filter(_\
    \ % 2 == 0).map(s.length).count(s => vowels.contains(s.charAt(_)))", "       \
    \ val vowels = \"aeiouAEIOU\".toList\n        var count = 0\n        for (i <-\
    \ 0 until s.length)\n            if (vowels(i).isUpper)\n                count\
    \ += 1\n            else\n                if (i % 2 == 0)\n                  \
    \  count += 1\n                else\n                    count += 0\n        count",
  "        val vowels = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0\
    \ until s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n       \
    \         if (i % 2 == 0)\n                    count += 1\n        count", " \
    \       val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n        \
    \        if (s(i) % 2 == 0)\n                    evenIndices += i\n        evenIndices.size",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i)) >=\
    \ 0)\n                if (s(i).toUpper == s(i))\n                    evenIndices\
    \ += i\n        evenIndices.toList.length", "        val vowels = \"aeiouAEIOU\"\
    \n        val vowelCounts = mutable.Map[Char, Long]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.contains(s.charAt(i)))\n                vowelCounts(s.charAt(i))\
    \ = vowelCounts.getOrElse(s.charAt(i), 0) + 1\n        vowelCounts.filter(_._2\
    \ % 2 == 0).map(_._1).sum", "        val vowels = \"aeiouAEIOU\".toCharArray\n\
    \        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length) evenIndices += if (i % 2 == 0) vowels.indexOf(s(i)) else 0\n     \
    \   evenIndices.sum", "        val vowels = \"aeiouAEIOU\".toCharArray\n     \
    \   val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels(i) % 2 == 0)\n                evenIndices += i\n     \
    \   evenIndices.toList.count(i => s(i) == 'U')", "        val vowels = \"aeiouAEIOU\"\
    \n        val evenIndices = mutable.ListBuffer[Int]()\n        val upperIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2 == 0)\n \
    \                   evenIndices += i\n                else\n                 \
    \   upperIndices += i\n        evenIndices.toList.map(evenIndices.indexOf(_)).sum",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.size", "        val vowels = \"aeiouAEIOU\".toCharArray\n\
    \        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i) % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.toList.foldLeft(0l) { (sum, i) =>\n            if\
    \ (sum % 2 == 0)\n                sum + vowels(i)\n            else sum\n    \
    \    }", "        var count = 0\n        for (i <- 0 until s.length)\n       \
    \     if (s(i) == 'A' || s(i) == 'a') count += 1\n            if (s(i) == 'B'\
    \ || s(i) == 'b') count += 1\n            if (s(i) == 'C' || s(i) == 'c') count\
    \ += 1\n            if (s(i) == 'D' || s(i) == 'd') count += 1\n            if\
    \ (s(i) == 'E' || s(i) == 'e') count += 1\n            if (s(i) == 'F' || s(i)\
    \ == 'f') count += 1\n            if (s(i) == 'G' || s(i) == 'g') count += 1\n\
    \        if (count % 2 == 0)\n            count\n        else\n            0",
  "        val vowels = \"aeiouAEIOU\".toList\n        var count = 0L\n        var\
    \ i = 0\n        while (i < s.length)\n            if (vowels(i) % 2 == 0)\n \
    \               count += 1\n            i += 1\n        count", "        var count\
    \ = 0\n        for (i <- 0 until s.length)\n            if (s(i).isUpper)\n  \
    \              count += 1\n        if (count % 2 == 0)\n            count\n  \
    \      else\n            0", "        val vowels = \"aeiouAEIOU\".toCharArray\n\
    \        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i) % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.toList.foldLeft(0l)(_ + _)", "        val vowels =\
    \ \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_ + _)",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i)) >=\
    \ 0)\n                if (s(i).toUpperCase == \"A\" || s(i).toUpperCase == \"\
    E\" || s(i).toUpperCase == \"I\" || s(i).toUpperCase == \"O\" || s(i).toUpperCase\
    \ == \"U\")\n                    evenIndices += i\n        evenIndices.toList.size",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices\
    \ = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val evenIndices = evenIndices.filter(_ > 0)\n        val\
    \ evenIndices = evenIndices.filter(_ < s.length)\n        val evenIndices = evenIndices.filter(_\
    \ > 0)\n        val evenIndices = evenIndices.filter(_ < s.length)\n        val\
    \ evenIndices = evenIndices.filter(_ > 0)\n        val evenIndices = evenIndices.filter(_\
    \ < s.length)\n        val even", "        val vowels = \"aeiouAEIOU\".toCharArray\n\
    \        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i) % 2 == 0) evenIndices += i\n        evenIndices.toList.foldLeft(0l)\
    \ { (acc, i) => acc + s.charAt(i).toUpperCase }", "        val vowels = \"aeiouAEIOU\"\
    .toCharArray\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = evenIndices.filter(i => s(i).isUpper)\n        val evenIndices = evenIndices.filter(i\
    \ => vowels(i).isEven)\n        evenIndices.length", "        var count = 0\n\
    \        var index = 0\n        while (index < s.length()) {\n            if (s(index).isUpper)\
    \ {\n                count += 1\n            }\n            index += 1\n     \
    \   }\n        count", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices\
    \ = mutable.Set[Int]()\n        for(i <- 0 until s.length)\n            if(vowels.indexOf(s.charAt(i))\
    \ > -1)\n                if(i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.size", "        val vowels = \"aeiouAEIOU\".toCharArray\n\
    \        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length) if (vowels(i) % 2 == 0) evenIndices += i\n        evenIndices.toList.foldLeft(0l)\
    \ { (sum, index) => sum + s.length - index }", "        val vowels = Set(\"A\"\
    , \"E\", \"I\", \"O\", \"U\")\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)) && s(i) % 2\
    \ == 0)\n                evenIndices += i\n        evenIndices.toList.length",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s(i).isUpper)\n\
    \                count += 1\n            else\n                if (s(i).isUpper)\n\
    \                    count -= 1\n                else\n                    count\
    \ += 2\n        count", "        val vowels = \"aeiouAEIOU\".toList\n        val\
    \ evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels(i).equals(s.charAt(i)) && i % 2 == 0)\n              \
    \  evenIndices += i\n        evenIndices.toList.foldLeft(0l)(_ + _)", "      \
    \  val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i).toChar)\
    \ != -1)\n                if (s(i).toChar != 'A')\n                    evenIndices\
    \ += i\n        evenIndices.toList.foldLeft(0l)(_ + _)", "        val vowels =\
    \ mutable.Set(\"A\", \"a\", \"E\", \"e\", \"I\", \"i\", \"O\", \"o\", \"U\", \"\
    u\")\n        val evenIndices = mutable.Set(0, 2, 4, 6, 8)\n        val counts\
    \ = mutable.Map[Int, Long]()\n        for (i <- 0 until s.length)\n          \
    \  if (vowels(s(i)) && evenIndices(i))\n                counts(evenIndices(i))\
    \ += 1\n        counts.values.sum", "        val vowels = Set(\"a\", \"e\", \"\
    i\", \"o\", \"u\")\n        val evenIndices = mutable.Set[Int]()\n        val\
    \ evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n    \
    \        if (vowels(s(i)))\n                if (s(i) % 2 == 0)\n             \
    \       evenIndices += i\n        evenIndices.toList.map(i => s(i)).count(c =>\
    \ c.toUpper == 'A')", "        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (s(i) == 'A' || s(i) == 'a') count += 1\n            if (s(i)\
    \ == 'E' || s(i) == 'e') count += 1\n            if (s(i) == 'I' || s(i) == 'i')\
    \ count += 1\n            if (s(i) == 'O' || s(i) == 'o') count += 1\n       \
    \     if (s(i) == 'U' || s(i) == 'u') count += 1\n        if (count % 2 == 0)\
    \ 1 else 0", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i).toLowerCase) != -1)\n            \
    \    if (i % 2 == 0)\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0l)\
    \ { (sum, index) =>\n            if (index % 2 == 0)\n                sum + s.length\
    \ - index\n            else\n                sum\n        }"]
stop_tokens:
- "\n    }\n"
