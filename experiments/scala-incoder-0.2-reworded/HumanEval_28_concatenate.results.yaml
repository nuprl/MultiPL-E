language: scala
name: HumanEval_28_concatenate
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (s, s) => s + s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuqpkd7jo.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.foldLeft(\e[31m\"\"\e[0m)( (\e[36ms\e\
    [0m, \e[36ms\e[0m) => s + s)\n\e[31m\e[31m   |\e[0m                          \
    \        ^\e[0m\n\e[31m   |\e[0ms is already defined as \e[33mparameter\e[0m \e\
    [35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659798949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings(0)\n            case _ => {\n                val result = strings(0)\n\
    \                strings.tail.foreach(x => result += x)\n                result\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3qjjgasi.scala:15:49 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                strings.tail.foreach(\e[36mx\e[0m =>\
    \ result += x)\n\e[31m\e[31m   |\e[0m                                        \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of String\
    \ - did you mean result.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (s, s) => s + s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuqpkd7jo.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.foldLeft(\e[31m\"\"\e[0m)( (\e[36ms\e\
    [0m, \e[36ms\e[0m) => s + s)\n\e[31m\e[31m   |\e[0m                          \
    \        ^\e[0m\n\e[31m   |\e[0ms is already defined as \e[33mparameter\e[0m \e\
    [35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659798949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (s, s) => s + s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuqpkd7jo.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.foldLeft(\e[31m\"\"\e[0m)( (\e[36ms\e\
    [0m, \e[36ms\e[0m) => s + s)\n\e[31m\e[31m   |\e[0m                          \
    \        ^\e[0m\n\e[31m   |\e[0ms is already defined as \e[33mparameter\e[0m \e\
    [35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659798949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings.head\n            case _ => strings.head + concatenate(strings.tail)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (s, s) => s + s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuqpkd7jo.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.foldLeft(\e[31m\"\"\e[0m)( (\e[36ms\e\
    [0m, \e[36ms\e[0m) => s + s)\n\e[31m\e[31m   |\e[0m                          \
    \        ^\e[0m\n\e[31m   |\e[0ms is already defined as \e[33mparameter\e[0m \e\
    [35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659798949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (acc, s) => acc + s)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (acc, s) => acc + s )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (s, s) => s + s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuqpkd7jo.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.foldLeft(\e[31m\"\"\e[0m)( (\e[36ms\e\
    [0m, \e[36ms\e[0m) => s + s)\n\e[31m\e[31m   |\e[0m                          \
    \        ^\e[0m\n\e[31m   |\e[0ms is already defined as \e[33mparameter\e[0m \e\
    [35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659798949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings.head\n            case _ => strings.head + concatenate(strings.tail)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ _ => strings.head + concatenate(strings.tail)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ _ => strings.head + concatenate(strings.tail)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ _ => strings.mkString(\"\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (acc, s) => acc + s)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings(0)\n            case _ => strings.foldLeft(\"\")(_ + _)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings.head\n            case _ => strings.head + concatenate(strings.tail)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings(0)\n            case _ => strings.foldLeft(\"\")(_ + _)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (acc, s) => acc + s )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (acc, s) => acc + s)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (s, s) => s + s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuqpkd7jo.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.foldLeft(\e[31m\"\"\e[0m)( (\e[36ms\e\
    [0m, \e[36ms\e[0m) => s + s)\n\e[31m\e[31m   |\e[0m                          \
    \        ^\e[0m\n\e[31m   |\e[0ms is already defined as \e[33mparameter\e[0m \e\
    [35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659798949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ _ => strings.head + concatenate(strings.tail)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (s, s) => s + s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuqpkd7jo.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.foldLeft(\e[31m\"\"\e[0m)( (\e[36ms\e\
    [0m, \e[36ms\e[0m) => s + s)\n\e[31m\e[31m   |\e[0m                          \
    \        ^\e[0m\n\e[31m   |\e[0ms is already defined as \e[33mparameter\e[0m \e\
    [35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659798949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (s, s) => s + s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuqpkd7jo.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.foldLeft(\e[31m\"\"\e[0m)( (\e[36ms\e\
    [0m, \e[36ms\e[0m) => s + s)\n\e[31m\e[31m   |\e[0m                          \
    \        ^\e[0m\n\e[31m   |\e[0ms is already defined as \e[33mparameter\e[0m \e\
    [35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659798949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ _ => strings.mkString(\"\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (acc, s) => acc + s)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings(0)\n            case _ => {\n                val result = strings(0)\n\
    \                strings.tail.foreach(s => result += s)\n                result\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp185uog7e.scala:15:49 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                strings.tail.foreach(\e[36ms\e[0m =>\
    \ result += s)\n\e[31m\e[31m   |\e[0m                                        \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of String\
    \ - did you mean result.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings(0)\n            case _ => strings.mkString(\"\")\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings(0)\n            case _ => strings.foldLeft(\"\")(_ + _)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (acc, s) => acc + s)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (s, s) => s + s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuqpkd7jo.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.foldLeft(\e[31m\"\"\e[0m)( (\e[36ms\e\
    [0m, \e[36ms\e[0m) => s + s)\n\e[31m\e[31m   |\e[0m                          \
    \        ^\e[0m\n\e[31m   |\e[0ms is already defined as \e[33mparameter\e[0m \e\
    [35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659798949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings(0)\n            case _ => {\n                val result = strings(0)\n\
    \                for (i <- 1 until strings.length)\n                    result\
    \ += strings(i)\n                result\n            }\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsajfspxw.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    result += strings(i)\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean result.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ _ => strings.head + concatenate(strings.tail)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings(0)\n            case _ => strings.foldLeft(\"\")(_ + _)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings(0)\n            case _ => strings.foldLeft(\"\")(_ + _)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (s, s) => s + s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuqpkd7jo.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.foldLeft(\e[31m\"\"\e[0m)( (\e[36ms\e\
    [0m, \e[36ms\e[0m) => s + s)\n\e[31m\e[31m   |\e[0m                          \
    \        ^\e[0m\n\e[31m   |\e[0ms is already defined as \e[33mparameter\e[0m \e\
    [35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659798949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings(0)\n            case _ => strings.foldLeft(\"\")(_ + _)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings.head\n            case _ => strings.head + concatenate(strings.tail)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (acc, s) => acc + s)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings(0)\n            case _ => strings.foldLeft(\"\")(_ + _)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (s, s) => s + s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuqpkd7jo.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.foldLeft(\e[31m\"\"\e[0m)( (\e[36ms\e\
    [0m, \e[36ms\e[0m) => s + s)\n\e[31m\e[31m   |\e[0m                          \
    \        ^\e[0m\n\e[31m   |\e[0ms is already defined as \e[33mparameter\e[0m \e\
    [35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659798949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings.head\n            case _ => strings.head + concatenate(strings.tail)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (s, s) => s + s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuqpkd7jo.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        strings.foldLeft(\e[31m\"\"\e[0m)( (\e[36ms\e\
    [0m, \e[36ms\e[0m) => s + s)\n\e[31m\e[31m   |\e[0m                          \
    \        ^\e[0m\n\e[31m   |\e[0ms is already defined as \e[33mparameter\e[0m \e\
    [35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659798949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (acc, s) => acc + s)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.length match {\n            case 0 => \"\"\n            case\
    \ 1 => strings.head\n            case _ => strings.head + concatenate(strings.tail)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
    \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"\
    xyz\")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"\
    k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")( (acc, s) => acc + s)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\")));\n\
    \    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
    xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
    \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n\
    \    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n\
    \        strings.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(concatenate((List[String]())).equals((\"\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\"))).equals((\"xyz\")));\n    assert(concatenate((List[String](\"\
    x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"xyzwk\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798884
