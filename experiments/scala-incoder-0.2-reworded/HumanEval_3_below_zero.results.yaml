language: scala
name: HumanEval_3_below_zero
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphcmq9ek_.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6fxkwl_.scala:18)\n\tat Problem.main(tmpp6fxkwl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmp0vaoltr7.scala:12)\n\
    \tat Problem$.main(tmp0vaoltr7.scala:16)\n\tat Problem.main(tmp0vaoltr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (acc, op) =>\n            val newAcc = acc + op\n            if (newAcc < 0L)\
    \ newAcc\n            else newAcc\n        }\n        balance < 0L\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(belowZero((List[Long]())) ==\
    \ (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp33gpz0qs.scala:22)\n\tat Problem.main(tmp33gpz0qs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphcmq9ek_.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplfxfeqgk.scala:18)\n\tat Problem.main(tmplfxfeqgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmp0vaoltr7.scala:12)\n\
    \tat Problem$.main(tmp0vaoltr7.scala:16)\n\tat Problem.main(tmp0vaoltr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplfxfeqgk.scala:18)\n\tat Problem.main(tmplfxfeqgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        val newOperations = operations.dropRight(1)\n        if (newBalance <\
    \ 0l || newBalance == 0l) {\n            return true\n        }\n        if (balance\
    \ < 0l || balance == 0l) {\n            return false\n        }\n        belowZero(newOperations)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps12hvo_2.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmpf2kghj.scala:18)\n\tat Problem.main(tmpmpf2kghj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        val newOperations = operations.dropRight(1)\n        val newBalance2\
    \ = newOperations.last\n        val newOperations2 = newOperations.dropRight(1)\n\
    \        val newBalance3 = newOperations2.last\n        val newOperations3 = newOperations2.dropRight(1)\n\
    \        val newBalance4 = newOperations3.last\n        val newOperations4 = newOperations3.dropRight(1)\n\
    \        val newBalance5 = newOperations4.last\n        val newOperations5 = newOperations4.dropRight(1)\n\
    \        val newBalance6 = newOperations5.last\n        val newOperations6 = newOperations5.dropRight(1)\n\
    \        val newBalance7 = newOperations6.last\n        val newOperations7 = newOperations6.dropRight(1)\n\
    \        val newBalance8 = newOperations7.last\n        val newOperations8 = newOperations7.dropRight(1)\n\
    \        val newBalance9 = newOperations8.last\n        val newOperations9 = newOperations8.dropRight(1)\n\
    \        val newBalance10 = newOperations9.last\n        val newOperations10 =\
    \ newOperations9.dropRight(1)\n        val newBalance11 = newOperations10.last\n\
    \        val newOperations11 = newOperations10.dropRight(1)\n        val newBalance12\
    \ = newOperations11.last\n        val newOperations12 = newOperations11.dropRight(1)\n\
    \        val newBalance13 = newOperations12.last\n        val newOperations13\
    \ = newOperations12.dropRight(1)\n        val newBalance14 = newOperations13.last\n\
    \        val newOperations14 = newOperations13.dropRight(1)\n        val newBalance15\
    \ = newOperations14.last\n        val newOperations15 = newOperations14.dropRight(1)\n\
    \        val newBalance16 = newOperations15.last\n        val newOperations16\
    \ = newOperations15.dropRight(1)\n        val newBalance17 = newOperations16.last\n\
    \        val newOperations17 = newOperations16.dropRight(1)\n        val newBalance18\
    \ = newOperations17.last\n        val newOperations18 = newOperations17.dropRight(1)\n\
    \        val newBalance19 = newOperations18.last\n        val newOperations19\
    \ = newOperations18.dropRight(1)\n        val newBalance20 = newOperations19.last\n\
    \        val newOperations20 = newOperations19.dropRight(1)\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]())) ==\
    \ (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfipdsges.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfipdsges.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, operation) => acc + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp303glaa0.scala:18)\n\tat Problem.main(tmp303glaa0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphcmq9ek_.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplfxfeqgk.scala:18)\n\tat Problem.main(tmplfxfeqgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmp0vaoltr7.scala:12)\n\
    \tat Problem$.main(tmp0vaoltr7.scala:16)\n\tat Problem.main(tmp0vaoltr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduce((a, b)\
    \ => a + b)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.belowZero(tmp5uitadek.scala:12)\n\tat Problem$.main(tmp5uitadek.scala:16)\n\
    \tat Problem.main(tmp5uitadek.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6fxkwl_.scala:18)\n\tat Problem.main(tmpp6fxkwl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, op) => sum + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmu_sskjw.scala:18)\n\tat Problem.main(tmpmu_sskjw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ckgeppl.scala:18)\n\tat Problem.main(tmp5ckgeppl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        if (balance < 0L) true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxkapn01d.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        if (balance < 0l) {\n            return true\n        }\n        if (newBalance\
    \ < 0l) {\n            return true\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(belowZero((List[Long]())) ==\
    \ (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0w1hhdhu.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6fxkwl_.scala:18)\n\tat Problem.main(tmpp6fxkwl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ckgeppl.scala:18)\n\tat Problem.main(tmp5ckgeppl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (acc, operation) => acc + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpweqeriza.scala:18)\n\tat Problem.main(tmpweqeriza.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmp0vaoltr7.scala:12)\n\
    \tat Problem$.main(tmp0vaoltr7.scala:16)\n\tat Problem.main(tmp0vaoltr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6fxkwl_.scala:18)\n\tat Problem.main(tmpp6fxkwl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, operation) => acc + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp303glaa0.scala:18)\n\tat Problem.main(tmp303glaa0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplfxfeqgk.scala:18)\n\tat Problem.main(tmplfxfeqgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphcmq9ek_.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmp0vaoltr7.scala:12)\n\
    \tat Problem$.main(tmp0vaoltr7.scala:16)\n\tat Problem.main(tmp0vaoltr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0 && newBalance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv_gcmyia.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        val newOperations = operations.dropRight(1)\n        if (balance < 0l\
    \ && newBalance < 0l) {\n            true\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpru5cib3f.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ operation) => acc + operation)\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4asuj6jq.scala:18)\n\tat Problem.main(tmp4asuj6jq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ckgeppl.scala:18)\n\tat Problem.main(tmp5ckgeppl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphcmq9ek_.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmpf2kghj.scala:18)\n\tat Problem.main(tmpmpf2kghj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, operation) => acc + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp303glaa0.scala:18)\n\tat Problem.main(tmp303glaa0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, curr) => acc + curr }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0ctg0rs7.scala:18)\n\tat Problem.main(tmp0ctg0rs7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduce((a, b)\
    \ => a + b)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.belowZero(tmp5uitadek.scala:12)\n\tat Problem$.main(tmp5uitadek.scala:16)\n\
    \tat Problem.main(tmp5uitadek.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, op) => sum + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj0xberlq.scala:18)\n\tat Problem.main(tmpj0xberlq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ckgeppl.scala:18)\n\tat Problem.main(tmp5ckgeppl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        if (balance < 0L) true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxkapn01d.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplfxfeqgk.scala:18)\n\tat Problem.main(tmplfxfeqgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6fxkwl_.scala:18)\n\tat Problem.main(tmpp6fxkwl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphcmq9ek_.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6fxkwl_.scala:18)\n\tat Problem.main(tmpp6fxkwl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmpf2kghj.scala:18)\n\tat Problem.main(tmpmpf2kghj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        val newOperations = operations.dropRight(1)\n        val newBalance2\
    \ = newOperations.last\n        val newOperations2 = newOperations.dropRight(1)\n\
    \        val newBalance3 = newOperations2.last\n        val newOperations3 = newOperations2.dropRight(1)\n\
    \        val newBalance4 = newOperations3.last\n        val newOperations4 = newOperations3.dropRight(1)\n\
    \        val newBalance5 = newOperations4.last\n        val newOperations5 = newOperations4.dropRight(1)\n\
    \        val newBalance6 = newOperations5.last\n        val newOperations6 = newOperations5.dropRight(1)\n\
    \        val newBalance7 = newOperations6.last\n        val newOperations7 = newOperations6.dropRight(1)\n\
    \        val newBalance8 = newOperations7.last\n        val newOperations8 = newOperations7.dropRight(1)\n\
    \        val newBalance9 = newOperations8.last\n        val newOperations9 = newOperations8.dropRight(1)\n\
    \        val newBalance10 = newOperations9.last\n        val newOperations10 =\
    \ newOperations9.dropRight(1)\n        val newBalance11 = newOperations10.last\n\
    \        val newOperations11 = newOperations10.dropRight(1)\n        val newBalance12\
    \ = newOperations11.last\n        val newOperations12 = newOperations11.dropRight(1)\n\
    \        val newBalance13 = newOperations12.last\n        val newOperations13\
    \ = newOperations12.dropRight(1)\n        val newBalance14 = newOperations13.last\n\
    \        val newOperations14 = newOperations13.dropRight(1)\n        val newBalance15\
    \ = newOperations14.last\n        val newOperations15 = newOperations14.dropRight(1)\n\
    \        val newBalance16 = newOperations15.last\n        val newOperations16\
    \ = newOperations15.dropRight(1)\n        val newBalance17 = newOperations16.last\n\
    \        val newOperations17 = newOperations16.dropRight(1)\n        val newBalance18\
    \ = newOperations17.last\n        val newOperations18 = newOperations17.dropRight(1)\n\
    \        val newBalance19 = newOperations18.last\n        val newOperations19\
    \ = newOperations18.dropRight(1)\n        val newBalance20 = newOperations19.last\n\
    \        val newOperations20 = newOperations19.dropRight(1)\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]())) ==\
    \ (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfipdsges.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfipdsges.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ curr) => acc + curr)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq8vhp0h1.scala:18)\n\tat Problem.main(tmpq8vhp0h1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        val newOperations = operations.dropRight(1)\n        if (balance < 0L)\
    \ true\n        else belowZero(newOperations)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9uhztld3.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmp0vaoltr7.scala:12)\n\
    \tat Problem$.main(tmp0vaoltr7.scala:16)\n\tat Problem.main(tmp0vaoltr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (acc, op) =>\n            val newBalance = acc + op\n            if (newBalance\
    \ < 0L) newBalance else acc\n        }\n        balance < 0L\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv3zhyzdf.scala:20)\n\tat Problem.main(tmpv3zhyzdf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, operation) => acc + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp303glaa0.scala:18)\n\tat Problem.main(tmp303glaa0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6fxkwl_.scala:18)\n\tat Problem.main(tmpp6fxkwl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduce((a, b)\
    \ => a + b)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.belowZero(tmp5uitadek.scala:12)\n\tat Problem$.main(tmp5uitadek.scala:16)\n\
    \tat Problem.main(tmp5uitadek.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduce((a, b)\
    \ => a + b)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.belowZero(tmp5uitadek.scala:12)\n\tat Problem$.main(tmp5uitadek.scala:16)\n\
    \tat Problem.main(tmp5uitadek.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplfxfeqgk.scala:18)\n\tat Problem.main(tmplfxfeqgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        if (balance < 0l) true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjw3_h9pt.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val operations = operations.map(x\
    \ => if (x < 0) -x else x)\n        val operations = operations.map(x => if (x\
    \ < 0) -x else x)\n        val operations = operations.map(x => if (x < 0) -x\
    \ else x)\n        val operations = operations.map(x => if (x < 0) -x else x)\n\
    \        val operations = operations.map(x => if (x < 0) -x else x)\n        val\
    \ operations = operations.map(x => if (x < 0) -x else x)\n        val operations\
    \ = operations.map(x => if (x < 0) -x else x)\n        val operations = operations.map(x\
    \ => if (x < 0) -x else x)\n        val operations = operations.map(x => if (x\
    \ < 0) -x else x)\n        val operations = operations.map(x => if (x < 0) -x\
    \ else x)\n        val operations = operations.map(x => if (x < 0) -x else x)\n\
    \        val operations = operations.map(x => if (x < 0) -x else x)\n        val\
    \ operations = operations.map(x => if (x < 0) -x else x)\n        val operations\
    \ = operations.map(x => if (x < 0) -x else x)\n        val operations = operations.map(x\
    \ => if (x < 0) -x else x)\n        val operations = operations.map(x => if (x\
    \ < 0) -x else x)\n        val operations = operations.map(x => if (x < 0) -x\
    \ else x)\n        val operations = operations.map(x => if (x < 0) -x else x)\n\
    \        val operations = operations.map(x => if (x < 0) -x else x)\n        val\
    \ operations = operations.map(x => if (x < 0) -x else x)\n        val operations\
    \ = operations.map(x => if (x < 0) -x else x)\n        val operations = operations.map(x\
    \ => if (x < 0) -x else x)\n        val operations = operations.map(x => if (x\
    \ < 0) -x else x)\n        val operations = operations.map(x => if (x < 0) -x\
    \ else x)\n        val operations = operations.map(x => if (x < 0) -x else x)\n\
    \        val operations = operations.map(x => if (x < 0) -x else x)\n        val\
    \ operations = operations.map(x => if (x < 0) -x else x)\n        val operations\
    \ = operations.map(x => if (x < 0) -x else x)\n        val operations = operations.map(x\
    \ => if (x < 0) -x else x)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpysu_rne4.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x < \e[31m0\e[0m) -x \e[33melse\e[0m x)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpysu_rne4.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x < \e[31m0\e[0m) -x \e[33melse\e[0m x)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpysu_rne4.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x < \e[31m0\e[0m) -x \e[33melse\e[0m x)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpysu_rne4.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x < \e[31m0\e[0m) -x \e[33melse\e[0m x)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the"
  stdout: ''
  timestamp: 1659805775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ckgeppl.scala:18)\n\tat Problem.main(tmp5ckgeppl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduce((a, b)\
    \ => a + b)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.belowZero(tmp5uitadek.scala:12)\n\tat Problem$.main(tmp5uitadek.scala:16)\n\
    \tat Problem.main(tmp5uitadek.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.toList\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.toList\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.toLong)\n        val operations = operations.map(_.toLong)\n\
    \        val operations = operations.map(_.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0r279xmb.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0r279xmb.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0r279xmb.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0r279xmb.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0r279xmb.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0moperations is already defined as \e[33mvalue\e[0m \e[35moperations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0r279xmb.scala:18:12 --------"
  stdout: ''
  timestamp: 1659805775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmpf2kghj.scala:18)\n\tat Problem.main(tmpmpf2kghj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ curr) => acc + curr)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq8vhp0h1.scala:18)\n\tat Problem.main(tmpq8vhp0h1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        val newOperations = operations.dropRight(1)\n        if (balance < 0L)\
    \ {\n            return true\n        }\n        if (balance == 0L) {\n      \
    \      return false\n        }\n        if (newBalance < 0L) {\n            return\
    \ true\n        }\n        if (newBalance == 0L) {\n            return false\n\
    \        }\n        if (newBalance == balance && newBalance == newOperations.last)\
    \ {\n            return belowZero(newOperations)\n        }\n        if (newBalance\
    \ == balance && newBalance != newOperations.last) {\n            return belowZero(newOperations)\n\
    \        }\n        if (newBalance != balance && newBalance != newOperations.last)\
    \ {\n            return belowZero(newOperations)\n        }\n        if (newBalance\
    \ != balance && newBalance == newOperations.last) {\n            return belowZero(newOperations)\n\
    \        }\n        if (newBalance != balance && newBalance != newOperations.last)\
    \ {\n            return belowZero(newOperations)\n        }\n        if (newBalance\
    \ == balance && newBalance != newOperations.last) {\n            return belowZero(newOperations)\n\
    \        }\n        if (newBalance == balance && newBalance == newOperations.last)\
    \ {\n            return belowZero(newOperations)\n        }\n        if (newBalance\
    \ != balance && newBalance == newOperations.last) {\n            return belowZero(newOperations)\n\
    \        }\n        if (newBalance != balance && newBalance != newOperations.last)\
    \ {\n            return belowZero(newOperations)\n        }\n        if (newBalance\
    \ == balance && newBalance != newOperations.last) {\n            return belowZero(newOperations)\n\
    \        }\n        if (newBalance != balance && newBalance == newOperations.last)\
    \ {\n            return belowZero(newOperations)\n        }\n        if (newBalance\
    \ != balance && newBalance != newOperations.last) {\n            return belowZero(newOperations)\n\
    \        }\n        if (newBalance == balance && newBalance != newOperations.last)\
    \ {\n            return belowZero(newOperations)\n        }\n        if (newBalance\
    \ != balance && newBalance == newOperations.last) {\n            return belowZero(newOperations)\n\
    \        }\n        if (newBalance != balance && newBalance != newOperations.last)\
    \ {\n            return belowZero(newOperations)\n        }\n        if (newBalance\
    \ == balance && newBalance != newOperation\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2fj8_yzb.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2fj8_yzb.scala:13:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36moperations\e[0m = operations.dropRight(\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Recursive\
    \ \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmpf2kghj.scala:18)\n\tat Problem.main(tmpmpf2kghj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmp0vaoltr7.scala:12)\n\
    \tat Problem$.main(tmp0vaoltr7.scala:16)\n\tat Problem.main(tmp0vaoltr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        val newOperations = operations.dropRight(1)\n        if (newBalance <\
    \ 0l) {\n            true\n        } else {\n            belowZero(newOperations)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprqxzolro.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6fxkwl_.scala:18)\n\tat Problem.main(tmpp6fxkwl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        val newOperations = operations.dropRight(1)\n        if (balance < 0l)\
    \ {\n            true\n        } else {\n            belowZero(newOperations)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprdnks49o.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ckgeppl.scala:18)\n\tat Problem.main(tmp5ckgeppl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphcmq9ek_.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val balances = operations.map(operation\
    \ => operation - balance)\n        balances.sum < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn0m6akjo.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        if (balance < 0L) {\n            true\n        } else {\n           \
    \ belowZero(operations)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_tlf_bhs.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplfxfeqgk.scala:18)\n\tat Problem.main(tmplfxfeqgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, op) => sum + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj0xberlq.scala:18)\n\tat Problem.main(tmpj0xberlq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduce((a, b)\
    \ => a + b)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.belowZero(tmp5uitadek.scala:12)\n\tat Problem$.main(tmp5uitadek.scala:16)\n\
    \tat Problem.main(tmp5uitadek.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        if (balance < 0l) true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjw3_h9pt.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val balances = operations.map(operation\
    \ => operation - balance)\n        val zeroBalances = balances.filter(x => x ==\
    \ 0)\n        val zeroBalance = zeroBalances.last\n        zeroBalance < 0\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps6a6e6zh.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphcmq9ek_.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ x) => acc + x)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyv_p3qu2.scala:18)\n\tat Problem.main(tmpyv_p3qu2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val balances = operations.map(operation\
    \ => operation - balance)\n        balances.forall(x => x < 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n\
    \    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong, 1l.toLong,\
    \ 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_xh72q6q.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        if (balance < 0l) true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjw3_h9pt.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmpf2kghj.scala:18)\n\tat Problem.main(tmpmpf2kghj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        if (balance < 0L) true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxkapn01d.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6fxkwl_.scala:18)\n\tat Problem.main(tmpp6fxkwl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmp0vaoltr7.scala:12)\n\
    \tat Problem$.main(tmp0vaoltr7.scala:16)\n\tat Problem.main(tmp0vaoltr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ curr) => acc + curr)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq8vhp0h1.scala:18)\n\tat Problem.main(tmpq8vhp0h1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, operation) => acc + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp303glaa0.scala:18)\n\tat Problem.main(tmp303glaa0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        val newOperations = operations.dropRight(1)\n        if (balance < 0\
    \ && newBalance < 0) {\n            return true\n        }\n        if (balance\
    \ < 0 && newBalance > 0) {\n            return false\n        }\n        if (balance\
    \ > 0 && newBalance < 0) {\n            return false\n        }\n        if (balance\
    \ > 0 && newBalance > 0) {\n            return false\n        }\n        if (balance\
    \ == 0 && newBalance == 0) {\n            return true\n        }\n        if (balance\
    \ == 0 && newBalance == 0) {\n            return false\n        }\n        if\
    \ (balance == 0 && newBalance == 0) {\n            return false\n        }\n \
    \       if (balance == 0 && newBalance == 0) {\n            return false\n   \
    \     }\n        if (balance == 0 && newBalance == 0) {\n            return false\n\
    \        }\n        if (balance == 0 && newBalance == 0) {\n            return\
    \ false\n        }\n        if (balance == 0 && newBalance == 0) {\n         \
    \   return false\n        }\n        if (balance == 0 && newBalance == 0) {\n\
    \            return false\n        }\n        if (balance == 0 && newBalance ==\
    \ 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return false\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxcexvlv4.scala:117:0 ---------------------------\e\
    [0m\e[0m\n\e[31m117 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxcexvlv4.scala:13:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36moperations\e[0m = operations.dropRight(\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Recursive\
    \ \e[33mvalue\e[0m \e[35moperations\e[0m needs type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpxcexvlv4.scala:116:1 --------------------\e\
    [0m\e[0m\n\e[31m116 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e[0m\n\e[31m    |\e[0m Found:\
    \    Unit\n\e[31m    |\e[0m Required: Boolean\n\e[31m    |\e[0m\n\e[31m    |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpxcexvlv4.scala:107:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m107 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659805776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0 && newBalance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv_gcmyia.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        val newOperations = operations.dropRight(1)\n        if (balance < 0L)\
    \ {\n            true\n        } else {\n            belowZero(newOperations)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbk_hptad.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmp0vaoltr7.scala:12)\n\
    \tat Problem$.main(tmp0vaoltr7.scala:16)\n\tat Problem.main(tmp0vaoltr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ckgeppl.scala:18)\n\tat Problem.main(tmp5ckgeppl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, operation) => acc + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp303glaa0.scala:18)\n\tat Problem.main(tmp303glaa0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ckgeppl.scala:18)\n\tat Problem.main(tmp5ckgeppl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduce((a, b)\
    \ => a + b)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.belowZero(tmp5uitadek.scala:12)\n\tat Problem$.main(tmp5uitadek.scala:16)\n\
    \tat Problem.main(tmp5uitadek.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) =>\n            val newAcc = acc + op\n            if (newAcc < 0L)\
    \ newAcc else acc\n        }\n        balance < 0L\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkdyb_mko.scala:20)\n\tat Problem.main(tmpkdyb_mko.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6fxkwl_.scala:18)\n\tat Problem.main(tmpp6fxkwl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplfxfeqgk.scala:18)\n\tat Problem.main(tmplfxfeqgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        if (balance < 0L) true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxkapn01d.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ckgeppl.scala:18)\n\tat Problem.main(tmp5ckgeppl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6fxkwl_.scala:18)\n\tat Problem.main(tmpp6fxkwl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplfxfeqgk.scala:18)\n\tat Problem.main(tmplfxfeqgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmp0vaoltr7.scala:12)\n\
    \tat Problem$.main(tmp0vaoltr7.scala:16)\n\tat Problem.main(tmp0vaoltr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (acc, op) =>\n            val newBalance = acc + op\n            if (newBalance\
    \ < 0L) newBalance else acc\n        }\n        balance < 0L\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv3zhyzdf.scala:20)\n\tat Problem.main(tmpv3zhyzdf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmp0vaoltr7.scala:12)\n\
    \tat Problem$.main(tmp0vaoltr7.scala:16)\n\tat Problem.main(tmp0vaoltr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        if (balance < 0 && newBalance < 0) {\n            true\n        } else\
    \ {\n            false\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjxe5bscy.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, op) => sum + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj0xberlq.scala:18)\n\tat Problem.main(tmpj0xberlq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ckgeppl.scala:18)\n\tat Problem.main(tmp5ckgeppl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ckgeppl.scala:18)\n\tat Problem.main(tmp5ckgeppl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.belowZero(tmp0vaoltr7.scala:12)\n\
    \tat Problem$.main(tmp0vaoltr7.scala:16)\n\tat Problem.main(tmp0vaoltr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, operation) => acc + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp303glaa0.scala:18)\n\tat Problem.main(tmp303glaa0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, operation) => acc + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp303glaa0.scala:18)\n\tat Problem.main(tmp303glaa0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) =>\n            acc + (if (op < 0) -op\n                else op)\n\
    \        }\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmeo5pwi7.scala:21)\n\tat Problem.main(tmpmeo5pwi7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6fxkwl_.scala:18)\n\tat Problem.main(tmpp6fxkwl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6fxkwl_.scala:18)\n\tat Problem.main(tmpp6fxkwl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplfxfeqgk.scala:18)\n\tat Problem.main(tmplfxfeqgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmpf2kghj.scala:18)\n\tat Problem.main(tmpmpf2kghj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduce((a, b)\
    \ => a + b)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.belowZero(tmp5uitadek.scala:12)\n\tat Problem$.main(tmp5uitadek.scala:16)\n\
    \tat Problem.main(tmp5uitadek.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.reduce((a, b)\
    \ => a + b)\n        balance < 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.belowZero(tmp5uitadek.scala:12)\n\tat Problem$.main(tmp5uitadek.scala:16)\n\
    \tat Problem.main(tmp5uitadek.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        val newOperations = operations.dropRight(1)\n        if (balance < 0L)\
    \ true\n        else belowZero(newOperations) || belowZero(newBalance)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]())) ==\
    \ (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpiljlvh_b.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, operation) => acc + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp303glaa0.scala:18)\n\tat Problem.main(tmp303glaa0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, curr) => acc + curr }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0ctg0rs7.scala:18)\n\tat Problem.main(tmp0ctg0rs7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphcmq9ek_.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ckgeppl.scala:18)\n\tat Problem.main(tmp5ckgeppl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0\n    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphcmq9ek_.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.last\n       \
    \ val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        val newOperations = operations.dropRight(1)\n        if (balance < 0L)\
    \ {\n            return true\n        }\n        if (balance == 0L) {\n      \
    \      return false\n        }\n        if (newBalance < 0L) {\n            return\
    \ true\n        }\n        if (newBalance == 0L) {\n            return false\n\
    \        }\n        if (newBalance < newBalance) {\n            return true\n\
    \        }\n        if (newBalance == newBalance) {\n            return belowZero(newOperations)\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp00ivsdij.scala:13:25 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moperations\e[0m = operations.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Recursive \e[33mvalue\e[0m \e[35moperations\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg0vpgnb.scala:18)\n\tat Problem.main(tmpcg0vpgnb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (acc, op) =>\n            val newBalance = acc + op\n            if (newBalance\
    \ < 0L) newBalance else acc\n        }\n        balance < 0L\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj49j951a.scala:20)\n\tat Problem.main(tmpj49j951a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805777
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1dj6jhp.scala:18)\n\tat Problem.main(tmpo1dj6jhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, operation) => acc + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp303glaa0.scala:18)\n\tat Problem.main(tmp303glaa0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0L) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6fxkwl_.scala:18)\n\tat Problem.main(tmpp6fxkwl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (sum, operation) => sum + operation }\n        balance < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplfxfeqgk.scala:18)\n\tat Problem.main(tmplfxfeqgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        val balance = operations.foldLeft(0l) {\
    \ (acc, op) => acc + op }\n        balance < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth0cv8dg.scala:18)\n\tat Problem.main(tmpth0cv8dg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805769
