language: scala
name: HumanEval_122_add_elements
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n\
    \            sum += arr(i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdfvlzewd.scala:23)\n\tat Problem.main(tmpdfvlzewd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ arr = arr.toList\n        val len = arr.size\n        val max = (len / 2).toInt\n\
    \        val max2 = max / 2\n        val max3 = max / 3\n        val max4 = max\
    \ / 4\n        val max5 = max / 5\n        val max6 = max / 6\n        val max7\
    \ = max / 7\n        val max8 = max / 8\n        val max9 = max / 9\n        val\
    \ max10 = max / 10\n        val max11 = max / 11\n        val max12 = max / 12\n\
    \        val max13 = max / 13\n        val max14 = max / 14\n        val max15\
    \ = max / 15\n        val max16 = max / 16\n        val max17 = max / 17\n   \
    \     val max18 = max / 18\n        val max19 = max / 19\n        val max20 =\
    \ max / 20\n        val max21 = max / 21\n        val max22 = max / 22\n     \
    \   val max23 = max / 23\n        val max24 = max / 24\n        val max25 = max\
    \ / 25\n        val max26 = max / 26\n        val max27 = max / 27\n        val\
    \ max28 = max / 28\n        val max29 = max / 29\n        val max30 = max / 30\n\
    \        val max31 = max / 31\n        val max32 = max / 32\n        val max33\
    \ = max / 33\n        val max34 = max / 34\n        val max35 = max / 35\n   \
    \     val max36 = max / 36\n        val max37 = max / 37\n        val max38 =\
    \ max / 38\n        val max39 = max / 39\n        val max40 = max / 40\n     \
    \   val max41 = max / 41\n        val max42 = max / 42\n        val max43 = max\
    \ / 43\n        val max44 = max / 44\n        val max45 = max / 45\n        val\
    \ max46 = max / 46\n        val max47 = max / 47\n        val max48 = max / 48\n\
    \        val max49 = max / 49\n        val max50 = max / 50\n        val max51\
    \ = max / 51\n        val max52 = max / 52\n        val max53 = max / 53\n   \
    \     val max54 = max / 54\n        val max55 = max / 55\n        \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfq486ade.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfq486ade.scala:14:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfq486ade.scala:72:5\
    \ ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxLen = arr.take(k).size\n        val maxLen2 = maxLen / 2\n        val\
    \ maxLen3 = maxLen - maxLen2\n        val maxLen4 = maxLen - maxLen3\n       \
    \ val maxLen5 = maxLen - maxLen4\n        val maxLen6 = maxLen - maxLen5\n   \
    \     val maxLen7 = maxLen - maxLen6\n        val maxLen8 = maxLen - maxLen7\n\
    \        val maxLen9 = maxLen - maxLen8\n        val maxLen10 = maxLen - maxLen9\n\
    \        val maxLen11 = maxLen - maxLen10\n        val maxLen12 = maxLen - maxLen11\n\
    \        val maxLen13 = maxLen - maxLen12\n        val maxLen14 = maxLen - maxLen13\n\
    \        val maxLen15 = maxLen - maxLen14\n        val maxLen16 = maxLen - maxLen15\n\
    \        val maxLen17 = maxLen - maxLen16\n        val maxLen18 = maxLen - maxLen17\n\
    \        val maxLen19 = maxLen - maxLen18\n        val maxLen20 = maxLen - maxLen19\n\
    \        val maxLen21 = maxLen - maxLen20\n        val maxLen22 = maxLen - maxLen21\n\
    \        val maxLen23 = maxLen - maxLen22\n        val maxLen24 = maxLen - maxLen23\n\
    \        val maxLen25 = maxLen - maxLen24\n        val maxLen26 = maxLen - maxLen25\n\
    \        val maxLen27 = maxLen - maxLen26\n        val maxLen28 = maxLen - maxLen27\n\
    \        val maxLen29 = maxLen - maxLen28\n        val maxLen30 = maxLen - maxLen29\n\
    \        val maxLen31 = maxLen - maxLen30\n        val maxLen32 = maxLen - maxLen31\n\
    \        val maxLen33 = maxLen - maxLen32\n        val maxLen34 = maxLen - maxLen33\n\
    \        val maxLen35 = maxLen - maxLen34\n        val maxLen36 = maxLen - maxLen35\n\
    \        val maxLen37 = maxLen - maxLen36\n        val maxLen38 = maxLen - maxLen37\n\
    \        val maxLen39 = maxLen - maxLen38\n        val maxLen40 = max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt508t2b4.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpt508t2b4.scala:55:5 ---------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ maxTwoDigit = arr.take(k).foldLeft(0l){\n            (acc, elem) => acc + (elem.toString.length\
    \ * 10)\n        }\n        arr.take(k).foreach(elem => {\n            if (elem.toString.length\
    \ < maxTwoDigit) {\n                result.add(elem)\n            }\n        })\n\
    \        result.foldLeft(0l){\n            (acc, elem) => acc + elem\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgfqh6f1x.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgfqh6f1x.scala:14:35\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxTwoDigit\e\
    [0m = arr.take(k).foldLeft(\e[31m0l\e[0m){\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     Found:    (k : Long)\n\e[31m   |\e[0m                                  \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgfqh6f1x.scala:17:17\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        arr.take(k).foreach(\e\
    [36melem\e[0m => {\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e\
    [0m                 Found:    (k : Long)\n\e[31m   |\e[0m                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ arr = arr.toList\n        var sum = 0\n        var i = 0\n        while (i <\
    \ k) {\n            sum += arr(i)\n            i += 1\n        }\n        while\
    \ (i < arr.size) {\n            sum += arr(i)\n            i += 1\n        }\n\
    \        result += sum\n        return result.toList(0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_qrv0j1.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk_qrv0j1.scala:14:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxSum = arr.take(maxLen).sum\n      \
    \  val sum = 0\n        val sums = mutable.ArrayBuffer.empty[Long]\n        for\
    \ (i <- 0 until maxLen) {\n            val curSum = arr(i) + arr(i + k).toInt\n\
    \            sum += curSum\n            sums += curSum\n        }\n        sum.toLong\
    \ + sums.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjd_tgzqx.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpjd_tgzqx.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpjd_tgzqx.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            sum += curSum\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ len = arr.length\n        val maxNum = arr.max\n        val minNum = arr.min\n\
    \        val maxNumDigit = math.ceil(math.log10(maxNum))\n        val minNumDigit\
    \ = math.ceil(math.log10(minNum))\n        val maxNumDigitDiff = maxNumDigit -\
    \ minNumDigit\n        val minNumDigitDiff = minNumDigit - maxNumDigit\n     \
    \   val maxNumDiff = maxNum - minNum\n        val minNumDiff = minNum - maxNum\n\
    \        val maxNumDiffDigit = math.ceil(math.log10(maxNumDiff))\n        val\
    \ minNumDiffDigit = math.ceil(math.log10(minNumDiff))\n        val maxNumDiffDigitDiff\
    \ = maxNumDiffDigit - minNumDiffDigit\n        val minNumDiffDigitDiff = minNumDiffDigit\
    \ - maxNumDiffDigit\n        val maxNumDiffDigitDiffDigit = math.ceil(math.log10(maxNumDiffDigitDiff))\n\
    \        val minNumDiffDigitDiffDigit = math.ceil(math.log10(minNumDiffDigitDiff))\n\
    \        val maxNumDiffDigitDiffDigitDiff = maxNumDiffDigitDiffDigit - minNumDiffDigitDiffDigit\n\
    \        val minNumDiffDigitDiffDigitDiff = minNumDiffDigitDiffDigit - maxNumDiffDigitDiffDigit\n\
    \        val maxNumDiffDigitDiffDigitDiffDigit = math.ceil(math.log10(maxNumDiffDigitDiffDigitDiff))\n\
    \        val minNumDiffDigitDiffDigitDiffDigit = math.ceil(math.log10(minNumDiffDigitDiffDigitDiff))\n\
    \        val maxNumDiffDigitDiffDigitDiffDigitDiff = maxNumDiffDigitDiffDigitDiffDigit\
    \ - minNumDiffDigitDiffDigitDiffDigit\n        val minNumDiffDigitDiffDigitDiffDigitDiff\
    \ = minNumDiffDigitDiffDigitDiffDigit - maxNumDiffDigitDiffDigitDiffDigit\n  \
    \      val maxNumDiffDigitDiffDigitDiffDigitDiffDigit = math.ceil(math.log10(maxNumDiffDigitDiffDigitDiffDigitDiff))\n\
    \        val minNumDiffDigitDiffDigitDiffDigitDiffDigit = math.ceil(math.log10(minNumDiffDigitDiffDigitDiffDigitDiff))\n\
    \        val maxNumDiffDigitDiffDigitDiffDigitDiffDigitDiff = maxNumDiffDigitDiffDigitDiffDigitDiffDigit\
    \ - minNumDiffDigitDiffDigitDiffDigitDiffDigit\n        val minNumDiffDigitDiffDigitDiffDigitDiffDigitDiff\
    \ = minNumDiffDigitDiffDigitDiffDigitDiffDigit \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprg3td51m.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprg3td51m.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        val max2 = arr.take(k).max\n\
    \        val max3 = arr.take(k).max\n        val max4 = arr.take(k).max\n    \
    \    val max5 = arr.take(k).max\n        val max6 = arr.take(k).max\n        val\
    \ max7 = arr.take(k).max\n        val max8 = arr.take(k).max\n        val max9\
    \ = arr.take(k).max\n        val max10 = arr.take(k).max\n        val max11 =\
    \ arr.take(k).max\n        val max12 = arr.take(k).max\n        val max13 = arr.take(k).max\n\
    \        val max14 = arr.take(k).max\n        val max15 = arr.take(k).max\n  \
    \      val max16 = arr.take(k).max\n        val max17 = arr.take(k).max\n    \
    \    val max18 = arr.take(k).max\n        val max19 = arr.take(k).max\n      \
    \  val max20 = arr.take(k).max\n        val max21 = arr.take(k).max\n        val\
    \ max22 = arr.take(k).max\n        val max23 = arr.take(k).max\n        val max24\
    \ = arr.take(k).max\n        val max25 = arr.take(k).max\n        val max26 =\
    \ arr.take(k).max\n        val max27 = arr.take(k).max\n        val max28 = arr.take(k).max\n\
    \        val max29 = arr.take(k).max\n        val max30 = arr.take(k).max\n  \
    \      val max31 = arr.take(k).max\n        val max32 = arr.take(k).max\n    \
    \    val max33 = arr.take(k).max\n        val max34 = arr.take(k).max\n      \
    \  val max35 = arr.take(k).max\n        val max36 = arr.take(k).max\n        val\
    \ max37 = arr.take(k).max\n        val max38 = arr.take(k).max\n        val max39\
    \ = arr.take(k).max\n        val max40 = arr.take(k).max\n        val max41 =\
    \ arr.take(k).max\n        val max42 = arr.take(k).max\n        val max43 = arr.take(k).max\n\
    \        val max44 = arr.take(k).max\n        val max45 = arr.take(k).max\n  \
    \      val max46 = arr.take(k).max\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmput9_wckd.scala:61:11 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmput9_wckd.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmput9_wckd.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmput9_wckd.scala:62:5\
    \ ---------------------\e[0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        var i = 0\n        while (i < k) {\n\
    \            sum += arr(i)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdin2212y.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0L\n        for(i <- 0 until arr.length)\n            if(arr.take(i).sum\
    \ > k)\n                sum += arr.take(i).sum\n            else\n           \
    \     sum += arr.take(i).sum - k\n        result += sum\n        result.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj6fjqi4k.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        val result = new\
    \ mutable.HashMap[Long, Long]()\n        for(i <- 0 until max){\n            val\
    \ key = arr(i).toLong\n            val value = arr(i+k).toLong\n            if(result.contains(key)){\n\
    \                sum += result.get(key)\n            }else{\n                sum\
    \ += value\n                result.put(key, value)\n            }\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj19w5fpm.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpj19w5fpm.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj19w5fpm.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                sum += result.get(key)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpj19w5fpm.scala:24:20 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                sum += value\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len - k).toInt\n        val sum = 0L\n        val max2 = max\
    \ * max\n        for(i <- 0 until max2) {\n            val cur = arr(i).toInt\n\
    \            val cur2 = cur * cur\n            val cur3 = cur2 * cur\n       \
    \     val cur4 = cur3 * cur\n            val cur5 = cur4 * cur\n            val\
    \ cur6 = cur5 * cur\n            val cur7 = cur6 * cur\n            val cur8 =\
    \ cur7 * cur\n            val cur9 = cur8 * cur\n            val cur10 = cur9\
    \ * cur\n            val cur11 = cur10 * cur\n            val cur12 = cur11 *\
    \ cur\n            val cur13 = cur12 * cur\n            val cur14 = cur13 * cur\n\
    \            val cur15 = cur14 * cur\n            val cur16 = cur15 * cur\n  \
    \          val cur17 = cur16 * cur\n            val cur18 = cur17 * cur\n    \
    \        val cur19 = cur18 * cur\n            val cur20 = cur19 * cur\n      \
    \      val cur21 = cur20 * cur\n            val cur22 = cur21 * cur\n        \
    \    val cur23 = cur22 * cur\n            val cur24 = cur23 * cur\n          \
    \  val cur25 = cur24 * cur\n            val cur26 = cur25 * cur\n            val\
    \ cur27 = cur26 * cur\n            val cur28 = cur27 * cur\n            val cur29\
    \ = cur28 * cur\n            val cur30 = cur29 * cur\n            val cur31 =\
    \ cur30 * cur\n            val cur32 = cur31 * cur\n            val cur33 = cur32\
    \ * cur\n            val cur34 = cur33 * cur\n            val cur35 = cur34 *\
    \ cur\n            val cur36 = cur35 * cur\n            val cur37 = cur36 * cur\n\
    \            val cur38 = cur37 * cur\n            val cur39 = cur38 * cur\n  \
    \          val cur40 = cur39 * cur\n            val cur41 = cur40 * cur\n    \
    \        val cur42 = cur41 * cur\n            val cur43 = cur42 * cur\n      \
    \      val cur44 = cur43 * cur\n            val cur45 = cur44 * cur\n        \
    \    val cur46 = cur45 * cur\n            val cur47 = cur46 * cur\n          \
    \  val cur48 = cur47 * cur\n            val cur49 = cur\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1evqv7wm.scala:78:0 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1evqv7wm.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1evqv7wm.scala:77:1\
    \ ---------------------\e[0m\e[0m\n\e[31m77 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp1evqv7wm.scala:69:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m69 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxDigits = k\n        val maxSum = arr.take(maxDigits).sum\n      \
    \  val maxSum2 = arr.take(maxDigits).sum\n        val maxSum3 = arr.take(maxDigits).sum\n\
    \        val maxSum4 = arr.take(maxDigits).sum\n        val maxSum5 = arr.take(maxDigits).sum\n\
    \        val maxSum6 = arr.take(maxDigits).sum\n        val maxSum7 = arr.take(maxDigits).sum\n\
    \        val maxSum8 = arr.take(maxDigits).sum\n        val maxSum9 = arr.take(maxDigits).sum\n\
    \        val maxSum10 = arr.take(maxDigits).sum\n        val maxSum11 = arr.take(maxDigits).sum\n\
    \        val maxSum12 = arr.take(maxDigits).sum\n        val maxSum13 = arr.take(maxDigits).sum\n\
    \        val maxSum14 = arr.take(maxDigits).sum\n        val maxSum15 = arr.take(maxDigits).sum\n\
    \        val maxSum16 = arr.take(maxDigits).sum\n        val maxSum17 = arr.take(maxDigits).sum\n\
    \        val maxSum18 = arr.take(maxDigits).sum\n        val maxSum19 = arr.take(maxDigits).sum\n\
    \        val maxSum20 = arr.take(maxDigits).sum\n        val maxSum21 = arr.take(maxDigits).sum\n\
    \        val maxSum22 = arr.take(maxDigits).sum\n        val maxSum23 = arr.take(maxDigits).sum\n\
    \        val maxSum24 = arr.take(maxDigits).sum\n        val maxSum25 = arr.take(maxDigits).sum\n\
    \        val maxSum26 = arr.take(maxDigits).sum\n        val maxSum27 = arr.take(maxDigits).sum\n\
    \        val maxSum28 = arr.take(maxDigits).sum\n        val maxSum29 = arr.take(maxDigits).sum\n\
    \        val maxSum30 = arr.take(maxDigits).sum\n        val maxSum31 = arr.take(maxDigits).sum\n\
    \        val maxSum32 = arr.take(maxDigits).sum\n        val maxSum33 = arr.take(maxDigits).sum\n\
    \        val maxSum34 = arr.take(maxDigits).sum\n        val maxSum35 = arr.take(maxDigits).sum\n\
    \        val maxSum36 = arr.take(maxDigits).sum\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi7afeu43.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpi7afeu43.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxTwoDigit = arr.take(k).maxBy(_.toString.length).toString.length\n\
    \        val result = arr.take(k).foldLeft(0l) { (sum, element) => sum + element\
    \ }\n        val twoDigit = result % 10\n        val remainder = result / 10\n\
    \        val result2 = remainder.foldLeft(0l) { (sum, element) => sum + element\
    \ }\n        val twoDigit2 = result2 % 10\n        val remainder2 = result2 /\
    \ 10\n        val result3 = remainder2.foldLeft(0l) { (sum, element) => sum +\
    \ element }\n        val twoDigit3 = result3 % 10\n        val remainder3 = result3\
    \ / 10\n        val result4 = remainder3.foldLeft(0l) { (sum, element) => sum\
    \ + element }\n        val twoDigit4 = result4 % 10\n        val remainder4 =\
    \ result4 / 10\n        val result5 = remainder4.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val twoDigit5 = result5 % 10\n        val remainder5\
    \ = result5 / 10\n        val result6 = remainder5.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val twoDigit6 = result6 % 10\n        val remainder6\
    \ = result6 / 10\n        val result7 = remainder6.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val twoDigit7 = result7 % 10\n        val remainder7\
    \ = result7 / 10\n        val result8 = remainder7.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val twoDigit8 = result8 % 10\n        val remainder8\
    \ = result8 / 10\n        val result9 = remainder8.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val twoDigit9 = result9 % 10\n        val remainder9\
    \ = result9 / 10\n        val result10 = remainder9.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val twoDigit10 = result10 % 10\n        val remainder10\
    \ = result10 / 10\n        val result11 = remainder10.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val twoDigit11 = result11 % 10\n        val remainder11\
    \ = result11 / 10\n        val result12 = remainder11.foldLeft(\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpio7vs9xx.scala:49:44 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mresult12\e[0m = remainder11.foldLeft(\n\
    \e[31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpio7vs9xx.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpio7vs9xx.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n\
    \            sum += arr(i)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ejis6dp.scala:23)\n\tat Problem.main(tmp_ejis6dp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        var index = 0\n        var count =\
    \ 0\n        while(index < k) {\n            sum = sum + arr(index)\n        \
    \    index = index + 1\n            count = count + 1\n        }\n        if(count\
    \ > 1) {\n            sum = sum + arr(index - 1)\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbbrod0i9.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            sum = sum + arr(index)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  Found:    Long\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbbrod0i9.scala:22:18\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            sum = sum + arr(index\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    Long\n\e[31m   |\e[0m        \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        var i = 0\n        while (i < k) {\n\
    \            sum += arr(i)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdin2212y.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        val maxSum = 0\n\
    \        val maxSumIndex = 0\n        val maxSumDigit = 0\n        val maxSumDigitIndex\
    \ = 0\n        val maxSumDigitDigit = 0\n        val maxSumDigitDigitIndex = 0\n\
    \        val maxSumDigitDigitDigit = 0\n        val maxSumDigitDigitDigitIndex\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxSumDigitDigitDigitDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mmaxSumDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxSumDigitDigitDigitDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mmaxSumDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxSumDigitDigitDigitDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mmaxSumDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxSumDigitDigitDigitDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mmaxSumDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len - k).toInt\n        val sum = 0\n        val arr = arr.take(k)\n\
    \        val len = arr.length\n        val max = (len - k).toInt\n        val\
    \ arr = arr.drop(k)\n        val len = arr.length\n        val max = (len - k).toInt\n\
    \        val arr = arr.take(k)\n        val len = arr.length\n        val max\
    \ = (len - k).toInt\n        val arr = arr.drop(k)\n        val len = arr.length\n\
    \        val max = (len - k).toInt\n        val arr = arr.take(k)\n        val\
    \ len = arr.length\n        val max = (len - k).toInt\n        val arr = arr.drop(k)\n\
    \        val len = arr.length\n        val max = (len - k).toInt\n        val\
    \ arr = arr.take(k)\n        val len = arr.length\n        val max = (len - k).toInt\n\
    \        val arr = arr.drop(k)\n        val len = arr.length\n        val max\
    \ = (len - k).toInt\n        val arr = arr.take(k)\n        val len = arr.length\n\
    \        val max = (len - k).toInt\n        val arr = arr.drop(k)\n        val\
    \ len = arr.length\n        val max = (len - k).toInt\n        val arr = arr.take(k)\n\
    \        val len = arr.length\n        val max = (len - k).toInt\n        val\
    \ arr = arr.drop(k)\n        val len = arr.length\n        val max = (len - k).toInt\n\
    \        val arr = arr.take(k)\n        val len = arr.length\n        val max\
    \ = (len - k).toInt\n        val arr = arr.drop(k)\n        val len = arr.length\n\
    \        val max = (len - k).toInt\n        val arr = arr.take(k)\n        val\
    \ len = arr.length\n        val max = (len - k).toInt\n        val arr = arr.drop(k)\n\
    \        val len = arr.length\n        val max = (len - k).toInt\n        val\
    \ arr = arr.take(k)\n        val len = arr.length\n        val max = (len - k).toInt\n\
    \        val arr = arr.drop(k)\n        val len = arr.length\n        val max\
    \ = (len - k).toInt\n        val arr = arr.take(k)\n        val len = arr.length\n\
    \        val max = (len - k).toInt\n        val arr = arr.drop(k)\n        val\
    \ len = arr.length\n        val max = (len - k).toInt\n        val arr = arr.take(k)\n\
    \        val len = arr.length\n        val max = (len - k).toInt\n        val\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmphugmbwbg.scala:80:11 ---------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmphugmbwbg.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.take(k)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0marr is\
    \ already defined as \e[33mvalue\e[0m \e[35marr\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphugmbwbg.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlen\e[0m = arr.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlen is already defined as \e[33mvalue\e[0m \e[35mlen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphugmbwbg.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = (len - k).toInt\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax is already\
    \ defined as \e[33mvalue\e[0m \e[35mmax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphugmbwbg.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.drop(k)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0marr is\
    \ already defined as \e[33mvalue\e[0m \e[35marr\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphugmbwbg.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlen\e[0m = arr.leng"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val max = (len / 2).toInt\n        val sum = 0\n        val twoDigits = arr.take(max)\n\
    \        val twoDigitsSum = twoDigits.sum\n        val twoDigitsSum2 = twoDigits.sum\n\
    \        val twoDigitsSum3 = twoDigits.sum\n        val twoDigitsSum4 = twoDigits.sum\n\
    \        val twoDigitsSum5 = twoDigits.sum\n        val twoDigitsSum6 = twoDigits.sum\n\
    \        val twoDigitsSum7 = twoDigits.sum\n        val twoDigitsSum8 = twoDigits.sum\n\
    \        val twoDigitsSum9 = twoDigits.sum\n        val twoDigitsSum10 = twoDigits.sum\n\
    \        val twoDigitsSum11 = twoDigits.sum\n        val twoDigitsSum12 = twoDigits.sum\n\
    \        val twoDigitsSum13 = twoDigits.sum\n        val twoDigitsSum14 = twoDigits.sum\n\
    \        val twoDigitsSum15 = twoDigits.sum\n        val twoDigitsSum16 = twoDigits.sum\n\
    \        val twoDigitsSum17 = twoDigits.sum\n        val twoDigitsSum18 = twoDigits.sum\n\
    \        val twoDigitsSum19 = twoDigits.sum\n        val twoDigitsSum20 = twoDigits.sum\n\
    \        val twoDigitsSum21 = twoDigits.sum\n        val twoDigitsSum22 = twoDigits.sum\n\
    \        val twoDigitsSum23 = twoDigits.sum\n        val twoDigitsSum24 = twoDigits.sum\n\
    \        val twoDigitsSum25 = twoDigits.sum\n        val twoDigitsSum26 = twoDigits.sum\n\
    \        val twoDigitsSum27 = twoDigits.sum\n        val twoDigitsSum28 = twoDigits.sum\n\
    \        val twoDigitsSum29 = twoDigits.sum\n        val twoDigitsSum30 = twoDigits.sum\n\
    \        val twoDigitsSum31 = twoDigits.sum\n        val twoDigitsSum32 = twoDigits.sum\n\
    \        val twoDigitsSum33 = twoDigits.sum\n        val twoDigitsSum34 = twoDigits.sum\n\
    \        val twoDigitsSum35 = twoDigits.sum\n        val twoDigitsSum36 = twoDigits.sum\n\
    \        val twoDigitsSum37 = twoDigits.sum\n        val twoDigits\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpafk8icjy.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpafk8icjy.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpafk8icjy.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        val maxSum = 0\n\
    \        val maxSumIndex = 0\n        var i = 0\n        while (i < max) {\n \
    \           val cur = arr(i)\n            val curSum = cur.toString.toLong\n \
    \           if (curSum > maxSum) {\n                maxSum = curSum\n        \
    \        maxSumIndex = i\n            }\n            i += 1\n        }\n     \
    \   val maxSum = arr(maxSumIndex).toString.toLong\n        val maxSumIndex = maxSumIndex.toString.toInt\n\
    \        var j = 0\n        while (j < max) {\n            val cur = arr(j)\n\
    \            val curSum = cur.toString.toLong\n            if (curSum > maxSum)\
    \ {\n                maxSum = curSum\n                maxSumIndex = j\n      \
    \      }\n            j += 1\n        }\n        val maxSum = arr(maxSumIndex).toString.toLong\n\
    \        val maxSumIndex = maxSumIndex.toString.toInt\n        var k = 0\n   \
    \     while (k <= maxSumIndex) {\n            val cur = arr(k)\n            val\
    \ curSum = cur.toString.toLong\n            if (curSum > maxSum) {\n         \
    \       maxSum = curSum\n                maxSumIndex = k\n            }\n    \
    \        k += 1\n        }\n        val maxSum = arr(maxSumIndex).toString.toLong\n\
    \        val maxSumIndex = maxSumIndex.toString.toInt\n        var sum = 0\n \
    \       var i = 0\n        while (i < maxSumIndex) {\n            val cur = arr(i)\n\
    \            val curSum = cur.toString.toLong\n            if (curSum > maxSum)\
    \ {\n                maxSum = curSum\n                maxSumIndex = i\n      \
    \      }\n            i += 1\n        }\n        val maxSum = arr(maxSumIndex).toString.toLong\n\
    \        val maxSumIndex = maxSumIndex.toString.toInt\n        var j = 0\n   \
    \     while (j < maxSumIndex) {\n            val cur = arr(j)\n            val\
    \ curSum = cur.toString.toLong\n            if (curSum > maxSum) {\n         \
    \       maxSum = curSum\n                maxSumIndex = j\n            }\n    \
    \        j += 1\n        }\n        val maxSum = arr(maxSumIndex).toString.toLong\n\
    \        val maxSumIndex = maxSumIndex.toString.toInt\n        var k = 0\n   \
    \     while (k <= maxSumIndex) {\n            val cur = arr(k)\n            val\
    \ curSum = cur.toString.toLong\n            if (curSum > maxSum) {\n         \
    \       maxSum = curSum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptoqtvf0w.scala:96:0 ----------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptoqtvf0w.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxSum\e[0m = arr(maxSumIndex).toString.toLong\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxSum\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxSum\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptoqtvf0w.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxSumIndex\e[0m = maxSumIndex.toString.toInt\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxSumIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxSumIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptoqtvf0w.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxSum\e[0m = arr(maxSumIndex).toString.toLong\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxSum\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxSum\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptoqtvf0w.scala:42:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxSumIndex\e[0m = maxSumIndex.toString.toInt\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxSumIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxSumIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptoqtvf0w"
  stdout: ''
  timestamp: 1659794426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxSum = arr.take(k).sum\n        val\
    \ maxSum2 = arr.take(k).sum\n        val maxSum3 = arr.take(k).sum\n        val\
    \ maxSum4 = arr.take(k).sum\n        val maxSum5 = arr.take(k).sum\n        val\
    \ maxSum6 = arr.take(k).sum\n        val maxSum7 = arr.take(k).sum\n        val\
    \ maxSum8 = arr.take(k).sum\n        val maxSum9 = arr.take(k).sum\n        val\
    \ maxSum10 = arr.take(k).sum\n        val maxSum11 = arr.take(k).sum\n       \
    \ val maxSum12 = arr.take(k).sum\n        val maxSum13 = arr.take(k).sum\n   \
    \     val maxSum14 = arr.take(k).sum\n        val maxSum15 = arr.take(k).sum\n\
    \        val maxSum16 = arr.take(k).sum\n        val maxSum17 = arr.take(k).sum\n\
    \        val maxSum18 = arr.take(k).sum\n        val maxSum19 = arr.take(k).sum\n\
    \        val maxSum20 = arr.take(k).sum\n        val maxSum21 = arr.take(k).sum\n\
    \        val maxSum22 = arr.take(k).sum\n        val maxSum23 = arr.take(k).sum\n\
    \        val maxSum24 = arr.take(k).sum\n        val maxSum25 = arr.take(k).sum\n\
    \        val maxSum26 = arr.take(k).sum\n        val maxSum27 = arr.take(k).sum\n\
    \        val maxSum28 = arr.take(k).sum\n        val maxSum29 = arr.take(k).sum\n\
    \        val maxSum30 = arr.take(k).sum\n        val maxSum31 = arr.take(k).sum\n\
    \        val maxSum32 = arr.take(k).sum\n        val maxSum33 = arr.take(k).sum\n\
    \        val maxSum34 = arr.take(k).sum\n        val maxSum35 = arr.take(k).sum\n\
    \        val maxSum36 = arr.take(k).sum\n        val maxSum37 = arr.take(k).sum\n\
    \        val maxSum38 = arr.take(k).sum\n        val maxSum39 = arr.take(k).sum\n\
    \        val maxSum40 = arr.take(k).sum\n        val maxSum41 = arr.take(k).sum\n\
    \        val maxSum42 = arr.take(k).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvu9q2as9.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpvu9q2as9.scala:58:5 ---------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        var i = 0\n    \
    \    while (i < max) {\n            sum += arr(i)\n            i += 1\n      \
    \  }\n        if (len > k) {\n            sum += arr(k)\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_y5_myqb.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_y5_myqb.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_y5_myqb.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            sum += arr(k)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val sum = 0\n        val maxSum = arr.take(k).foldLeft(0L){ (sum, elem)\
    \ => sum + elem }\n        val maxSum2 = arr.take(k).foldLeft(0L){ (sum, elem)\
    \ => sum + elem.toString.toLong }\n        val maxSum3 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum4 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum5 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum6 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum7 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum8 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum9 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum10 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum11 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum12 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum13 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum14 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum15 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum16 = arr.take(k).foldLeft(0L){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum17 = arr.take(k).foldLeft(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpm88gai45.scala:32:44 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxSum17\e[0m = arr.take(k).foldLeft(\n\
    \e[31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm88gai45.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm88gai45.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ len = arr.length\n        val max = (len / 2).toInt\n        val max2 = max\
    \ / 2\n        val max3 = max / 3\n        val max4 = max / 4\n        val max5\
    \ = max / 5\n        val max6 = max / 6\n        val max7 = max / 7\n        val\
    \ max8 = max / 8\n        val max9 = max / 9\n        val max10 = max / 10\n \
    \       val max11 = max / 11\n        val max12 = max / 12\n        val max13\
    \ = max / 13\n        val max14 = max / 14\n        val max15 = max / 15\n   \
    \     val max16 = max / 16\n        val max17 = max / 17\n        val max18 =\
    \ max / 18\n        val max19 = max / 19\n        val max20 = max / 20\n     \
    \   val max21 = max / 21\n        val max22 = max / 22\n        val max23 = max\
    \ / 23\n        val max24 = max / 24\n        val max25 = max / 25\n        val\
    \ max26 = max / 26\n        val max27 = max / 27\n        val max28 = max / 28\n\
    \        val max29 = max / 29\n        val max30 = max / 30\n        val max31\
    \ = max / 31\n        val max32 = max / 32\n        val max33 = max / 33\n   \
    \     val max34 = max / 34\n        val max35 = max / 35\n        val max36 =\
    \ max / 36\n        val max37 = max / 37\n        val max38 = max / 38\n     \
    \   val max39 = max / 39\n        val max40 = max / 40\n        val max41 = max\
    \ / 41\n        val max42 = max / 42\n        val max43 = max / 43\n        val\
    \ max44 = max / 44\n        val max45 = max / 45\n        val max46 = max / 46\n\
    \        val max47 = max / 47\n        val max48 = max / 48\n        val max49\
    \ = max / 49\n        val max50 = max / 50\n        val max51 = max / 51\n   \
    \     val max52 = max / 52\n        val max53 = max / 53\n        val max54 =\
    \ max / 54\n        val max55 = max / 55\n        val max56 = max / 56\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphh6wxn0o.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphh6wxn0o.scala:71:5\
    \ ---------------------\e[0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0\n        for(i <- 0 until arr.size) {\n            sum += arr(i)\n \
    \           if(sum >= k) {\n                sum += arr(i+1) - arr(i)\n       \
    \         result.add(sum)\n                sum = 0\n            }\n        }\n\
    \        result.last\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw6ef_fyk.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw6ef_fyk.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum += arr(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpw6ef_fyk.scala:18:20 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m                sum += arr(i+\e[31m1\e[0m) - arr(i)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value +=\
    \ is not a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa2m5apn3.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpa2m5apn3.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ arr = arr.toList\n        var sum = 0\n        var i = 0\n        while (i <\
    \ arr.length) {\n            val cur = arr(i)\n            if (cur < 10) {\n \
    \               sum += cur\n                i += 1\n            } else if (cur\
    \ < 100) {\n                sum += cur / 10\n                i += 1\n        \
    \    } else {\n                sum += cur / 100\n                i += 1\n    \
    \        }\n            if (sum > k) {\n                sum -= arr(i)\n      \
    \          i += 1\n            } else {\n                result += arr(i)\n  \
    \              i += 1\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxih43w32.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxih43w32.scala:14:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        var i = 0\n        while (i < k) {\n\
    \            sum += arr(i)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdin2212y.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        var i = 0\n        while (i < k) {\n\
    \            sum += arr(i)\n            i += 1\n        }\n        val maxLength\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength2 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength3 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength4 = arr.take(k).map(_.toString.length).max\n        val maxLength5\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength6 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength7 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength8 = arr.take(k).map(_.toString.length).max\n        val maxLength9\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength10 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength11 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength12 = arr.take(k).map(_.toString.length).max\n        val maxLength13\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength14 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength15 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength16 = arr.take(k).map(_.toString.length).max\n        val maxLength17\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength18 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength19 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength20 = arr.take(k).map(_.toString.length).max\n        val maxLength21\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength22 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength23 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength24 = arr.take(k).map(_.toString.length).max\n        val maxLength25\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength26 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength27 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength28 = arr.take(k).map(_.toString.length).max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg7264e0z.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg7264e0z.scala:19:33\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e\
    [0m = arr.take(k).map(_.toString.length).max\n\e[31m\e[31m   |\e[0m          \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \   Found:    (k : Long)\n\e[31m   |\e[0m                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg7264e0z.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxLength2\e\
    [0m = arr.take(k).map(_.toString.length).max\n\e[31m\e[31m   |\e[0m          \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \     Found:    (k : Long)\n\e[31m   |\e[0m                                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg7264e0z.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxLength3\e\
    [0m = arr.take(k).map(_.toString.length).max\n\e[31m\e[31m   |\e[0m          \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \     Found:    (k : Long)\n\e[31m   |\e[0m                                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg7264e0z.scala:22:34\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxLength4\e\
    [0m = arr.take(k).map(_.toString.length).max\n\e[31m\e[31m   |\e[0m          \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \     Found:    (k : Long)\n\e[31m   |\e[0m                                  Required:\
    \ Int\n\e[31m"
  stdout: ''
  timestamp: 1659794436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val res = arr.take(k).foldLeft(0l) { (sum, el) => sum + el.toString.dropRight(2).sum.toLong\
    \ }\n        val maxDigits = arr.take(k).map(_.toString.dropRight(2).sum.toLong).max\n\
    \        val maxSum = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n\
    \        val maxSumOfDigits = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n\
    \        val maxSumOfDigits2 = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n\
    \        val maxSumOfDigits3 = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n\
    \        val maxSumOfDigits4 = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n\
    \        val maxSumOfDigits5 = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n\
    \        val maxSumOfDigits6 = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n\
    \        val maxSumOfDigits7 = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n\
    \        val maxSumOfDigits8 = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n\
    \        val maxSumOfDigits9 = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n\
    \        val maxSumOfDigits10 = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n\
    \        val maxSumOfDigits11 = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n\
    \        val maxSumOfDigits12 = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n\
    \        val maxSumOfDigits13 = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n\
    \        val maxSumOfDigits14 = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n\
    \        val maxSumOfDigits15 = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n\
    \        val maxSumOfDigits16 = arr.take(k).map(_.toString.dropRight(2).sum.toLong).sum\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmplkwa4shi.scala:34:11 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmplkwa4shi.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmplkwa4shi.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = arr.take(k).length\n        val maxLen2 = maxLen / 2\n    \
    \    val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5\
    \ = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen\
    \ / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n  \
    \      val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n      \
    \  val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val\
    \ maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16\
    \ = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen\
    \ / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n\
    \        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n    \
    \    val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val\
    \ maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27\
    \ = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen\
    \ / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n\
    \        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n    \
    \    val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val\
    \ maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38\
    \ = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen\
    \ / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n\
    \        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n    \
    \    val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val\
    \ maxLen\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp06bdag5g.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp06bdag5g.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp06bdag5g.scala:62:5\
    \ ---------------------\e[0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxLen = len - k\n        val maxSum = arr.take(maxLen).sum\n        val\
    \ minSum = arr.drop(maxLen).sum\n        val sum = (maxSum + minSum) / 2\n   \
    \     sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4te2hv90.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = arr.take(k).length\n        val maxLen2 = maxLen / 2\n    \
    \    val sum = 0\n        for (i <- 0 until k) {\n            val cur = arr(i)\n\
    \            val cur2 = cur % 10\n            val cur3 = cur / 10\n          \
    \  val cur4 = cur % 100\n            val cur5 = cur / 100\n            val cur6\
    \ = cur % 1000\n            val cur7 = cur / 1000\n            val cur8 = cur\
    \ % 10000\n            val cur9 = cur / 10000\n            val cur10 = cur % 100000\n\
    \            val cur11 = cur / 100000\n            val cur12 = cur % 1000000\n\
    \            val cur13 = cur / 1000000\n            val cur14 = cur % 10000000\n\
    \            val cur15 = cur / 10000000\n            val cur16 = cur % 100000000\n\
    \            val cur17 = cur / 100000000\n            val cur18 = cur % 1000000000\n\
    \            val cur19 = cur / 1000000000\n            val cur20 = cur % 10000000000\n\
    \            val cur21 = cur / 10000000000\n            val cur22 = cur % 100000000000\n\
    \            val cur23 = cur / 100000000000\n            val cur24 = cur % 1000000000000\n\
    \            val cur25 = cur / 1000000000000\n            val cur26 = cur % 10000000000000\n\
    \            val cur27 = cur / 10000000000000\n            val cur28 = cur % 100000000000000\n\
    \            val cur29 = cur / 100000000000000\n            val cur30 = cur %\
    \ 1000000000000000\n            val cur31 = cur / 1000000000000000\n         \
    \   val cur32 = cur % 10000000000000000\n            val cur33 = cur / 10000000000000000\n\
    \            val cur34 = cur % 100000000000000000\n            val cur35 = cur\
    \ / 100000000000000000\n            val cur36 = cur % 1000000000000000000\n  \
    \          val cur37 = cur / 1000000000000000000\n            val cur38 = cur\
    \ % 10000000000000000000\n            val cur39 = cur / 10000000000000000000\n\
    \            val cur40 = cur % 100000000000000000000\n            val cur41 =\
    \ cur / 100000000000000000000\n            val cur42 = cur % 1000000000000000000000\n\
    \            val cur43 = cur / 1000000000000000000000\n            val cur44 =\
    \ cur % 10000000000000000000000\n            val cur45 = cur / 10000000000000000000000\n\
    \            val cur46 = cur % 100000000000000000000000\n            val cur47\
    \ = cur / 100\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_23wkubu.scala:76:0 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_23wkubu.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_23wkubu.scala:18:26\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (k : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_23wkubu.scala:75:1 ---------------------\e[0m\e\
    [0m\n\e[31m75 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmp_23wkubu.scala:67:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m67 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659794435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val max2 = max / 2\n        val max3\
    \ = max / 3\n        val max4 = max / 4\n        val max5 = max / 5\n        val\
    \ max6 = max / 6\n        val max7 = max / 7\n        val max8 = max / 8\n   \
    \     val max9 = max / 9\n        val max10 = max / 10\n        val max11 = max\
    \ / 11\n        val max12 = max / 12\n        val max13 = max / 13\n        val\
    \ max14 = max / 14\n        val max15 = max / 15\n        val max16 = max / 16\n\
    \        val max17 = max / 17\n        val max18 = max / 18\n        val max19\
    \ = max / 19\n        val max20 = max / 20\n        val max21 = max / 21\n   \
    \     val max22 = max / 22\n        val max23 = max / 23\n        val max24 =\
    \ max / 24\n        val max25 = max / 25\n        val max26 = max / 26\n     \
    \   val max27 = max / 27\n        val max28 = max / 28\n        val max29 = max\
    \ / 29\n        val max30 = max / 30\n        val max31 = max / 31\n        val\
    \ max32 = max / 32\n        val max33 = max / 33\n        val max34 = max / 34\n\
    \        val max35 = max / 35\n        val max36 = max / 36\n        val max37\
    \ = max / 37\n        val max38 = max / 38\n        val max39 = max / 39\n   \
    \     val max40 = max / 40\n        val max41 = max / 41\n        val max42 =\
    \ max / 42\n        val max43 = max / 43\n        val max44 = max / 44\n     \
    \   val max45 = max / 45\n        val max46 = max / 46\n        val max47 = max\
    \ / 47\n        val max48 = max / 48\n        val max49 = max / 49\n        val\
    \ max50 = max / 50\n        val max51 = max / 51\n        val max52 = max / 52\n\
    \        val max53 = max / 53\n        val max54 = max / 54\n        val max55\
    \ = max / 55\n        val max56 = max / 56\n        val max57 = \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpc5pbtps2.scala:71:19 ---------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m        \e[33mval\e[0m \e[36mmax57\e[0m = \n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpc5pbtps2.scala:13:18 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpc5pbtps2.scala:72:5 ---------------------\e[0m\e[0m\n\e[31m72\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val sum = 0\n        val maxLen = arr.take(k).map(_.toString.length).max\n\
    \        for(i <- 0 until k) {\n            val cur = arr.take(i).map(_.toString).sum\n\
    \            sum += cur\n            val curLen = cur.toString.length\n      \
    \      if(curLen > maxLen) {\n                maxLen = curLen\n            }\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxqy70hjx.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpxqy70hjx.scala:17:25 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqy70hjx.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += cur\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpxqy70hjx.scala:22:23 -----------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                maxLen = curLen\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val maxLen\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxLength = arr.take(k).map(_.toString.length).max\n        arr.take(k).foreach(x\
    \ => {\n            val str = x.toString.padRight(maxLength, \"0\")\n        \
    \    val digits = str.split(\"(?<=\\\\d)(?=[0-9])\").map(_.toLong)\n         \
    \   val sum = digits.sum\n            result += sum\n        })\n        result.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc9z8frr2.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpc9z8frr2.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxDigit = arr.take(maxLen).map(_.toString.length).max\n\
    \        val maxDigits = arr.take(maxLen).map(_.toString).map(_.length).max\n\
    \        val maxDigitSum = arr.take(maxLen).map(_.toString).map(_.sum).max\n \
    \       val maxDigitSums = arr.take(maxLen).map(_.toString).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsSum = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).max\n\
    \        val maxDigitSumsSums = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsSumsSum = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsSumsSums = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsSumsSumsSum = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsSumsSumsSums = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsSumsSumsSumsSum = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsSumsSumsSumsSums = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsSumsSumsSumsSumsSum = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9scmsa_b.scala:28:127 --------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitSumsSumsSumsSumsSumsSum\e\
    [0m = arr.take(maxLen).map(_.toString).map(_.sum).map(_.sum).map(_.sum).map(_.sum).map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9scmsa_b.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9scmsa_b.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa2m5apn3.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpa2m5apn3.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0\n        for(i <- 0 until arr.length)\n        {\n            sum +=\
    \ arr(i)\n            if(sum >= k)\n            {\n                result.add(sum)\n\
    \                sum = 0\n            }\n        }\n        if(sum > 0)\n    \
    \    {\n            result.add(sum)\n        }\n        sum = 0\n        for(i\
    \ <- 0 until result.size)\n        {\n            sum += result(i)\n        }\n\
    \        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkw2i6nmp.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkw2i6nmp.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            sum += arr(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659794434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        var index = 0\n        while (index\
    \ < k) {\n            sum += arr(index)\n            index += 1\n        }\n \
    \       return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps9srvjmq.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += arr(index)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659794434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ arr = arr.toList\n        val len = arr.size\n        val maxLen = len - k\n\
    \        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val\
    \ maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6\
    \ = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen\
    \ / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n\
    \        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n    \
    \    val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val\
    \ maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17\
    \ = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen\
    \ / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n\
    \        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n    \
    \    val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val\
    \ maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28\
    \ = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen\
    \ / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n\
    \        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n    \
    \    val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val\
    \ maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39\
    \ = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen\
    \ / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n\
    \        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n    \
    \    val maxLen4\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5jyjzg38.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5jyjzg38.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp5jyjzg38.scala:14:18 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5jyjzg38.scala:62:5 ---------------------\e[0m\e[0m\n\e[31m62\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ maxLength = arr.take(k).length\n        val maxLength2 = maxLength * maxLength\n\
    \        val maxLength3 = maxLength2 * maxLength\n        val maxLength4 = maxLength3\
    \ * maxLength\n        val maxLength5 = maxLength4 * maxLength\n        val maxLength6\
    \ = maxLength5 * maxLength\n        val maxLength7 = maxLength6 * maxLength\n\
    \        val maxLength8 = maxLength7 * maxLength\n        val maxLength9 = maxLength8\
    \ * maxLength\n        val maxLength10 = maxLength9 * maxLength\n        val maxLength11\
    \ = maxLength10 * maxLength\n        val maxLength12 = maxLength11 * maxLength\n\
    \        val maxLength13 = maxLength12 * maxLength\n        val maxLength14 =\
    \ maxLength13 * maxLength\n        val maxLength15 = maxLength14 * maxLength\n\
    \        val maxLength16 = maxLength15 * maxLength\n        val maxLength17 =\
    \ maxLength16 * maxLength\n        val maxLength18 = maxLength17 * maxLength\n\
    \        val maxLength19 = maxLength18 * maxLength\n        val maxLength20 =\
    \ maxLength19 * maxLength\n        val maxLength21 = maxLength20 * maxLength\n\
    \        val maxLength22 = maxLength21 * maxLength\n        val maxLength23 =\
    \ maxLength22 * maxLength\n        val maxLength24 = maxLength23 * maxLength\n\
    \        val maxLength25 = maxLength24 * maxLength\n        val maxLength26 =\
    \ maxLength25 * maxLength\n        val maxLength27 = maxLength26 * maxLength\n\
    \        val maxLength28 = maxLength27 * maxLength\n        val maxLength29 =\
    \ maxLength28 * maxLength\n        val maxLength30 = maxLength29 * maxLength\n\
    \        val maxLength31 = maxLength30 * maxLength\n        val maxLength32 =\
    \ maxLength31 * maxLength\n        val maxLength33 = maxLength32 * maxLength\n\
    \        val maxLength34 = maxLength33 * maxLength\n        val maxLength35 =\
    \ maxLength34 * maxLength\n        val maxLength36 = maxLength35 * maxLength\n\
    \        val maxLength37 = maxLength36 * maxLength\n        val maxLength38 =\
    \ maxLength37 * maxLength\n        val maxLength39 = maxLength38 * maxLength\n\
    \        val maxLength40 = maxLength39 * maxLength\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6l7mm65h.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6l7mm65h.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e\
    [0m = arr.take(k).length\n\e[31m\e[31m   |\e[0m                              \
    \   ^\e[0m\n\e[31m   |\e[0m                                 Found:    (k : Long)\n\
    \e[31m   |\e[0m                                 Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6l7mm65h.scala:55:5 ---------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val max = (len / 2).toInt\n        val sum = 0\n        for(i <- 0 until max){\n\
    \            val x = arr(i).toInt\n            val y = arr(i+1).toInt\n      \
    \      val sum = x + y\n            if(sum > 9){\n                sum -= 10\n\
    \            }\n            sum += sum\n        }\n        sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqayecr_c.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen * maxLen\n        val\
    \ maxLen3 = maxLen2 * maxLen\n        val maxLen4 = maxLen3 * maxLen\n       \
    \ val maxLen5 = maxLen4 * maxLen\n        val maxLen6 = maxLen5 * maxLen\n   \
    \     val maxLen7 = maxLen6 * maxLen\n        val maxLen8 = maxLen7 * maxLen\n\
    \        val maxLen9 = maxLen8 * maxLen\n        val maxLen10 = maxLen9 * maxLen\n\
    \        val maxLen11 = maxLen10 * maxLen\n        val maxLen12 = maxLen11 * maxLen\n\
    \        val maxLen13 = maxLen12 * maxLen\n        val maxLen14 = maxLen13 * maxLen\n\
    \        val maxLen15 = maxLen14 * maxLen\n        val maxLen16 = maxLen15 * maxLen\n\
    \        val maxLen17 = maxLen16 * maxLen\n        val maxLen18 = maxLen17 * maxLen\n\
    \        val maxLen19 = maxLen18 * maxLen\n        val maxLen20 = maxLen19 * maxLen\n\
    \        val maxLen21 = maxLen20 * maxLen\n        val maxLen22 = maxLen21 * maxLen\n\
    \        val maxLen23 = maxLen22 * maxLen\n        val maxLen24 = maxLen23 * maxLen\n\
    \        val maxLen25 = maxLen24 * maxLen\n        val maxLen26 = maxLen25 * maxLen\n\
    \        val maxLen27 = maxLen26 * maxLen\n        val maxLen28 = maxLen27 * maxLen\n\
    \        val maxLen29 = maxLen28 * maxLen\n        val maxLen30 = maxLen29 * maxLen\n\
    \        val maxLen31 = maxLen30 * maxLen\n        val maxLen32 = maxLen31 * maxLen\n\
    \        val maxLen33 = maxLen32 * maxLen\n        val maxLen34 = maxLen33 * maxLen\n\
    \        val maxLen35 = maxLen34 * maxLen\n        val maxLen36 = maxLen35 * maxLen\n\
    \        val maxLen37 = maxLen36 * maxLen\n        val maxLen38 = maxLen37 * maxLen\n\
    \        val maxLen39 = maxLen38 * maxLen\n        val maxLen40 = maxLen39 * maxLen\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp9ynvmwdj.scala:55:11 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9ynvmwdj.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp9ynvmwdj.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ len = arr.size\n        val maxLen = len - k\n        val maxLen2 = maxLen /\
    \ 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n    \
    \    val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7\
    \ = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen\
    \ / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n\
    \        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n    \
    \    val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val\
    \ maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18\
    \ = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen\
    \ / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n\
    \        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n    \
    \    val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val\
    \ maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29\
    \ = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen\
    \ / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n\
    \        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n    \
    \    val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val\
    \ maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40\
    \ = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen\
    \ / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n\
    \        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n    \
    \    \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjtzud10t.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjtzud10t.scala:62:5\
    \ ---------------------\e[0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = arr.take(k).length\n        val maxSum = arr.take(k).sum\n\
    \        val maxSum2 = arr.take(k).sum\n        val maxSum3 = arr.take(k).sum\n\
    \        val maxSum4 = arr.take(k).sum\n        val maxSum5 = arr.take(k).sum\n\
    \        val maxSum6 = arr.take(k).sum\n        val maxSum7 = arr.take(k).sum\n\
    \        val maxSum8 = arr.take(k).sum\n        val maxSum9 = arr.take(k).sum\n\
    \        val maxSum10 = arr.take(k).sum\n        val maxSum11 = arr.take(k).sum\n\
    \        val maxSum12 = arr.take(k).sum\n        val maxSum13 = arr.take(k).sum\n\
    \        val maxSum14 = arr.take(k).sum\n        val maxSum15 = arr.take(k).sum\n\
    \        val maxSum16 = arr.take(k).sum\n        val maxSum17 = arr.take(k).sum\n\
    \        val maxSum18 = arr.take(k).sum\n        val maxSum19 = arr.take(k).sum\n\
    \        val maxSum20 = arr.take(k).sum\n        val maxSum21 = arr.take(k).sum\n\
    \        val maxSum22 = arr.take(k).sum\n        val maxSum23 = arr.take(k).sum\n\
    \        val maxSum24 = arr.take(k).sum\n        val maxSum25 = arr.take(k).sum\n\
    \        val maxSum26 = arr.take(k).sum\n        val maxSum27 = arr.take(k).sum\n\
    \        val maxSum28 = arr.take(k).sum\n        val maxSum29 = arr.take(k).sum\n\
    \        val maxSum30 = arr.take(k).sum\n        val maxSum31 = arr.take(k).sum\n\
    \        val maxSum32 = arr.take(k).sum\n        val maxSum33 = arr.take(k).sum\n\
    \        val maxSum34 = arr.take(k).sum\n        val maxSum35 = arr.take(k).sum\n\
    \        val maxSum36 = arr.take(k).sum\n        val maxSum37 = arr.take(k).sum\n\
    \        val maxSum38 = arr.take(k).sum\n        val maxSum39 = arr.take(k).sum\n\
    \        val maxSum40 = arr.take(k).sum\n        val maxSum41 = arr.take(k).sum\n\
    \        val maxSum42 = arr.take\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpojvo7twn.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpojvo7twn.scala:58:5 ---------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0\n        for (i <- 0 until arr.length) {\n            if (sum + arr(i)\
    \ <= k) {\n                sum += arr(i)\n                result += arr(i)\n \
    \           }\n        }\n        result.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq6f4bfb0.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq6f4bfb0.scala:17:20\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                sum += arr(i)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659794435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0\n        var i = 0\n        while (i < arr.length) {\n            if\
    \ (sum + arr(i) < k) {\n                sum += arr(i)\n                i += 1\n\
    \            } else {\n                sum += arr(i)\n                result.add(sum)\n\
    \                sum = 0\n                i += 1\n            }\n        }\n \
    \       if (sum > k) {\n            result.add(sum)\n        }\n        result.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpif6cijup.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpif6cijup.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                sum += arr(i)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpif6cijup.scala:21:20 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                sum += arr(i)\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val max = (len / 2).toInt\n        val sum = 0\n        val maxSum = 0\n \
    \       val maxSumIndex = 0\n        val maxSumIndex2 = 0\n        val maxSumIndex3\
    \ = 0\n        val maxSumIndex4 = 0\n        val maxSumIndex5 = 0\n        val\
    \ maxSumIndex6 = 0\n        val maxSumIndex7 = 0\n        val maxSumIndex8 = 0\n\
    \        val maxSumIndex9 = 0\n        val maxSumIndex10 = 0\n        val maxSumIndex11\
    \ = 0\n        val maxSumIndex12 = 0\n        val maxSumIndex13 = 0\n        val\
    \ maxSumIndex14 = 0\n        val maxSumIndex15 = 0\n        val maxSumIndex16\
    \ = 0\n        val maxSumIndex17 = 0\n        val maxSumIndex18 = 0\n        val\
    \ maxSumIndex19 = 0\n        val maxSumIndex20 = 0\n        val maxSumIndex21\
    \ = 0\n        val maxSumIndex22 = 0\n        val maxSumIndex23 = 0\n        val\
    \ maxSumIndex24 = 0\n        val maxSumIndex25 = 0\n        val maxSumIndex26\
    \ = 0\n        val maxSumIndex27 = 0\n        val maxSumIndex28 = 0\n        val\
    \ maxSumIndex29 = 0\n        val maxSumIndex30 = 0\n        val maxSumIndex31\
    \ = 0\n        val maxSumIndex32 = 0\n        val maxSumIndex33 = 0\n        val\
    \ maxSumIndex34 = 0\n        val maxSumIndex35 = 0\n        val maxSumIndex36\
    \ = 0\n        val maxSumIndex37 = 0\n        val maxSumIndex38 = 0\n        val\
    \ maxSumIndex39 = 0\n        val maxSumIndex40 = 0\n        val maxSumIndex41\
    \ = 0\n        val maxSumIndex42 = 0\n        val maxSumIndex43 = 0\n        val\
    \ maxSumIndex44 = 0\n        val maxSumIndex45 = 0\n        val maxSumIndex46\
    \ = 0\n        val maxSumIndex47 = 0\n        val maxSumIndex48 = 0\n        val\
    \ maxSumIndex49 = 0\n        val maxSumIndex50 = 0\n        val maxSumIndex51\
    \ = 0\n        val maxSumIndex52 = 0\n        val maxSumIndex53 = 0\n        val\
    \ maxSumIndex54 = 0\n        val maxSumIndex55 = 0\n        val maxSumIndex56\
    \ = 0\n        val maxSumIndex57 = 0\n        val maxSumIndex58 = 0\n        val\
    \ maxSumIndex59 = 0\n        val maxSumIndex60 = 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprv1458i4.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmprv1458i4.scala:78:5 ---------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.HashMap[Long, Long]()\n       \
    \ val maxLength = arr.take(k).map(_.toString.length).max\n        arr.take(k).foreach(x\
    \ => {\n            val key = x.toString.substring(0, maxLength)\n           \
    \ val value = result.getOrElse(key, 0L)\n            result += ((key, value +\
    \ x))\n        })\n        val sum = result.values.sum\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbatgo_r1.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbatgo_r1.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e\
    [0m = arr.take(k).map(_.toString.length).max\n\e[31m\e[31m   |\e[0m          \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \   Found:    (k : Long)\n\e[31m   |\e[0m                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbatgo_r1.scala:15:17\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        arr.take(k).foreach(\e\
    [36mx\e[0m => {\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ maxLength = arr.take(k).map(_.toString.length).max\n        val maxLength2 =\
    \ arr.take(k).map(_.toString.length).max\n        val maxLength3 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength4 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength5 = arr.take(k).map(_.toString.length).max\n        val maxLength6\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength7 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength8 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength9 = arr.take(k).map(_.toString.length).max\n        val maxLength10\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength11 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength12 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength13 = arr.take(k).map(_.toString.length).max\n        val maxLength14\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength15 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength16 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength17 = arr.take(k).map(_.toString.length).max\n        val maxLength18\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength19 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength20 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength21 = arr.take(k).map(_.toString.length).max\n        val maxLength22\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength23 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength24 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength25 = arr.take(k).map(_.toString.length).max\n        val maxLength26\
    \ = arr.take(k).map(_.toString.length).max\n        val maxLength27 = arr.take(k).map(_.toString.length).max\n\
    \        val maxLength28 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxLength29 = arr.take\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgb03h_va.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgb03h_va.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e\
    [0m = arr.take(k).map(_.toString.length).max\n\e[31m\e[31m   |\e[0m          \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \   Found:    (k : Long)\n\e[31m   |\e[0m                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgb03h_va.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxLength2\e\
    [0m = arr.take(k).map(_.toString.length).max\n\e[31m\e[31m   |\e[0m          \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \     Found:    (k : Long)\n\e[31m   |\e[0m                                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgb03h_va.scala:16:34\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxLength3\e\
    [0m = arr.take(k).map(_.toString.length).max\n\e[31m\e[31m   |\e[0m          \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \     Found:    (k : Long)\n\e[31m   |\e[0m                                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgb03h_va.scala:17:34\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxLength4\e\
    [0m = arr.take(k).map(_.toString.length).max\n\e[31m\e[31m   |\e[0m          \
    \                       "
  stdout: ''
  timestamp: 1659794440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        val maxTwoDigitsSum\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum2\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum3\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum4\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum5\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum6\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum7\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum8\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum9\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum10\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum11\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum12\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum13\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum14\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum15\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum16\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum17\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum18\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum19\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum20\
    \ = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum21\
    \ = arr.take(k).\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxkgzdnzo.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpxkgzdnzo.scala:13:18 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxkgzdnzo.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxSum = arr.take(k).foldLeft(0l) { (sum,\
    \ element) => sum + element }\n        val maxSum2 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum3 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum4 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum5 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum6 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum7 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum8 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum9 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum10 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum11 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum12 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum13 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum14 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum15 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum16 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum17 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val maxSum18 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl_9npklc.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpl_9npklc.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.HashMap[Long, Long]()\n       \
    \ var sum = 0\n        var i = 0\n        while (i < k) {\n            sum +=\
    \ arr(i)\n            i += 1\n        }\n        var j = 0\n        while (j <\
    \ arr.length) {\n            val value = arr(j)\n            if (result.contains(value))\
    \ {\n                val oldValue = result(value)\n                result.put(value,\
    \ oldValue + sum)\n            } else {\n                result.put(value, sum)\n\
    \            }\n            j += 1\n        }\n        val maxValue = result.values.max\n\
    \        if (maxValue == 0) 0\n        else maxValue\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp74ql0bol.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp74ql0bol.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            sum += arr(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659794439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0\n        var i = 0\n        while (i < arr.length) {\n            sum\
    \ += arr(i)\n            if (sum >= 10) {\n                sum += arr(i + 1)\n\
    \                result += sum.toLong\n                sum = 0\n            }\n\
    \            i += 1\n        }\n        if (sum > 0) {\n            result +=\
    \ sum.toLong\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpydfbwijt.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpydfbwijt.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            sum += arr(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpydfbwijt.scala:19:20 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m                sum += arr(i + \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        val arr = arr.take(max)\n\
    \        val arr2 = arr.drop(max)\n        val arr3 = arr2.take(max)\n       \
    \ val arr4 = arr3.drop(max)\n        val arr5 = arr4.take(max)\n        val arr6\
    \ = arr5.drop(max)\n        val arr7 = arr6.take(max)\n        val arr8 = arr7.drop(max)\n\
    \        val arr9 = arr8.take(max)\n        val arr10 = arr9.drop(max)\n     \
    \   val arr11 = arr10.take(max)\n        val arr12 = arr11.drop(max)\n       \
    \ val arr13 = arr12.take(max)\n        val arr14 = arr13.drop(max)\n        val\
    \ arr15 = arr14.take(max)\n        val arr16 = arr15.drop(max)\n        val arr17\
    \ = arr16.take(max)\n        val arr18 = arr17.drop(max)\n        val arr19 =\
    \ arr18.take(max)\n        val arr20 = arr19.drop(max)\n        val arr21 = arr20.take(max)\n\
    \        val arr22 = arr21.drop(max)\n        val arr23 = arr22.take(max)\n  \
    \      val arr24 = arr23.drop(max)\n        val arr25 = arr24.take(max)\n    \
    \    val arr26 = arr25.drop(max)\n        val arr27 = arr26.take(max)\n      \
    \  val arr28 = arr27.drop(max)\n        val arr29 = arr28.take(max)\n        val\
    \ arr30 = arr29.drop(max)\n        val arr31 = arr30.take(max)\n        val arr32\
    \ = arr31.drop(max)\n        val arr33 = arr32.take(max)\n        val arr34 =\
    \ arr33.drop(max)\n        val arr35 = arr34.take(max)\n        val arr36 = arr35.drop(max)\n\
    \        val arr37 = arr36.take(max)\n        val arr38 = arr37.drop(max)\n  \
    \      val arr39 = arr38.take(max)\n        val arr40 = arr39.drop(max)\n    \
    \    val arr41 = arr40.take(max)\n        val arr42 = arr41.drop(max)\n      \
    \  val arr43 = arr42.take(max)\n        val arr44 = arr43.drop(max)\n        val\
    \ arr45 = arr44.take(max)\n\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp89na8nro.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.take(max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0marr\
    \ is already defined as \e[33mvalue\e[0m \e[35marr\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp89na8nro.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp89na8nro.scala:63:5\
    \ ---------------------\e[0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len - k).toInt\n        var sum = 0L\n        var i = 0\n   \
    \     while (i < max) {\n            sum += arr(i).toLong\n            i += 1\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmo3n4zvj.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxLen = arr.take(k).size\n        val maxLen2 = maxLen / 2\n        val\
    \ maxLen3 = maxLen - maxLen2\n        val maxLen4 = maxLen - maxLen3\n       \
    \ val maxLen5 = maxLen - maxLen4\n        val maxLen6 = maxLen - maxLen5\n   \
    \     val maxLen7 = maxLen - maxLen6\n        val maxLen8 = maxLen - maxLen7\n\
    \        val maxLen9 = maxLen - maxLen8\n        val maxLen10 = maxLen - maxLen9\n\
    \        val maxLen11 = maxLen - maxLen10\n        val maxLen12 = maxLen - maxLen11\n\
    \        val maxLen13 = maxLen - maxLen12\n        val maxLen14 = maxLen - maxLen13\n\
    \        val maxLen15 = maxLen - maxLen14\n        val maxLen16 = maxLen - maxLen15\n\
    \        val maxLen17 = maxLen - maxLen16\n        val maxLen18 = maxLen - maxLen17\n\
    \        val maxLen19 = maxLen - maxLen18\n        val maxLen20 = maxLen - maxLen19\n\
    \        val maxLen21 = maxLen - maxLen20\n        val maxLen22 = maxLen - maxLen21\n\
    \        val maxLen23 = maxLen - maxLen22\n        val maxLen24 = maxLen - maxLen23\n\
    \        val maxLen25 = maxLen - maxLen24\n        val maxLen26 = maxLen - maxLen25\n\
    \        val maxLen27 = maxLen - maxLen26\n        val maxLen28 = maxLen - maxLen27\n\
    \        val maxLen29 = maxLen - maxLen28\n        val maxLen30 = maxLen - maxLen29\n\
    \        val maxLen31 = maxLen - maxLen30\n        val maxLen32 = maxLen - maxLen31\n\
    \        val maxLen33 = maxLen - maxLen32\n        val maxLen34 = maxLen - maxLen33\n\
    \        val maxLen35 = maxLen - maxLen34\n        val maxLen36 = maxLen - maxLen35\n\
    \        val maxLen37 = maxLen - maxLen36\n        val maxLen38 = maxLen - maxLen37\n\
    \        val maxLen39 = maxLen - maxLen38\n        val maxLen40 = max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt508t2b4.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpt508t2b4.scala:55:5 ---------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        val sum\
    \ = 0\n        for (i <- 0 until len) {\n            val digits = arr(i).toString.length\n\
    \            val twoDigits = digits - maxTwoDigits\n            val sum = sum\
    \ + arr(i).asInstanceOf[Long] + twoDigits\n        }\n        sum\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkt9f9nvo.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxDigit = arr.take(k).map(_.toString.length).max\n        val sum = 0\n\
    \        for (i <- 0 until len) {\n            val digit = arr(i).toString.length\n\
    \            if (digit <= maxDigit) {\n                sum += arr(i)\n       \
    \     }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgzg0x_li.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpgzg0x_li.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += arr(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659794439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxDigit = arr(maxLen)\n        val sum\
    \ = 0\n        var i = 0\n        while (i < maxLen) {\n            val digit\
    \ = arr(i)\n            sum += digit\n            i += 1\n        }\n        sum\
    \ + maxDigit\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp87gajns_.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp87gajns_.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659794440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val sum = 0\n        val maxSum = arr.take(k).foldLeft(0l){ (sum, elem)\
    \ => sum + elem }\n        val maxSum2 = arr.take(k).foldLeft(0l){ (sum, elem)\
    \ => sum + elem.toString.toLong }\n        val maxSum3 = arr.take(k).foldLeft(0l){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum4 = arr.take(k).foldLeft(0l){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum5 = arr.take(k).foldLeft(0l){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum6 = arr.take(k).foldLeft(0l){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum7 = arr.take(k).foldLeft(0l){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum8 = arr.take(k).foldLeft(0l){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum9 = arr.take(k).foldLeft(0l){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum10 = arr.take(k).foldLeft(0l){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum11 = arr.take(k).foldLeft(0l){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum12 = arr.take(k).foldLeft(0l){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum13 = arr.take(k).foldLeft(0l){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum14 = arr.take(k).foldLeft(0l){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum15 = arr.take(k).foldLeft(0l){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum16 = arr.take(k).foldLeft(0l){\
    \ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum17 = arr.take(k).foldLeft(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphcl169ff.scala:32:44 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxSum17\e[0m = arr.take(k).foldLeft(\n\
    \e[31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphcl169ff.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphcl169ff.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n\
    \            i += 1\n        }\n        while (i < arr.length) {\n           \
    \ sum += arr(i)\n            i += 1\n        }\n        result += sum\n      \
    \  result.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa38_d7rl.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa38_d7rl.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            sum += arr(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpa38_d7rl.scala:21:16 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        val sum\
    \ = 0\n        for(i <- 0 until k) {\n            val twoDigits = arr.take(i).map(_.toString.length).max\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpatna3siw.scala:75:18 ---------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m            sum += \n\e[31m\e[31m   |\e[0m          \
    \        ^\e[0m\n\e[31m   |\e[0m                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpatna3siw.scala:86:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m86 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpatna3siw.scala:13:18 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive\
    \ \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpatna3siw.scala:17:25 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpatna3siw.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += arr.take(i).sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpatna3siw.scala:20:16 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            sum += arr.take(i).sum\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpatna3siw.scala:21:16\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            sum += arr.take(i).sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ +="
  stdout: ''
  timestamp: 1659794445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val res = arr.take(k).foldLeft(0l) { (sum, elem) => sum + elem }\n       \
    \ val rem = arr.drop(k).foldLeft(0l) { (sum, elem) => sum + elem }\n        res\
    \ + rem\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2cy4ohdx.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len - k).toInt\n        val sum = 0\n        val maxSum = 0\n\
    \        for(i <- 0 until max){\n            val curr = arr(i).toInt\n       \
    \     val next = (i + 1)%max\n            val nextCurr = arr(next).toInt\n   \
    \         val nextNext = (next + 1)%max\n            val nextNextCurr = arr(nextNext).toInt\n\
    \            val nextNextNext = (nextNext + 1)%max\n            val nextNextNextCurr\
    \ = arr(nextNextNext).toInt\n            val nextNextNextNext = (nextNextNext\
    \ + 1)%max\n            val nextNextNextNextCurr = arr(nextNextNextNext).toInt\n\
    \            val nextNextNextNextNext = (nextNextNextNext + 1)%max\n         \
    \   val nextNextNextNextNextCurr = arr(nextNextNextNextNext).toInt\n         \
    \   val nextNextNextNextNextNext = (nextNextNextNextNext + 1)%max\n          \
    \  val nextNextNextNextNextNextCurr = arr(nextNextNextNextNextNext).toInt\n  \
    \          val nextNextNextNextNextNextNext = (nextNextNextNextNextNext + 1)%max\n\
    \            val nextNextNextNextNextNextNextCurr = arr(nextNextNextNextNextNextNext).toInt\n\
    \            val nextNextNextNextNextNextNextNext = (nextNextNextNextNextNextNext\
    \ + 1)%max\n            val nextNextNextNextNextNextNextNextCurr = arr(nextNextNextNextNextNextNextNext).toInt\n\
    \            val nextNextNextNextNextNextNextNextNext = (nextNextNextNextNextNextNextNext\
    \ + 1)%max\n            val nextNextNextNextNextNextNextNextNextCurr = arr(nextNextNextNextNextNextNextNextNext).toInt\n\
    \            val nextNextNextNextNextNextNextNextNextNext = (nextNextNextNextNextNextNextNextNextNext\
    \ + 1)%max\n            val nextNextNextNextNextNextNextNextNextNextCurr = arr(nextNextNextNextNextNextNextNextNextNext).toInt\n\
    \            val nextNextNextNextNextNextNextNextNextNext = (nextNextNextNextNextNextNextNextNextNext\
    \ + 1)%max\n            val nextNextNextNextNextNextNextNextNextNextCurr = arr(nextNextNextNextNextNextNextNextNextNextNext).toInt\n\
    \            val nextNextNextNextNextNextNextNextNextNextNext = (nextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8it2f2n0.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8it2f2n0.scala:53:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp8it2f2n0.scala:13:18 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive\
    \ \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8it2f2n0.scala:52:1 ---------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmp8it2f2n0.scala:44:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m44 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659794440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        val sum\
    \ = 0\n        for(i <- 0 until k) {\n            val twoDigits = arr.take(i).map(_.toString.length).max\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += arr.take(i).sum\n            sum += arr.take(i).sum\n        \
    \    sum += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum\
    \ += arr.take(i).sum\n            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n\
    \            sum += arr.take(i).sum\n            sum += arr.take(i).sum\n    \
    \        sum += \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_13fglcg.scala:75:18 ---------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m            sum += \n\e[31m\e[31m   |\e[0m          \
    \        ^\e[0m\n\e[31m   |\e[0m                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_13fglcg.scala:86:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m86 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp_13fglcg.scala:13:18 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive\
    \ \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_13fglcg.scala:17:25 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_13fglcg.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += arr.take(i).sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp_13fglcg.scala:20:16 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            sum += arr.take(i).sum\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_13fglcg.scala:21:16\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            sum += arr.take(i).sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ +="
  stdout: ''
  timestamp: 1659794445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val res = arr.take(k).foldLeft(0l){ (sum, el) => sum + el.toString.dropRight(2).sum.toLong\
    \ }\n        val maxDigits = len - k\n        val maxDigitSum = arr.take(maxDigits).foldLeft(0l){\
    \ (sum, el) => sum + el.toString.dropRight(2).sum.toLong }\n        res + maxDigitSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9wwu07ww.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        val maxSum = 0\n\
    \        val maxSumIndex = 0\n        val maxSumDigit = 0\n        val maxSumDigitIndex\
    \ = 0\n        val maxSumDigitDigit = 0\n        val maxSumDigitDigitIndex = 0\n\
    \        val maxSumDigitDigitDigit = 0\n        val maxSumDigitDigitDigitIndex\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxSumDigitDigitDigitDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mmaxSumDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxSumDigitDigitDigitDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mmaxSumDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxSumDigitDigitDigitDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mmaxSumDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxSumDigitDigitDigitDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mmaxSumDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        val twoDigits =\
    \ arr.take(max)\n        val twoDigitSum = twoDigits.sum\n        val twoDigitSum2\
    \ = twoDigitSum * 2\n        val twoDigitSum3 = twoDigitSum * 3\n        val twoDigitSum4\
    \ = twoDigitSum * 4\n        val twoDigitSum5 = twoDigitSum * 5\n        val twoDigitSum6\
    \ = twoDigitSum * 6\n        val twoDigitSum7 = twoDigitSum * 7\n        val twoDigitSum8\
    \ = twoDigitSum * 8\n        val twoDigitSum9 = twoDigitSum * 9\n        val twoDigitSum10\
    \ = twoDigitSum * 10\n        val twoDigitSum11 = twoDigitSum * 11\n        val\
    \ twoDigitSum12 = twoDigitSum * 12\n        val twoDigitSum13 = twoDigitSum *\
    \ 13\n        val twoDigitSum14 = twoDigitSum * 14\n        val twoDigitSum15\
    \ = twoDigitSum * 15\n        val twoDigitSum16 = twoDigitSum * 16\n        val\
    \ twoDigitSum17 = twoDigitSum * 17\n        val twoDigitSum18 = twoDigitSum *\
    \ 18\n        val twoDigitSum19 = twoDigitSum * 19\n        val twoDigitSum20\
    \ = twoDigitSum * 20\n        val twoDigitSum21 = twoDigitSum * 21\n        val\
    \ twoDigitSum22 = twoDigitSum * 22\n        val twoDigitSum23 = twoDigitSum *\
    \ 23\n        val twoDigitSum24 = twoDigitSum * 24\n        val twoDigitSum25\
    \ = twoDigitSum * 25\n        val twoDigitSum26 = twoDigitSum * 26\n        val\
    \ twoDigitSum27 = twoDigitSum * 27\n        val twoDigitSum28 = twoDigitSum *\
    \ 28\n        val twoDigitSum29 = twoDigitSum * 29\n        val twoDigitSum30\
    \ = twoDigitSum * 30\n        val twoDigitSum31 = twoDigitSum * 31\n        val\
    \ twoDigitSum32 = twoDigitSum * 32\n        val twoDigitSum33 = twoDigitSum *\
    \ 33\n        val twoDigitSum34 = twoDigitSum * 34\n        val twoDigitSum35\
    \ = twoDigitSum * 35\n        val twoDigitSum36 = twoDigitSum * 36\n        val\
    \ twoDigitSum37 = twoDigitSum * 37\n        val twoDigitSum38 = \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1o5cl0su.scala:55:27 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36mtwoDigitSum38\e[0m = \n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1o5cl0su.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1o5cl0su.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ len = arr.length\n        val maxLen = len - k\n        val maxDigit = arr(maxLen)\n\
    \        val maxDigitDigit = maxDigit / 10\n        val maxDigitRemainder = maxDigit\
    \ % 10\n        val maxDigitDigitRemainder = maxDigitRemainder / 10\n        val\
    \ maxDigitDigitRemainderRemainder = maxDigitRemainder % 10\n        val maxDigitDigitRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainder / 10\n        val maxDigitDigitRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainder % 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainder / 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainder % 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainderRemainder / 10\n    \
    \    val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder %\
    \ 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder /\
    \ 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder %\
    \ 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder /\
    \ 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder %\
    \ 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder /\
    \ 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = maxDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder %\
    \ 10\n        val maxDigitDigitRemainderRemainderRemainderRemainderRemain\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm661z64b.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm661z64b.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\e\
    [0m = maxDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpm661z64b.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\e\
    [0m = maxDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxDigitDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpm661z64b.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmax"
  stdout: ''
  timestamp: 1659794441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa2m5apn3.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpa2m5apn3.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val max2 = arr.take(k).max\n        val max1 = arr.take(k).min\n        val\
    \ max2Index = arr.lastIndexWhere(x => x > max2)\n        val max1Index = arr.lastIndexWhere(x\
    \ => x > max1)\n        val max2Index = if (max2Index == -1) k else max2Index\n\
    \        val max1Index = if (max1Index == -1) k else max1Index\n        val max2Index\
    \ = if (max2Index == -1) k else max2Index\n        val max1Index = if (max1Index\
    \ == -1) k else max1Index\n        val max2Index = if (max2Index == -1) k else\
    \ max2Index\n        val max1Index = if (max1Index == -1) k else max1Index\n \
    \       val max2Index = if (max2Index == -1) k else max2Index\n        val max1Index\
    \ = if (max1Index == -1) k else max1Index\n        val max2Index = if (max2Index\
    \ == -1) k else max2Index\n        val max1Index = if (max1Index == -1) k else\
    \ max1Index\n        val max2Index = if (max2Index == -1) k else max2Index\n \
    \       val max1Index = if (max1Index == -1) k else max1Index\n        val max2Index\
    \ = if (max2Index == -1) k else max2Index\n        val max1Index = if (max1Index\
    \ == -1) k else max1Index\n        val max2Index = if (max2Index == -1) k else\
    \ max2Index\n        val max1Index = if (max1Index == -1) k else max1Index\n \
    \       val max2Index = if (max2Index == -1) k else max2Index\n        val max1Index\
    \ = if (max1Index == -1) k else max1Index\n        val max2Index = if (max2Index\
    \ == -1) k else max2Index\n        val max1Index = if (max1Index == -1) k else\
    \ max1Index\n        val max2Index = if (max2Index == -1) k else max2Index\n \
    \       val max1Index = if (max1Index == -1) k else max1Index\n        val max2Index\
    \ = if (max2Index == -1) k else max2Index\n        val max1Index = if (max1Index\
    \ == -1) k else max1Index\n        val max2Index = if (max2Index == -1) k else\
    \ max2Index\n        val max1Index = if (max1Index == -1) k else max1Index\n \
    \       val max2Index = if (max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn37x1u_m.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn37x1u_m.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax2Index\e[0m = \e[33mif\e[0m (max2Index == -\e[31m1\e[0m) k \e[33melse\e\
    [0m max2Index\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax2Index is already defined as \e[33mvalue\e[0m \e[35mmax2Index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn37x1u_m.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmax1Index\e[0m = \e[33mif\e[0m (max1Index\
    \ == -\e[31m1\e[0m) k \e[33melse\e[0m max1Index\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax1Index\
    \ is already defined as \e[33mvalue\e[0m \e[35mmax1Index\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn37x1u_m.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax2Index\e[0m = \e[33mif\e[0m (max2Index == -\e[31m1\e[0m) k \e[33melse\e\
    [0m max2Index\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax2Index is already defined as \e[33mvalue\e[0m \e[35mmax2Index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn37x1u_m.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmax1Index\e[0m = \e[33mif\e[0m (max1Index\
    \ == -\e[31m1\e[0m) k \e[33melse\e[0m max1Index\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax1Index\
    \ is already defined as \e[33mvalu"
  stdout: ''
  timestamp: 1659794442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val max2 = max / 2\n        val max3\
    \ = max / 3\n        val max4 = max / 4\n        val max5 = max / 5\n        val\
    \ max6 = max / 6\n        val max7 = max / 7\n        val max8 = max / 8\n   \
    \     val max9 = max / 9\n        val max10 = max / 10\n        val max11 = max\
    \ / 11\n        val max12 = max / 12\n        val max13 = max / 13\n        val\
    \ max14 = max / 14\n        val max15 = max / 15\n        val max16 = max / 16\n\
    \        val max17 = max / 17\n        val max18 = max / 18\n        val max19\
    \ = max / 19\n        val max20 = max / 20\n        val max21 = max / 21\n   \
    \     val max22 = max / 22\n        val max23 = max / 23\n        val max24 =\
    \ max / 24\n        val max25 = max / 25\n        val max26 = max / 26\n     \
    \   val max27 = max / 27\n        val max28 = max / 28\n        val max29 = max\
    \ / 29\n        val max30 = max / 30\n        val max31 = max / 31\n        val\
    \ max32 = max / 32\n        val max33 = max / 33\n        val max34 = max / 34\n\
    \        val max35 = max / 35\n        val max36 = max / 36\n        val max37\
    \ = max / 37\n        val max38 = max / 38\n        val max39 = max / 39\n   \
    \     val max40 = max / 40\n        val max41 = max / 41\n        val max42 =\
    \ max / 42\n        val max43 = max / 43\n        val max44 = max / 44\n     \
    \   val max45 = max / 45\n        val max46 = max / 46\n        val max47 = max\
    \ / 47\n        val max48 = max / 48\n        val max49 = max / 49\n        val\
    \ max50 = max / 50\n        val max51 = max / 51\n        val max52 = max / 52\n\
    \        val max53 = max / 53\n        val max54 = max / 54\n        val max55\
    \ = max / 55\n        val max56 = max / 56\n        val max57 = \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpc5pbtps2.scala:71:19 ---------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m        \e[33mval\e[0m \e[36mmax57\e[0m = \n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpc5pbtps2.scala:13:18 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpc5pbtps2.scala:72:5 ---------------------\e[0m\e[0m\n\e[31m72\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val max2 = max / 2\n        val max3\
    \ = max / 3\n        val max4 = max / 4\n        val max5 = max / 5\n        val\
    \ max6 = max / 6\n        val max7 = max / 7\n        val max8 = max / 8\n   \
    \     val max9 = max / 9\n        val max10 = max / 10\n        val max11 = max\
    \ / 11\n        val max12 = max / 12\n        val max13 = max / 13\n        val\
    \ max14 = max / 14\n        val max15 = max / 15\n        val max16 = max / 16\n\
    \        val max17 = max / 17\n        val max18 = max / 18\n        val max19\
    \ = max / 19\n        val max20 = max / 20\n        val max21 = max / 21\n   \
    \     val max22 = max / 22\n        val max23 = max / 23\n        val max24 =\
    \ max / 24\n        val max25 = max / 25\n        val max26 = max / 26\n     \
    \   val max27 = max / 27\n        val max28 = max / 28\n        val max29 = max\
    \ / 29\n        val max30 = max / 30\n        val max31 = max / 31\n        val\
    \ max32 = max / 32\n        val max33 = max / 33\n        val max34 = max / 34\n\
    \        val max35 = max / 35\n        val max36 = max / 36\n        val max37\
    \ = max / 37\n        val max38 = max / 38\n        val max39 = max / 39\n   \
    \     val max40 = max / 40\n        val max41 = max / 41\n        val max42 =\
    \ max / 42\n        val max43 = max / 43\n        val max44 = max / 44\n     \
    \   val max45 = max / 45\n        val max46 = max / 46\n        val max47 = max\
    \ / 47\n        val max48 = max / 48\n        val max49 = max / 49\n        val\
    \ max50 = max / 50\n        val max51 = max / 51\n        val max52 = max / 52\n\
    \        val max53 = max / 53\n        val max54 = max / 54\n        val max55\
    \ = max / 55\n        val max56 = max / 56\n        val max57 = \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpc5pbtps2.scala:71:19 ---------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m        \e[33mval\e[0m \e[36mmax57\e[0m = \n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpc5pbtps2.scala:13:18 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpc5pbtps2.scala:72:5 ---------------------\e[0m\e[0m\n\e[31m72\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        val twoDigits =\
    \ arr.take(max).filter(_ < 10).sum\n        val threeDigits = arr.take(max).filter(_\
    \ >= 10).sum\n        val twoDigitSum = arr.take(max).filter(_ < 10).sum\n   \
    \     val threeDigitSum = arr.take(max).filter(_ >= 10).sum\n        val twoDigitSum2\
    \ = arr.take(max).filter(_ < 10).sum\n        val threeDigitSum2 = arr.take(max).filter(_\
    \ >= 10).sum\n        val twoDigitSum3 = arr.take(max).filter(_ < 10).sum\n  \
    \      val threeDigitSum3 = arr.take(max).filter(_ >= 10).sum\n        val twoDigitSum4\
    \ = arr.take(max).filter(_ < 10).sum\n        val threeDigitSum4 = arr.take(max).filter(_\
    \ >= 10).sum\n        val twoDigitSum5 = arr.take(max).filter(_ < 10).sum\n  \
    \      val threeDigitSum5 = arr.take(max).filter(_ >= 10).sum\n        val twoDigitSum6\
    \ = arr.take(max).filter(_ < 10).sum\n        val threeDigitSum6 = arr.take(max).filter(_\
    \ >= 10).sum\n        val twoDigitSum7 = arr.take(max).filter(_ < 10).sum\n  \
    \      val threeDigitSum7 = arr.take(max).filter(_ >= 10).sum\n        val twoDigitSum8\
    \ = arr.take(max).filter(_ < 10).sum\n        val threeDigitSum8 = arr.take(max).filter(_\
    \ >= 10).sum\n        val twoDigitSum9 = arr.take(max).filter(_ < 10).sum\n  \
    \      val threeDigitSum9 = arr.take(max).filter(_ >= 10).sum\n        val twoDigitSum10\
    \ = arr.take(max).filter(_ < 10).sum\n        val threeDigitSum10 = arr.take(max).filter(_\
    \ >= 10).sum\n        val twoDigitSum11 = arr.take(max).filter(_ < 10).sum\n \
    \       val threeDigitSum11 = arr.take(max).filter(_ >= 10).sum\n        val twoDigitSum12\
    \ = arr.take(max).filter(_ < 10).sum\n        val threeDigitSum12 = arr.take(max).filter(_\
    \ >= 10).sum\n        val twoDigitSum13 = arr.take(max).filter(_ < 10).sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxq3unke1.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpxq3unke1.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0\n        for (i <- 0 until arr.size) {\n            if (arr.size <=\
    \ k) {\n                sum += arr(i)\n            } else {\n                val\
    \ temp = arr(i)\n                val temp2 = temp % 10\n                val temp3\
    \ = temp / 10\n                if (temp2 > 2) {\n                    sum += temp3\n\
    \                }\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ty3na_n.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ty3na_n.scala:17:20\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                sum += arr(i)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp9ty3na_n.scala:23:24 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                    sum += temp3\n\e[31m\e[31m   |\e[0m  \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not\
    \ a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa2m5apn3.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpa2m5apn3.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxNum = arr.take(k).max\n        val maxNumLen = maxNum.toString.length\n\
    \        val result = arr.filter(_ <= maxNum).sum\n        val resultLen = result.toString.length\n\
    \        if (resultLen > maxNumLen) {\n            val maxNumStr = maxNum.toString\n\
    \            val maxNumLenStr = maxNumStr.length\n            val maxNumStrLen\
    \ = maxNumStrLen - maxNumLen\n            val resultStr = result.toString\n  \
    \          val resultStrLen = resultStr.length\n            val maxNumStrLen =\
    \ maxNumStrLen - maxNumLen\n            val resultStrLenStr = resultStrLen + maxNumStrLen\n\
    \            val maxNumStrLenStr = maxNumStrLen - maxNumLenStr\n            val\
    \ resultStrLenStrStr = resultStrLenStr + maxNumStrLenStr\n            val maxNumStrLenStrStr\
    \ = maxNumStrLenStr - maxNumLenStrStr\n            val resultStrLenStrStrStr =\
    \ resultStrLenStrStr + maxNumStrLenStrStr\n            val maxNumStrLenStrStrStr\
    \ = maxNumStrLenStrStr - maxNumLenStrStrStr\n            val resultStrLenStrStrStrStr\
    \ = resultStrLenStrStrStr + maxNumStrLenStrStrStr\n            val maxNumStrLenStrStrStrStr\
    \ = maxNumStrLenStrStrStr - maxNumLenStrStrStrStr\n            val resultStrLenStrStrStrStrStr\
    \ = resultStrLenStrStrStrStr + maxNumStrLenStrStrStrStr\n            val maxNumStrLenStrStrStrStrStr\
    \ = maxNumStrLenStrStrStrStr - maxNumLenStrStrStrStrStrStr\n            val resultStrLenStrStrStrStrStrStr\
    \ = resultStrLenStrStrStrStrStrStr + maxNumStrLenStrStrStrStrStrStr\n        \
    \    val maxNumStrLenStrStrStrStrStrStrStr = maxNumStrLenStrStrStrStrStrStrStr\
    \ - maxNumLenStrStrStrStrStrStrStrStr\n            val resultStrLenStrStrStrStrStrStrStrStr\
    \ = resultStrLenStrStrStrStrStrStrStrStr + maxNumStrLenStrStrStrStrStrStrStrStrStr\n\
    \            val maxNumStrLenStrStrStrStrStrStrStrStrStrStr = maxNumStrLenStrStrStrStrStrStrStrStrStrStrStrStr\
    \ - maxNumLenStrStrStrStrStrStrStrStrStrStrStr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptrqfm186.scala:50:0 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptrqfm186.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptrqfm186.scala:25:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e\
    [0m \e[36mmaxNumStrLen\e[0m = maxNumStrLen - maxNumLen\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxNumStrLen\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxNumStrLen\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptrqfm186.scala:22:31\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mmaxNumStrLen\e[0m = maxNumStrLen - maxNumLen\n\e[31m\e[31m   |\e[0m\
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \         Recursive \e[33mvalue\e[0m \e[35mmaxNumStrLen\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptrqfm186.scala:36:49 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mval\e[0m \e[36mresultStrLenStrStrStrStrStrStr\e\
    [0m = resultStrLenStrStrStrStrStrStr + maxNumStrLenStrStrStrStrStrStr\n\e[31m\e\
    [31m   |\e[0m                                                 ^\e[0m\n\e[31m \
    \  |\e[0m               Recursive \e[33mvalue\e[0m \e[35mresultStrLenStrStrStrStrStrStr\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptrqfm186.scala:37:52\
    \ ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1659794445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len - k).toInt\n        val sum = 0\n        var i = 0\n    \
    \    while (i < max) {\n            val cur = arr(i)\n            val next = (i\
    \ + 1) < max ? arr(i + 1) : 0\n            val curDigit = cur.toString.toInt\n\
    \            val nextDigit = next.toString.toInt\n            val curSum = curDigit\
    \ + nextDigit\n            val nextSum = nextDigit + curDigit\n            if\
    \ (curSum > nextSum) {\n                sum += curSum\n                i += 2\n\
    \            } else {\n                sum += nextSum\n                i += 1\n\
    \            }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptpop1mgh.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmptpop1mgh.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                sum += curSum\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmptpop1mgh.scala:29:20 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m                sum += nextSum\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val maxTwoDigit = arr.take(k).map(_.toString.length).max\n\
    \        val maxTwoDigitIndex = arr.take(k).map(_.toString.length).indexWhere(_\
    \ == maxTwoDigit)\n        val maxTwoDigitSum = arr.take(k).map(_.toString).sum\n\
    \        val maxTwoDigitSumIndex = arr.take(k).map(_.toString).indexWhere(_ ==\
    \ maxTwoDigitSum)\n        val maxTwoDigitSumIndex2 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 1)\n        val maxTwoDigitSumIndex3 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 2)\n        val maxTwoDigitSumIndex4 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 3)\n        val maxTwoDigitSumIndex5 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 4)\n        val maxTwoDigitSumIndex6 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 5)\n        val maxTwoDigitSumIndex7 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 6)\n        val maxTwoDigitSumIndex8 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 7)\n        val maxTwoDigitSumIndex9 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 8)\n        val maxTwoDigitSumIndex10 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 9)\n        val maxTwoDigitSumIndex11 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 10)\n        val maxTwoDigitSumIndex12 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 11)\n        val maxTwoDigitSumIndex13 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 12)\n        val maxTwoDigitSumIndex14 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 13)\n        val maxTwoDigitSumIndex15 = arr.take(k).map(_.toString).indexWhere(_\
    \ == maxTwoDigitSumIndex + 14)\n        val maxTwoDigitSumIndex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi71sipuy.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi71sipuy.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi71sipuy.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpi71sipuy.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0\n        for (i <- 0 until arr.length) {\n            sum += arr(i)\n\
    \            if (sum >= 10) {\n                sum += arr(i + k)\n           \
    \ }\n            if (sum >= 10) {\n                result.add(sum)\n         \
    \       sum = 0\n            }\n        }\n        if (sum > 0) {\n          \
    \  result.add(sum)\n        }\n        result.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk8xq_iwy.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk8xq_iwy.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum += arr(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpk8xq_iwy.scala:18:20 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m                sum += arr(i + k)\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk8xq_iwy.scala:18:27\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                sum += arr(i\
    \ + k)\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    Long\n\e[31m   |\e[0m                \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxSum = arr(k).toLong + arr(maxLen).toLong\n\
    \        val maxSum2 = arr(k).toLong + arr(maxLen + 1).toLong\n        val maxSum3\
    \ = arr(k).toLong + arr(maxLen + 2).toLong\n        val maxSum4 = arr(k).toLong\
    \ + arr(maxLen + 3).toLong\n        val maxSum5 = arr(k).toLong + arr(maxLen +\
    \ 4).toLong\n        val maxSum6 = arr(k).toLong + arr(maxLen + 5).toLong\n  \
    \      val maxSum7 = arr(k).toLong + arr(maxLen + 6).toLong\n        val maxSum8\
    \ = arr(k).toLong + arr(maxLen + 7).toLong\n        val maxSum9 = arr(k).toLong\
    \ + arr(maxLen + 8).toLong\n        val maxSum10 = arr(k).toLong + arr(maxLen\
    \ + 9).toLong\n        val maxSum11 = arr(k).toLong + arr(maxLen + 10).toLong\n\
    \        val maxSum12 = arr(k).toLong + arr(maxLen + 11).toLong\n        val maxSum13\
    \ = arr(k).toLong + arr(maxLen + 12).toLong\n        val maxSum14 = arr(k).toLong\
    \ + arr(maxLen + 13).toLong\n        val maxSum15 = arr(k).toLong + arr(maxLen\
    \ + 14).toLong\n        val maxSum16 = arr(k).toLong + arr(maxLen + 15).toLong\n\
    \        val maxSum17 = arr(k).toLong + arr(maxLen + 16).toLong\n        val maxSum18\
    \ = arr(k).toLong + arr(maxLen + 17).toLong\n        val maxSum19 = arr(k).toLong\
    \ + arr(maxLen + 18).toLong\n        val maxSum20 = arr(k).toLong + arr(maxLen\
    \ + 19).toLong\n        val maxSum21 = arr(k).toLong + arr(maxLen + 20).toLong\n\
    \        val maxSum22 = arr(k).toLong + arr(maxLen + 21).toLong\n        val maxSum23\
    \ = arr(k).toLong + arr(maxLen + 22).toLong\n        val maxSum24 = arr(k).toLong\
    \ + arr(maxLen + 23).toLong\n        val maxSum25 = arr(k).toLong + arr(maxLen\
    \ + 24).toLong\n        val maxSum26 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdjcg69zr.scala:41:22 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mmaxSum26\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdjcg69zr.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpdjcg69zr.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val m = arr.size\n        val n = k\n        val result\
    \ = new mutable.HashMap[Long, Long]()\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val min = new mutable.HashMap[Long, Long]()\n        val max2\
    \ = new mutable.HashMap[Long, Long]()\n        val min2 = new mutable.HashMap[Long,\
    \ Long]()\n        val max3 = new mutable.HashMap[Long, Long]()\n        val min3\
    \ = new mutable.HashMap[Long, Long]()\n        val max4 = new mutable.HashMap[Long,\
    \ Long]()\n        val min4 = new mutable.HashMap[Long, Long]()\n        val max5\
    \ = new mutable.HashMap[Long, Long]()\n        val min5 = new mutable.HashMap[Long,\
    \ Long]()\n        val max6 = new mutable.HashMap[Long, Long]()\n        val min6\
    \ = new mutable.HashMap[Long, Long]()\n        val max7 = new mutable.HashMap[Long,\
    \ Long]()\n        val min7 = new mutable.HashMap[Long, Long]()\n        val max8\
    \ = new mutable.HashMap[Long, Long]()\n        val min8 = new mutable.HashMap[Long,\
    \ Long]()\n        val max9 = new mutable.HashMap[Long, Long]()\n        val min9\
    \ = new mutable.HashMap[Long, Long]()\n        val max10 = new mutable.HashMap[Long,\
    \ Long]()\n        val min10 = new mutable.HashMap[Long, Long]()\n        val\
    \ max11 = new mutable.HashMap[Long, Long]()\n        val min11 = new mutable.HashMap[Long,\
    \ Long]()\n        val max12 = new mutable.HashMap[Long, Long]()\n        val\
    \ min12 = new mutable.HashMap[Long, Long]()\n        val max13 = new mutable.HashMap[Long,\
    \ Long]()\n        val min13 = new mutable.HashMap[Long, Long]()\n        val\
    \ max14 = new mutable.HashMap[Long, Long]()\n        val min14 = new mutable.HashMap[Long,\
    \ Long]()\n        val max15 = new mutable.HashMap[Long, Long]()\n        val\
    \ min15 = new mutable.HashMap[Long, Long]()\n        val max16 = new mutable.HashMap[Long,\
    \ Long]()\n        val min16 = new mutable.HashMap[Long, Long]()\n        val\
    \ max17 = new mutable.HashMap[\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplbknh6xo.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmplbknh6xo.scala:15:25 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplbknh6xo.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmplbknh6xo.scala:17:22 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplbknh6xo.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmax2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplbknh6xo.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mmin2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   "
  stdout: ''
  timestamp: 1659794445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val sum = 0\n        val twoDigits = arr.take(k).map(_.toString.length).max\n\
    \        val twoDigitsSum = arr.take(twoDigits).map(_.toString).sum\n        val\
    \ twoDigitsSum2 = arr.take(twoDigits + 1).map(_.toString).sum\n        val twoDigitsSum3\
    \ = arr.take(twoDigits + 2).map(_.toString).sum\n        val twoDigitsSum4 = arr.take(twoDigits\
    \ + 3).map(_.toString).sum\n        val twoDigitsSum5 = arr.take(twoDigits + 4).map(_.toString).sum\n\
    \        val twoDigitsSum6 = arr.take(twoDigits + 5).map(_.toString).sum\n   \
    \     val twoDigitsSum7 = arr.take(twoDigits + 6).map(_.toString).sum\n      \
    \  val twoDigitsSum8 = arr.take(twoDigits + 7).map(_.toString).sum\n        val\
    \ twoDigitsSum9 = arr.take(twoDigits + 8).map(_.toString).sum\n        val twoDigitsSum10\
    \ = arr.take(twoDigits + 9).map(_.toString).sum\n        val twoDigitsSum11 =\
    \ arr.take(twoDigits + 10).map(_.toString).sum\n        val twoDigitsSum12 = arr.take(twoDigits\
    \ + 11).map(_.toString).sum\n        val twoDigitsSum13 = arr.take(twoDigits +\
    \ 12).map(_.toString).sum\n        val twoDigitsSum14 = arr.take(twoDigits + 13).map(_.toString).sum\n\
    \        val twoDigitsSum15 = arr.take(twoDigits + 14).map(_.toString).sum\n \
    \       val twoDigitsSum16 = arr.take(twoDigits + 15).map(_.toString).sum\n  \
    \      val twoDigitsSum17 = arr.take(twoDigits + 16).map(_.toString).sum\n   \
    \     val twoDigitsSum18 = arr.take(twoDigits + 17).map(_.toString).sum\n    \
    \    val twoDigitsSum19 = arr.take(twoDigits + 18).map(_.toString).sum\n     \
    \   val twoDigitsSum20 = arr.take(twoDigits + 19).map(_.toString).sum\n      \
    \  val twoDigitsSum21 = arr.take(twoDigits + 20).map(_.toString).sum\n       \
    \ val twoDigitsSum22 = arr.take(two\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1zfcttao.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1zfcttao.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1zfcttao.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxLen = arr.take(k).size\n        val maxLen2 = maxLen / 2\n        val\
    \ maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5\
    \ = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen\
    \ / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n  \
    \      val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n      \
    \  val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val\
    \ maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16\
    \ = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen\
    \ / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n\
    \        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n    \
    \    val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val\
    \ maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27\
    \ = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen\
    \ / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n\
    \        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n    \
    \    val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val\
    \ maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38\
    \ = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen\
    \ / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n\
    \        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n    \
    \    val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val\
    \ maxLen\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9hf9h701.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9hf9h701.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9hf9h701.scala:62:5\
    \ ---------------------\e[0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxSum = arr.take(k).foldLeft(0l) { (sum,\
    \ elem) => sum + elem }\n        val maxSum2 = arr.take(maxLen).foldLeft(0l) {\
    \ (sum, elem) => sum + elem }\n        val maxSum3 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum4 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum5 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum6 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum7 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum8 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum9 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum10 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum11 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum12 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum13 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum14 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum15 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum16 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum17 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val maxSum18 = arr.take(maxLen).foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqn7mb511.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpqn7mb511.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0\n        var i = 0\n        while (i < arr.length) {\n            if\
    \ (sum + arr(i) < 10) {\n                sum += arr(i)\n                i += 1\n\
    \            } else {\n                result.add(sum)\n                sum =\
    \ 0\n                i += 1\n            }\n        }\n        result.add(sum)\n\
    \        result.take(k).sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2yjj8k78.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2yjj8k78.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                sum += arr(i)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n\
    \            i += 1\n        }\n        while (i < arr.length) {\n           \
    \ sum += arr(i)\n            i += 1\n        }\n        result += sum\n      \
    \  result.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa38_d7rl.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa38_d7rl.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            sum += arr(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpa38_d7rl.scala:21:16 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxTwoDigit = arr.take(k).maxBy(_.toString.length)\n        val maxTwoDigitIndex\
    \ = arr.indexOf(maxTwoDigit)\n        val maxTwoDigitSum = maxTwoDigitIndex +\
    \ k\n        val maxTwoDigitSumIndex = arr.indexOf(maxTwoDigitSum)\n        val\
    \ maxTwoDigitSumSum = maxTwoDigitSumIndex + k\n        val maxTwoDigitSumSumIndex\
    \ = arr.indexOf(maxTwoDigitSumSum)\n        val maxTwoDigitSumSumSum = maxTwoDigitSumSumIndex\
    \ + k\n        val maxTwoDigitSumSumSumIndex = arr.indexOf(maxTwoDigitSumSumSum)\n\
    \        val maxTwoDigitSumSumSumSum = maxTwoDigitSumSumSumIndex + k\n       \
    \ val maxTwoDigitSumSumSumSumIndex = arr.indexOf(maxTwoDigitSumSumSumSum)\n  \
    \      val maxTwoDigitSumSumSumSumSum = maxTwoDigitSumSumSumSumIndex + k\n   \
    \     val maxTwoDigitSumSumSumSumSumIndex = arr.indexOf(maxTwoDigitSumSumSumSumSum)\n\
    \        val maxTwoDigitSumSumSumSumSumSum = maxTwoDigitSumSumSumSumSumIndex +\
    \ k\n        val maxTwoDigitSumSumSumSumSumSumIndex = arr.indexOf(maxTwoDigitSumSumSumSumSumSumSum)\n\
    \        val maxTwoDigitSumSumSumSumSumSumSum = maxTwoDigitSumSumSumSumSumSumIndex\
    \ + k\n        val maxTwoDigitSumSumSumSumSumSumSum = maxTwoDigitSumSumSumSumSumSumSumIndex\
    \ + k\n        val maxTwoDigitSumSumSumSumSumSumSumSum = maxTwoDigitSumSumSumSumSumSumSumSumIndex\
    \ + k\n        val maxTwoDigitSumSumSumSumSumSumSumSumSum = maxTwoDigitSumSumSumSumSumSumSumSumSumIndex\
    \ + k\n        val maxTwoDigitSumSumSumSumSumSumSumSumSumSum = maxTwoDigitSumSumSumSumSumSumSumSumSumSumIndex\
    \ + k\n        val maxTwoDigitSumSumSumSumSumSumSumSumSumSum = maxTwoDigitSumSumSumSumSumSumSumSumSumSumIndex\
    \ + k\n        val maxTwoDigitSumSumSumSumSumSumSumSumSumSumSum = maxTwoDigitSumSumSumSumSumSumSumSumSumSumIndex\
    \ + k\n        val maxTwoDigitSumSumSumSumSumSumSumSumSumSumSum = maxTwoDigitSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz5885z2b.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxTwoDigitSumSumSumSumSumSumSum\e\
    [0m = maxTwoDigitSumSumSumSumSumSumSumIndex + k\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTwoDigitSumSumSumSumSumSumSum is already defined as \e\
    [33mvalue\e[0m \e[35mmaxTwoDigitSumSumSumSumSumSumSum\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz5885z2b.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTwoDigitSumSumSumSumSumSumSumSumSumSum\e[0m = maxTwoDigitSumSumSumSumSumSumSumSumSumSumIndex\
    \ + k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTwoDigitSumSumSumSumSumSumSumSumSumSum is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxTwoDigitSumSumSumSumSumSumSumSumSumSum\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpz5885z2b.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTwoDigitSumSumSumSumSumSumSumSumSumSumSum\e\
    [0m = maxTwoDigitSum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTwoDigitSumSumSumSumSumSumSumSumSumSumSum is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxTwoDigitSumSumSumSumSumSumSumSumSumSumSum\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpz5885z2b.scala:13:18 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n\
    \        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val\
    \ maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6\
    \ = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen\
    \ / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n\
    \        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n    \
    \    val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val\
    \ maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17\
    \ = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen\
    \ / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n\
    \        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n    \
    \    val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val\
    \ maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28\
    \ = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen\
    \ / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n\
    \        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n    \
    \    val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val\
    \ maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39\
    \ = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen\
    \ / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n\
    \        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n    \
    \    val maxLen4\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpunk80lzz.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpunk80lzz.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpunk80lzz.scala:14:18 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpunk80lzz.scala:62:5 ---------------------\e[0m\e[0m\n\e[31m62\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa2m5apn3.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpa2m5apn3.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val max = (len - k).toInt\n        val sum = 0\n        for(i <- 0 until max){\n\
    \            val curr = arr(i).toInt\n            val next = (i + 1)%len\n   \
    \         val nextCurr = arr(next).toInt\n            val nextNext = (next + 1)%len\n\
    \            val sum = sum + curr + nextCurr + nextNext\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzmmtkfen.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ len = arr.length\n        val maxTwoDigit = arr.take(k).max\n        val maxTwoDigitIndex\
    \ = arr.lastIndexWhere(x => x > maxTwoDigit)\n        val maxTwoDigitIndexInRange\
    \ = maxTwoDigitIndex - k\n        val maxTwoDigitIndexInRangeInRange = maxTwoDigitIndexInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRangeInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRangeInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRangeInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRangeInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRangeInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRangeInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRangeInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRangeInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRangeInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRangeInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRangeInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRangeInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRangeInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRangeInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRangeInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRangeInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRangeInRange\
    \ / 2\n        val maxTwoDigitIndexInRangeInRangeInRange = maxTwoDigitIndexInRange\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpke8bkyn9.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxTwoDigitIndexInRangeInRangeInRange\e\
    [0m = maxTwoDigitIndexInRangeInRange / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTwoDigitIndexInRangeInRangeInRange is already defined as\
    \ \e[33mvalue\e[0m \e[35mmaxTwoDigitIndexInRangeInRangeInRange\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpke8bkyn9.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTwoDigitIndexInRangeInRangeInRange\e[0m = maxTwoDigitIndexInRangeInRange\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTwoDigitIndexInRangeInRangeInRange is already defined as\
    \ \e[33mvalue\e[0m \e[35mmaxTwoDigitIndexInRangeInRangeInRange\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpke8bkyn9.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTwoDigitIndexInRangeInRangeInRange\e[0m = maxTwoDigitIndexInRangeInRange\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTwoDigitIndexInRangeInRangeInRange is already defined as\
    \ \e[33mvalue\e[0m \e[35mmaxTwoDigitIndexInRangeInRangeInRange\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpke8bkyn9.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTwoDigitIndexInRangeInRangeInRange\e[0m = maxTwoDigitIndexInRangeInRange\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxLen = len - k\n        val maxSum = arr.take(maxLen).sum\n        val\
    \ minSum = arr.drop(maxLen).sum\n        val sum = maxSum + minSum\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmmksrymj.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxDigit = arr.take(maxLen).map(_.toString.length).max\n\
    \        val maxDigits = arr.take(maxLen).map(_.toString).map(_.length).max\n\
    \        val maxDigitSum = arr.take(maxLen).map(_.toString).map(_.sum).max\n \
    \       val maxDigitSums = arr.take(maxLen).map(_.toString).map(_.sum).map(_.length).max\n\
    \        val maxDigitSumsOfDigits = arr.take(maxLen).map(_.toString).map(_.sum).map(_.map(_.length).max).max\n\
    \        val maxDigitSumsOfDigitsOfDigits = arr.take(maxLen).map(_.toString).map(_.sum).map(_.map(_.map(_.length).max)).max\n\
    \        val maxDigitSumsOfDigitsOfDigitsOfDigits = arr.take(maxLen).map(_.toString).map(_.sum).map(_.map(_.map(_.map(_.length).max)).max).max\n\
    \        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigits = arr.take(maxLen).map(_.toString).map(_.sum).map(_.map(_.map(_.map(_.map(_.length).max)).max)).max).max\n\
    \        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = arr.take(maxLen).map(_.toString).map(_.sum).map(_.map(_.map(_.map(_.map(_.map(_.length).max)).max)).max).max).max\n\
    \        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = arr.take(maxLen).map(_.toString).map(_.sum).map(_.map(_.map(_.map(_.map(_.map(_.map(_.length).max)).max)).max)).max).max).max\n\
    \        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits\
    \ = arr.take(maxLen).map(_.toString).map(_.sum).map(_.map(_.map(_.map(_.map(_.map(_.map(_.map(_.length).max)).max)).max)).max).max).max).max\n\
    \        val maxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits\
    \ = arr.take(maxLen).map(\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4w0lyqhz.scala:23:156 --------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitSumsOfDigitsOfDigitsOfDigitsOfDigits\e\
    [0m = arr.take(maxLen).map(_.toString).map(_.sum).map(_.map(_.map(_.map(_.map(_.length).max)).max)).max).max\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                '}' expected, but ')' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp4w0lyqhz.scala:24:175 --------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits\e\
    [0m = arr.take(maxLen).map(_.toString).map(_.sum).map(_.map(_.map(_.map(_.map(_.map(_.length).max)).max)).max).max).max\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                                   '}' expected, but ')' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp4w0lyqhz.scala:25:190 --------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitSumsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits\e\
    [0m = arr.take(maxLen).map(_.toString).map(_.sum).map(_.map(_.map(_.map(_.map(_.map(_.map(_.length).max)).max)).max)).max).max).max\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                             eof expected, but ')' found\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4w0lyqhz.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35ma"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = arr.take(k).map(_.toString.length).max\n        val maxLen2\
    \ = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen\
    \ / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n  \
    \      val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val\
    \ maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11\
    \ = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen\
    \ / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n\
    \        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n    \
    \    val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val\
    \ maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22\
    \ = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen\
    \ / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n\
    \        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n    \
    \    val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val\
    \ maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33\
    \ = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen\
    \ / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n\
    \        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n    \
    \    val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val\
    \ maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44\
    \ = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen\
    \ / \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpc4__klox.scala:60:31 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36mmaxLen46\e[0m = maxLen /\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc4__klox.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc4__klox.scala:61:5\
    \ ---------------------\e[0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.HashMap[Long, Long]()\n       \
    \ val arr = arr.toList\n        val len = arr.length\n        val maxNum = arr.take(k).max\n\
    \        val maxNumLen = maxNum.length\n        val maxNumNum = maxNum.toLong\n\
    \        val maxNumNumLen = maxNumNum.length\n        var i = 0\n        while\
    \ (i < len) {\n            val curNum = arr(i)\n            val curNumLen = curNum.length\n\
    \            val curNumNum = curNum.toLong\n            val curNumNumLen = curNumNum.length\n\
    \            if (curNumLen <= maxNumLen && curNumNum <= maxNumNum) {\n       \
    \         val key = curNumNum\n                val value = curNum\n          \
    \      if (result.contains(key)) {\n                    result(key) += value\n\
    \                } else {\n                    result.put(key, value)\n      \
    \          }\n            }\n            i += 1\n        }\n        val res =\
    \ result.toList.maxBy(_._1)._2\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpio333ndv.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpio333ndv.scala:14:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = arr.take(k).map(_.toString.length).max\n        val result\
    \ = arr.take(k).foldLeft(0l) { (sum, el) => sum + el.toString.substring(0,maxLen)\
    \ }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpflpaszok.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = arr.take(k).length\n        val sum = 0\n        for(i <- 0\
    \ until k) {\n            val cur = arr.take(i).sum\n            val curLen =\
    \ cur.length\n            val curMaxLen = cur.take(maxLen).length\n          \
    \  val curSum = cur.sum\n            val curSumLen = curSum.length\n         \
    \   val curMaxSum = cur.take(maxLen).sum\n            val curMaxSumLen = curMaxSum.length\n\
    \            val curSumLenDiff = curSumLen - curMaxSumLen\n            val curMaxSumLenDiff\
    \ = curMaxSumLen - curSumLen\n            val curSumDiff = curSum - curMaxSum\n\
    \            val curMaxSumDiff = curMaxSum - curSum\n            val curMaxSumDiffDiff\
    \ = curMaxSumDiff - curSumDiff\n            val curMaxSumDiffDiffDiff = curMaxSumDiffDiff\
    \ - curMaxSumDiff\n            val curMaxSumDiffDiffDiff = curMaxSumDiffDiff -\
    \ curMaxSumDiff\n            val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n\
    \            val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n \
    \           val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n  \
    \          val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n   \
    \         val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n    \
    \        val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n     \
    \       val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n      \
    \      val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n       \
    \     val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n        \
    \    val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n         \
    \   val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n          \
    \  val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n           \
    \ val curMaxSumDiffDiffDiff = curMaxSumDiffDiff - curMaxSumDiff\n            val\
    \ curMaxSum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7iramx60.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7iramx60.scala:56:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m56 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp7iramx60.scala:13:18 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive\
    \ \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7iramx60.scala:17:25 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7iramx60.scala:55:1\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp7iramx60.scala:47:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m47 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659794451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len - k).toInt\n        val sum = 0\n        for(i <- 0 until\
    \ max){\n            val cur = arr(i).toInt\n            val next = arr(i+k).toInt\n\
    \            sum += cur + next\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqewlh_p4.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpqewlh_p4.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            sum += cur + next\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659794450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        val arr = arr.drop(max).take(max).toList\n\
    \        arr.foreach(x => sum += x)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5dd23rwo.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.drop(max).take(max).toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0marr is already defined as \e[33mvalue\e[0m \e[35marr\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp5dd23rwo.scala:13:18 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val res = arr.take(k).foldLeft(0l) { (sum, el) => sum + el % 10 }\n    \
    \    val sum = (arr.take(k).sum % 10).toLong\n        res + sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5c59ur2d.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n\
    \        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val\
    \ maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6\
    \ = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen\
    \ / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n\
    \        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n    \
    \    val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val\
    \ maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17\
    \ = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen\
    \ / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n\
    \        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n    \
    \    val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val\
    \ maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28\
    \ = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen\
    \ / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n\
    \        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n    \
    \    val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val\
    \ maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39\
    \ = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen\
    \ / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n\
    \        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n    \
    \    val maxLen4\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpunk80lzz.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpunk80lzz.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpunk80lzz.scala:14:18 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpunk80lzz.scala:62:5 ---------------------\e[0m\e[0m\n\e[31m62\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        val result\
    \ = arr.take(k).foldLeft(0l) { (sum, element) => sum + element }\n        val\
    \ twoDigits = arr.take(k).map(_.toString.substring(0,maxTwoDigits)).sum\n    \
    \    result + twoDigits\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpriyh3k6e.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val m = arr.size\n        val n = k\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val max = (m / n).toInt\n        val\
    \ min = (m / max).toInt\n        val max2 = max / 2\n        val min2 = min /\
    \ 2\n        val max3 = max2 / 3\n        val min3 = min2 / 3\n        val max4\
    \ = max3 / 4\n        val min4 = min3 / 4\n        val max5 = max4 / 5\n     \
    \   val min5 = min4 / 5\n        val max6 = max5 / 6\n        val min6 = min5\
    \ / 6\n        val max7 = max6 / 7\n        val min7 = min6 / 7\n        val max8\
    \ = max7 / 8\n        val min8 = min7 / 8\n        val max9 = max8 / 9\n     \
    \   val min9 = min8 / 9\n        val max10 = max9 / 10\n        val min10 = min9\
    \ / 10\n        val max11 = max10 / 11\n        val min11 = min10 / 11\n     \
    \   val max12 = max11 / 12\n        val min12 = min11 / 12\n        val max13\
    \ = max12 / 13\n        val min13 = min12 / 13\n        val max14 = max13 / 14\n\
    \        val min14 = min13 / 14\n        val max15 = max14 / 15\n        val min15\
    \ = min14 / 15\n        val max16 = max15 / 16\n        val min16 = min15 / 16\n\
    \        val max17 = max16 / 17\n        val min17 = min16 / 17\n        val max18\
    \ = max17 / 18\n        val min18 = min17 / 18\n        val max19 = max18 / 19\n\
    \        val min19 = min18 / 19\n        val max20 = max19 / 20\n        val min20\
    \ = min19 / 20\n        val max21 = max20 / 21\n        val min21 = min20 / 21\n\
    \        val max22 = max21 / 22\n        val min22 = min21 / 22\n        val max23\
    \ = max22 / 23\n        val min23 = min22 / 23\n        val max24 = max23 / 24\n\
    \        val min24 = min23 / 24\n        val max25 = max24 / 25\n        val min25\
    \ = min24 / 25\n        val max26 = max25 / 26\n        val min26\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0y9j1tq.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps0y9j1tq.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps0y9j1tq.scala:68:5 ---------------------\e[0m\e[0m\n\e[31m68\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        val maxSum = 0\n\
    \        val maxSumIndex = 0\n        val maxSumDigit = 0\n        val maxSumDigitIndex\
    \ = 0\n        val maxSumDigit2 = 0\n        val maxSumDigit2Index = 0\n     \
    \   val maxSumDigit3 = 0\n        val maxSumDigit3Index = 0\n        val maxSumDigit4\
    \ = 0\n        val maxSumDigit4Index = 0\n        val maxSumDigit5 = 0\n     \
    \   val maxSumDigit5Index = 0\n        val maxSumDigit6 = 0\n        val maxSumDigit6Index\
    \ = 0\n        val maxSumDigit7 = 0\n        val maxSumDigit7Index = 0\n     \
    \   val maxSumDigit8 = 0\n        val maxSumDigit8Index = 0\n        val maxSumDigit9\
    \ = 0\n        val maxSumDigit9Index = 0\n        val maxSumDigit10 = 0\n    \
    \    val maxSumDigit10Index = 0\n        val maxSumDigit11 = 0\n        val maxSumDigit11Index\
    \ = 0\n        val maxSumDigit12 = 0\n        val maxSumDigit12Index = 0\n   \
    \     val maxSumDigit13 = 0\n        val maxSumDigit13Index = 0\n        val maxSumDigit14\
    \ = 0\n        val maxSumDigit14Index = 0\n        val maxSumDigit15 = 0\n   \
    \     val maxSumDigit15Index = 0\n        val maxSumDigit16 = 0\n        val maxSumDigit16Index\
    \ = 0\n        val maxSumDigit17 = 0\n        val maxSumDigit17Index = 0\n   \
    \     val maxSumDigit18 = 0\n        val maxSumDigit18Index = 0\n        val maxSumDigit19\
    \ = 0\n        val maxSumDigit19Index = 0\n        val maxSumDigit20 = 0\n   \
    \     val maxSumDigit20Index = 0\n        val maxSumDigit21 = 0\n        val maxSumDigit21Index\
    \ = 0\n        val maxSumDigit22 = 0\n        val maxSumDigit22Index = 0\n   \
    \     val maxSumDigit23 = 0\n        val maxSumDigit23Index = 0\n        val maxSumDigit24\
    \ = 0\n        val maxSumDigit24Index = 0\n        val maxSumDigit25 = 0\n   \
    \     val maxSumDigit25Index = 0\n        val maxSumDigit26 = 0\n        val maxSumDigit26Index\
    \ = 0\n        val maxSumDigit27 = 0\n        val maxSumDigit27Index = 0\n   \
    \     val maxSumDigit28 = 0\n        val maxSumDigit28\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4iyrmg38.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4iyrmg38.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4iyrmg38.scala:75:5\
    \ ---------------------\e[0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ arr = arr.toList\n        val len = arr.length\n        val k = k.toInt\n  \
    \      val max = (len / 2).toInt\n        val min = (len - k).toInt\n        for(i\
    \ <- 0 until max) {\n            val tempSum = arr(i).toLong + arr(i + k).toLong\n\
    \            val tempSum2 = arr(i + k).toLong + arr(i + k + min).toLong\n    \
    \        val tempSum3 = arr(i + k + min).toLong + arr(i + k + min + k).toLong\n\
    \            val tempSum4 = arr(i + k + min + k).toLong + arr(i + k + min + k\
    \ + min).toLong\n            val tempSum5 = arr(i + k + min + k + min).toLong\
    \ + arr(i + k + min + k + min + k).toLong\n            val tempSum6 = arr(i +\
    \ k + min + k + min + k).toLong + arr(i + k + min + k + min + k + min).toLong\n\
    \            val tempSum7 = arr(i + k + min + k + min + k + min).toLong + arr(i\
    \ + k + min + k + min + k + min + k).toLong\n            val tempSum8 = arr(i\
    \ + k + min + k + min + k + min + k).toLong + arr(i + k + min + k + min + k +\
    \ min + k + min).toLong\n            val tempSum9 = arr(i + k + min + k + min\
    \ + k + min + k + min).toLong + arr(i + k + min + k + min + k + min + k + min\
    \ + k).toLong\n            val tempSum10 = arr(i + k + min + k + min + k + min\
    \ + k + min + k).toLong + arr(i + k + min + k + min + k + min + k + min + k +\
    \ min).toLong\n            val tempSum11 = arr(i + k + min + k + min + k + min\
    \ + k + min + k + min + k).toLong + arr(i + k + min + k + min + k + min + k +\
    \ min + k + min + k + min).toLong\n            val tempSum12 = arr(i + k + min\
    \ + k + min + k + min + k + min + k + min + k + min + k).toLong + arr(i + k\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd_cl99fh.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd_cl99fh.scala:42:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m42 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpd_cl99fh.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpd_cl99fh.scala:14:18 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpd_cl99fh.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mk\e[0m = k.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mk\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpd_cl99fh.scala:41:1 ---------------------\e[0m\e\
    [0m\n\e[31m41 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpd_cl99fh.scala:33:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m33 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to"
  stdout: ''
  timestamp: 1659794451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxDigit = arr.take(maxLen).map(_.toString.length).max\n\
    \        val maxSum = arr.take(maxLen).map(_.toString).map(_.toLong).sum\n   \
    \     val maxSumDigit = maxSum.toString.length\n        val maxSumDigit2 = maxSum.toString.length\
    \ * 2\n        val maxSumDigit3 = maxSum.toString.length * 3\n        val maxSumDigit4\
    \ = maxSum.toString.length * 4\n        val maxSumDigit5 = maxSum.toString.length\
    \ * 5\n        val maxSumDigit6 = maxSum.toString.length * 6\n        val maxSumDigit7\
    \ = maxSum.toString.length * 7\n        val maxSumDigit8 = maxSum.toString.length\
    \ * 8\n        val maxSumDigit9 = maxSum.toString.length * 9\n        val maxSumDigit10\
    \ = maxSum.toString.length * 10\n        val maxSumDigit11 = maxSum.toString.length\
    \ * 11\n        val maxSumDigit12 = maxSum.toString.length * 12\n        val maxSumDigit13\
    \ = maxSum.toString.length * 13\n        val maxSumDigit14 = maxSum.toString.length\
    \ * 14\n        val maxSumDigit15 = maxSum.toString.length * 15\n        val maxSumDigit16\
    \ = maxSum.toString.length * 16\n        val maxSumDigit17 = maxSum.toString.length\
    \ * 17\n        val maxSumDigit18 = maxSum.toString.length * 18\n        val maxSumDigit19\
    \ = maxSum.toString.length * 19\n        val maxSumDigit20 = maxSum.toString.length\
    \ * 20\n        val maxSumDigit21 = maxSum.toString.length * 21\n        val maxSumDigit22\
    \ = maxSum.toString.length * 22\n        val maxSumDigit23 = maxSum.toString.length\
    \ * 23\n        val maxSumDigit24 = maxSum.toString.length * 24\n        val maxSumDigit25\
    \ = maxSum.toString.length * 25\n        val maxSumDigit26 = maxSum.toString.length\
    \ * 26\n        val maxSumDigit27 = maxSum.toString.length * 27\n        val maxSumDigit28\
    \ = maxSum.toString.length * 28\n        val maxSumDigit29 = maxSum.toString.length\
    \ * 29\n        val maxSumDigit30 = maxSum.toString.length * 30\n        val maxSumDigit31\
    \ = maxSum.toString.length * 31\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7y4eutc0.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7y4eutc0.scala:50:5 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val max2 = max / 2\n        val sum =\
    \ 0\n        val sum2 = sum + arr(max2)\n        val sum3 = sum2 + arr(max2 +\
    \ 1)\n        val sum4 = sum3 + arr(max2 + 2)\n        val sum5 = sum4 + arr(max2\
    \ + 3)\n        val sum6 = sum5 + arr(max2 + 4)\n        val sum7 = sum6 + arr(max2\
    \ + 5)\n        val sum8 = sum7 + arr(max2 + 6)\n        val sum9 = sum8 + arr(max2\
    \ + 7)\n        val sum10 = sum9 + arr(max2 + 8)\n        val sum11 = sum10 +\
    \ arr(max2 + 9)\n        val sum12 = sum11 + arr(max2 + 10)\n        val sum13\
    \ = sum12 + arr(max2 + 11)\n        val sum14 = sum13 + arr(max2 + 12)\n     \
    \   val sum15 = sum14 + arr(max2 + 13)\n        val sum16 = sum15 + arr(max2 +\
    \ 14)\n        val sum17 = sum16 + arr(max2 + 15)\n        val sum18 = sum17 +\
    \ arr(max2 + 16)\n        val sum19 = sum18 + arr(max2 + 17)\n        val sum20\
    \ = sum19 + arr(max2 + 18)\n        val sum21 = sum20 + arr(max2 + 19)\n     \
    \   val sum22 = sum21 + arr(max2 + 20)\n        val sum23 = sum22 + arr(max2 +\
    \ 21)\n        val sum24 = sum23 + arr(max2 + 22)\n        sum24\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpiodfk6_w.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        val arr = arr.take(max)\n\
    \        val arr2 = arr.drop(max)\n        val arr3 = arr2.take(max)\n       \
    \ val arr4 = arr2.drop(max)\n        val arr5 = arr3.take(max)\n        val arr6\
    \ = arr3.drop(max)\n        val arr7 = arr4.take(max)\n        val arr8 = arr4.drop(max)\n\
    \        val arr9 = arr5.take(max)\n        val arr10 = arr5.drop(max)\n     \
    \   val arr11 = arr6.take(max)\n        val arr12 = arr6.drop(max)\n        val\
    \ arr13 = arr7.take(max)\n        val arr14 = arr7.drop(max)\n        val arr15\
    \ = arr8.take(max)\n        val arr16 = arr8.drop(max)\n        val arr17 = arr9.take(max)\n\
    \        val arr18 = arr9.drop(max)\n        val arr19 = arr10.take(max)\n   \
    \     val arr20 = arr10.drop(max)\n        val arr21 = arr11.take(max)\n     \
    \   val arr22 = arr11.drop(max)\n        val arr23 = arr12.take(max)\n       \
    \ val arr24 = arr12.drop(max)\n        val arr25 = arr13.take(max)\n        val\
    \ arr26 = arr13.drop(max)\n        val arr27 = arr14.take(max)\n        val arr28\
    \ = arr14.drop(max)\n        val arr29 = arr15.take(max)\n        val arr30 =\
    \ arr15.drop(max)\n        val arr31 = arr16.take(max)\n        val arr32 = arr16.drop(max)\n\
    \        val arr33 = arr17.take(max)\n        val arr34 = arr17.drop(max)\n  \
    \      val arr35 = arr18.take(max)\n        val arr36 = arr18.drop(max)\n    \
    \    val arr37 = arr19.take(max)\n        val arr38 = arr19.drop(max)\n      \
    \  val arr39 = arr20.take(max)\n        val arr40 = arr20.drop(max)\n        val\
    \ arr41 = arr21.take(max)\n        val arr42 = arr21.drop(max)\n        val arr43\
    \ = arr22.take(max)\n        val arr44 = arr22.drop(max)\n        val arr45 =\
    \ arr23.take(max)\n        val arr4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyriut_sv.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyriut_sv.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.take(max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0marr is already defined as \e[33mvalue\e[0m \e[35marr\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpyriut_sv.scala:13:18 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpyriut_sv.scala:63:5 ---------------------\e[0m\e[0m\n\e[31m63\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxDigit = arr(maxLen)\n        val sum\
    \ = 0\n        for(i <- 0 until k){\n            val curDigit = arr(i)\n     \
    \       val nextDigit = arr(i+1)\n            val sum = sum + curDigit + nextDigit\
    \ - maxDigit\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8rtqz8rg.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp8rtqz8rg.scala:18:25 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (k : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len - k).toInt\n        val sum = 0\n        for(i <- 0 until\
    \ max){\n            val curr = arr(i).toInt\n            val next = (i + 1)%len\n\
    \            val nextCurr = arr(next).toInt\n            val nextNext = (next\
    \ + 1)%len\n            val sum = sum + curr + nextCurr - nextNext\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmshuzjso.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val sum = 0\n        val maxSum = 0\n        val maxSumIndex = 0\n       \
    \ val maxSumDigit = 0\n        val maxSumDigitIndex = 0\n        val maxSumDigit2\
    \ = 0\n        val maxSumDigit2Index = 0\n        val maxSumDigit3 = 0\n     \
    \   val maxSumDigit3Index = 0\n        val maxSumDigit4 = 0\n        val maxSumDigit4Index\
    \ = 0\n        val maxSumDigit5 = 0\n        val maxSumDigit5Index = 0\n     \
    \   val maxSumDigit6 = 0\n        val maxSumDigit6Index = 0\n        val maxSumDigit7\
    \ = 0\n        val maxSumDigit7Index = 0\n        val maxSumDigit8 = 0\n     \
    \   val maxSumDigit8Index = 0\n        val maxSumDigit9 = 0\n        val maxSumDigit9Index\
    \ = 0\n        val maxSumDigit10 = 0\n        val maxSumDigit10Index = 0\n   \
    \     val maxSumDigit11 = 0\n        val maxSumDigit11Index = 0\n        val maxSumDigit12\
    \ = 0\n        val maxSumDigit12Index = 0\n        val maxSumDigit13 = 0\n   \
    \     val maxSumDigit13Index = 0\n        val maxSumDigit14 = 0\n        val maxSumDigit14Index\
    \ = 0\n        val maxSumDigit15 = 0\n        val maxSumDigit15Index = 0\n   \
    \     val maxSumDigit16 = 0\n        val maxSumDigit16Index = 0\n        val maxSumDigit17\
    \ = 0\n        val maxSumDigit17Index = 0\n        val maxSumDigit18 = 0\n   \
    \     val maxSumDigit18Index = 0\n        val maxSumDigit19 = 0\n        val maxSumDigit19Index\
    \ = 0\n        val maxSumDigit20 = 0\n        val maxSumDigit20Index = 0\n   \
    \     val maxSumDigit21 = 0\n        val maxSumDigit21Index = 0\n        val maxSumDigit22\
    \ = 0\n        val maxSumDigit22Index = 0\n        val maxSumDigit23 = 0\n   \
    \     val maxSumDigit23Index = 0\n        val maxSumDigit24 = 0\n        val maxSumDigit24Index\
    \ = 0\n        val maxSumDigit25 = 0\n        val maxSumDigit25Index = 0\n   \
    \     val maxSumDigit26 = 0\n        val maxSumDigit26Index = 0\n        val maxSumDigit27\
    \ = 0\n        val maxSumDigit27Index = 0\n        val maxSumDigit28 = 0\n   \
    \     val maxSumDigit28Index = 0\n        val maxSumDigit29 = 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp37ahuzj9.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp37ahuzj9.scala:75:5 ---------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0\n        var i = 0\n        while (i < arr.length) {\n            if\
    \ (sum + arr(i) <= k) {\n                sum += arr(i)\n                i += 1\n\
    \            } else {\n                sum += arr(i) - k\n                result.add(sum)\n\
    \                sum = 0\n                i += 1\n            }\n        }\n \
    \       if (sum > k) {\n            result.add(sum)\n        }\n        result.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiqpjfiev.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiqpjfiev.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                sum += arr(i)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpiqpjfiev.scala:21:20 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                sum += arr(i) - k\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxDigit = arr.take(k).map(_.toString.length).max\n        val maxDigit2\
    \ = arr.take(k).map(_.toString.length).max\n        val maxDigit3 = arr.take(k).map(_.toString.length).max\n\
    \        val maxDigit4 = arr.take(k).map(_.toString.length).max\n        val maxDigit5\
    \ = arr.take(k).map(_.toString.length).max\n        val maxDigit6 = arr.take(k).map(_.toString.length).max\n\
    \        val maxDigit7 = arr.take(k).map(_.toString.length).max\n        val maxDigit8\
    \ = arr.take(k).map(_.toString.length).max\n        val maxDigit9 = arr.take(k).map(_.toString.length).max\n\
    \        val maxDigit10 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxDigit11 = arr.take(k).map(_.toString.length).max\n        val maxDigit12\
    \ = arr.take(k).map(_.toString.length).max\n        val maxDigit13 = arr.take(k).map(_.toString.length).max\n\
    \        val maxDigit14 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxDigit15 = arr.take(k).map(_.toString.length).max\n        val maxDigit16\
    \ = arr.take(k).map(_.toString.length).max\n        val maxDigit17 = arr.take(k).map(_.toString.length).max\n\
    \        val maxDigit18 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxDigit19 = arr.take(k).map(_.toString.length).max\n        val maxDigit20\
    \ = arr.take(k).map(_.toString.length).max\n        val maxDigit21 = arr.take(k).map(_.toString.length).max\n\
    \        val maxDigit22 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxDigit23 = arr.take(k).map(_.toString.length).max\n        val maxDigit24\
    \ = arr.take(k).map(_.toString.length).max\n        val maxDigit25 = arr.take(k).map(_.toString.length).max\n\
    \        val maxDigit26 = arr.take(k).map(_.toString.length).max\n        val\
    \ maxDigit27 = arr.take(k).map(_.toString.length).max\n        val maxDigit28\
    \ = arr.take(k).map(_.toString.length).max\n        val maxDigit29 = arr.\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyynnuzmt.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpyynnuzmt.scala:13:18 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpyynnuzmt.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxDigits = maxLen / 2\n        val maxSum\
    \ = arr.take(maxDigits).sum\n        val maxSum2 = maxSum * maxSum\n        val\
    \ maxSum3 = maxSum2 * maxSum\n        val maxSum4 = maxSum3 * maxSum\n       \
    \ val maxSum5 = maxSum4 * maxSum\n        val maxSum6 = maxSum5 * maxSum\n   \
    \     val maxSum7 = maxSum6 * maxSum\n        val maxSum8 = maxSum7 * maxSum\n\
    \        val maxSum9 = maxSum8 * maxSum\n        val maxSum10 = maxSum9 * maxSum\n\
    \        val maxSum11 = maxSum10 * maxSum\n        val maxSum12 = maxSum11 * maxSum\n\
    \        val maxSum13 = maxSum12 * maxSum\n        val maxSum14 = maxSum13 * maxSum\n\
    \        val maxSum15 = maxSum14 * maxSum\n        val maxSum16 = maxSum15 * maxSum\n\
    \        val maxSum17 = maxSum16 * maxSum\n        val maxSum18 = maxSum17 * maxSum\n\
    \        val maxSum19 = maxSum18 * maxSum\n        val maxSum20 = maxSum19 * maxSum\n\
    \        val maxSum21 = maxSum20 * maxSum\n        val maxSum22 = maxSum21 * maxSum\n\
    \        val maxSum23 = maxSum22 * maxSum\n        val maxSum24 = maxSum23 * maxSum\n\
    \        val maxSum25 = maxSum24 * maxSum\n        val maxSum26 = maxSum25 * maxSum\n\
    \        val maxSum27 = maxSum26 * maxSum\n        val maxSum28 = maxSum27 * maxSum\n\
    \        val maxSum29 = maxSum28 * maxSum\n        val maxSum30 = maxSum29 * maxSum\n\
    \        val maxSum31 = maxSum30 * maxSum\n        val maxSum32 = maxSum31 * maxSum\n\
    \        val maxSum33 = maxSum32 * maxSum\n        val maxSum34 = maxSum33 * maxSum\n\
    \        val maxSum35 = maxSum34 * maxSum\n        val maxSum36 = maxSum35 * maxSum\n\
    \        val maxSum37 = maxSum36 * maxSum\n        val maxSum38 = maxSum37 * maxSum\n\
    \        val maxSum39\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplcjauhqo.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplcjauhqo.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplcjauhqo.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.HashMap[Long, Long]()\n       \
    \ for (i <- 0 until arr.size) {\n            val value = arr(i)\n            if\
    \ (result.contains(value)) {\n                result.put(key, result(value) +\
    \ value)\n            } else {\n                result.put(value, value)\n   \
    \         }\n        }\n        val maxValue = result.values.max\n        val\
    \ maxKeys = result.keySet\n        val maxKeysCount = maxKeys.size\n        val\
    \ maxKeysSum = maxKeys.sum\n        val maxKeysSumDigit = maxKeysSum / 10\n  \
    \      val maxKeysSumRemainder = maxKeysSum - maxKeysSumDigit * 10\n        val\
    \ maxKeysSumRemainderDigit = maxKeysSumRemainder / 10\n        val maxKeysSumRemainderRemainder\
    \ = maxKeysSumRemainder % 10\n        val maxKeysSumRemainderRemainderDigit =\
    \ maxKeysSumRemainderRemainder / 10\n        val maxKeysSumRemainderRemainderRemainder\
    \ = maxKeysSumRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder / 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        val maxKeysSumRemainderRemainderRemainderDigit\
    \ = maxKeysSumRemainderRemainderRemainder % 10\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf2c43i37.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmaxKeysSumRemainderRemainderRemainderDigit\e\
    [0m = maxKeysSumRemainderRemainderRemainder % \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxKeysSumRemainderRemainderRemainderDigit is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxKeysSumRemainderRemainderRemainderDigit\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf2c43i37.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxKeysSumRemainderRemainderRemainderDigit\e\
    [0m = maxKeysSumRemainderRemainderRemainder % \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxKeysSumRemainderRemainderRemainderDigit is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxKeysSumRemainderRemainderRemainderDigit\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf2c43i37.scala:35:12 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxKeysSumRemainderRemainderRemainderDigit\e\
    [0m = maxKeysSumRemainderRemainderRemainder % \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxKeysSumRemainderRemainderRemainderDigit is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxKeysSumRemainderRemainderRemainderDigit\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf2c43i37.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxKeysSumRemainderRemainderRemainderD"
  stdout: ''
  timestamp: 1659794452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n     \
    \   var i = 0\n        while (i < len) {\n            val curr = arr(i)\n    \
    \        if (i % 2 == 0) {\n                sum += curr\n            }\n     \
    \       i += 1\n        }\n        val maxSum = sum / 2\n        var j = 0\n \
    \       while (j < k) {\n            val curr = arr(j)\n            if (curr >\
    \ maxSum) {\n                result += curr\n            }\n            j += 1\n\
    \        }\n        val sum = result.toList\n        sum.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprr8qhkhp.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = result.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum\
    \ is already defined as \e[33mvariable\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprr8qhkhp.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprr8qhkhp.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmprr8qhkhp.scala:35:12 ------------------------\e[0m\e[0m\n\e[31m35 |\e\
    [0m        sum.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        value sum is not a member of Int\n4 errors found\n"
  stdout: ''
  timestamp: 1659794452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ len = arr.size\n        val maxDigit = arr.take(k).max\n        val maxDigitCount\
    \ = arr.count(_ == maxDigit)\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.toLong\n\
    \        val maxDigitCount = maxDigitCount - k\n        val maxDigitCount = maxDigitCount.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsp2fpznw.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsp2fpznw.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxDigitCount\e[0m = maxDigitCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxDigitCount is already defined as \e[33mvalue\e[0m \e[35mmaxDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsp2fpznw.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitCount\e[0m = maxDigitCount -\
    \ k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxDigitCount is already defined as \e[33mvalue\e[0m \e[35mmaxDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsp2fpznw.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitCount\e[0m = maxDigitCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxDigitCount is already defined as \e[33mvalue\e[0m \e[35mmaxDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsp2fpznw.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitCount\e[0m = maxDigitCount -\
    \ k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxDigitCount is already defined as \e[33mvalue\e[0m \e[35mmaxDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        val maxTwoDigitsSum\
    \ = arr.take(k).map(_.toString).sum\n        val maxTwoDigitsSum2 = arr.take(k).map(_.toString.toLong).sum\n\
    \        val maxTwoDigitsSum3 = arr.take(k).map(_.toString.toLong).sum\n     \
    \   val maxTwoDigitsSum4 = arr.take(k).map(_.toString.toLong).sum\n        val\
    \ maxTwoDigitsSum5 = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum6\
    \ = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum7 = arr.take(k).map(_.toString.toLong).sum\n\
    \        val maxTwoDigitsSum8 = arr.take(k).map(_.toString.toLong).sum\n     \
    \   val maxTwoDigitsSum9 = arr.take(k).map(_.toString.toLong).sum\n        val\
    \ maxTwoDigitsSum10 = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum11\
    \ = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum12 = arr.take(k).map(_.toString.toLong).sum\n\
    \        val maxTwoDigitsSum13 = arr.take(k).map(_.toString.toLong).sum\n    \
    \    val maxTwoDigitsSum14 = arr.take(k).map(_.toString.toLong).sum\n        val\
    \ maxTwoDigitsSum15 = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum16\
    \ = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum17 = arr.take(k).map(_.toString.toLong).sum\n\
    \        val maxTwoDigitsSum18 = arr.take(k).map(_.toString.toLong).sum\n    \
    \    val maxTwoDigitsSum19 = arr.take(k).map(_.toString.toLong).sum\n        val\
    \ maxTwoDigitsSum20 = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum21\
    \ = arr.take(k).map(_.toString.toLong).sum\n        val maxTwoDigitsSum22 = arr.take(k).map(_.toString.toLong).sum\n\
    \        val maxTwoDigitsSum23 = arr.take(k\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2d38r41q.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2d38r41q.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2d38r41q.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        while (i < k) {\n           \
    \ sum += arr(i)\n            i += 1\n        }\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n\
    \        val maxTwoDigitsSum = sum % 10\n        val maxTwoDigitsSumDigit = sum\
    \ / 10\n        val maxTwoDigitsSumDigits = maxTwoDigitsSumDigit % 10\n      \
    \  val maxTwoDigitsSumDigitsDigit = maxTwoDigitsSumDigit / 10\n        val maxTwoDigitsSumDigitsDigits\
    \ = maxTwoDigitsSumDigitsDigit % 10\n        val maxTwoDigitsSumDigitsDigitsDigit\
    \ = maxTwoDigitsSumDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigitDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigitDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigitDigitDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigitDigitDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigitDigitDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigitDigitDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigitsDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigitDigitDigitDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigitsDigitsDigitsDigit / 10\n        val maxTwoDigitsSumDigitsDigitsDigitsDigitDigitDigitDigit\
    \ = maxTwoDigitsSumDigitsDigitsDigitsDigitsDigitsDigit / 10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1ob6b6t9.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxTwoDigitsSumDigitsDigitsDigitsDigit\e\
    [0m = maxTwoDigitsSumDigitsDigitsDigit / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTwoDigitsSumDigitsDigitsDigitsDigit is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxTwoDigitsSumDigitsDigitsDigitsDigit\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1ob6b6t9.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTwoDigitsSumDigitsDigitsDigitsDigitDigit\e\
    [0m = maxTwoDigitsSumDigitsDigitsDigitsDigit / \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTwoDigitsSumDigitsDigitsDigitsDigitDigit is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxTwoDigitsSumDigitsDigitsDigitsDigitDigit\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1ob6b6t9.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTwoDigitsSumDigitsDigitsDigitsDigitDigitDigit\e\
    [0m = maxTwoDigitsSumDigitsDigitsDigitsDigitsDigit / \e[31m10\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTwoDigitsSumDigitsDigitsDigitsDigitDigitDigit is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxTwoDigitsSumDigitsDigitsDigitsDigitDigitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1ob6b6t9.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mmaxTwoDigitsSumDigit"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val sum = 0\n        val maxSum = arr.take(k).reduceLeft(_ + _)\n        val\
    \ maxSum2 = arr.take(k).reduceLeft(_ + _)\n        val maxSum3 = arr.take(k).reduceLeft(_\
    \ + _)\n        val maxSum4 = arr.take(k).reduceLeft(_ + _)\n        val maxSum5\
    \ = arr.take(k).reduceLeft(_ + _)\n        val maxSum6 = arr.take(k).reduceLeft(_\
    \ + _)\n        val maxSum7 = arr.take(k).reduceLeft(_ + _)\n        val maxSum8\
    \ = arr.take(k).reduceLeft(_ + _)\n        val maxSum9 = arr.take(k).reduceLeft(_\
    \ + _)\n        val maxSum10 = arr.take(k).reduceLeft(_ + _)\n        val maxSum11\
    \ = arr.take(k).reduceLeft(_ + _)\n        val maxSum12 = arr.take(k).reduceLeft(_\
    \ + _)\n        val maxSum13 = arr.take(k).reduceLeft(_ + _)\n        val maxSum14\
    \ = arr.take(k).reduceLeft(_ + _)\n        val maxSum15 = arr.take(k).reduceLeft(_\
    \ + _)\n        val maxSum16 = arr.take(k).reduceLeft(_ + _)\n        val maxSum17\
    \ = arr.take(k).reduceLeft(_ + _)\n        val maxSum18 = arr.take(k).reduceLeft(_\
    \ + _)\n        val maxSum19 = arr.take(k).reduceLeft(_ + _)\n        val maxSum20\
    \ = arr.take(k).reduceLeft(_ + _)\n        val maxSum21 = arr.take(k).reduceLeft(_\
    \ + _)\n        val maxSum22 = arr.take(k).reduceLeft(_ + _)\n        val maxSum23\
    \ = arr.take(k).reduceLeft(_ + _)\n        val maxSum24 = arr.take(k).reduceLeft(_\
    \ + _)\n        val maxSum25 = arr.take(k).reduceLeft(_ + _)\n        val maxSum26\
    \ = arr.take(k).reduceLeft(_ + _)\n        val maxSum27 = arr.take(k).reduceLe\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx5jjmdib.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpx5jjmdib.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val max = (len / 2).toInt\n\
    \        val max2 = max / 2\n        val max3 = max / 3\n        val max4 = max\
    \ / 4\n        val max5 = max / 5\n        val max6 = max / 6\n        val max7\
    \ = max / 7\n        val max8 = max / 8\n        val max9 = max / 9\n        val\
    \ max10 = max / 10\n        val max11 = max / 11\n        val max12 = max / 12\n\
    \        val max13 = max / 13\n        val max14 = max / 14\n        val max15\
    \ = max / 15\n        val max16 = max / 16\n        val max17 = max / 17\n   \
    \     val max18 = max / 18\n        val max19 = max / 19\n        val max20 =\
    \ max / 20\n        val max21 = max / 21\n        val max22 = max / 22\n     \
    \   val max23 = max / 23\n        val max24 = max / 24\n        val max25 = max\
    \ / 25\n        val max26 = max / 26\n        val max27 = max / 27\n        val\
    \ max28 = max / 28\n        val max29 = max / 29\n        val max30 = max / 30\n\
    \        val max31 = max / 31\n        val max32 = max / 32\n        val max33\
    \ = max / 33\n        val max34 = max / 34\n        val max35 = max / 35\n   \
    \     val max36 = max / 36\n        val max37 = max / 37\n        val max38 =\
    \ max / 38\n        val max39 = max / 39\n        val max40 = max / 40\n     \
    \   val max41 = max / 41\n        val max42 = max / 42\n        val max43 = max\
    \ / 43\n        val max44 = max / 44\n        val max45 = max / 45\n        val\
    \ max46 = max / 46\n        val max47 = max / 47\n        val max48 = max / 48\n\
    \        val max49 = max / 49\n        val max50 = max / 50\n        val max51\
    \ = max / 51\n        val max52 = max / 52\n        val max53 = max / 53\n   \
    \     val max54 = max / 54\n        val max55 = max / 55\n        \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_d7wt_0x.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_d7wt_0x.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_d7wt_0x.scala:72:5\
    \ ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        var count = 0\n        for(i <- 0 until\
    \ arr.length) {\n            sum += arr(i)\n            count += 1\n         \
    \   if(count > k) {\n                break\n            }\n        }\n       \
    \ return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfb6aols6.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfb6aols6.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxDigit = arr(maxLen)\n        val maxDigits\
    \ = arr.take(maxLen)\n        val maxDigitSum = maxDigits.sum\n        val maxDigitSums\
    \ = maxDigits.tail.sum\n        val maxDigitSumsOfMaxDigits = maxDigitSums.tail.tail.sum\n\
    \        val maxDigitSumsOfMaxDigitSums = maxDigitSumsOfMaxDigits + maxDigitSumsOfMaxDigits\n\
    \        val maxDigitSumsOfMaxDigitSumsOfMaxDigits = maxDigitSumsOfMaxDigitSums.tail.tail.tail.sum\n\
    \        val maxDigitSumsOfMaxDigitSumsOfMaxDigitSums = maxDigitSumsOfMaxDigitSumsOfMaxDigits\
    \ + maxDigitSumsOfMaxDigitSumsOfMaxDigits\n        val maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\
    \ = maxDigitSumsOfMaxDigitSumsOfMaxDigitSums.tail.tail.tail.tail.sum\n       \
    \ val maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSums = maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\
    \ + maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\n        val maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\
    \ = maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits + maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\n\
    \        val maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\
    \ = maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\
    \ + maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\n\
    \        val maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\
    \ = maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOf\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz95xlwfn.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpz95xlwfn.scala:26:80 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\e\
    [0m = maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits + maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mmaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz95xlwfn.scala:27:94\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\e\
    [0m = maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\
    \ + maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  maxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpz95xlwfn.scala:28:108 -----------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigitSumsOfMaxDigits\e\
    [0m = maxDigitSumsOfMaxDigi"
  stdout: ''
  timestamp: 1659794454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        var i = 0\n        while (i < k) {\n\
    \            sum += arr(i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp41ta0lz2.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659794455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ maxLength = arr.take(k).length\n        val maxLength2 = maxLength * maxLength\n\
    \        for(i <- 0 until arr.size) {\n            val curr = arr(i)\n       \
    \     if(curr % maxLength == 0 && curr % maxLength2 != 0) {\n                result\
    \ += curr\n            }\n        }\n        result.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpovp7h2vm.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpovp7h2vm.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e\
    [0m = arr.take(k).length\n\e[31m\e[31m   |\e[0m                              \
    \   ^\e[0m\n\e[31m   |\e[0m                                 Found:    (k : Long)\n\
    \e[31m   |\e[0m                                 Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ arr = arr.toList\n        val len = arr.length\n        val k = k.toInt\n  \
    \      val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx7oj0l8k.scala:61:31 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \e[36mmaxLen45\e[0m = maxLen /\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx7oj0l8k.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx7oj0l8k.scala:14:18 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx7oj0l8k.scala:16:16 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mk\e[0m = k.toInt\n\e[31m\e[31m   |\e[0m \
    \               ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35mk\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpx7oj0l8k.scala:62:5 ---------------------\e[0m\e[0m\n\e[31m62\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659794456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        val maxTwoDigitsSum\
    \ = arr.take(k).map(_.toString).sum\n        val maxTwoDigitsSum2 = arr.take(k).map(_.toString.length).sum\n\
    \        val maxTwoDigitsSum3 = arr.take(k).map(_.toString).sum\n        val maxTwoDigitsSum4\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitsSum5 = arr.take(k).map(_.toString).sum\n\
    \        val maxTwoDigitsSum6 = arr.take(k).map(_.toString.length).sum\n     \
    \   val maxTwoDigitsSum7 = arr.take(k).map(_.toString).sum\n        val maxTwoDigitsSum8\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitsSum9 = arr.take(k).map(_.toString).sum\n\
    \        val maxTwoDigitsSum10 = arr.take(k).map(_.toString.length).sum\n    \
    \    val maxTwoDigitsSum11 = arr.take(k).map(_.toString).sum\n        val maxTwoDigitsSum12\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitsSum13 = arr.take(k).map(_.toString).sum\n\
    \        val maxTwoDigitsSum14 = arr.take(k).map(_.toString.length).sum\n    \
    \    val maxTwoDigitsSum15 = arr.take(k).map(_.toString).sum\n        val maxTwoDigitsSum16\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitsSum17 = arr.take(k).map(_.toString).sum\n\
    \        val maxTwoDigitsSum18 = arr.take(k).map(_.toString.length).sum\n    \
    \    val maxTwoDigitsSum19 = arr.take(k).map(_.toString).sum\n        val maxTwoDigitsSum20\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitsSum21 = arr.take(k).map(_.toString).sum\n\
    \        val maxTwoDigitsSum22 = arr.take(k).map(_.toString.length).sum\n    \
    \    val maxTwoDigitsSum23 = arr.take(k).map(_.toString).sum\n        val maxTwoDigitsSum24\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxTwoDigitsSum25 = arr.take(k).\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptru9gcuo.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmptru9gcuo.scala:13:18 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmptru9gcuo.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        val maxSum = 0\n\
    \        val maxSumIndex = 0\n        val maxSumDigit = 0\n        val maxSumDigitIndex\
    \ = 0\n        val maxSumDigitDigit = 0\n        val maxSumDigitDigitIndex = 0\n\
    \        val maxSumDigitDigitDigit = 0\n        val maxSumDigitDigitDigitIndex\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxSumDigitDigitDigitDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mmaxSumDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxSumDigitDigitDigitDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mmaxSumDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxSumDigitDigitDigitDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mmaxSumDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxSumDigitDigitDigitDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mmaxSumDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ len = arr.length\n        val maxLen = len - k\n        val maxDigit = arr.max\n\
    \        val maxDigitIndex = arr.indexWhere(_ == maxDigit)\n        val maxDigitIndex2\
    \ = maxDigitIndex + 1\n        val maxDigitIndex3 = maxDigitIndex + 2\n      \
    \  val maxDigitIndex4 = maxDigitIndex + 3\n        val maxDigitIndex5 = maxDigitIndex\
    \ + 4\n        val maxDigitIndex6 = maxDigitIndex + 5\n        val maxDigitIndex7\
    \ = maxDigitIndex + 6\n        val maxDigitIndex8 = maxDigitIndex + 7\n      \
    \  val maxDigitIndex9 = maxDigitIndex + 8\n        val maxDigitIndex10 = maxDigitIndex\
    \ + 9\n        val maxDigitIndex11 = maxDigitIndex + 10\n        val maxDigitIndex12\
    \ = maxDigitIndex + 11\n        val maxDigitIndex13 = maxDigitIndex + 12\n   \
    \     val maxDigitIndex14 = maxDigitIndex + 13\n        val maxDigitIndex15 =\
    \ maxDigitIndex + 14\n        val maxDigitIndex16 = maxDigitIndex + 15\n     \
    \   val maxDigitIndex17 = maxDigitIndex + 16\n        val maxDigitIndex18 = maxDigitIndex\
    \ + 17\n        val maxDigitIndex19 = maxDigitIndex + 18\n        val maxDigitIndex20\
    \ = maxDigitIndex + 19\n        val maxDigitIndex21 = maxDigitIndex + 20\n   \
    \     val maxDigitIndex22 = maxDigitIndex + 21\n        val maxDigitIndex23 =\
    \ maxDigitIndex + 22\n        val maxDigitIndex24 = maxDigitIndex + 23\n     \
    \   val maxDigitIndex25 = maxDigitIndex + 24\n        val maxDigitIndex26 = maxDigitIndex\
    \ + 25\n        val maxDigitIndex27 = maxDigitIndex + 26\n        val maxDigitIndex28\
    \ = maxDigitIndex + 27\n        val maxDigitIndex29 = maxDigitIndex + 28\n   \
    \     val maxDigitIndex30 = maxDigitIndex + 29\n        val maxDigitIndex31 =\
    \ maxDigitIndex + 30\n        val maxDigitIndex32 = maxDigitIndex + 31\n     \
    \   val maxDigitIndex33 = maxDigitIndex + 32\n        val maxDigitIndex34 = maxDigitIndex\
    \ + 33\n        val maxDigitIndex35 = maxDigitIndex + 34\n        val maxDigitIndex36\
    \ = maxDigitIndex + 35\n        val maxDigitIndex37 = maxDigitIndex + 36\n   \
    \     val maxDigitIndex38 = \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa1otsmu7.scala:54:29 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitIndex38\e[0m = \n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa1otsmu7.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa1otsmu7.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val max = (len / 2).toInt\n        val sum = 0\n        val maxSum = 0\n \
    \       val maxSumIndex = 0\n        for(i <- 0 until max){\n            val cur\
    \ = arr(i)\n            val curSum = cur.toString.toInt\n            if(curSum\
    \ > maxSum){\n                maxSum = curSum\n                maxSumIndex = i\n\
    \            }\n        }\n        val maxSum = arr(maxSumIndex).toString.toInt\n\
    \        val maxSumIndex = maxSumIndex.toString.toInt\n        for(i <- 0 until\
    \ k){\n            val cur = arr(i)\n            val curSum = cur.toString.toInt\n\
    \            if(curSum > maxSum){\n                sum += cur\n            }\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcyazi0ux.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxSum\e[0m = arr(maxSumIndex).toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxSum is already defined as \e[33mvalue\e[0m \e[35mmaxSum\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcyazi0ux.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxSumIndex\e[0m = maxSumIndex.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxSumIndex is already defined as \e[33mvalue\e[0m \e[35mmaxSumIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpcyazi0ux.scala:13:18 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive\
    \ \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpcyazi0ux.scala:23:23 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                maxSum = curSum\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxSum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpcyazi0ux.scala:24:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                maxSumIndex\
    \ = i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val maxSumIndex\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpcyazi0ux.scala:29:25 ------------"
  stdout: ''
  timestamp: 1659794458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val result = new mutable.HashMap[Long, Long]()\n        val maxTwoDigits\
    \ = arr.take(k).map(_.toString.length).max\n        val maxTwoDigitsLength = maxTwoDigits.toString.length\n\
    \        for(i <- 0 until len) {\n            val cur = arr(i)\n            val\
    \ curStr = cur.toString\n            val curLen = curStr.length\n            val\
    \ curTwoDigits = curStr.take(maxTwoDigitsLength)\n            val curTwoDigitsLength\
    \ = curTwoDigits.length\n            val curTwoDigitsSum = curTwoDigits.sum\n\
    \            val curTwoDigitsSumStr = curTwoDigitsSum.toString\n            val\
    \ curTwoDigitsSumLen = curTwoDigitsSumStr.length\n            val curTwoDigitsSumSum\
    \ = curTwoDigitsSumStr.sum\n            val curTwoDigitsSumSumStr = curTwoDigitsSumSum.toString\n\
    \            val curTwoDigitsSumSumLen = curTwoDigitsSumSumStr.length\n      \
    \      val curTwoDigitsSumSumSum = curTwoDigitsSumSumStr.sum\n            val\
    \ curTwoDigitsSumSumSumStr = curTwoDigitsSumSumSum.toString\n            val curTwoDigitsSumSumSumLen\
    \ = curTwoDigitsSumSumSumStr.length\n            val curTwoDigitsSumSumSumSum\
    \ = curTwoDigitsSumSumSumStr.sum\n            val curTwoDigitsSumSumSumSumStr\
    \ = curTwoDigitsSumSumSumSum.toString\n            val curTwoDigitsSumSumSumSumLen\
    \ = curTwoDigitsSumSumSumSumStr.length\n            val curTwoDigitsSumSumSumSumSum\
    \ = curTwoDigitsSumSumSumSumStr.sum\n            val curTwoDigitsSumSumSumSumSumStr\
    \ = curTwoDigitsSumSumSumSumSumStr.toString\n            val curTwoDigitsSumSumSumSumSumLen\
    \ = curTwoDigitsSumSumSumSumSumStr.length\n            val curTwoDigitsSumSumSumSumSumSum\
    \ = curTwoDigitsSumSumSumSumSumStr.sum\n            val curTwoDigitsSumSumSumSumSumSumStr\
    \ = curTwoDigitsSumSumSumSumSumSumStr.toString\n            val curTwoDigitsSumSumSumSumSumLen\
    \ = curTwoDigitsSumSumSumSumSumSumStr.length\n            val curTwoDigitsSumSumSumSumSumSumSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa_p3zjo0.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa_p3zjo0.scala:53:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpa_p3zjo0.scala:13:18 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive\
    \ \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpa_p3zjo0.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa_p3zjo0.scala:52:1\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpa_p3zjo0.scala:44:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m44 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659794457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        val maxTwoDigits =\
    \ arr.take(k).map(_.toString.length).max\n        val maxTwoDigitsIndex = arr.take(k).map(_.toString.length).indexOfMax\n\
    \        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toLong).sum\n\
    \        val maxTwoDigitsSumIndex = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex2 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex3 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex4 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex5 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex6 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex7 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex8 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex9 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex10 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex11 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex12 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex13 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex14 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex15 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex16 = arr.take(k).map(_.toString).map(_.toLong).indexOfMax\n\
    \        val maxTwoDigitsSumIndex17 = arr.take(k).map(_.toString).map(_.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1z29mh3u.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1z29mh3u.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1z29mh3u.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1z29mh3u.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ len = arr.length\n        val max = (len / 2).toInt\n        val max2 = max\
    \ / 2\n        val max3 = max / 3\n        val max4 = max / 4\n        val max5\
    \ = max / 5\n        val max6 = max / 6\n        val max7 = max / 7\n        val\
    \ max8 = max / 8\n        val max9 = max / 9\n        val max10 = max / 10\n \
    \       val max11 = max / 11\n        val max12 = max / 12\n        val max13\
    \ = max / 13\n        val max14 = max / 14\n        val max15 = max / 15\n   \
    \     val max16 = max / 16\n        val max17 = max / 17\n        val max18 =\
    \ max / 18\n        val max19 = max / 19\n        val max20 = max / 20\n     \
    \   val max21 = max / 21\n        val max22 = max / 22\n        val max23 = max\
    \ / 23\n        val max24 = max / 24\n        val max25 = max / 25\n        val\
    \ max26 = max / 26\n        val max27 = max / 27\n        val max28 = max / 28\n\
    \        val max29 = max / 29\n        val max30 = max / 30\n        val max31\
    \ = max / 31\n        val max32 = max / 32\n        val max33 = max / 33\n   \
    \     val max34 = max / 34\n        val max35 = max / 35\n        val max36 =\
    \ max / 36\n        val max37 = max / 37\n        val max38 = max / 38\n     \
    \   val max39 = max / 39\n        val max40 = max / 40\n        val max41 = max\
    \ / 41\n        val max42 = max / 42\n        val max43 = max / 43\n        val\
    \ max44 = max / 44\n        val max45 = max / 45\n        val max46 = max / 46\n\
    \        val max47 = max / 47\n        val max48 = max / 48\n        val max49\
    \ = max / 49\n        val max50 = max / 50\n        val max51 = max / 51\n   \
    \     val max52 = max / 52\n        val max53 = max / 53\n        val max54 =\
    \ max / 54\n        val max55 = max / 55\n        val max56 = max / 56\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphh6wxn0o.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphh6wxn0o.scala:71:5\
    \ ---------------------\e[0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val max = (len / 2).toInt\n        val sum = 0\n        val sum2 = sum\n \
    \       for (i <- 0 until max) {\n            val curr = arr(i)\n            val\
    \ next = (i + 1) % len\n            val next2 = arr(next)\n            if (curr\
    \ % 10 == next2 % 10) {\n                sum += curr\n                sum2 +=\
    \ next2\n            }\n        }\n        sum + sum2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj8h97ol4.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpj8h97ol4.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                sum += curr\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj8h97ol4.scala:24:21\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                sum2 += next2\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     value += is not a member of Int - did you mean sum2.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val m = arr.size\n        val n = k\n        val max = (m\
    \ / n).toInt\n        val sum = 0\n        var i = 0\n        while (i < max)\
    \ {\n            val curr = arr(i)\n            val next = arr(i + 1)\n      \
    \      val diff = next - curr\n            if (diff > 9) {\n                sum\
    \ += curr\n                i += 2\n            } else {\n                sum +=\
    \ curr\n                i += 1\n            }\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppx1hv9vf.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                sum += curr\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppx1hv9vf.scala:26:20\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                sum += curr\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659794458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        var i = 0\n    \
    \    while (i < max) {\n            sum += arr(i)\n            i += 1\n      \
    \  }\n        val sum2 = sum * sum\n        val sum3 = sum2 * sum\n        val\
    \ sum4 = sum3 * sum\n        val sum5 = sum4 * sum\n        val sum6 = sum5 *\
    \ sum\n        val sum7 = sum6 * sum\n        val sum8 = sum7 * sum\n        val\
    \ sum9 = sum8 * sum\n        val sum10 = sum9 * sum\n        val sum11 = sum10\
    \ * sum\n        val sum12 = sum11 * sum\n        val sum13 = sum12 * sum\n  \
    \      val sum14 = sum13 * sum\n        val sum15 = sum14 * sum\n        val sum16\
    \ = sum15 * sum\n        val sum17 = sum16 * sum\n        val sum18 = sum17 *\
    \ sum\n        val sum19 = sum18 * sum\n        val sum20 = sum19 * sum\n    \
    \    val sum21 = sum20 * sum\n        val sum22 = sum21 * sum\n        val sum23\
    \ = sum22 * sum\n        val sum24 = sum23 * sum\n        sum24\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0_r9gx71.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0_r9gx71.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659794458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ arr = arr.toList\n        var sum = 0\n        var i = 0\n        while (i <\
    \ k) {\n            sum += arr(i)\n            i += 1\n        }\n        val\
    \ max = (sum / 10).toInt\n        var j = 0\n        while (j < arr.length) {\n\
    \            if (arr(j) < max) {\n                result += (arr(j) * 10 + arr(j\
    \ + 1))\n                j += 2\n            } else {\n                result\
    \ += arr(j)\n                j += 1\n            }\n        }\n        result.toList.reduce(_\
    \ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmw97dpcq.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmw97dpcq.scala:14:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n     \
    \   var i = 0\n        while (i < len) {\n            val curr = arr(i)\n    \
    \        if (curr < 10) {\n                sum += curr\n                i += 1\n\
    \            } else if (curr < 100) {\n                sum += curr / 10\n    \
    \            i += 1\n            } else {\n                sum += curr / 100\n\
    \                i += 1\n            }\n            if (sum > k) {\n         \
    \       sum -= arr(i)\n                i += 1\n            } else {\n        \
    \        result += arr(i)\n                i += 1\n            }\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz7c5s9mt.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpz7c5s9mt.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val sum = 0\n        val maxSum = arr.take(k).reduceLeft(_ + _)\n        val\
    \ maxSum2 = maxSum * maxSum\n        val maxSum3 = maxSum2 * maxSum\n        val\
    \ maxSum4 = maxSum3 * maxSum\n        val maxSum5 = maxSum4 * maxSum\n       \
    \ val maxSum6 = maxSum5 * maxSum\n        val maxSum7 = maxSum6 * maxSum\n   \
    \     val maxSum8 = maxSum7 * maxSum\n        val maxSum9 = maxSum8 * maxSum\n\
    \        val maxSum10 = maxSum9 * maxSum\n        val maxSum11 = maxSum10 * maxSum\n\
    \        val maxSum12 = maxSum11 * maxSum\n        val maxSum13 = maxSum12 * maxSum\n\
    \        val maxSum14 = maxSum13 * maxSum\n        val maxSum15 = maxSum14 * maxSum\n\
    \        val maxSum16 = maxSum15 * maxSum\n        val maxSum17 = maxSum16 * maxSum\n\
    \        val maxSum18 = maxSum17 * maxSum\n        val maxSum19 = maxSum18 * maxSum\n\
    \        val maxSum20 = maxSum19 * maxSum\n        val maxSum21 = maxSum20 * maxSum\n\
    \        val maxSum22 = maxSum21 * maxSum\n        val maxSum23 = maxSum22 * maxSum\n\
    \        val maxSum24 = maxSum23 * maxSum\n        val maxSum25 = maxSum24 * maxSum\n\
    \        val maxSum26 = maxSum25 * maxSum\n        val maxSum27 = maxSum26 * maxSum\n\
    \        val maxSum28 = maxSum27 * maxSum\n        val maxSum29 = maxSum28 * maxSum\n\
    \        val maxSum30 = maxSum29 * maxSum\n        val maxSum31 = maxSum30 * maxSum\n\
    \        val maxSum32 = maxSum31 * maxSum\n        val maxSum33 = maxSum32 * maxSum\n\
    \        val maxSum34 = maxSum33 * maxSum\n        val maxSum35 = maxSum34 * maxSum\n\
    \        val maxSum36 = maxSum35 * maxSum\n        val maxSum37 = maxSum36 * maxSum\n\
    \        val maxSum38 = maxSum37 * maxSum\n        val maxSum39 = maxSum38 * maxSum\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpavj1lho9.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpavj1lho9.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        val sum\
    \ = 0\n        for (i <- 0 until len) {\n            if (arr(i).toString.length\
    \ < maxTwoDigits) {\n                sum += arr(i)\n            }\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwjkpslva.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpwjkpslva.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += arr(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659794458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        val sum\
    \ = 0\n        for (i <- 0 until len) {\n            val digits = arr(i).toString.length\n\
    \            val twoDigits = digits - maxTwoDigits\n            val sum = sum\
    \ + arr(i).asInstanceOf[Long] * twoDigits\n        }\n        sum\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpha6kbrw_.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = arr.take(k).map(_.toString.length).max\n        val sum = 0\n\
    \        for (i <- 0 until k) {\n            val start = arr.take(i).map(_.toString).map(_.toLong).sum\n\
    \            val end = arr.take(i + 1).map(_.toString).map(_.toLong).sum\n   \
    \         sum += (end - start) / maxLen\n        }\n        sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpp17ap9jd.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpp17ap9jd.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until k) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (k : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp17ap9jd.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            sum += (end -\
    \ start) / maxLen\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value += is not a member of Int - did you mean sum.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val max = (len / 2).toInt\n        val sum = 0\n        val maxSum = 0\n \
    \       val maxSumIndex = 0\n        for(i <- 0 until max) {\n            val\
    \ curSum = arr(i) + arr(i + 1)\n            if(curSum > maxSum) {\n          \
    \      maxSum = curSum\n                maxSumIndex = i\n            }\n     \
    \   }\n        val maxSumInList = arr(maxSumIndex)\n        for(i <- 0 until k)\
    \ {\n            val curSum = arr(i) + arr(i + 1)\n            if(curSum > maxSumInList)\
    \ {\n                maxSumInList = curSum\n            }\n        }\n       \
    \ return maxSumInList\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpoeo8899h.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpoeo8899h.scala:22:23 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                maxSum = curSum\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxSum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpoeo8899h.scala:23:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                maxSumIndex\
    \ = i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val maxSumIndex\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpoeo8899h.scala:27:25 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpoeo8899h.scala:30:29\
    \ -----------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                maxSumInList\
    \ = curSum\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Reassignment to val maxSumInList\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659794459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxSum = arr.take(k).sum\n        val\
    \ maxSum2 = arr.take(maxLen).sum\n        val maxSum3 = arr.take(maxLen - 1).sum\n\
    \        val maxSum4 = arr.take(maxLen - 2).sum\n        val maxSum5 = arr.take(maxLen\
    \ - 3).sum\n        val maxSum6 = arr.take(maxLen - 4).sum\n        val maxSum7\
    \ = arr.take(maxLen - 5).sum\n        val maxSum8 = arr.take(maxLen - 6).sum\n\
    \        val maxSum9 = arr.take(maxLen - 7).sum\n        val maxSum10 = arr.take(maxLen\
    \ - 8).sum\n        val maxSum11 = arr.take(maxLen - 9).sum\n        val maxSum12\
    \ = arr.take(maxLen - 10).sum\n        val maxSum13 = arr.take(maxLen - 11).sum\n\
    \        val maxSum14 = arr.take(maxLen - 12).sum\n        val maxSum15 = arr.take(maxLen\
    \ - 13).sum\n        val maxSum16 = arr.take(maxLen - 14).sum\n        val maxSum17\
    \ = arr.take(maxLen - 15).sum\n        val maxSum18 = arr.take(maxLen - 16).sum\n\
    \        val maxSum19 = arr.take(maxLen - 17).sum\n        val maxSum20 = arr.take(maxLen\
    \ - 18).sum\n        val maxSum21 = arr.take(maxLen - 19).sum\n        val maxSum22\
    \ = arr.take(maxLen - 20).sum\n        val maxSum23 = arr.take(maxLen - 21).sum\n\
    \        val maxSum24 = arr.take(maxLen - 22).sum\n        val maxSum25 = arr.take(maxLen\
    \ - 23).sum\n        val maxSum26 = arr.take(maxLen - 24).sum\n        val maxSum27\
    \ = arr.take(maxLen - 25).sum\n        val maxSum28 = arr.take(maxLen - 26).sum\n\
    \        val maxSum29 = arr.take(maxLen - 27).sum\n        val maxSum30 = arr.take(maxLen\
    \ - 28).sum\n        val maxSum31 = arr.take(maxLen - 29).sum\n        val maxSum32\
    \ = arr.take(maxLen - 30).sum\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsjqhidmw.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpsjqhidmw.scala:49:5 ---------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ len = arr.length\n        val maxLen = len - k\n        val maxDigit = math.pow(10,\
    \ maxLen)\n        var sum = 0\n        for (i <- 0 until k) {\n            sum\
    \ += arr(i)\n        }\n        val maxSum = math.pow(10, maxLen)\n        for\
    \ (i <- 0 until k) {\n            val digit = math.floor(sum / maxSum)\n     \
    \       sum += digit * maxDigit\n            if (sum > maxSum) {\n           \
    \     sum -= digit * maxDigit\n            }\n            result.add(digit)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptkr_o9m0.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptkr_o9m0.scala:18:26\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (k : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmptkr_o9m0.scala:19:16 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptkr_o9m0.scala:22:26\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (k : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmptkr_o9m0.scala:24:16 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            sum += digit * maxDigit\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptkr_o9m0.scala:26:20\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                sum -= digit\
    \ * maxDigit\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value -= is not a member of Int - did you mean Int.!=?\n6 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        val max2 = max *\
    \ 2\n        val max3 = max * 3\n        val max4 = max * 4\n        val max5\
    \ = max * 5\n        val max6 = max * 6\n        val max7 = max * 7\n        val\
    \ max8 = max * 8\n        val max9 = max * 9\n        val max10 = max * 10\n \
    \       val max11 = max * 11\n        val max12 = max * 12\n        val max13\
    \ = max * 13\n        val max14 = max * 14\n        val max15 = max * 15\n   \
    \     val max16 = max * 16\n        val max17 = max * 17\n        val max18 =\
    \ max * 18\n        val max19 = max * 19\n        val max20 = max * 20\n     \
    \   val max21 = max * 21\n        val max22 = max * 22\n        val max23 = max\
    \ * 23\n        val max24 = max * 24\n        val max25 = max * 25\n        val\
    \ max26 = max * 26\n        val max27 = max * 27\n        val max28 = max * 28\n\
    \        val max29 = max * 29\n        val max30 = max * 30\n        val max31\
    \ = max * 31\n        val max32 = max * 32\n        val max33 = max * 33\n   \
    \     val max34 = max * 34\n        val max35 = max * 35\n        val max36 =\
    \ max * 36\n        val max37 = max * 37\n        val max38 = max * 38\n     \
    \   val max39 = max * 39\n        val max40 = max * 40\n        val max41 = max\
    \ * 41\n        val max42 = max * 42\n        val max43 = max * 43\n        val\
    \ max44 = max * 44\n        val max45 = max * 45\n        val max46 = max * 46\n\
    \        val max47 = max * 47\n        val max48 = max * 48\n        val max49\
    \ = max * 49\n        val max50 = max * 50\n        val max51 = max * 51\n   \
    \     val max52 = max * 52\n        val max53 = max * 53\n        val max54 =\
    \ max * 54\n        val max55 = max * 55\n        val max56 = max * 56\n     \
    \   \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm78qgaqd.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpm78qgaqd.scala:73:5 ---------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxLen = arr.take(k).size\n        val maxLen2 = maxLen / 2\n        val\
    \ maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5\
    \ = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen\
    \ / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n  \
    \      val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n      \
    \  val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val\
    \ maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16\
    \ = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen\
    \ / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n\
    \        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n    \
    \    val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val\
    \ maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27\
    \ = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen\
    \ / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n\
    \        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n    \
    \    val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val\
    \ maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38\
    \ = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen\
    \ / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n\
    \        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n    \
    \    val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val\
    \ maxLen\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9hf9h701.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9hf9h701.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9hf9h701.scala:62:5\
    \ ---------------------\e[0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val result = new mutable.HashMap[Long, Long]()\n        var sum = 0\n  \
    \      var i = 0\n        while (i < len) {\n            val curr = arr(i)\n \
    \           val key = curr / 10\n            val value = curr - (key * 10)\n \
    \           if (result.contains(key)) {\n                sum += result.get(key)\n\
    \            } else {\n                sum += value\n                result.put(key,\
    \ sum)\n            }\n            i += 1\n        }\n        sum\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_kcwadcz.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_kcwadcz.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val max = (len - k).toInt\n        val res = arr.take(max).sum\n        val\
    \ max2 = arr.take(max).filter(_ % 10 == 0).sum\n        val max3 = arr.take(max).filter(_\
    \ % 10 == 1).sum\n        val max4 = arr.take(max).filter(_ % 10 == 2).sum\n \
    \       val max5 = arr.take(max).filter(_ % 10 == 3).sum\n        val max6 = arr.take(max).filter(_\
    \ % 10 == 4).sum\n        val max7 = arr.take(max).filter(_ % 10 == 5).sum\n \
    \       val max8 = arr.take(max).filter(_ % 10 == 6).sum\n        val max9 = arr.take(max).filter(_\
    \ % 10 == 7).sum\n        val max10 = arr.take(max).filter(_ % 10 == 8).sum\n\
    \        val max11 = arr.take(max).filter(_ % 10 == 9).sum\n        val max12\
    \ = arr.take(max).filter(_ % 10 == 10).sum\n        val max13 = arr.take(max).filter(_\
    \ % 10 == 11).sum\n        val max14 = arr.take(max).filter(_ % 10 == 12).sum\n\
    \        val max15 = arr.take(max).filter(_ % 10 == 13).sum\n        val max16\
    \ = arr.take(max).filter(_ % 10 == 14).sum\n        val max17 = arr.take(max).filter(_\
    \ % 10 == 15).sum\n        val max18 = arr.take(max).filter(_ % 10 == 16).sum\n\
    \        val max19 = arr.take(max).filter(_ % 10 == 17).sum\n        val max20\
    \ = arr.take(max).filter(_ % 10 == 18).sum\n        val max21 = arr.take(max).filter(_\
    \ % 10 == 19).sum\n        val max22 = arr.take(max).filter(_ % 10 == 20).sum\n\
    \        val max23 = arr.take(max).filter(_ % 10 == 21).sum\n        val max24\
    \ = arr.take(max).filter(_ % 10 == 22).sum\n        val max25 = arr.take(max).filter(_\
    \ % 10 == 23).sum\n        val max26 = arr.take(max).filter(_ % 10 == 24).sum\n\
    \        val max27 = arr.take(max).filter(_ % 10 == 25).sum\n        val max28\
    \ = arr.take(max).\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpki2x4f68.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpki2x4f68.scala:13:18 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpki2x4f68.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n     \
    \   var index = 0\n        while (index < len) {\n            val value = arr(index)\n\
    \            sum += value\n            index += 1\n            if (sum >= 10)\
    \ {\n                sum += value - 10\n                result.add(sum)\n    \
    \            sum = 0\n            }\n        }\n        if (sum > 0) {\n     \
    \       sum += arr(len - 1) - 10\n            result.add(sum)\n        }\n   \
    \     if (result.size < k) {\n            val diff = k - result.size\n       \
    \     val lastIndex = len - diff\n            result.addAll(arr.take(lastIndex))\n\
    \        }\n        val result = result.toList\n        result.sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplbee3a6f.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult\
    \ is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplbee3a6f.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplbee3a6f.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxLen = arr.take(k).size\n        val maxLen2 = maxLen / 2\n        val\
    \ maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5\
    \ = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen\
    \ / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n  \
    \      val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n      \
    \  val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val\
    \ maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16\
    \ = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen\
    \ / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n\
    \        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n    \
    \    val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val\
    \ maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27\
    \ = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen\
    \ / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n\
    \        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n    \
    \    val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val\
    \ maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38\
    \ = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen\
    \ / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n\
    \        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n    \
    \    val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val\
    \ maxLen\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9hf9h701.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9hf9h701.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9hf9h701.scala:62:5\
    \ ---------------------\e[0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ maxLength = arr.take(k).map(_.toString.length).max\n        val maxLength2 =\
    \ arr.take(k).map(_.toString.length).max\n        for(i <- 0 until k){\n     \
    \       val sum = arr(i).toString.substring(0,maxLength) + arr(i).toString.substring(maxLength2)\n\
    \            result.add(sum.toLong)\n        }\n        result.sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1t4ywe06.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1t4ywe06.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e\
    [0m = arr.take(k).map(_.toString.length).max\n\e[31m\e[31m   |\e[0m          \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \   Found:    (k : Long)\n\e[31m   |\e[0m                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1t4ywe06.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxLength2\e\
    [0m = arr.take(k).map(_.toString.length).max\n\e[31m\e[31m   |\e[0m          \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \     Found:    (k : Long)\n\e[31m   |\e[0m                                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1t4ywe06.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until k){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (k : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        while (i < arr.length) {\n  \
    \          sum = sum + arr(i)\n            i += 1\n            if (sum > k) {\n\
    \                sum -= arr(i)\n                i += 1\n            }\n      \
    \      if (sum > k) {\n                sum -= arr(i)\n                i += 1\n\
    \            }\n            if (sum > k) {\n                sum -= arr(i)\n  \
    \              i += 1\n            }\n            if (sum > k) {\n           \
    \     sum -= arr(i)\n                i += 1\n            }\n            if (sum\
    \ > k) {\n                sum -= arr(i)\n                i += 1\n            }\n\
    \            if (sum > k) {\n                sum -= arr(i)\n                i\
    \ += 1\n            }\n            if (sum > k) {\n                sum -= arr(i)\n\
    \                i += 1\n            }\n            if (sum > k) {\n         \
    \       sum -= arr(i)\n                i += 1\n            }\n            if (sum\
    \ > k) {\n                sum -= arr(i)\n                i += 1\n            }\n\
    \            if (sum > k) {\n                sum -= arr(i)\n                i\
    \ += 1\n            }\n            if (sum > k) {\n                sum -= arr(i)\n\
    \                i += 1\n            }\n            if (sum > k) {\n         \
    \       sum -= arr(i)\n                i += 1\n            }\n            if (sum\
    \ > k) {\n                sum -= arr(i)\n                i += 1\n            }\n\
    \            if (sum > k) {\n                sum -= arr(i)\n                i\
    \ += 1\n            }\n            if (sum > k) {\n                sum -= arr(i)\n\
    \                i += 1\n            }\n            if (sum > k) {\n         \
    \       sum -= arr(i)\n                i += 1\n            }\n            if (sum\
    \ > k) {\n                sum -= arr(i)\n                i += 1\n            }\n\
    \            if (sum > k) {\n                sum -= arr(i)\n                i\
    \ += 1\n            }\n            if (sum > k) {\n                sum -= arr(i)\n\
    \                i += 1\n            }\n            if (sum > k) {\n         \
    \       sum -= arr(i)\n                i += 1\n            }\n            if (sum\
    \ > k) {\n                sum -= arr(i)\n                i += 1\n            }\n\
    \            if (sum > k) {\n                sum -= arr(i)\n                i\
    \ += 1\n            }\n            if (sum > k) {\n                sum -= arr(i)\n\
    \                i += 1\n            }\n            if (sum > k) {\n         \
    \       sum -= arr(i)\n                i += 1\n            }\n            if (sum\
    \ > k) {\n                sum -= arr(i)\n                i += 1\n            }\n\
    \            if (sum > k) {\n                sum -= arr(i)\n                i\
    \ += 1\n            }\n            if (sum > k) {\n                sum -= arr(i)\n\
    \                i += 1\n            }\n            if (sum > k) {\n         \
    \       sum -= arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9ebq0c6p.scala:140:0 ---------------------------\e\
    [0m\e[0m\n\e[31m140 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9ebq0c6p.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ebq0c6p.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9ebq0c6p.scala:17:8 ---------------------\e[0m\e[0m\n\e[31m 17\
    \ |\e[0m        \e[33mwhile\e[0m (i < arr.length) {\n\e[31m\e[31m    |\e[0m  \
    \      ^\e[0m\n\e[31m    |\e[0m        Found:    Unit\n\e[31m    |\e[0m      \
    \  Required: Long\n\e[31m 18 |\e[0m            sum = sum + arr(i)\n\e[31m 19 |\e\
    [0m            i += \e[31m1\e[0m\n\e[31m 20 |\e[0m            \e[33mif\e[0m (sum\
    \ > k) {\n\e[31m 21 |\e[0m                sum -= arr(i)\n\e[31m 22 |\e[0m    \
    \            i += \e[31m1\e[0m\n\e[31m 23 |\e[0m            }\n\e[31m 24 |\e[0m\
    \            \e[33mif\e[0m (sum > k) {\n\e[31m 25 |\e[0m                sum -=\
    \ arr(i)\n\e[31m 26 |\e[0m                i += \e[31m1\e[0m\n\e[31m 27 |\e[0m\
    \            }\n\e[31m 28 |\e[0m            \e[33mif\e[0m (sum > k) {\n\e[31m\
    \ 29 |\e[0m                sum -= arr(i)\n\e[31m 30 |\e[0m                i +=\
    \ \e[31m1\e[0m\n\e[31m 31 |\e[0m            }\n\e[31m 32 |\e[0m            \e\
    [33mif\e[0m (sum > k) {\n\e[31m 33 |\e[0m                sum -= arr(i)\n\e[31m\
    \ 34 |\e[0m                i += \e[31m1\e[0m\n\e[31m 35 |\e[0m            }\n\e\
    [31m 36 |\e[0m            \e[33mif\e[0m (sum > k) {\n\e[31m 37 |\e[0m        \
    \     "
  stdout: ''
  timestamp: 1659794462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxLen = arr.take(k).size\n        val maxSum = arr.take(k).sum\n    \
    \    val maxSum2 = arr.take(k).sum\n        val maxSum3 = arr.take(k).sum\n  \
    \      val maxSum4 = arr.take(k).sum\n        val maxSum5 = arr.take(k).sum\n\
    \        val maxSum6 = arr.take(k).sum\n        val maxSum7 = arr.take(k).sum\n\
    \        val maxSum8 = arr.take(k).sum\n        val maxSum9 = arr.take(k).sum\n\
    \        val maxSum10 = arr.take(k).sum\n        val maxSum11 = arr.take(k).sum\n\
    \        val maxSum12 = arr.take(k).sum\n        val maxSum13 = arr.take(k).sum\n\
    \        val maxSum14 = arr.take(k).sum\n        val maxSum15 = arr.take(k).sum\n\
    \        val maxSum16 = arr.take(k).sum\n        val maxSum17 = arr.take(k).sum\n\
    \        val maxSum18 = arr.take(k).sum\n        val maxSum19 = arr.take(k).sum\n\
    \        val maxSum20 = arr.take(k).sum\n        val maxSum21 = arr.take(k).sum\n\
    \        val maxSum22 = arr.take(k).sum\n        val maxSum23 = arr.take(k).sum\n\
    \        val maxSum24 = arr.take(k).sum\n        val maxSum25 = arr.take(k).sum\n\
    \        val maxSum26 = arr.take(k).sum\n        val maxSum27 = arr.take(k).sum\n\
    \        val maxSum28 = arr.take(k).sum\n        val maxSum29 = arr.take(k).sum\n\
    \        val maxSum30 = arr.take(k).sum\n        val maxSum31 = arr.take(k).sum\n\
    \        val maxSum32 = arr.take(k).sum\n        val maxSum33 = arr.take(k).sum\n\
    \        val maxSum34 = arr.take(k).sum\n        val maxSum35 = arr.take(k).sum\n\
    \        val maxSum36 = arr.take(k).sum\n        val maxSum37 = arr.take(k).sum\n\
    \        val maxSum38 = arr.take(k).sum\n        val maxSum39 = arr.take(k).sum\n\
    \        val maxSum40 = arr.take(k).sum\n        val maxSum41 = arr.take(k).sum\n\
    \        val maxSum42 = arr.take\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpoq1m1ygp.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpoq1m1ygp.scala:58:5 ---------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxSum = arr.take(maxLen).sum\n      \
    \  val minSum = arr.drop(maxLen).sum\n        val maxSum2 = arr.take(maxLen).sum\n\
    \        val minSum2 = arr.drop(maxLen).sum\n        val maxSum3 = arr.take(maxLen).sum\n\
    \        val minSum3 = arr.drop(maxLen).sum\n        val maxSum4 = arr.take(maxLen).sum\n\
    \        val minSum4 = arr.drop(maxLen).sum\n        val maxSum5 = arr.take(maxLen).sum\n\
    \        val minSum5 = arr.drop(maxLen).sum\n        val maxSum6 = arr.take(maxLen).sum\n\
    \        val minSum6 = arr.drop(maxLen).sum\n        val maxSum7 = arr.take(maxLen).sum\n\
    \        val minSum7 = arr.drop(maxLen).sum\n        val maxSum8 = arr.take(maxLen).sum\n\
    \        val minSum8 = arr.drop(maxLen).sum\n        val maxSum9 = arr.take(maxLen).sum\n\
    \        val minSum9 = arr.drop(maxLen).sum\n        val maxSum10 = arr.take(maxLen).sum\n\
    \        val minSum10 = arr.drop(maxLen).sum\n        val maxSum11 = arr.take(maxLen).sum\n\
    \        val minSum11 = arr.drop(maxLen).sum\n        val maxSum12 = arr.take(maxLen).sum\n\
    \        val minSum12 = arr.drop(maxLen).sum\n        val maxSum13 = arr.take(maxLen).sum\n\
    \        val minSum13 = arr.drop(maxLen).sum\n        val maxSum14 = arr.take(maxLen).sum\n\
    \        val minSum14 = arr.drop(maxLen).sum\n        val maxSum15 = arr.take(maxLen).sum\n\
    \        val minSum15 = arr.drop(maxLen).sum\n        val maxSum16 = arr.take(maxLen).sum\n\
    \        val minSum16 = arr.drop(maxLen).sum\n        val maxSum17 = arr.take(maxLen).sum\n\
    \        val minSum17 = arr.drop(maxLen).sum\n        val maxSum18 = arr.take(maxLen).sum\n\
    \        val minSum18 = arr.drop(maxLen).sum\n        val maxSum19 = arr.take(maxLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcd7q2elt.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcd7q2elt.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcd7q2elt.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxLen = arr.take(k).size\n        val maxSum = arr.take(k).sum\n    \
    \    val maxSum2 = arr.take(k).map(x => x * x).sum\n        val maxSum3 = arr.take(k).map(x\
    \ => x * x * x).sum\n        val maxSum4 = arr.take(k).map(x => x * x * x * x).sum\n\
    \        val maxSum5 = arr.take(k).map(x => x * x * x * x * x).sum\n        val\
    \ maxSum6 = arr.take(k).map(x => x * x * x * x * x * x).sum\n        val maxSum7\
    \ = arr.take(k).map(x => x * x * x * x * x * x * x).sum\n        val maxSum8 =\
    \ arr.take(k).map(x => x * x * x * x * x * x * x * x).sum\n        val maxSum9\
    \ = arr.take(k).map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val\
    \ maxSum10 = arr.take(k).map(x => x * x * x * x * x * x * x * x * x * x * x *\
    \ x).sum\n        val maxSum11 = arr.take(k).map(x => x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x).sum\n        val maxSum12 = arr.take(k).map(x\
    \ => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n    \
    \    val maxSum13 = arr.take(k).map(x => x * x * x * x * x * x * x * x * x * x\
    \ * x * x * x * x * x * x * x * x).sum\n        val maxSum14 = arr.take(k).map(x\
    \ => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x\
    \ * x * x).sum\n        val maxSum15 = arr.take(k).map(x => x * x * x * x * x\
    \ * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n\
    \        val maxSum16 = arr.take(k).map(x => x * x * x * x * x * x * x * x * x\
    \ * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n     \
    \   val maxSum17 = arr.take(k).map(x => x * x * x * x * x * x * x * x * x * x\
    \ * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n     \
    \   val maxSum18 = arr.take(k).map(x => x * x * x * x * x * x * x * x * x * x\
    \ * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n\
    \        val maxSum19\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_gufcic5.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_gufcic5.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_gufcic5.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        val maxSum = 0\n\
    \        val maxSumIndex = 0\n        val maxSumDigit = 0\n        val maxSumDigitIndex\
    \ = 0\n        val maxSumDigitDigit = 0\n        val maxSumDigitDigitIndex = 0\n\
    \        val maxSumDigitDigitDigit = 0\n        val maxSumDigitDigitDigitIndex\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n        val maxSumDigitDigitDigitDigit = 0\n        val maxSumDigitDigitDigitDigit\
    \ = 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxSumDigitDigitDigitDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mmaxSumDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxSumDigitDigitDigitDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mmaxSumDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxSumDigitDigitDigitDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mmaxSumDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxSumDigitDigitDigitDigit\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSumDigitDigitDigitDigit is already defined as \e[33mvalue\e\
    [0m \e[35mmaxSumDigitDigitDigitDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_z94wiuj.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val max = (len / 2).toInt\n        val sum = 0\n        val arr1 = arr.take(max)\n\
    \        val arr2 = arr.drop(max)\n        val arr3 = arr1.take(k)\n        val\
    \ arr4 = arr2.drop(k)\n        val arr5 = arr3.take(k)\n        val arr6 = arr4.drop(k)\n\
    \        val arr7 = arr5.take(k)\n        val arr8 = arr6.drop(k)\n        val\
    \ arr9 = arr7.take(k)\n        val arr10 = arr8.drop(k)\n        val arr11 = arr9.take(k)\n\
    \        val arr12 = arr10.drop(k)\n        val arr13 = arr11.take(k)\n      \
    \  val arr14 = arr12.drop(k)\n        val arr15 = arr13.take(k)\n        val arr16\
    \ = arr14.drop(k)\n        val arr17 = arr15.take(k)\n        val arr18 = arr16.drop(k)\n\
    \        val arr19 = arr17.take(k)\n        val arr20 = arr18.drop(k)\n      \
    \  val arr21 = arr19.take(k)\n        val arr22 = arr20.drop(k)\n        val arr23\
    \ = arr21.take(k)\n        val arr24 = arr22.drop(k)\n        val arr25 = arr23.take(k)\n\
    \        val arr26 = arr24.drop(k)\n        val arr27 = arr25.take(k)\n      \
    \  val arr28 = arr26.drop(k)\n        val arr29 = arr27.take(k)\n        val arr30\
    \ = arr28.drop(k)\n        val arr31 = arr29.take(k)\n        val arr32 = arr30.drop(k)\n\
    \        val arr33 = arr31.take(k)\n        val arr34 = arr32.drop(k)\n      \
    \  val arr35 = arr33.take(k)\n        val arr36 = arr34.drop(k)\n        val arr37\
    \ = arr35.take(k)\n        val arr38 = arr36.drop(k)\n        val arr39 = arr37.take(k)\n\
    \        val arr40 = arr38.drop(k)\n        val arr41 = arr39.take(k)\n      \
    \  val arr42 = arr40.drop(k)\n        val arr43 = arr41.take(k)\n        val arr44\
    \ = arr42.drop(k)\n        val arr45 = arr43.take(k)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjmhmow9d.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpjmhmow9d.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0\n        var i = 0\n        while (i < k) {\n\
    \            sum += arr(i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp41ta0lz2.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659794455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0\n        for(i <- 0 until arr.length) {\n            sum += arr(i)\n\
    \            if(sum > k) {\n                sum += arr(i-k)\n            }\n \
    \           if(sum > k) {\n                result.add(sum)\n                sum\
    \ = 0\n            }\n        }\n        if(sum > k) {\n            result.add(sum)\n\
    \        }\n        result.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpskn0h8qg.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpskn0h8qg.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum += arr(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpskn0h8qg.scala:18:20 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m                sum += arr(i-k)\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpskn0h8qg.scala:18:27\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                sum += arr(i-k)\n\
    \e[31m\e[31m   |\e[0m                           ^^^\e[0m\n\e[31m   |\e[0m    \
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        val maxSum = 0\n\
    \        for(i <- 0 until max){\n            val curr = arr(i).asInstanceOf[Long]\n\
    \            val next = (i + 1)%len\n            val nextCurr = arr(next).asInstanceOf[Long]\n\
    \            val nextNext = (next + 1)%len\n            val sum = sum + curr\n\
    \            val maxSum = maxSum + curr + nextCurr + nextNext\n        }\n   \
    \     val maxSum = maxSum.toLong\n        if(maxSum < k){\n            return\
    \ sum\n        }\n        val maxSum2 = maxSum - k\n        val maxSum3 = maxSum2\
    \ - k\n        val maxSum4 = maxSum3 - k\n        val maxSum5 = maxSum4 - k\n\
    \        val maxSum6 = maxSum5 - k\n        val maxSum7 = maxSum6 - k\n      \
    \  val maxSum8 = maxSum7 - k\n        val maxSum9 = maxSum8 - k\n        val maxSum10\
    \ = maxSum9 - k\n        val maxSum11 = maxSum10 - k\n        val maxSum12 = maxSum11\
    \ - k\n        val maxSum13 = maxSum12 - k\n        val maxSum14 = maxSum13 -\
    \ k\n        val maxSum15 = maxSum14 - k\n        val maxSum16 = maxSum15 - k\n\
    \        val maxSum17 = maxSum16 - k\n        val maxSum18 = maxSum17 - k\n  \
    \      val maxSum19 = maxSum18 - k\n        val maxSum20 = maxSum19 - k\n    \
    \    val maxSum21 = maxSum20 - k\n        val maxSum22 = maxSum21 - k\n      \
    \  val maxSum23 = maxSum22 - k\n        val maxSum24 = maxSum23 - k\n        val\
    \ maxSum25 = maxSum24 - k\n        val maxSum26 = maxSum25 - k\n        val maxSum27\
    \ = maxSum26 - k\n        val maxSum28 = maxSum27 - k\n        val maxSum29 =\
    \ maxSum28 - k\n        val maxSum30 = maxSum29 - k\n        val maxSum31 = maxSum30\
    \ - k\n        val maxSum32 = maxSum31 - k\n        val maxSum33 = maxSum32 -\
    \ k\n        val max\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdpllppw9.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdpllppw9.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxSum\e[0m = maxSum.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxSum is already defined as \e[33mvalue\e[0m \e[35mmaxSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpdpllppw9.scala:13:18 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive\
    \ \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdpllppw9.scala:63:5 ---------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        val maxSum = 0\n\
    \        val maxSumIndex = 0\n        val maxSumIndex2 = 0\n        var i = 0\n\
    \        while (i < len) {\n            val cur = arr(i)\n            val cur2\
    \ = arr(i + 1)\n            val cur3 = arr(i + 2)\n            val cur4 = arr(i\
    \ + 3)\n            val cur5 = arr(i + 4)\n            val cur6 = arr(i + 5)\n\
    \            val cur7 = arr(i + 6)\n            val cur8 = arr(i + 7)\n      \
    \      val cur9 = arr(i + 8)\n            val cur10 = arr(i + 9)\n           \
    \ val cur11 = arr(i + 10)\n            val cur12 = arr(i + 11)\n            val\
    \ cur13 = arr(i + 12)\n            val cur14 = arr(i + 13)\n            val cur15\
    \ = arr(i + 14)\n            val cur16 = arr(i + 15)\n            val cur17 =\
    \ arr(i + 16)\n            val cur18 = arr(i + 17)\n            val cur19 = arr(i\
    \ + 18)\n            val cur20 = arr(i + 19)\n            val cur21 = arr(i +\
    \ 20)\n            val cur22 = arr(i + 21)\n            val cur23 = arr(i + 22)\n\
    \            val cur24 = arr(i + 23)\n            val cur25 = arr(i + 24)\n  \
    \          val cur26 = arr(i + 25)\n            val cur27 = arr(i + 26)\n    \
    \        val cur28 = arr(i + 27)\n            val cur29 = arr(i + 28)\n      \
    \      val cur30 = arr(i + 29)\n            val cur31 = arr(i + 30)\n        \
    \    val cur32 = arr(i + 31)\n            val cur33 = arr(i + 32)\n          \
    \  val cur34 = arr(i + 33)\n            val cur35 = arr(i + 34)\n            val\
    \ cur36 = arr(i + 35)\n            val cur37 = arr(i + 36)\n            val cur38\
    \ = arr(i + 37)\n            val cur39 = arr(i + 38)\n            val cur40 =\
    \ arr(i + 39)\n            val cur41 = arr(i + 40)\n            val cur42 = arr(i\
    \ + 41)\n            val cur43 = arr(i + 42)\n            val cur44 = arr(i +\
    \ 43)\n            val cur45 = arr(i + 44)\n            val cur\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi_w934xs.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi_w934xs.scala:78:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m78 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpi_w934xs.scala:13:18 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive\
    \ \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpi_w934xs.scala:77:1 ---------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpi_w934xs.scala:69:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m69 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659794463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val max = (len / 2).toInt\n        val sum = 0\n        val arr = arr.drop(max).take(max).toList\n\
    \        for(i <- 0 until max){\n            sum += arr(i)\n        }\n      \
    \  return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkqurveln.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.drop(max).take(max).toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0marr is already defined as \e[33mvalue\e[0m \e[35marr\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpkqurveln.scala:13:18 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpkqurveln.scala:19:16 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value += is not a member of Int - did you mean sum.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0\n        var index = 0\n        while (index < k) {\n            sum\
    \ += arr(index)\n            index += 1\n        }\n        val maxTwoDigits =\
    \ sum / 10\n        val maxTwoDigitsIndex = arr.lastIndexWhere(_ < maxTwoDigits)\n\
    \        if (maxTwoDigitsIndex < k) {\n            val maxThreeDigits = maxTwoDigits\
    \ / 10\n            val maxThreeDigitsIndex = arr.lastIndexWhere(_ < maxThreeDigits)\n\
    \            if (maxThreeDigitsIndex < k) {\n                val maxFourDigits\
    \ = maxThreeDigits / 10\n                val maxFourDigitsIndex = arr.lastIndexWhere(_\
    \ < maxFourDigits)\n                if (maxFourDigitsIndex < k) {\n          \
    \          val maxFiveDigits = maxFourDigits / 10\n                    val maxFiveDigitsIndex\
    \ = arr.lastIndexWhere(_ < maxFiveDigits)\n                    if (maxFiveDigitsIndex\
    \ < k) {\n                        val maxSixDigits = maxFiveDigits / 10\n    \
    \                    val maxSixDigitsIndex = arr.lastIndexWhere(_ < maxSixDigits)\n\
    \                        if (maxSixDigitsIndex < k) {\n                      \
    \      val maxSevenDigits = maxSixDigits / 10\n                            val\
    \ maxSevenDigitsIndex = arr.lastIndexWhere(_ < maxSevenDigits)\n             \
    \               if (maxSevenDigitsIndex < k) {\n                             \
    \   val maxEightDigits = maxSevenDigits / 10\n                               \
    \ val maxEightDigitsIndex = arr.lastIndexWhere(_ < maxEightDigits)\n         \
    \                       if (maxEightDigitsIndex < k) {\n                     \
    \               val maxNineDigits = maxEightDigits / 10\n                    \
    \                val maxNineDigitsIndex = arr.lastIndexWhere(_ < maxNineDigits)\n\
    \                                    if (maxNineDigitsIndex < k) {\n         \
    \                               val maxTenDigits = maxNineDigits / 10\n      \
    \                                  val maxTenDigitsIndex = arr.lastIndexWhere(_\
    \ < maxTenDigits)\n                                        if (maxTenDigitsIndex\
    \ < k) {\n                                            val maxElevenDigits = maxTenDigits\
    \ / 10\n                                            val maxElevenDigitsIndex =\
    \ arr.lastIndexWhere(_ < maxElevenDigits)\n                                  \
    \          if (maxElevenDigitsIndex < k) {\n                                 \
    \               val maxTwelveDigits = maxElevenDigits / 10\n                 \
    \                               val maxTwelveDigitsIndex = arr.lastIndexWhere(_\
    \ < maxTwelveDigits)\n                                                if (maxTwelve\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptu14sb3h.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptu14sb3h.scala:63:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmptu14sb3h.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmptu14sb3h.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            sum += arr(index)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptu14sb3h.scala:52:52\
    \ ------------------------\e[0m\e[0m\n\e[31m52 |\e[0m                        \
    \                        \e[33mif\e[0m (maxTwelve\n\e[31m\e[31m   |\e[0m     \
    \                                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                    Not found: maxTwelve\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmptu14sb3h.scala:54:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m54 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659794463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        var i = 0\n    \
    \    while (i < max) {\n            val curr = arr(i)\n            val next =\
    \ arr(i + 1)\n            val currDigit = curr % 10\n            val nextDigit\
    \ = next % 10\n            if (currDigit == nextDigit) {\n                sum\
    \ += curr\n                i += 2\n            } else {\n                sum +=\
    \ curr\n                i += 1\n            }\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv_dmbr3x.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpv_dmbr3x.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                sum += curr\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv_dmbr3x.scala:27:20\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                sum += curr\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659794463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val max = (len / 2).toInt\n        val sum = 0\n        val maxSum = 0\n\
    \        val maxSumIndex = 0\n        val maxSumElement = arr(maxSumIndex)\n \
    \       val maxSumElementIndex = maxSumIndex\n        val maxSumElementValue =\
    \ maxSumElement\n        val maxSumElementValueIndex = maxSumIndex\n        val\
    \ maxSumElementValueSum = maxSumElementValue\n        val maxSumElementValueSumIndex\
    \ = maxSumIndex\n        val maxSumElementValueSumValue = maxSumElementValue\n\
    \        val maxSumElementValueSumValueIndex = maxSumIndex\n        val maxSumElementValueSumValueSum\
    \ = maxSumElementValue\n        val maxSumElementValueSumValueSumIndex = maxSumIndex\n\
    \        val maxSumElementValueSumValueSumValue = maxSumElementValue\n       \
    \ val maxSumElementValueSumValueSumValueIndex = maxSumIndex\n        val maxSumElementValueSumValueSumValueSum\
    \ = maxSumElementValue\n        val maxSumElementValueSumValueSumValueSumIndex\
    \ = maxSumIndex\n        val maxSumElementValueSumValueSumValueSumValue = maxSumElementValue\n\
    \        val maxSumElementValueSumValueSumValueSumValueIndex = maxSumIndex\n \
    \       val maxSumElementValueSumValueSumValueSumValueSum = maxSumElementValue\n\
    \        val maxSumElementValueSumValueSumValueSumValueSumIndex = maxSumIndex\n\
    \        val maxSumElementValueSumValueSumValueSumValueSumValue = maxSumElementValue\n\
    \        val maxSumElementValueSumValueSumValueSumValueSumValueIndex = maxSumIndex\n\
    \        val maxSumElementValueSumValueSumValueSumValueSumValueSum = maxSumElementValue\n\
    \        val maxSumElementValueSumValueSumValueSumValueSumValueSumIndex = maxSumIndex\n\
    \        val maxSumElementValueSumValueSumValueSumValueSumValueSumValue = maxSumElementValue\n\
    \        val maxSumElementValueSumValueSumValueSumValueSumValueSumValueIndex =\
    \ maxSumIndex\n        val maxSumElementValueSumValueSumValueSumValueSumValueSumValueSum\
    \ = maxSumElementValue\n        val maxSumElementValueSumValueSumValueSumValueSumValueSumValueSumIndex\
    \ = maxSumIndex\n        val maxSumElementValueSumValueSumValueSumValueSumValueSumValueSumValue\
    \ = maxSumElementValue\n        val maxSumElementValueSumValueSumValueSumValueSumValueSumValueSumValueIndex\
    \ = maxSumIndex\n        val \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp2glbyhel.scala:47:11 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2glbyhel.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2glbyhel.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.size\n     \
    \   val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa2m5apn3.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpa2m5apn3.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val res = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var\
    \ i = 0\n        while (i < len) {\n            val cur = arr(i)\n           \
    \ val digit = cur.toString.toInt\n            if (digit < 10) {\n            \
    \    sum += cur\n                i += 1\n            } else if (digit < 100) {\n\
    \                sum += cur\n                i += 1\n            } else if (digit\
    \ < 1000) {\n                sum += cur\n                i += 1\n            }\
    \ else if (digit < 10000) {\n                sum += cur\n                i +=\
    \ 1\n            } else if (digit < 100000) {\n                sum += cur\n  \
    \              i += 1\n            } else if (digit < 1000000) {\n           \
    \     sum += cur\n                i += 1\n            } else if (digit < 10000000)\
    \ {\n                sum += cur\n                i += 1\n            } else if\
    \ (digit < 100000000) {\n                sum += cur\n                i += 1\n\
    \            } else if (digit < 1000000000) {\n                sum += cur\n  \
    \              i += 1\n            } else if (digit < 10000000000) {\n       \
    \         sum += cur\n                i += 1\n            } else if (digit < 100000000000)\
    \ {\n                sum += cur\n                i += 1\n            } else if\
    \ (digit < 1000000000000) {\n                sum += cur\n                i +=\
    \ 1\n            } else if (digit < 10000000000000) {\n                sum +=\
    \ cur\n                i += 1\n            } else if (digit < 100000000000000)\
    \ {\n                sum += cur\n                i += 1\n            } else if\
    \ (digit < 1000000000000000) {\n                sum += cur\n                i\
    \ += 1\n            } else if (digit < 10000000000000000) {\n                sum\
    \ += cur\n                i += 1\n            } else if (digit < 100000000000000000)\
    \ {\n                sum += cur\n                i += 1\n            } else if\
    \ (digit < 1000000000000000000) {\n                sum += cur\n              \
    \  i += 1\n            } else if (digit < 10000000000000000000) {\n          \
    \      sum += cur\n                i += 1\n            } else if (digit < 100000000000000000000)\
    \ {\n                sum += cur\n                i += 1\n            } else if\
    \ (digit < 1000000000000000000000) {\n                sum += cur\n           \
    \     i += 1\n            } else if (digit < 10000000000000000000000) {\n    \
    \            sum += cur\n                i += 1\n            } else if (digit\
    \ < 100000000000000000000000) {\n                sum += cur\n                i\
    \ += 1\n            } else if (digit < 1000000000000000000000000) {\n        \
    \        sum += cur\n                i += 1\n            } else if (digit < 10000000000000000000000000)\
    \ {\n                sum += cur\n                i += 1\n            } else if\
    \ (digit < 100000000000000000000000000) {\n                sum += cur\n      \
    \          i += 1\n            } else if (digit < 1000000000000000000000000000)\
    \ {\n                sum += cur\n                i += 1\n            } else if\
    \ (digit < 10000000000000000000000000000) {\n                sum += cur\n    \
    \            i += 1\n            } else if (digit < 100000000000000000000000000000)\
    \ {\n                sum += cur\n                i += 1\n            } else if\
    \ (digit < 1000000000000000000000000000000) {\n                sum += cur\n  \
    \              i += 1\n            } else if (digit < 10000000000000000000000000000000)\
    \ {\n                sum += cur\n                i += 1\n            } else if\
    \ (digit < 100000000000000000000000000000000) {\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6537o3d_.scala:125:0 ---------------------------\e\
    [0m\e[0m\n\e[31m125 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6537o3d_.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6537o3d_.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mres\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6537o3d_.scala:18:8 ---------------------\e[0m\e[0m\n\e[31m 18\
    \ |\e[0m        \e[33mwhile\e[0m (i < len) {\n\e[31m\e[31m    |\e[0m        ^\e\
    [0m\n\e[31m    |\e[0m        Found:    Unit\n\e[31m    |\e[0m        Required:\
    \ Long\n\e[31m 19 |\e[0m            \e[33mval\e[0m \e[36mcur\e[0m = arr(i)\n\e\
    [31m 20 |\e[0m            \e[33mval\e[0m \e[36mdigit\e[0m = cur.toString.toInt\n\
    \e[31m 21 |\e[0m            \e[33mif\e[0m (digit < \e[31m10\e[0m) {\n\e[31m 22\
    \ |\e[0m                sum += cur\n\e[31m 23 |\e[0m                i += \e[31m1\e\
    [0m\n\e[31m 24 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (digit < \e[31m100\e\
    [0m) {\n\e[31m 25 |\e[0m                sum += cur\n\e[31m 26 |\e[0m         \
    \       i += \e[31m1\e[0m\n\e[31m 27 |\e[0m            } \e[33melse\e[0m \e[33mif\e\
    [0m (digit < \e[31m1000\e[0m) {\n\e[31m 28 |\e[0m                sum += cur\n\e\
    [31m 29 |\e[0m                i += \e[31m1\e[0m\n\e[31m 30 |\e[0m            }\
    \ \e[33melse\e[0m \e[33mif\e[0m (digit < \e[31m10000\e[0m) {\n\e[31m 31 |\e[0m\
    \                sum += cur\n\e[31m 32 |\e[0m                i += \e[31m1\e[0m\n\
    \e[31m 33 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (digit < \e[3"
  stdout: ''
  timestamp: 1659794464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3\
    \ = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen\
    \ / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n  \
    \      val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val\
    \ maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12\
    \ = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen\
    \ / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n\
    \        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n    \
    \    val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val\
    \ maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23\
    \ = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen\
    \ / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n\
    \        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n    \
    \    val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val\
    \ maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34\
    \ = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen\
    \ / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n\
    \        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n    \
    \    val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val\
    \ maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45\
    \ = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0plquaof.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0plquaof.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val\
    \ maxLength = arr.take(k).length\n        val maxLength2 = maxLength * maxLength\n\
    \        var sum = 0\n        for (i <- 0 until arr.length) {\n            val\
    \ length = arr(i).toString.length\n            if (length > maxLength) {\n   \
    \             sum += arr(i)\n            } else if (length == maxLength) {\n \
    \               sum += arr(i) - arr(i).toString.dropRight(maxLength)\n       \
    \     } else if (length == maxLength2) {\n                sum += arr(i) - arr(i).toString.dropRight(maxLength2)\n\
    \            }\n        }\n        result.append(sum)\n        result.sum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8c5m7b_k.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8c5m7b_k.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e\
    [0m = arr.take(k).length\n\e[31m\e[31m   |\e[0m                              \
    \   ^\e[0m\n\e[31m   |\e[0m                                 Found:    (k : Long)\n\
    \e[31m   |\e[0m                                 Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp8c5m7b_k.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += arr(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp8c5m7b_k.scala:22:20 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                sum += arr(i) - arr(i).toString.dropRight(maxLength)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmp8c5m7b_k.scala:22:30 -----------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m                sum += arr(i) - arr(i).toString.dropRight(maxLength)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m  \
    \ |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x:\
    \ Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\
    \e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments (String)\n\e[31m\e\
    [31m-"
  stdout: ''
  timestamp: 1659794464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val res = arr.take(k).foldLeft(0l) { (sum, elem) => sum + elem }\n     \
    \   val maxTwoDigits = arr.take(k).foldLeft(0l) { (sum, elem) => sum + elem.toString.length\
    \ }\n        val maxTwoDigitsSum = arr.take(k).foldLeft(0l) { (sum, elem) => sum\
    \ + elem.toString.toLong }\n        val maxTwoDigitsSum = arr.take(k).foldLeft(0l)\
    \ { (sum, elem) => sum + elem.toString.toLong }\n        val maxTwoDigitsSum =\
    \ arr.take(k).foldLeft(0l) { (sum, elem) => sum + elem.toString.toLong }\n   \
    \     val maxTwoDigitsSum = arr.take(k).foldLeft(0l) { (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxTwoDigitsSum = arr.take(k).foldLeft(0l) { (sum, elem) => sum\
    \ + elem.toString.toLong }\n        val maxTwoDigitsSum = arr.take(k).foldLeft(0l)\
    \ { (sum, elem) => sum + elem.toString.toLong }\n        val maxTwoDigitsSum =\
    \ arr.take(k).foldLeft(0l) { (sum, elem) => sum + elem.toString.toLong }\n   \
    \     val maxTwoDigitsSum = arr.take(k).foldLeft(0l) { (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxTwoDigitsSum = arr.take(k).foldLeft(0l) { (sum, elem) => sum\
    \ + elem.toString.toLong }\n        val maxTwoDigitsSum = arr.take(k).foldLeft(0l)\
    \ { (sum, elem) => sum + elem.toString.toLong }\n        val maxTwoDigitsSum =\
    \ arr.take(k).foldLeft(0l) { (sum, elem) => sum + elem.toString.toLong }\n   \
    \     val maxTwoDigitsSum = arr.take(k).foldLeft(0l) { (sum, elem) => sum + elem.toString.toLong\
    \ }\n        val maxTwoDigitsSum = arr.take(k).foldLeft(0l) { (sum, elem) => sum\
    \ + elem.toString.toLong }\n        val maxTwoDigitsSum = arr.take(k).foldLeft(0l)\
    \ { (sum, elem) => sum + elem.toString.toLong }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps5fo779n.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxTwoDigitsSum\e[0m = arr.take(k).foldLeft(\e\
    [31m0l\e[0m) { (\e[36msum\e[0m, \e[36melem\e[0m) => sum + elem.toString.toLong\
    \ }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTwoDigitsSum is already defined as \e[33mvalue\e[0m \e\
    [35mmaxTwoDigitsSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps5fo779n.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxTwoDigitsSum\e[0m = arr.take(k).foldLeft(\e\
    [31m0l\e[0m) { (\e[36msum\e[0m, \e[36melem\e[0m) => sum + elem.toString.toLong\
    \ }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTwoDigitsSum is already defined as \e[33mvalue\e[0m \e\
    [35mmaxTwoDigitsSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps5fo779n.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxTwoDigitsSum\e[0m = arr.take(k).foldLeft(\e\
    [31m0l\e[0m) { (\e[36msum\e[0m, \e[36melem\e[0m) => sum + elem.toString.toLong\
    \ }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTwoDigitsSum is already defined as \e[33mvalue\e[0m \e\
    [35mmaxTwoDigitsSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps5fo779n.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTwoDigitsSum\e[0m = arr.take(k).foldLeft(\e\
    [31m0l\e[0m) { (\e[36msum\e[0m, \e[36melem\e[0m) => sum + elem.toString.toLong\
    \ }\n\e[31m\e[31m   |\e[0m  "
  stdout: ''
  timestamp: 1659794464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val len = arr.length\n   \
    \     val sum = 0\n        var i = 0\n        while (i < len) {\n            val\
    \ cur = arr(i)\n            if (cur < 10) {\n                sum += cur\n    \
    \            i += 1\n            } else if (cur < 100) {\n                sum\
    \ += cur % 10\n                i += 1\n            } else {\n                val\
    \ cur1 = cur / 10\n                val cur2 = cur % 10\n                sum +=\
    \ cur1 + cur2\n                i += 1\n            }\n        }\n        if (sum\
    \ < k) {\n            sum\n        } else {\n            sum + arr(len - k)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_otvqlwq.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_otvqlwq.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += cur\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_otvqlwq.scala:23:20\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                sum += cur\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                value += is not a member of Int - did you mean sum.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_otvqlwq.scala:28:20 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                sum += cur1 + cur2\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean sum.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659794464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val arr = arr.toList\n        val result = new mutable.HashMap[Long,\
    \ Long]()\n        val len = arr.size\n        val maxLen = len - k\n        val\
    \ maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4\
    \ = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen\
    \ / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n  \
    \      val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val\
    \ maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13\
    \ = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen\
    \ / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n\
    \        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n    \
    \    val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val\
    \ maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24\
    \ = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen\
    \ / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n\
    \        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n    \
    \    val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val\
    \ maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35\
    \ = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen\
    \ / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n\
    \        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n    \
    \    val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val\
    \ maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu5mr3iil.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu5mr3iil.scala:13:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu5mr3iil.scala:14:25\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpu5mr3iil.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794464
