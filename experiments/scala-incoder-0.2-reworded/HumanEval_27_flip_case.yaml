name: HumanEval_27_flip_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    def flipCase(string\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(flipCase((\"\")).equals((\"\
  \")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
  These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE\
  \ VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        val chars = string.map(c => if (c.toLowerCase == c) c.toUpperCase\
    \ else c)\n        chars.mkString", "        val chars = string.map(_.toUpperCase)\n\
    \        chars.reverse.mkString(\"\")", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) result.append(c.toUpperCase)\n            else result.append(c.toLowerCase)\n\
    \        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isUpper) {\n                result += c.toUpperCase\n     \
    \       } else {\n                result += c.toLowerCase\n            }\n   \
    \     }\n        return result.toString", "        val upperCase = string.map(c\
    \ => if (c.isUpper) c.toUpper else c.toLower)\n        val lowerCase = string.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper)\n        upperCase ++ lowerCase",
  "        val chars = string.split(\"\")\n        val result = new StringBuilder\n\
    \        for(i <- 0 until chars.length){\n            val c = chars(i)\n     \
    \       if(c.isUpper) result.append(c.toLower)\n            else result.append(c.toUpper)\n\
    \        }\n        return result.toString", "        val chars = string.map(_.toUpperCase)\n\
    \        val flipped = chars.reverse\n        val flippedString = flipped.mkString(\"\
    \")\n        return flippedString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until string.length)\n            result.append(if(string.charAt(i)\
    \ >= 'a' && string.charAt(i) <= 'z') string.charAt(i).toChar else string.charAt(i).toUpperCase)\n\
    \        result.toString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until string.length)\n            if (string.charAt(i).toLowerCase ==\
    \ string.charAt(i).toUpperCase )\n                result.append(string.charAt(i).toLowerCase)\n\
    \            else\n                result.append(string.charAt(i).toUpperCase)\n\
    \        return result.toString()", "        val chars = string.split(\"\")\n\
    \        val upperChars = chars.map(c => c.toUpperCase)\n        val lowerChars\
    \ = chars.map(c => c.toLowerCase)\n        val result = upperChars.mkString(\"\
    \") + lowerChars.mkString(\"\")\n        result", "        val charArray = string.toCharArray\n\
    \        val result = new StringBuilder\n        for(i <- 0 until charArray.length){\n\
    \            if(charArray(i) >= 'a' && charArray(i) <= 'z'){\n               \
    \ result.append(charArray(i).toUpper)\n            }\n            else if(charArray(i)\
    \ >= 'A' && charArray(i) <= 'Z'){\n                result.append(charArray(i).toLower)\n\
    \            }\n            else {\n                result.append(charArray(i))\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = new StringBuilder()\n        for (i <- 0 until string.length)\n          \
    \  if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n                result.append((string.charAt(i)\
    \ - 'a').toUpper + string.charAt(i))\n            else\n                result.append(string.charAt(i))\n\
    \        result.toString()", "        val charArray = string.toCharArray\n   \
    \     val flippedCharArray = charArray.map(c => if (c.toLowerCase == c) c.toUpperCase\
    \ else c.toLowerCase)\n        new String(flippedCharArray)", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until string.length){\n            val\
    \ c = string.charAt(i)\n            val uc = c.toUpperCase\n            val lc\
    \ = c.toLowerCase\n            if(uc != c){\n                result.append(uc)\n\
    \            }\n            result.append(lc)\n        }\n        return result.toString",
  "        val chars = string.map(c => if (c.isUpper) c.toLower else c.toUpper)\n\
    \        chars.mkString", "        val charArray = string.toCharArray\n      \
    \  val flippedCharArray = charArray.map(c => if (c.toLowerCase == c) c.toUpperCase\
    \ else c.toLowerCase)\n        new String(flippedCharArray)", "        val chars\
    \ = string.chars.toList\n        val flipped = chars.map(c => if (c.isLower) c.toUpper\
    \ else c.toLower)\n        new String(flipped)", "        val result = new StringBuilder()\n\
    \        for (i <- 0 until string.length)\n            if (string.charAt(i).toLowerCase\
    \ == string.charAt(i).toUpperCase && string.charAt(i) != 'A')\n              \
    \  result.append(string.charAt(i).toLowerCase)\n            else\n           \
    \     result.append(string.charAt(i))\n        return result.toString()", "  \
    \      val result = new StringBuilder\n        string.foreach { c =>\n       \
    \     val upperCase = c.toUpperCase\n            val lowerCase = c.toLowerCase\n\
    \            if (upperCase == lowerCase)\n                result += c\n      \
    \      else\n                result += upperCase\n        }\n        result.toString",
  "        val chars = string.split(\"\")\n        val flipped = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until chars.length)\n            flipped += chars(i).toUpperCase\
    \ + chars(i).toLowerCase\n        flipped.mkString(\"\")", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until string.length) {\n          \
    \  val c = string.charAt(i)\n            if (c.isUpper) {\n                result\
    \ += c.toUpperCase\n            } else {\n                result += c.toLowerCase\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until string.length){\n            val\
    \ c = string.charAt(i)\n            if(c.toUpper == c){\n                result.append((c.toLower))\n\
    \            }else{\n                result.append(c)\n            }\n       \
    \ }\n        return result.toString", "        val charArray = string.toCharArray\n\
    \        val result = new StringBuilder\n        for (i <- 0 until charArray.length)\n\
    \            result.append(charArray(i).toUpper)\n            result.append(charArray(i).toLower)\n\
    \        result.toString", "        val chars = string.map(c => if (c.toLowerCase\
    \ == c) c.toUpperCase else c)\n        chars.mkString", "        val chars = string.map(c\
    \ => if (c.isLower) c.toUpper else c.toLower)\n        chars.mkString", "    \
    \    val result = new StringBuilder\n        string.foreach(c => {\n         \
    \   val isUpper = c.toUpperCase == c\n            val isLower = c.toLowerCase\
    \ == c\n            if (isUpper && isLower) result.append(c.toUpperCase)\n   \
    \         else if (isUpper && !isLower) result.append(c.toUpperCase)\n       \
    \     else if (!isUpper && isLower) result.append(c.toLowerCase)\n           \
    \ else if (!isUpper && !isLower) result.append(c)\n        })\n        result.toString",
  "        val result = new StringBuilder()\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) {\n    \
    \            result.append((c.toUpperCase))\n            } else {\n          \
    \      result.append((c.toLowerCase))\n            }\n        }\n        result.toString",
  "        val chars = string.split(\"\")\n        chars.map(c => if (c.toLowerCase\
    \ == c) c.toUpperCase else c.toLowerCase).mkString", "        val result = new\
    \ StringBuilder\n        for (i <- 0 until string.length)\n            result.append(string.charAt(i).toUpperCase)\n\
    \            result.append(string.charAt(i).toLowerCase)\n        return result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        chars.foreach { c =>\n            if (c.isLower) flipped += c.toUpper\n\
    \            else flipped += c.toLower\n        }\n        flipped.mkString",
  "        val charArray = string.toCharArray\n        val result = new StringBuilder\n\
    \        for (i <- 0 until charArray.length) {\n            val c = charArray(i)\n\
    \            if (c.isUpper) {\n                result.append((charArray(i) - 32).toChar)\n\
    \            } else {\n                result.append(c)\n            }\n     \
    \   }\n        result.toString", "        val chars = string.map(c => if (c.isLower)\
    \ c.toUpper else c.toLower)\n        chars.mkString", "        val chars = string.map(c\
    \ => if (c.isLower) c.toUpper else c.toLower)\n        chars.mkString(\"\")",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result.toString",
  "        val chars = string.map(_.toUpperCase)\n        val flipped = chars.reverse.mkString(\"\
    \")\n        (flipped.toUpperCase)", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) result.append(c.toUpperCase)\n            else result.append(c.toLowerCase)\n\
    \        }\n        return result.toString", "        val result = new StringBuilder()\n\
    \        for (i <- 0 until string.length)\n            result.append(string.charAt(i).toUpperCase)\n\
    \            result.append(string.charAt(i).toLowerCase)\n        return result.toString()",
  "        val chars = string.map(c => if (c.isLower) c.toUpper else c.toLower)\n\
    \        chars.mkString", "        val charArray = string.toCharArray\n      \
    \  val result = new StringBuilder\n        charArray.foreach {\n            case\
    \ c if c.isLower => result.append((c.toUpper))\n            case c => result.append((c.toLower))\n\
    \        }\n        result.toString", "        val chars = string.map(_.toUpperCase)\n\
    \        val flipped = chars.reverse\n        val result = flipped.mkString(\"\
    \")\n        return result", "        val chars = string.chars\n        val flipped\
    \ = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length) {\n  \
    \          flipped += chars(i)\n        }\n        flipped.toString.toLowerCase",
  "        val chars = string.chars\n        val flippedChars = chars.map(c => if\
    \ (c.isLower) c.toUpper else c.toLower)\n        new String(flippedChars)", " \
    \       val result = new StringBuilder()\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isUpper) {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result.toString()",
  "        val chars = string.chars\n        val flipped = mutable.Buffer.empty[Char]\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.toString.toLowerCase", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length)\n            if (string.charAt(i) >=\
    \ 'a' && string.charAt(i) <= 'z')\n                result.append(string.charAt(i).toUpper)\n\
    \            else\n                result.append(string.charAt(i))\n        result.toString",
  "        val chars = string.map(_.toUpperCase)\n        chars.foldLeft(string){\
    \ (s, c) => s + c }", "        val result = new StringBuilder\n        for (i\
    \ <- 0 until string.length) {\n            val c = string.charAt(i)\n        \
    \    if (c.isLower) result.append(c.toUpperCase)\n            else result.append(c.toLowerCase)\n\
    \        }\n        result.toString", "        val chars = string.map(c => if\
    \ (c.isUpper) c.toLower else c.toUpper)\n        chars.mkString(\"\")", "    \
    \    val chars = string.map(c => if (c.isLower) c.toUpper else c.toLower)\n  \
    \      chars.mkString", "        val result = new StringBuilder\n        string.foreach(c\
    \ => {\n            if (c.isUpper) result.append(c.toUpperCase)\n            else\
    \ result.append(c.toLowerCase)\n        })\n        result.toString", "      \
    \  val result = new StringBuilder\n        for (i <- 0 until string.length) {\n\
    \            val c = string.charAt(i)\n            if (c.isLower) {\n        \
    \        result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isUpper) {\n    \
    \            result.append(c.toLower)\n            } else {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = string.map(c => if (c.isUpper) c.toLower else c.toUpper)\n        new String(chars)",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result.append((c - 'a').toUpper + string.charAt(i + 1))\n\
    \            } else {\n                result.append(c)\n            }\n     \
    \   }\n        return result.toString", "        val result = new StringBuilder()\n\
    \        for (i <- 0 until string.length)\n            if (string.charAt(i).toLowerCase\
    \ == string.charAt(i).toUpperCase )\n                result.append((string.charAt(i).toLowerCase))\n\
    \            else\n                result.append((string.charAt(i).toUpperCase))\n\
    \        result.toString()", "        val chars = string.split(\"\")\n       \
    \ val flipped = mutable.ListBuffer.empty[Char]\n        for(i <- 0 until chars.length)\n\
    \            flipped += chars(i).toLowerCase\n        for(i <- 0 until chars.length)\n\
    \            flipped += chars(i).toUpperCase\n        flipped.mkString", "   \
    \     val chars = string.chars\n        val flipped = mutable.Buffer.empty[Char]\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.toString.toLowerCase", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result.append((c - 'a').toUpper\
    \ + string.charAt(i + 1))\n            } else {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = string.map(c => if (c.isLower) c.toUpper else c.toLower)\n        new String(chars)",
  "        val upperCase = string.map(_.toUpperCase)\n        val lowerCase = string.map(_.toLowerCase)\n\
    \        upperCase ++ lowerCase", "        val chars = string.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)\n        chars.mkString", "        val chars = string.map(_.toUpperCase)\n\
    \        chars.foldLeft(string){ (s, c) => s + c }", "        val chars = string.map(_.toUpperCase)\n\
    \        chars.foldLeft(\"\")(_ + _)", "        val result = new StringBuilder()\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) {\n                result.append(c.toUpperCase)\n\
    \            } else {\n                result.append(c.toLowerCase)\n        \
    \    }\n        }\n        return result.toString()", "        val chars = string.map(_.toUpperCase)\n\
    \        chars.foldLeft(string){ (s, c) => s + c }", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for (i <- 0 until chars.length)\
    \ {\n            val c = chars(i)\n            if (c.isUpper) {\n            \
    \    result ++= c.toLower\n            } else {\n                result ++= c.toUpper\n\
    \            }\n        }\n        result.toString", "        val chars = string.split(\"\
    \").toList\n        chars.map(c => if (c.isLower) c.toUpper else c.toLower).mkString(\"\
    \")", "        val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            result.append(if(string.charAt(i).toLowerCase == string.charAt(i).toUpperCase\
    \ ) string.charAt(i).toLowerCase else string.charAt(i).toUpperCase )\n       \
    \ result.toString", "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i).toUpperCase)\n                flipped += chars(i).toLowerCase\n\
    \            else\n                flipped += chars(i).toUpperCase\n        flipped.mkString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result.toString",
  "        val chars = string.map(_.toUpperCase)\n        val flipped = chars.reverse\n\
    \        val result = flipped.mkString(\"\")\n        result", "        val chars\
    \ = string.map(c => if (c.toLowerCase == c) c.toUpperCase else c)\n        new\
    \ String(chars)", "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.toString.toLowerCase", "        val charArray = string.toCharArray\n\
    \        val result = new StringBuilder\n        for (i <- 0 until charArray.length)\
    \ {\n            val c = charArray(i)\n            if (c.isLower) result.append(c.toUpperCase)\n\
    \            else result.append(c.toLowerCase)\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            if (string(i).toLowerCase == string(i).toUpperCase ) {\n    \
    \            result.append(string(i).toLowerCase)\n            } else {\n    \
    \            result.append(string(i).toUpperCase)\n            }\n        }\n\
    \        return result.toString()", "        val chars = string.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)\n        chars.mkString(\"\")", "        val chars\
    \ = string.map(c => if (c.isLower) c.toUpper else c.toLower)\n        chars.mkString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isUpper) {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (Character.isLowerCase(c))\
    \ {\n                result.append(Character.toUpperCase(c))\n            } else\
    \ {\n                result.append(Character.toLowerCase(c))\n            }\n\
    \        }\n        result.toString", "        val chars = string.split(\"\")\n\
    \        val result = new StringBuilder()\n        for (i <- 0 until chars.length)\n\
    \            result.append(chars(i).swapCase())\n        result.toString()", " \
    \       val result = new StringBuilder\n        for(i <- 0 until string.length){\n\
    \            val c = string.charAt(i)\n            if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u'){\n                result.append((c + 'A').toUpperCase)\n\
    \            }\n            else if(c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U'){\n                result.append((c + 'a').toLowerCase)\n      \
    \      }\n            else{\n                result.append(c)\n            }\n\
    \        }\n        return result.toString()", "        val result = new StringBuilder()\n\
    \        for(i <- 0 until string.length){\n            val c = string.charAt(i)\n\
    \            if(c.isUpper){\n                result.append(c.toLower)\n      \
    \      }else{\n                result.append(c)\n            }\n        }\n  \
    \      return result.toString()", "        val chars = string.chars\n        val\
    \ flipped = mutable.ListBuffer[Char]()\n        for(i <- 0 until chars.length){\n\
    \            flipped += chars(i)\n        }\n        flipped.toString.toLowerCase",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        result.toString", "    \
    \    val chars = string.chars\n        val result = new StringBuilder\n      \
    \  for (i <- 0 until chars.length)\n            result.append(chars(i).swapCase)\n\
    \        result.toString", "        val chars = string.map(c => if (c.isLower)\
    \ c.toUpper else c.toLower)\n        chars.mkString", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for(i <- 0 until chars.length)\n\
    \            result.append(chars(i).swapCase)\n        result.toString", "   \
    \     val upperCase = string.map(_.toUpperCase)\n        val lowerCase = string.map(_.toLowerCase)\n\
    \        upperCase ++ lowerCase", "        val result = new StringBuilder\n  \
    \      for(i <- 0 until string.length){\n            val c = string.charAt(i)\n\
    \            if(c.isUpper){\n                result.append(c.toLower)\n      \
    \      }else{\n                result.append(c)\n            }\n        }\n  \
    \      return result.toString", "        val result = new StringBuilder\n    \
    \    for(i <- 0 until string.length)\n            result.append(if(string.charAt(i).toLowerCase\
    \ == string.charAt(i).toUpperCase ) string.charAt(i).toUpperCase else string.charAt(i).toLowerCase\
    \ )\n        result.toString", "        val chars = string.chars\n        val\
    \ result = new StringBuilder\n        for (i <- 0 until chars.length) {\n    \
    \        val c = chars(i)\n            if (c.isUpper) {\n                result\
    \ += c.toLower\n            } else {\n                result += c.toUpper\n  \
    \          }\n        }\n        result.toString", "        val result = new StringBuilder()\n\
    \        string.foreach(c => {\n            if (c.isLower) result.append(c.toUpperCase)\n\
    \            else result.append(c.toLowerCase)\n        })\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            if (string(i).isLower) {\n                result.append(string(i).swapCase)\n\
    \            } else {\n                result.append(string(i))\n            }\n\
    \        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length)\n            if (string.charAt(i).toLowerCase\
    \ == string.charAt(i).toUpperCase )\n                result.append((string.charAt(i).toUpperCase\
    \ + string.charAt(i).toLowerCase))\n            else\n                result.append(string.charAt(i))\n\
    \        return result.toString", "        val chars = string.chars\n        val\
    \ result = new StringBuilder\n        for (i <- 0 until chars.length) {\n    \
    \        val c = chars(i)\n            if (c.isUpper) {\n                result\
    \ ++= c.toLower\n            } else {\n                result ++= c.toUpper\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = string.chars\n        val result = new StringBuilder\n        for (i <- 0\
    \ until chars.length)\n            result.append(chars(i).swapCase)\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isUpper) {\n    \
    \            result.append(c.toUpperCase)\n            } else {\n            \
    \    result.append(c.toLowerCase)\n            }\n        }\n        result.toString",
  "        val chars = string.split(\"\")\n        chars.foldLeft(\"\"){ (result,\
    \ char) => result + char.toUpperCase() }", "        val chars = string.map(c =>\
    \ if (c.isUpper) c.toLower else c.toUpper)\n        chars.mkString", "       \
    \ val result = new StringBuilder\n        for (i <- 0 until string.length) {\n\
    \            val c = string.charAt(i)\n            if (Character.isLowerCase(c))\
    \ {\n                result.append(Character.toUpperCase(c))\n            } else\
    \ {\n                result.append(Character.toLowerCase(c))\n            }\n\
    \        }\n        return result.toString()", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result.append((c - 'a').toUpper\
    \ + string.charAt(i + 1))\n            } else if (c >= 'A' && c <= 'Z') {\n  \
    \              result.append((c - 'A').toUpper + string.charAt(i + 1))\n     \
    \       } else {\n                result.append(c)\n            }\n        }\n\
    \        result.toString", "        val upperCase = string.map(_.toUpperCase)\n\
    \        val lowerCase = string.map(_.toLowerCase)\n        upperCase ++ lowerCase",
  "        val chars = string.split(\"\")\n        chars.map(c => if (c.isLower) c.toUpper\
    \ else c.toLower).mkString", "        val result = new StringBuilder\n       \
    \ for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n \
    \           if (c.isLower) {\n                result += c.toUpperCase\n      \
    \      } else {\n                result += c.toLowerCase\n            }\n    \
    \    }\n        return result.toString", "        val chars = string.chars\n \
    \       val flipped = mutable.ListBuffer[Char]()\n        chars.foreach { c =>\n\
    \            if (c.isLower) flipped += c.toUpper\n            else flipped +=\
    \ c.toLower\n        }\n        flipped.toString.toUpperCase", "        val chars\
    \ = string.split(\"\")\n        val result = new StringBuilder\n        for (i\
    \ <- 0 until chars.length)\n            result.append(chars(i).swapCase())\n \
    \       result.toString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until string.length)\n            if (string.charAt(i) >= 'a' && string.charAt(i)\
    \ <= 'z')\n                result.append((string.charAt(i) - 'a' + 'A'))\n   \
    \         else\n                result.append(string.charAt(i))\n        return\
    \ result.toString", "        val chars = string.split(\"\")\n        chars.map(c\
    \ => if (c.isLower) c.toUpper else c.toLower).mkString", "        val chars =\
    \ string.chars\n        val flipped = mutable.ListBuffer[Char]()\n        for\
    \ (i <- 0 until chars.length)\n            flipped += chars(i).swapCase\n    \
    \    flipped.toString.toLowerCase", "        val result = new StringBuilder()\n\
    \        for (i <- 0 until string.length) {\n            if (string(i).isLower)\
    \ result.append(string(i).swapCase)\n            else result.append(string(i))\n\
    \        }\n        return result.toString()", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) result.append(c.toUpperCase)\n            else result.append(c.toLowerCase)\n\
    \        }\n        return result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) {\n                result.append((c.toUpper))\n  \
    \          } else {\n                result.append((c.toLower))\n            }\n\
    \        }\n        result.toString", "        val chars = string.map(c => if\
    \ (c.isUpper) c.toLower else c.toUpper)\n        chars.mkString", "        val\
    \ result = new StringBuilder\n        for(i <- 0 until string.length){\n     \
    \       val c = string.charAt(i)\n            if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u'){\n                result.append((c + 'A').toUpperCase)\n\
    \            }\n            else{\n                result.append(c)\n        \
    \    }\n        }\n        return result.toString", "        val result = new\
    \ StringBuilder\n        for(i <- 0 until string.length){\n            val c =\
    \ string.charAt(i)\n            if(c == c.toUpperCase){\n                result.append(c.toLowerCase)\n\
    \            }\n            else{\n                result.append(c)\n        \
    \    }\n        }\n        return result.toString", "        val result = new\
    \ StringBuilder\n        for (i <- 0 until string.length)\n            result.append(if(string.charAt(i)\
    \ >= 'a' && string.charAt(i) <= 'z') string.charAt(i).toChar else string.charAt(i).toUpperCase)\n\
    \        result.toString", "        val chars = string.split(\"\")\n        val\
    \ flipped = mutable.ListBuffer[String]()\n        chars.foreach(c => {\n     \
    \       if (c.isLower) flipped += c.toUpper\n            else flipped += c.toLower\n\
    \        })\n        flipped.mkString(\"\")", "        val charArray = string.toCharArray\n\
    \        val result = new Array[Char](string.length)\n        var i = 0\n    \
    \    while (i < charArray.length) {\n            if (charArray(i) >= 'a' && charArray(i)\
    \ <= 'z') {\n                result(i) = charArray(i).toUpperCase\n          \
    \  } else if (charArray(i) >= 'A' && charArray(i) <= 'Z') {\n                result(i)\
    \ = charArray(i).toLowerCase\n            } else {\n                result(i)\
    \ = charArray(i)\n            }\n            i += 1\n        }\n        new String(result)",
  "        val chars = string.map(c => if (c.toLowerCase == c) c.toUpperCase else\
    \ c)\n        chars.mkString", "        val result = new StringBuilder\n     \
    \   for (i <- 0 until string.length)\n            result.append(if (string.charAt(i)\
    \ >= 'a' && string.charAt(i) <= 'z') string.charAt(i).toUpper else string.charAt(i).toLower)\n\
    \        result.toString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until string.length)\n            result.append(if(string.charAt(i)\
    \ >= 'a' && string.charAt(i) <= 'z') string.charAt(i).toChar else string.charAt(i).toUpperCase)\n\
    \        result.toString", "        val chars = string.map(_.toUpperCase)\n  \
    \      val flipped = chars.reverse\n        val flippedString = flipped.mkString(\"\
    \")\n        return flippedString", "        val chars = string.chars\n      \
    \  val result = new StringBuilder\n        for (i <- 0 until chars.length)\n \
    \           result.append(chars(i).swapCase())\n        result.toString", "  \
    \      val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            if (string(i).isLower) {\n                result.append(string(i).swapCase)\n\
    \            } else {\n                result.append(string(i))\n            }\n\
    \        }\n        return result.toString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until string.length){\n            val c = string.charAt(i)\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n \
    \               result.append((c to 'A').toString)\n            }\n          \
    \  else{\n                result.append(c)\n            }\n        }\n       \
    \ result.toString", "        val chars = string.map(_.toUpperCase)\n        chars.foldLeft(string){\
    \ (acc, c) => acc + (c.toLowerCase) }", "        val charArray = string.toCharArray\n\
    \        val result = new StringBuilder\n        for (i <- 0 until charArray.length)\
    \ {\n            val c = charArray(i)\n            if (c.isUpper) {\n        \
    \        result.append(c.toLower)\n            } else {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = string.split(\"\")\n        val result = new StringBuilder()\n        for\
    \ (i <- 0 until chars.length)\n            result.append(chars(i).swapCase())\n\
    \        result.toString()", "        val chars = string.map(c => if (c.isLower)\
    \ c.toUpper else c.toLower)\n        chars.mkString", "        val result = new\
    \ StringBuilder\n        for(i <- 0 until string.length){\n            if(string.charAt(i)\
    \ == string.charAt(i).toLowerCase){\n                result.append((string.charAt(i).toUpperCase))\n\
    \            }\n            else{\n                result.append(string.charAt(i))\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = string.map(c => if (c.isLower) c.toUpper else c.toLower)\n        chars.mkString",
  "        val chars = string.map(_.toUpperCase)\n        chars.foldLeft(string){\
    \ (s, c) => s + c.toLowerCase}", "        val result = new StringBuilder\n   \
    \     for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isUpper) {\n                result += c.toLower\n         \
    \   } else {\n                result += c.toUpper\n            }\n        }\n\
    \        result.toString", "        val chars = string.chars\n        val flipped\
    \ = mutable.ListBuffer.empty[Char]\n        for (i <- 0 until chars.length) {\n\
    \            flipped += chars(i).swapCase\n        }\n        flipped.mkString",
  "        val chars = string.split(\"\")\n        chars.map(c => if (c.isLower) c.toUpper\
    \ else c.toLower).mkString", "        val result = new StringBuilder\n       \
    \ for (i <- 0 until string.length)\n            if (string.charAt(i).toLowerCase\
    \ == string.charAt(i).toUpperCase )\n                result.append(string.charAt(i).toLowerCase)\n\
    \            else\n                result.append(string.charAt(i).toUpperCase)\n\
    \        result.toString", "        val chars = string.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)\n        chars.mkString", "        val result = new\
    \ StringBuilder\n        for (i <- 0 until string.length) {\n            val c\
    \ = string.charAt(i)\n            if (c.isUpper) {\n                result +=\
    \ c.toUpperCase\n            } else {\n                result += c.toLowerCase\n\
    \            }\n        }\n        result.toString", "        val chars = string.map(c\
    \ => if (c.isLower) c.toUpper else c.toLower)\n        chars.mkString", "    \
    \    val chars = string.split(\"\")\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).toUpper\n\
    \            flipped += chars(i).toLower\n        }\n        flipped.mkString",
  "        val chars = string.chars\n        val result = new StringBuilder\n    \
    \    for(i <- 0 until chars.length){\n            val c = chars(i)\n         \
    \   val upper = c.toUpper\n            val lower = c.toLower\n            result.append(upper)\n\
    \            result.append(lower)\n        }\n        result.toString", "    \
    \    val chars = string.split(\"\")\n        val result = new StringBuilder\n\
    \        for (i <- 0 until chars.length)\n            result.append(chars(i).swapCase)\n\
    \        result.toString", "        val chars = string.map(c => if (c.isLower)\
    \ c.toUpper else c.toLower)\n        chars.mkString", "        val chars = string.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper)\n        chars.mkString", "    \
    \    val chars = string.chars\n        val result = new StringBuilder\n      \
    \  for (i <- 0 until chars.length) {\n            val c = chars(i)\n         \
    \   if (c.isUpper) {\n                result.append(c.toLower)\n            }\
    \ else {\n                result.append(c.toUpper)\n            }\n        }\n\
    \        return result.toString", "        val chars = string.chars\n        val\
    \ flipped = mutable.Buffer.empty[Char]\n        for (i <- 0 until chars.length)\n\
    \            if (chars(i).toLowerCase == chars(i).toUpperCase )\n            \
    \    flipped += chars(i).toLowerCase\n            else\n                flipped\
    \ += chars(i).toUpperCase\n        flipped.mkString", "        val charArray =\
    \ string.toCharArray\n        val result = new StringBuilder\n        for (i <-\
    \ 0 until charArray.length)\n            result.append(charArray(i).swapCase)\n\
    \        result.toString", "        val chars = string.chars.toList\n        chars.reverse.foldLeft(string){\
    \ (s, c) => s + c.toUpperCase + c.toLowerCase }", "        val charArray = string.toCharArray\n\
    \        val result = new StringBuilder\n        for(i <- 0 until charArray.length){\n\
    \            if(charArray(i) >= 'a' && charArray(i) <= 'z'){\n               \
    \ result.append(charArray(i).toUpperCase)\n            }\n            else if(charArray(i)\
    \ >= 'A' && charArray(i) <= 'Z'){\n                result.append(charArray(i).toLowerCase)\n\
    \            }\n            else {\n                result.append(charArray(i))\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = string.chars\n        val result = new StringBuilder\n        for (i <- 0\
    \ until chars.length) {\n            val c = chars(i)\n            if (c.isUpper)\
    \ {\n                result ++= c.toLower\n            } else {\n            \
    \    result ++= c.toUpper\n            }\n        }\n        result.toString",
  "        val chars = string.chars\n        val result = new StringBuilder\n    \
    \    for (i <- 0 until chars.length) {\n            val c = chars(i)\n       \
    \     if (c.isUpper) {\n                result.append(c.toLower)\n           \
    \ } else {\n                result.append(c.toUpper)\n            }\n        }\n\
    \        result.toString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until string.length) {\n            if (string(i).isLower) {\n     \
    \           result.append(string(i).swapCase)\n            } else {\n        \
    \        result.append(string(i))\n            }\n        }\n        return result.toString",
  "        val chars = string.chars\n        val result = new StringBuilder()\n  \
    \      for (i <- 0 until chars.length) {\n            val c = chars(i)\n     \
    \       if (c.isUpper) {\n                result.append(c.toLower)\n         \
    \   } else {\n                result.append(c.toUpper)\n            }\n      \
    \  }\n        return result.toString()", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result.append((c - 'a').toUpper\
    \ + string.charAt(i + 1))\n            } else {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val charArray\
    \ = string.toCharArray\n        val newCharArray = charArray.map(c => if (c.toLowerCase\
    \ == c) c.toUpperCase else c)\n        new String(newCharArray)", "        val\
    \ chars = string.chars\n        val result = new StringBuilder\n        for(i\
    \ <- 0 until chars.length){\n            val c = chars(i)\n            if(c.isUpper){\n\
    \                result.append((c.toLower))\n            }\n            else{\n\
    \                result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i).toUpperCase )\n                flipped += chars(i).toLowerCase\n\
    \            else\n                flipped += chars(i).toUpperCase\n        flipped.mkString",
  "        val chars = string.split(\"\")\n        chars.foldLeft(\"\") {\n      \
    \      case (acc, c) => (if (c.isUpper) acc.toUpper+c.toLower else acc.toLower+c.toUpper)\n\
    \        }", "        val result = new StringBuilder\n        for (i <- 0 until\
    \ string.length) {\n            val c = string.charAt(i)\n            if (Character.isLowerCase(c))\
    \ {\n                result.append((char) Character.toUpperCase(c))\n        \
    \    } else {\n                result.append((char) Character.toLowerCase(c))\n\
    \            }\n        }\n        result.toString", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer.empty[Char]\n        chars.foreach {\
    \ c =>\n            if (c.toLowerCase == c) flipped += c.toUpperCase\n       \
    \     else flipped += c.toLowerCase\n        }\n        flipped.toString.reverse",
  "        val chars = string.split(\"\")\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).toLowerCase\n\
    \            flipped += chars(i).toUpperCase\n        }\n        flipped.mkString(\"\
    \")", "        val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            result.append(string.charAt(i).toUpper)\n            result.append(string.charAt(i).toLower)\n\
    \        result.toString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until string.length) {\n            val c = string.charAt(i)\n     \
    \       if (c.isLower) result.append(c.toUpperCase)\n            else result.append(c.toLowerCase)\n\
    \        }\n        return result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length)\n            if (string.charAt(i).toLowerCase\
    \ == string.charAt(i).toUpperCase )\n                result.append(string.charAt(i).toLowerCase)\n\
    \            else\n                result.append(string.charAt(i).toUpperCase)\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result.append((c - 'a').toUpper\
    \ + string.charAt(i + 1))\n            } else {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = new StringBuilder()\n        for(i <- 0 until string.length){\n          \
    \  if(string.charAt(i) == string.charAt(i).toLowerCase){\n                result.append((string.charAt(i).toUpperCase))\n\
    \            }else{\n                result.append(string.charAt(i))\n       \
    \     }\n        }\n        return result.toString()", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for(i <- 0 until chars.length)\n\
    \            result.append(chars(i).swapCase)\n        result.toString", "   \
    \     val chars = string.chars\n        val result = new StringBuilder\n     \
    \   for (i <- 0 until chars.length)\n            result.append(chars(i).swapCase)\n\
    \        result.toString", "        val chars = string.chars\n        val flipped\
    \ = mutable.ListBuffer[Char]()\n        for(i <- 0 until chars.length){\n    \
    \        flipped += chars(i)\n        }\n        for(i <- 0 until flipped.length){\n\
    \            flipped(i) match {\n                case 'a' -> flipped(i) ='A'\n\
    \                case 'A' -> flipped(i) ='a'\n                case 'b' -> flipped(i)\
    \ ='B'\n                case 'B' -> flipped(i) ='b'\n                case 'c'\
    \ -> flipped(i) ='C'\n                case 'C' -> flipped(i) ='c'\n          \
    \      case 'd' -> flipped(i) ='D'\n                case 'D' -> flipped(i) ='d'\n\
    \                case 'e' -> flipped(i) ='E'\n                case 'E' -> flipped(i)\
    \ ='e'\n                case 'f' -> flipped(i) ='F'\n                case 'F'\
    \ -> flipped(i) ='f'\n                case 'g' -> flipped(i) ='G'\n          \
    \      case 'G' -> flipped(i) ='g'\n                case 'h' -> flipped(i) ='H'\n\
    \                case 'H' -> flipped(i) ='h'\n                case 'i' -> flipped(i)\
    \ ='I'\n                case 'I' -> flipped(i) ='i'\n                case 'j'\
    \ -> flipped(i) ='J'\n                case 'J' -> flipped(i) ='j'\n          \
    \      case 'k' -> flipped(i) ='K'\n                case 'K' -> flipped(i) ='k'\n\
    \                case 'l' -> flipped(i) ='L'\n                case 'L' -> flipped(i)\
    \ ='l'\n                case 'm' -> flipped(i) ='M'\n                case 'M'\
    \ -> flipped(i) ='m'\n                case 'n' -> flipped(i) ='N'\n          \
    \      case 'N' -> flipped(i) ='n'\n                case 'o' -> flipped(i) ='O'\n\
    \                case 'O' -> flipped(i) ='o'\n                case 'p' -> flipped(i)\
    \ ='P'\n                case 'P' -> flipped(i) ='p'\n                case 'q'\
    \ -> flipped(i) ='Q'\n                case 'Q' -> flipped(i) ='q'\n          \
    \      case 'r' -> flipped(i) ='R'\n                case 'R' -> flipped(i) ='r'\n\
    \                case 's' -> flipped(i) ='S'\n                case 'S' -> flipped(i)\
    \ ='s'\n                case 't' -> flipped(i) ='T'\n                case 'T'\
    \ -> flipped(i) ='t'\n                case 'u' -> flipped(i) ='U'\n          \
    \      case 'U' -> flipped(i) ='u'\n                case 'v' -> flippe", "   \
    \     val charArray = string.toCharArray\n        val result = new StringBuilder\n\
    \        for(i <- 0 until charArray.length){\n            val c = charArray(i)\n\
    \            if(c == 'a' || c == 'A'){\n                result.append((charArray(i).toUpperCase\
    \ + charArray(i).toLowerCase))\n            }\n            else{\n           \
    \     result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until chars.length){\n            flipped += chars(i)\n  \
    \      }\n        flipped.toString.toLowerCase", "        val chars = string.map(_.toUpperCase)\n\
    \        chars.reverse.mkString(\"\")", "        val chars = string.map(c => if\
    \ (c.toLowerCase == c) c.toUpperCase else c)\n        chars.mkString", "     \
    \   val chars = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i).toUpperCase && chars(i).toUpperCase != chars(i).toLowerCase)\n \
    \               flipped += chars(i).toLowerCase\n            else\n          \
    \      flipped += chars(i).toUpperCase\n        flipped.mkString", "        val\
    \ charArray = string.toCharArray\n        val result = new StringBuilder\n   \
    \     for (i <- 0 until charArray.length) {\n            if (charArray(i) >= 'a'\
    \ && charArray(i) <= 'z') {\n                result.append((charArray(i) - 'a').toUpperCase)\n\
    \            } else if (charArray(i) >= 'A' && charArray(i) <= 'Z') {\n      \
    \          result.append((charArray(i) - 'A').toLowerCase)\n            } else\
    \ {\n                result.append(charArray(i))\n            }\n        }\n \
    \       return result.toString", "        val charArray = string.toCharArray\n\
    \        val newCharArray = charArray.map {\n            c => if (c.isLower) c.toUpper\
    \ else c.toLower\n        }\n        new String(newCharArray)", "        val chars\
    \ = string.chars\n        val result = new StringBuilder\n        for (i <- 0\
    \ until chars.length) {\n            val c = chars(i)\n            if (c.isUpper)\
    \ {\n                result.append(c.toLower)\n            } else {\n        \
    \        result.append(c.toUpper)\n            }\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) {\n    \
    \            result.append((c.toUpperCase))\n            } else {\n          \
    \      result.append((c.toLowerCase))\n            }\n        }\n        result.toString",
  "        val upperCase = string.map(_.toUpperCase)\n        val lowerCase = string.map(_.toLowerCase)\n\
    \        upperCase ++ lowerCase", "        val chars = string.chars\n        val\
    \ flipped = mutable.ListBuffer.empty[Char]\n        for (i <- 0 until chars.length)\
    \ {\n            flipped += chars(i).swapCase\n        }\n        flipped.toString.toLowerCase",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i).toLowerCase == string.charAt(i).toUpperCase\
    \ && string.charAt(i) != 'A')\n                result.append((string.charAt(i).toUpperCase\
    \ + string.charAt(i).toLowerCase))\n            else\n                result.append(string.charAt(i))\n\
    \        return result.toString", "        val chars = string.chars\n        val\
    \ result = new StringBuilder\n        for (i <- 0 until chars.length)\n      \
    \      result.append(chars(i).swapCase)\n        result.toString", "        val\
    \ chars = string.split(\"\")\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        chars.foreach(c => flipped += c.toUpperCase)\n        flipped.toList.mkString(\"\
    \")", "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i).toLowerCase == string.charAt(i).toUpperCase\
    \ ) {\n                result.append((string.charAt(i).toLowerCase))\n       \
    \     } else {\n                result.append(string.charAt(i))\n            }\n\
    \        }\n        return result.toString", "        val result = new StringBuilder()\n\
    \        string.foreach { c =>\n            val upper = c.toUpperCase\n      \
    \      val lower = c.toLowerCase\n            if (upper != lower) {\n        \
    \        result.append(upper)\n                result.append(lower)\n        \
    \    }\n        }\n        result.toString()", "        val chars = string.map(c\
    \ => if (c.isLower) c.toUpper else c.toLower)\n        chars.mkString", "    \
    \    val chars = string.split(\"\").toList\n        chars.reverse.foldLeft(\"\"\
    )( (acc, c) => acc + c + c.toUpperCase )", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.toUpperCase == c) {\n                result.append(c.toUpperCase)\n\
    \            } else {\n                result.append(c)\n            }\n     \
    \   }\n        return result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) {\n                result += c.toUpperCase\n     \
    \       } else {\n                result += c.toLowerCase\n            }\n   \
    \     }\n        return result.toString", "        val chars = string.split(\"\
    \")\n        chars.map(c => if (c.isLower) c.toUpper else c.toLower).mkString",
  "        val chars = string.map(_.toUpperCase)\n        chars.reverse.mkString(\"\
    \")", "        val result = new StringBuilder\n        for(i <- 0 until string.length){\n\
    \            val c = string.charAt(i)\n            if(c.toUpperCase == c){\n \
    \               result.append((c.toUpperCase))\n            }\n            else{\n\
    \                result.append((c.toLowerCase))\n            }\n        }\n  \
    \      return result.toString", "        val result = new StringBuilder\n    \
    \    for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isUpper) {\n                result.append(c.toLower)\n    \
    \        } else {\n                result.append(c)\n            }\n        }\n\
    \        return result.toString", "        val chars = string.map(_.toUpperCase)\n\
    \        chars.foldLeft(\"\")(_ + _)", "        val chars = string.map(c => if\
    \ (c.toLowerCase == c) c.toUpperCase else c)\n        chars.mkString", "     \
    \   val chars = string.map(c => if (c.isLower) c.toUpper else c.toLower)\n   \
    \     chars.mkString", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until string.length){\n            val c = string.charAt(i)\n         \
    \   if(c.toUpperCase == c){\n                result.append(c.toUpperCase)\n  \
    \          } else {\n                result.append(c.toLowerCase)\n          \
    \  }\n        }\n        return result.toString()", "        val charArray = string.toCharArray\n\
    \        val result = new StringBuilder\n        for (i <- 0 until charArray.length)\
    \ {\n            val c = charArray(i)\n            if (c >= 'a' && c <= 'z') {\n\
    \                result += (c + 'A' - 'a')\n            } else if (c >= 'A' &&\
    \ c <= 'Z') {\n                result += (c + 'a' - 'A')\n            } else {\n\
    \                result += c\n            }\n        }\n        return result.toString",
  "        val chars = string.map(c => if (c.toLowerCase == c) c.toUpperCase else\
    \ c.toLowerCase)\n        chars.mkString", "        var result = \"\"\n      \
    \  for (i <- 0 until string.length) {\n            if (string(i) >= 'a' && string(i)\
    \ <= 'z') {\n                result += string(i).toUpperCase\n            } else\
    \ if (string(i) >= 'A' && string(i) <= 'Z') {\n                result += string(i).toLowerCase\n\
    \            } else {\n                result += string(i)\n            }\n  \
    \      }\n        result"]
stop_tokens:
- "\n    }\n"
