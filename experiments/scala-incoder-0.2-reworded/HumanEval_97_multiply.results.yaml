language: scala
name: HumanEval_97_multiply
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        val productString = product.toString\n        val unitDigitString\
    \ = unitDigits.toString\n        val unitDigitString2 = unitDigits2.toString\n\
    \        if (productString == unitDigitString && productString == unitDigitString2)\
    \ {\n            product\n        } else {\n            0\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc0n0icho.scala:30)\n\tat Problem.main(tmpc0n0icho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits_2 = b.toString.toInt\n        val unitDigits_3 = unitDigits\
    \ * unitDigits_2\n        val unitDigits_4 = unitDigits_3 * unitDigits_3\n   \
    \     val unitDigits_5 = unitDigits_4 * unitDigits_4\n        val unitDigits_6\
    \ = unitDigits_5 * unitDigits_5\n        val unitDigits_7 = unitDigits_6 * unitDigits_6\n\
    \        val unitDigits_8 = unitDigits_7 * unitDigits_7\n        val unitDigits_9\
    \ = unitDigits_8 * unitDigits_8\n        val unitDigits_10 = unitDigits_9 * unitDigits_9\n\
    \        val unitDigits_11 = unitDigits_10 * unitDigits_10\n        val unitDigits_12\
    \ = unitDigits_11 * unitDigits_11\n        val unitDigits_13 = unitDigits_12 *\
    \ unitDigits_12\n        val unitDigits_14 = unitDigits_13 * unitDigits_13\n \
    \       val unitDigits_15 = unitDigits_14 * unitDigits_14\n        val unitDigits_16\
    \ = unitDigits_15 * unitDigits_15\n        val unitDigits_17 = unitDigits_16 *\
    \ unitDigits_16\n        val unitDigits_18 = unitDigits_17 * unitDigits_17\n \
    \       val unitDigits_19 = unitDigits_18 * unitDigits_18\n        val unitDigits_20\
    \ = unitDigits_19 * unitDigits_19\n        val unitDigits_21 = unitDigits_20 *\
    \ unitDigits_20\n        val unitDigits_22 = unitDigits_21 * unitDigits_21\n \
    \       val unitDigits_23 = unitDigits_22 * unitDigits_22\n        val unitDigits_24\
    \ = unitDigits_23 * unitDigits_23\n        val unitDigits_25 = unitDigits_24 *\
    \ unitDigits_24\n        val unitDigits_26 = unitDigits_25 * unitDigits_25\n \
    \       val unitDigits_27 = unitDigits_26 * unitDigits_26\n        val unitDigits_28\
    \ = unitDigits_27 * unitDigits_27\n        val unitDigits_29 = unitDigits_28 *\
    \ unitDigits_28\n        val unitDigits_30 = unitDigits_29 * unitDigits_29\n \
    \       val unitDigits_31 = unitDigits_30 * unitDigits_30\n        val unitDigits_32\
    \ = unitDigits_31 * \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4psg35au.scala:48:43 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36munitDigits_32\e[0m = unitDigits_31\
    \ * \n\e[31m\e[31m   |\e[0m                                           ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4psg35au.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpswq_9g6a.scala:60:37 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswq_9g6a.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswq_9g6a.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswq_9g6a.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswq_9g6a.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already de"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8d87dojp.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8d87dojp.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8d87dojp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8d87dojp.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8d87dojp.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        product\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7cupah2a.scala:23)\n\tat Problem.main(tmp7cupah2a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        var product = unitDigits *\
    \ unitDigits2\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        var product = unitDigits * unitDigits2\n       \
    \ val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = unitDigits * unitDigits2\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        var product = unitDigits\
    \ * unitDigits2\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        var product = unitDigits * unitDigits2\n       \
    \ val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = unitDigits * unitDigits2\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        var product = unitDigits\
    \ * unitDigits2\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        var product = unitDigits * unitDigits2\n       \
    \ val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = unitDigits * unitDigits2\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        var product = unitDigits\
    \ * unitDigits2\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        var product = unitDigits * unitDigits2\n       \
    \ val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = unitDigits * unitDigits2\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        var product = unitDigits\
    \ * unitDigits2\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        var product = unitDigits * unitDigits2\n       \
    \ val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        var product = unitDigits * unitDigits2\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6g33ywoe.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6g33ywoe.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6g33ywoe.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6g33ywoe.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mvar\e[0m \e[36mproduct\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mproduct is already defined as \e[33mvariable\e[0m \e[35mproduct\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6g33ywoe.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6g33ywoe.scala:24:12\
    \ ---------------------------\e[0m\e["
  stdout: ''
  timestamp: 1659799287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits_1\
    \ = a % 10\n        val unitDigits_2 = b / 10\n        val unitDigits_3 = b %\
    \ 10\n        val unitDigits_4 = unitDigits_1 * unitDigits_2\n        val unitDigits_5\
    \ = unitDigits_3 * unitDigits_4\n        unitDigits_5 * 10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aonungw.scala:26)\n\tat Problem.main(tmp1aonungw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n\
    \        val unitDigits3 = (unitDigits * unitDigits2) / 10\n        val remainder3\
    \ = (unitDigits * unitDigits2) % 10\n        val unitDigits4 = (unitDigits * unitDigits3)\
    \ / 10\n        val remainder4 = (unitDigits * unitDigits3) % 10\n        val\
    \ unitDigits5 = (unitDigits * unitDigits3 * unitDigits4) / 10\n        val remainder5\
    \ = (unitDigits * unitDigits3 * unitDigits4) % 10\n        val unitDigits6 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5) / 10\n        val remainder6 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5) % 10\n        val unitDigits7 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6) / 10\n        val remainder7\
    \ = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6) % 10\n\
    \        val unitDigits8 = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5\
    \ * unitDigits6 * unitDigits7) / 10\n        val remainder8 = (unitDigits * unitDigits3\
    \ * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7) % 10\n        val unitDigits9\
    \ = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7\
    \ * unitDigits8) / 10\n        val remainder9 = (unitDigits * unitDigits3 * unitDigits4\
    \ * unitDigits5 * unitDigits6 * unitDigits7 * unitDigits8) % 10\n        val unitDigits10\
    \ = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7\
    \ * unitDigits8 * unitDigits9) / 10\n        val remainder10 = (unitDigits * unitDigits3\
    \ * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7 * unitDigits8 * unitDigits9)\
    \ % 10\n        val unitDigits11 = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5\
    \ * unitDigits6 * unitDigits\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmparo0qo3f.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmparo0qo3f.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits2 = unitDigits2 % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigit\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmtzgydwp.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmtzgydwp.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmtzgydwp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmtzgydwp.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmtzgydwp.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.filter(_ > 0)\n        val unitDigits2 = unitDigits2.filter(_ >\
    \ 0)\n        val unitDigits = unitDigits.filter(_ < 10)\n        val unitDigits2\
    \ = unitDigits2.filter(_ < 10)\n        val unitDigits = unitDigits.filter(_ >\
    \ 0)\n        val unitDigits2 = unitDigits2.filter(_ > 0)\n        val unitDigits\
    \ = unitDigits.filter(_ < 10)\n        val unitDigits2 = unitDigits2.filter(_\
    \ < 10)\n        val unitDigits = unitDigits.filter(_ > 0)\n        val unitDigits2\
    \ = unitDigits2.filter(_ > 0)\n        val unitDigits = unitDigits.filter(_ <\
    \ 10)\n        val unitDigits2 = unitDigits2.filter(_ < 10)\n        val unitDigits\
    \ = unitDigits.filter(_ > 0)\n        val unitDigits2 = unitDigits2.filter(_ >\
    \ 0)\n        val unitDigits = unitDigits.filter(_ < 10)\n        val unitDigits2\
    \ = unitDigits2.filter(_ < 10)\n        val unitDigits = unitDigits.filter(_ >\
    \ 0)\n        val unitDigits2 = unitDigits2.filter(_ > 0)\n        val unitDigits\
    \ = unitDigits.filter(_ < 10)\n        val unitDigits2 = unitDigits2.filter(_\
    \ < 10)\n        val unitDigits = unitDigits.filter(_ > 0)\n        val unitDigits2\
    \ = unitDigits2.filter(_ > 0)\n        val unitDigits = unitDigits.filter(_ <\
    \ 10)\n        val unitDigits2 = unitDigits2.filter(_ < 10)\n        val unitDigits\
    \ = unitDigits.filter(_ > 0)\n        val unitDigits2 = unitDigits2.filter(_ >\
    \ 0)\n        val unitDigits = unitDigits.filter(_ < 10)\n        val unitDigits2\
    \ = unitDigits2.filter(_ < 10)\n        val unitDigits = unitDigits.filter(_ >\
    \ 0)\n        val unitDigits2 = unitDigits2.filter(_ > 0)\n        val unitDigits\
    \ = unitDigits.filter(_ < 10)\n        val unitDigits2 = unitDigits2.filter(_\
    \ < 10)\n        val unitDigits = unitDigits.filter(_ > 0)\n        val unitDigits2\
    \ = unitDigits2.filter(_ > 0)\n        val unitDigits = unitDigits.filter(_ <\
    \ 10)\n        val unitDigits2 = unitDigits2.filter(_ < 10)\n        val unitDigits\
    \ = unitDigits.filter(_ > 0)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg1cvnv9r.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.filter(_\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg1cvnv9r.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.filter(_\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg1cvnv9r.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.filter(_\
    \ < \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg1cvnv9r.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.filter(_\
    \ < \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg1cvnv9r.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.filter(_\
    \ > \e[31m0\e[0m)\n\e[3"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits2 = unitDigits2 % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unit\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjf2fkuf3.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjf2fkuf3.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjf2fkuf3.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjf2fkuf3.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjf2fkuf3.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqor8jcud.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits2 = unitDigits2 % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfzmbt4bg.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44wq65qp.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp44wq65qp.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a / \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44wq65qp.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = a % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp44wq65qp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a / \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44wq65qp.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = a % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloade"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqor8jcud.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        var product = 0\n        for(i\
    \ <- 0 until unitDigits) {\n            product *= 10\n            product +=\
    \ unitDigits2(i)\n        }\n        product\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwx0yb9h.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            product += unitDigits2(i)\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpnwx0yb9h.scala:22:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            product\
    \ += unitDigits2(i)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits % 10\n        val unitDigits2\
    \ = unitDigits2 % 10\n        val unitDigits = unitDigits * unitDigits2\n    \
    \    val unitDigits = unitDigits.toInt\n        val unitDigits = unitDigits %\
    \ 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits.toInt\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n    \
    \    val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits.toInt\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n    \
    \    val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits.toInt\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n    \
    \    val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits.toInt\n        val unitDigits = unitDigits % 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toInt\n    \
    \    val unitDigits = unitDigits % 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits = \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyxl5m78i.scala:61:24 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = \n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyxl5m78i.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyxl5m78i.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyxl5m78i.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyxl5m78i.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mN"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits_1.zip(unitDigits_2).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_3).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_4 = unitDigits_3.zip(unitDigits_4).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_5 = unitDigits_4.zip(unitDigits_5).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_6 = unitDigits_5.zip(unitDigits_6).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_7 = unitDigits_6.zip(unitDigits_7).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_8 = unitDigits_7.zip(unitDigits_8).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_9 = unitDigits_8.zip(unitDigits_9).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_10 = unitDigits_9.zip(unitDigits_10).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_11 =\
    \ unitDigits_10.zip(unitDigits_11).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_12 = unitDigits_11.zip(unitDigits_12).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_13 = unitDigits_12.zip(unitDigits_13).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_14 =\
    \ unitDigits_13.zip(unitDigits_14).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_15 = unitDigits_14.zip(unitDigits_15).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_16 = unitDigits_15.zip(unitDigits_16\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjsgq6l_p.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjsgq6l_p.scala:19:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map {\n\e[31m\e[31m\
    \   |\e[0m                                            ^\e[0m\n\e[31m   |\e[0m\
    \                                 Recursive \e[33mvalue\e[0m \e[35munitDigits_2\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpjsgq6l_p.scala:20:44\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e\
    [0m (digit1, digit2) => digit1 * digit2\n\e[31m\e[31m   |\e[0m               \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m\
    \   |\e[0m (x: Char): Int\n\e[31m   |\e[0m (x: Short): Int\n\e[31m   |\e[0m (x:\
    \ Byte): Int\n\e[31m   |\e[0mall match arguments ((digit2 : Nothing))\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjsgq6l_p.scala:22:44 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits_3\e[0m = unitDigits_2.zip(unitDigits_3).map\
    \ {\n\e[31m\e[31m   |\e[0m                                            ^\e[0m\n\
    \e[31m   |\e[0m                                 Recursive \e[33mvalue\e[0m \e\
    [35munitDigits_3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpjsgq6l_p.scala:23:44 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            \e[33mcase\e[0m (digit1, digit2) => digit1 * digit2\n\e[31m\e[31m\
    \   |\e[0m                            "
  stdout: ''
  timestamp: 1659799291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.toList\n        val unitDigits2 = unitDigits2.toList\n        val\
    \ unitDigits = unitDigits.reverse\n        val unitDigits2 = unitDigits2.reverse\n\
    \        val unitDigits = unitDigits.take(unitDigits.length)\n        val unitDigits2\
    \ = unitDigits2.take(unitDigits2.length)\n        val unitDigits = unitDigits.reverse\n\
    \        val unitDigits2 = unitDigits2.reverse\n        val unitDigits = unitDigits.take(unitDigits.length)\n\
    \        val unitDigits2 = unitDigits2.take(unitDigits2.length)\n        val unitDigits\
    \ = unitDigits.reverse\n        val unitDigits2 = unitDigits2.reverse\n      \
    \  val unitDigits = unitDigits.take(unitDigits.length)\n        val unitDigits2\
    \ = unitDigits2.take(unitDigits2.length)\n        val unitDigits = unitDigits.reverse\n\
    \        val unitDigits2 = unitDigits2.reverse\n        val unitDigits = unitDigits.take(unitDigits.length)\n\
    \        val unitDigits2 = unitDigits2.take(unitDigits2.length)\n        val unitDigits\
    \ = unitDigits.reverse\n        val unitDigits2 = unitDigits2.reverse\n      \
    \  val unitDigits = unitDigits.take(unitDigits.length)\n        val unitDigits2\
    \ = unitDigits2.take(unitDigits2.length)\n        val unitDigits = unitDigits.reverse\n\
    \        val unitDigits2 = unitDigits2.reverse\n        val unitDigits = unitDigits.take(unitDigits.length)\n\
    \        val unitDigits2 = unitDigits2.take(unitDigits2.length)\n        val unitDigits\
    \ = unitDigits.reverse\n        val unitDigits2 = unitDigits2.reverse\n      \
    \  val unitDigits = unitDigits.take(unitDigits.length)\n        val unitDigits2\
    \ = unitDigits2.take(unitDigits2.length)\n        val unitDigits = unitDigits.reverse\n\
    \        val unitDigits2 = unitDigits2.reverse\n        val unitDigits = unitDigits.take(unitDigits.length)\n\
    \        val unitDigits2 = unitDigits2.take(unitDigits2.length)\n        val unitDigits\
    \ = unitDigits.reverse\n        val unitDigits2 = unitDigits2.reverse\n      \
    \  val unitDigits = unitDigits.take(unitDigits.length)\n        val unitDigits2\
    \ = unitDigits2.take(unitDigits2.length)\n        val unitDigits = unitDigits.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpio435vfr.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpio435vfr.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpio435vfr.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits2\e[0m = unitDigits2.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpio435vfr.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpio435vfr.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpio435vfr.scala:23:12 --------------------"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigit\
    \ = a % 10\n        val unitDigits = b / 10\n        val unitDigit = b % 10\n\
    \        val unitDigits = unitDigits * unitDigit\n        val unitDigit = unitDigit\
    \ * unitDigit\n        unitDigits\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpza8rnzzh.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpza8rnzzh.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpza8rnzzh.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigit\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpza8rnzzh.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigit\e[0m = unitDigit * unitDigit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigit is already defined as \e[33mvalue\e[0m \e[35munitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659799293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpswq_9g6a.scala:60:37 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswq_9g6a.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswq_9g6a.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswq_9g6a.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswq_9g6a.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already de"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.zip(unitDigits2).map(x => x._1 * x._2)\n        val unitDigits\
    \ = unitDigits.toList\n        val unitDigits = unitDigits.map(x => if (x == 0)\
    \ 0 else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n\
    \        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val\
    \ unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits\
    \ = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x\
    \ => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x\
    \ == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0\
    \ else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n\
    \        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val\
    \ unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits\
    \ = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x\
    \ => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x\
    \ == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0\
    \ else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n\
    \        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val\
    \ unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits\
    \ = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x\
    \ => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x\
    \ == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0\
    \ else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n\
    \        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val\
    \ unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits\
    \ = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigit\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjfx5wyqc.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjfx5wyqc.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.zip(unitDigits2).map(\e[36mx\e[0m => x._1\
    \ * x._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjfx5wyqc.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjfx5wyqc.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjfx5wyqc.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[3"
  stdout: ''
  timestamp: 1659799298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        unitDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdp8zyclo.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdp8zyclo.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits_1.zip(unitDigits_2).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_3).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_4 = unitDigits_3.zip(unitDigits_4).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_5 = unitDigits_4.zip(unitDigits_5).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_6 = unitDigits_5.zip(unitDigits_6).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_7 = unitDigits_6.zip(unitDigits_7).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_8 = unitDigits_7.zip(unitDigits_8).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_9 = unitDigits_8.zip(unitDigits_9).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_10 = unitDigits_9.zip(unitDigits_10).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_11 =\
    \ unitDigits_10.zip(unitDigits_11).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_12 = unitDigits_11.zip(unitDigits_12).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_13 = unitDigits_12.zip(unitDigits_13).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_14 =\
    \ unitDigits_13.zip(unitDigits_14).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_15 = unitDigits_14.zip(unitDigits_15).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_16 = unitDigits_15.zip(unitDigits_16\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjsgq6l_p.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjsgq6l_p.scala:19:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map {\n\e[31m\e[31m\
    \   |\e[0m                                            ^\e[0m\n\e[31m   |\e[0m\
    \                                 Recursive \e[33mvalue\e[0m \e[35munitDigits_2\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpjsgq6l_p.scala:20:44\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e\
    [0m (digit1, digit2) => digit1 * digit2\n\e[31m\e[31m   |\e[0m               \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m\
    \   |\e[0m (x: Char): Int\n\e[31m   |\e[0m (x: Short): Int\n\e[31m   |\e[0m (x:\
    \ Byte): Int\n\e[31m   |\e[0mall match arguments ((digit2 : Nothing))\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjsgq6l_p.scala:22:44 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits_3\e[0m = unitDigits_2.zip(unitDigits_3).map\
    \ {\n\e[31m\e[31m   |\e[0m                                            ^\e[0m\n\
    \e[31m   |\e[0m                                 Recursive \e[33mvalue\e[0m \e\
    [35munitDigits_3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpjsgq6l_p.scala:23:44 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            \e[33mcase\e[0m (digit1, digit2) => digit1 * digit2\n\e[31m\e[31m\
    \   |\e[0m                            "
  stdout: ''
  timestamp: 1659799291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits2 = unitDigits2 % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfzmbt4bg.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits2\
    \ = unitDigits2 * 10\n        val unitDigits = unitDigits + unitDigits2\n    \
    \    unitDigits\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf936ptlw.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf936ptlw.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 * \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf936ptlw.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1659799292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + unitDigits2\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + unit\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcoll70ex.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcoll70ex.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcoll70ex.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcoll70ex.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcoll70ex.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   "
  stdout: ''
  timestamp: 1659799298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        var product = unitDigits *\
    \ unitDigits2\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpisrnftc_.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpisrnftc_.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpisrnftc_.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpisrnftc_.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpisrnftc_.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpisrnftc_.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1659799297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigit\
    \ = a % 10\n        val unitDigits = b / 10\n        val unitDigit = b % 10\n\
    \        val unitDigits = unitDigits * unitDigit\n        val unitDigit = unitDigit\
    \ * unitDigit\n        val unitDigits = unitDigits + unitDigit\n        val unitDigit\
    \ = unitDigit + unitDigit\n        unitDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nftvu3z.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5nftvu3z.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nftvu3z.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigit\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nftvu3z.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigit\e[0m = unitDigit * unitDigit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigit is already defined as \e[33mvalue\e[0m \e[35munitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5nftvu3z.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigit\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35mun"
  stdout: ''
  timestamp: 1659799293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits_1.zip(unitDigits_2).map { case (digit1, digit2) => digit1 * digit2\
    \ }\n        val product = unitDigits_2.foldLeft(1L) { (product, digit) => product\
    \ * digit }\n        product\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0zxl5czg.scala:19:44 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map\
    \ { \e[33mcase\e[0m (digit1, digit2) => digit1 * digit2 }\n\e[31m\e[31m   |\e\
    [0m                                            ^\e[0m\n\e[31m   |\e[0m       \
    \                          Recursive \e[33mvalue\e[0m \e[35munitDigits_2\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmp0zxl5czg.scala:19:96\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map { \e[33mcase\e[0m (digit1,\
    \ digit2) => digit1 * digit2 }\n\e[31m\e[31m   |\e[0m                        \
    \                                                                 ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mAmbiguous overload. The overloaded alternatives of \e[33mmethod\e\
    [0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m\
    \ (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x:\
    \ Long): Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m   |\e[0m (x: Char): Int\n\
    \e[31m   |\e[0m (x: Short): Int\n\e[31m   |\e[0m (x: Byte): Int\n\e[31m   |\e\
    [0mall match arguments ((digit2 : Nothing))\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E051] Reference Error: /tmp/tmp0zxl5czg.scala:20:78 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mproduct\e[0m = unitDigits_2.foldLeft(\e\
    [31m1L\e[0m) { (\e[36mproduct\e[0m, \e[36mdigit\e[0m) => product * digit }\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\
    \e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e\
    [0m (x: Byte): Long\n\e[31m   |\e[0mall match arguments ((digit : Nothing))\n\e\
    [31m"
  stdout: ''
  timestamp: 1659799295
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n      \
    \  val unitDigits4 = (unitDigits * unitDigits3) / 10\n        val unitDigits5\
    \ = (unitDigits * unitDigits3 * unitDigits2) / 10\n        val unitDigits6 = (unitDigits\
    \ * unitDigits3 * unitDigits2 * unitDigits3) / 10\n        val unitDigits7 = (unitDigits\
    \ * unitDigits3 * unitDigits2 * unitDigits3 * unitDigits2) / 10\n        val unitDigits8\
    \ = (unitDigits * unitDigits3 * unitDigits2 * unitDigits3 * unitDigits2 * unitDigits3)\
    \ / 10\n        val unitDigits9 = (unitDigits * unitDigits3 * unitDigits2 * unitDigits3\
    \ * unitDigits2 * unitDigits3 * unitDigits2) / 10\n        val unitDigits10 =\
    \ (unitDigits * unitDigits3 * unitDigits2 * unitDigits3 * unitDigits2 * unitDigits3\
    \ * unitDigits2 * unitDigits3) / 10\n        unitDigits10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp79pej3_b.scala:30)\n\tat Problem.main(tmp79pej3_b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n      \
    \  val unitDigits4 = unitDigits3 / 10\n        val unitDigits5 = unitDigits4 /\
    \ 10\n        val unitDigits6 = unitDigits5 / 10\n        val unitDigits7 = unitDigits6\
    \ / 10\n        val unitDigits8 = unitDigits7 / 10\n        val unitDigits9 =\
    \ unitDigits8 / 10\n        val unitDigits10 = unitDigits9 / 10\n        unitDigits10\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp46insu0l.scala:30)\n\tat Problem.main(tmp46insu0l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n\
    \        val unitDigits3 = (unitDigits * unitDigits2) / 10\n        val remainder3\
    \ = (unitDigits * unitDigits2) % 10\n        val unitDigits4 = (unitDigits * unitDigits3)\
    \ / 10\n        val remainder4 = (unitDigits * unitDigits3) % 10\n        val\
    \ unitDigits5 = (unitDigits * unitDigits3 * unitDigits4) / 10\n        val remainder5\
    \ = (unitDigits * unitDigits3 * unitDigits4) % 10\n        val unitDigits6 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5) / 10\n        val remainder6 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5) % 10\n        val unitDigits7 = (unitDigits\
    \ * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6) / 10\n        val remainder7\
    \ = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6) % 10\n\
    \        val unitDigits8 = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5\
    \ * unitDigits6 * unitDigits7) / 10\n        val remainder8 = (unitDigits * unitDigits3\
    \ * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7) % 10\n        val unitDigits9\
    \ = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7\
    \ * unitDigits8) / 10\n        val remainder9 = (unitDigits * unitDigits3 * unitDigits4\
    \ * unitDigits5 * unitDigits6 * unitDigits7 * unitDigits8) % 10\n        val unitDigits10\
    \ = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7\
    \ * unitDigits8 * unitDigits9) / 10\n        val remainder10 = (unitDigits * unitDigits3\
    \ * unitDigits4 * unitDigits5 * unitDigits6 * unitDigits7 * unitDigits8 * unitDigits9)\
    \ % 10\n        val unitDigits11 = (unitDigits * unitDigits3 * unitDigits4 * unitDigits5\
    \ * unitDigits6 * unitDigits\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmparo0qo3f.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmparo0qo3f.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        product\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7cupah2a.scala:23)\n\tat Problem.main(tmp7cupah2a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits_1.zip(unitDigits_2).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_3).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_4 = unitDigits_3.zip(unitDigits_4).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_5 = unitDigits_4.zip(unitDigits_5).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_6 = unitDigits_5.zip(unitDigits_6).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_7 = unitDigits_6.zip(unitDigits_7).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_8 = unitDigits_7.zip(unitDigits_8).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_9 = unitDigits_8.zip(unitDigits_9).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_10 = unitDigits_9.zip(unitDigits_10).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_11 =\
    \ unitDigits_10.zip(unitDigits_11).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_12 = unitDigits_11.zip(unitDigits_12).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_13 = unitDigits_12.zip(unitDigits_13).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_14 =\
    \ unitDigits_13.zip(unitDigits_14).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_15 = unitDigits_14.zip(unitDigits_15).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_16 = unitDigits_15.zip(unitDigits_16\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjsgq6l_p.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjsgq6l_p.scala:19:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map {\n\e[31m\e[31m\
    \   |\e[0m                                            ^\e[0m\n\e[31m   |\e[0m\
    \                                 Recursive \e[33mvalue\e[0m \e[35munitDigits_2\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpjsgq6l_p.scala:20:44\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e\
    [0m (digit1, digit2) => digit1 * digit2\n\e[31m\e[31m   |\e[0m               \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m\
    \   |\e[0m (x: Char): Int\n\e[31m   |\e[0m (x: Short): Int\n\e[31m   |\e[0m (x:\
    \ Byte): Int\n\e[31m   |\e[0mall match arguments ((digit2 : Nothing))\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjsgq6l_p.scala:22:44 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits_3\e[0m = unitDigits_2.zip(unitDigits_3).map\
    \ {\n\e[31m\e[31m   |\e[0m                                            ^\e[0m\n\
    \e[31m   |\e[0m                                 Recursive \e[33mvalue\e[0m \e\
    [35munitDigits_3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpjsgq6l_p.scala:23:44 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            \e[33mcase\e[0m (digit1, digit2) => digit1 * digit2\n\e[31m\e[31m\
    \   |\e[0m                            "
  stdout: ''
  timestamp: 1659799291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits2\
    \ = unitDigits2 * 10\n        val unitDigits = unitDigits + unitDigits2\n    \
    \    unitDigits\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf936ptlw.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf936ptlw.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 * \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf936ptlw.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1659799292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits_1.zip(unitDigits_2).map { case (a, b) => a * b}\n        val unitDigits_3\
    \ = unitDigits_2.zip(unitDigits_3).map { case (a, b) => a * b}\n        val unitDigits_4\
    \ = unitDigits_3.zip(unitDigits_4).map { case (a, b) => a * b}\n        unitDigits_4.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbldrgq_f.scala:19:44 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map\
    \ { \e[33mcase\e[0m (a, b) => a * b}\n\e[31m\e[31m   |\e[0m                  \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \      Recursive \e[33mvalue\e[0m \e[35munitDigits_2\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E051] Reference Error: /tmp/tmpbldrgq_f.scala:19:81 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits_2\e[0m = unitDigits_1.zip(unitDigits_2).map\
    \ { \e[33mcase\e[0m (a, b) => a * b}\n\e[31m\e[31m   |\e[0m                  \
    \                                                             ^^^\e[0m\n\e[31m\
    \   |\e[0mAmbiguous overload. The overloaded alternatives of \e[33mmethod\e[0m\
    \ \e[35m*\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m\
    \ (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x:\
    \ Long): Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m   |\e[0m (x: Char): Int\n\
    \e[31m   |\e[0m (x: Short): Int\n\e[31m   |\e[0m (x: Byte): Int\n\e[31m   |\e\
    [0mall match arguments ((b : Nothing))\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpbldrgq_f.scala:20:44 ---------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits_3\e[0m = unitDigits_2.zip(unitDigits_3).map\
    \ { \e[33mcase\e[0m (a, b) => a * b}\n\e[31m\e[31m   |\e[0m                  \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \      Recursive \e[33mvalue\e[0m \e[35munitDigits_3\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbldrgq_f.scala:20:81 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits_3\e[0m = unitDigits_2.zip(unitDigits_3).map\
    \ { \e[33mcase\e[0m (a, b) => a * b}\n\e[31m\e[31m   |\e[0m                  \
    \     "
  stdout: ''
  timestamp: 1659799298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqor8jcud.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits % 10\n        unitDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprkbtv3mg.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprkbtv3mg.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprkbtv3mg.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1659799295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits2 = unitDigits2 % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfzmbt4bg.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        unitDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdp8zyclo.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdp8zyclo.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits2 = unitDigits2 % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfzmbt4bg.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n      \
    \  val unitDigits4 = unitDigits3 / 10\n        val unitDigits5 = unitDigits4 /\
    \ 10\n        val unitDigits6 = unitDigits5 / 10\n        val unitDigits7 = unitDigits6\
    \ / 10\n        val unitDigits8 = unitDigits7 / 10\n        val unitDigits9 =\
    \ unitDigits8 / 10\n        val unitDigits10 = unitDigits9 / 10\n        val unitDigits11\
    \ = unitDigits10 / 10\n        val unitDigits12 = unitDigits11 / 10\n        val\
    \ unitDigits13 = unitDigits12 / 10\n        val unitDigits14 = unitDigits13 /\
    \ 10\n        val unitDigits15 = unitDigits14 / 10\n        val unitDigits16 =\
    \ unitDigits15 / 10\n        val unitDigits17 = unitDigits16 / 10\n        val\
    \ unitDigits18 = unitDigits17 / 10\n        val unitDigits19 = unitDigits18 /\
    \ 10\n        val unitDigits20 = unitDigits19 / 10\n        val unitDigits21 =\
    \ unitDigits20 / 10\n        val unitDigits22 = unitDigits21 / 10\n        val\
    \ unitDigits23 = unitDigits22 / 10\n        val unitDigits24 = unitDigits23 /\
    \ 10\n        val unitDigits25 = unitDigits24 / 10\n        val unitDigits26 =\
    \ unitDigits25 / 10\n        val unitDigits27 = unitDigits26 / 10\n        val\
    \ unitDigits28 = unitDigits27 / 10\n        val unitDigits29 = unitDigits28 /\
    \ 10\n        val unitDigits30 = unitDigits29 / 10\n        val unitDigits31 =\
    \ unitDigits30 / 10\n        val unitDigits32 = unitDigits31 / 10\n        val\
    \ unitDigits33 = unitDigits32 / 10\n        val unitDigits34 = unitDigits33 /\
    \ 10\n        val unitDigits35 = unitDigits34 / 10\n        val unitDigits36 =\
    \ unitDigits35 / 10\n        val unitDigits37 = unitDigits36 / 10\n        val\
    \ unitDigits38 = unitDigits37 / \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpw6uieagr.scala:54:41 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36munitDigits38\e[0m = unitDigits37\
    \ / \n\e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw6uieagr.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits2 = unitDigits2 % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        unitDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbr5a119e.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbr5a119e.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbr5a119e.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbr5a119e.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbr5a119e.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        val unitDigits = product.toString.toInt\n        val unitDigits2\
    \ = unitDigits.toString.toInt\n        val product = unitDigits * unitDigits2\n\
    \        val unitDigits = product.toString.toInt\n        val unitDigits2 = unitDigits.toString.toInt\n\
    \        val product = unitDigits * unitDigits2\n        val unitDigits = product.toString.toInt\n\
    \        val unitDigits2 = unitDigits.toString.toInt\n        val product = unitDigits\
    \ * unitDigits2\n        val unitDigits = product.toString.toInt\n        val\
    \ unitDigits2 = unitDigits.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        val unitDigits = product.toString.toInt\n        val unitDigits2\
    \ = unitDigits.toString.toInt\n        val product = unitDigits * unitDigits2\n\
    \        val unitDigits = product.toString.toInt\n        val unitDigits2 = unitDigits.toString.toInt\n\
    \        val product = unitDigits * unitDigits2\n        val unitDigits = product.toString.toInt\n\
    \        val unitDigits2 = unitDigits.toString.toInt\n        val product = unitDigits\
    \ * unitDigits2\n        val unitDigits = product.toString.toInt\n        val\
    \ unitDigits2 = unitDigits.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        val unitDigits = product.toString.toInt\n        val unitDigits2\
    \ = unitDigits.toString.toInt\n        val product = unitDigits * unitDigits2\n\
    \        val unitDigits = product.toString.toInt\n        val unitDigits2 = unitDigits.toString.toInt\n\
    \        val product = unitDigits * unitDigits2\n        val unitDigits = product.toString.toInt\n\
    \        val unitDigits2 = unitDigits.toString.toInt\n        val product = unitDigits\
    \ * unitDigits2\n        val unitDigits = product.toString.toInt\n        val\
    \ unitDigits2 = unitDigits.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        val unitDigits = product.toString.toInt\n        val unitDigits2\
    \ = unitDigits.toString.toInt\n        val product = unitDigits * unitDigits2\n\
    \        val unitDigits = product.toString.toInt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpql_a17gq.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = product.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpql_a17gq.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpql_a17gq.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mproduct\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mproduct is already defined as \e[33mvalue\e[0m \e[35mproduct\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpql_a17gq.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = product.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpql_a17gq.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpswq_9g6a.scala:60:37 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswq_9g6a.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswq_9g6a.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswq_9g6a.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswq_9g6a.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already de"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigit\
    \ = a % 10\n        val unitDigits = b / 10\n        val unitDigit = b % 10\n\
    \        val unitDigits = unitDigits * unitDigit\n        unitDigits\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5k7qjt77.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5k7qjt77.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5k7qjt77.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigit\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1659799293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits\
    \ = b % 10\n        val unitDigits = unitDigits * unitDigits\n        val unitDigits\
    \ = unitDigits * unitDigits\n        val unitDigits = unitDigits * unitDigits\n\
    \        val unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits\
    \ * unitDigits\n        val unitDigits = unitDigits * unitDigits\n        val\
    \ unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits *\
    \ unitDigits\n        val unitDigits = unitDigits * unitDigits\n        val unitDigits\
    \ = unitDigits * unitDigits\n        val unitDigits = unitDigits * unitDigits\n\
    \        val unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits\
    \ * unitDigits\n        val unitDigits = unitDigits * unitDigits\n        val\
    \ unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits *\
    \ unitDigits\n        val unitDigits = unitDigits * unitDigits\n        val unitDigits\
    \ = unitDigits * unitDigits\n        val unitDigits = unitDigits * unitDigits\n\
    \        val unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits\
    \ * unitDigits\n        val unitDigits = unitDigits * unitDigits\n        val\
    \ unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits *\
    \ unitDigits\n        val unitDigits = unitDigits * unitDigits\n        val unitDigits\
    \ = unitDigits * unitDigits\n        val unitDigits = unitDigits * unitDigits\n\
    \        val unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits\
    \ * unitDigits\n        val unitDigits = unitDigits * unitDigits\n        val\
    \ unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits *\
    \ unitDigits\n        val unitDigits = unitDigits * unitDigits\n        val unitDigits\
    \ = unitDigits * unitDigits\n        val unitDigits = unitDigits * unitDigits\n\
    \        val unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits\
    \ * unitDigits\n        val unitDigits = unitDigits * unitDigits\n\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoumiwn6k.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoumiwn6k.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoumiwn6k.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoumiwn6k.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoumiwn6k.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is "
  stdout: ''
  timestamp: 1659799298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        unitDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8qbxtm44.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8qbxtm44.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits_1\
    \ = a % 10\n        val unitDigits_2 = b / 10\n        val unitDigits_3 = b %\
    \ 10\n        val unitDigits_4 = unitDigits_1 * unitDigits_2\n        val unitDigits_5\
    \ = unitDigits_3 * unitDigits_4\n        unitDigits_5 * 10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aonungw.scala:26)\n\tat Problem.main(tmp1aonungw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigit\
    \ = a % 10\n        val unitDigits = b / 10\n        val unitDigits = b % 10\n\
    \        val unitDigit = b % 10\n        val unitDigits = unitDigits * unitDigit\n\
    \        val unitDigit = unitDigit * unitDigit\n        val unitDigit = unitDigit\
    \ * unitDigit\n        val unitDigit = unitDigit * unitDigit\n        val unitDigit\
    \ = unitDigit * unitDigit\n        val unitDigit = unitDigit * unitDigit\n   \
    \     val unitDigit = unitDigit * unitDigit\n        val unitDigit = unitDigit\
    \ * unitDigit\n        val unitDigit = unitDigit * unitDigit\n        val unitDigit\
    \ = unitDigit * unitDigit\n        val unitDigit = unitDigit * unitDigit\n   \
    \     val unitDigit = unitDigit * unitDigit\n        val unitDigit = unitDigit\
    \ * unitDigit\n        val unitDigit = unitDigit * unitDigit\n        val unitDigit\
    \ = unitDigit * unitDigit\n        val unitDigit = unitDigit * unitDigit\n   \
    \     val unitDigit = unitDigit * unitDigit\n        val unitDigit = unitDigit\
    \ * unitDigit\n        val unitDigit = unitDigit * unitDigit\n        val unitDigit\
    \ = unitDigit * unitDigit\n        val unitDigit = unitDigit * unitDigit\n   \
    \     val unitDigit = unitDigit * unitDigit\n        val unitDigit = unitDigit\
    \ * unitDigit\n        val unitDigit = unitDigit * unitDigit\n        val unitDigit\
    \ = unitDigit * unitDigit\n        val unitDigit = unitDigit * unitDigit\n   \
    \     val unitDigit = unitDigit * unitDigit\n        val unitDigit = unitDigit\
    \ * unitDigit\n        val unitDigit = unitDigit * unitDigit\n        val unitDigit\
    \ = unitDigit * unitDigit\n        val unitDigit = unitDigit * unitDigit\n   \
    \     val unitDigit = unitDigit * unitDigit\n        val unitDigit = unitDigit\
    \ * unitDigit\n        val unitDigit = unitDigit * unitDigit\n        val unitDigit\
    \ = unitDigit * unitDigit\n        val unitDigit = unitDigit * unitDigit\n   \
    \     val unitDigit = unitDigit * unitDigit\n        val unitDigit = unitDigit\
    \ * unitDigit\n        val unitDigit = unitDigit * unitDigit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1b3i59p7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1b3i59p7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1b3i59p7.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigit is already defined as \e[33mvalue\e[0m \e[35munitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1b3i59p7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigit\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1b3i59p7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = unitDigit * unitDigit\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit is already defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\
    \e[31m   |\e"
  stdout: ''
  timestamp: 1659799298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigit\
    \ = a % 10\n        val unitDigits = b / 10\n        val unitDigit = b % 10\n\
    \        val unitDigits = unitDigits * unitDigit\n        val unitDigit = unitDigit\
    \ * unitDigit\n        unitDigits\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpza8rnzzh.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpza8rnzzh.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = b % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpza8rnzzh.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigit\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpza8rnzzh.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigit\e[0m = unitDigit * unitDigit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigit is already defined as \e[33mvalue\e[0m \e[35munitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659799293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 100\n        val\
    \ unitDigit = a % 100\n        val unitDigits = b / 100\n        val unitDigit\
    \ = b % 100\n        val unitDigits = unitDigits * unitDigit\n        val unitDigit\
    \ = unitDigit * unitDigit\n        val unitDigit = unitDigit / 100\n        val\
    \ unitDigit = unitDigit % 100\n        unitDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7uksvkx6.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = b / \e\
    [31m100\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7uksvkx6.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = b % \e[31m100\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7uksvkx6.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigit\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is\
    \ already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7uksvkx6.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigit\e[0m = unitDigit * unitDigit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigit is already defined as \e[33mvalue\e[0m \e[35munitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7uksvkx6.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigit\e[0m = unitDigit / \e[31m100\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit is already defined as \e[33mvalue\e[0m \e[35munitDi"
  stdout: ''
  timestamp: 1659799294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44wq65qp.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp44wq65qp.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a / \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44wq65qp.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = a % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp44wq65qp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a / \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44wq65qp.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = a % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloade"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toLong\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toLong\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toLong\n     \
    \   val unitDigits = unitDigits.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toLong\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toLong\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toLong\n     \
    \   val unitDigits = unitDigits.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toLong\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toLong\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toLong\n     \
    \   val unitDigits = unitDigits.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0j3tcem7.scala:58:37 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0j3tcem7.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0j3tcem7.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0j3tcem7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0j3tcem7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined a"
  stdout: ''
  timestamp: 1659799298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44wq65qp.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp44wq65qp.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a / \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44wq65qp.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = a % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp44wq65qp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a / \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44wq65qp.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = a % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloade"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits_1\
    \ = a % 10\n        val unitDigits_2 = b / 10\n        val unitDigits_3 = b %\
    \ 10\n        val unitDigits_4 = unitDigits_1 * unitDigits_2\n        val unitDigits_5\
    \ = unitDigits_1 * unitDigits_3\n        val unitDigits_6 = unitDigits_2 * unitDigits_3\n\
    \        val unitDigits_7 = unitDigits_1 * unitDigits_4\n        val unitDigits_8\
    \ = unitDigits_2 * unitDigits_4\n        val unitDigits_9 = unitDigits_3 * unitDigits_4\n\
    \        val unitDigits_10 = unitDigits_1 * unitDigits_5\n        val unitDigits_11\
    \ = unitDigits_2 * unitDigits_5\n        val unitDigits_12 = unitDigits_3 * unitDigits_5\n\
    \        val unitDigits_13 = unitDigits_4 * unitDigits_5\n        val unitDigits_14\
    \ = unitDigits_1 * unitDigits_6\n        val unitDigits_15 = unitDigits_2 * unitDigits_6\n\
    \        val unitDigits_16 = unitDigits_3 * unitDigits_6\n        val unitDigits_17\
    \ = unitDigits_4 * unitDigits_6\n        val unitDigits_18 = unitDigits_5 * unitDigits_6\n\
    \        val unitDigits_19 = unitDigits_1 * unitDigits_7\n        val unitDigits_20\
    \ = unitDigits_2 * unitDigits_7\n        val unitDigits_21 = unitDigits_3 * unitDigits_7\n\
    \        val unitDigits_22 = unitDigits_4 * unitDigits_7\n        val unitDigits_23\
    \ = unitDigits_5 * unitDigits_7\n        val unitDigits_24 = unitDigits_6 * unitDigits_7\n\
    \        val unitDigits_25 = unitDigits_1 * unitDigits_8\n        val unitDigits_26\
    \ = unitDigits_2 * unitDigits_8\n        val unitDigits_27 = unitDigits_3 * unitDigits_8\n\
    \        val unitDigits_28 = unitDigits_4 * unitDigits_8\n        val unitDigits_29\
    \ = unitDigits_5 * unitDigits_8\n        val unitDigits_30 = unitDigits_6 * unitDigits_8\n\
    \        val unitDigits_31 = unitDigits_7 * unitDigits_8\n        val unitDigits_32\
    \ = unitDigits_1 * unitDigits_9\n        val unitDigits_33 = unitDigits_2 * unitDigits_9\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3lfdrooj.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        var product = unitDigits *\
    \ unitDigits2\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpisrnftc_.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpisrnftc_.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpisrnftc_.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpisrnftc_.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpisrnftc_.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpisrnftc_.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1659799297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        var product = 0\n        val\
    \ unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val unitDigits = a.toString.toInt\n        val unitDigits2 = b.toString.toInt\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpjna5dc1s.scala:64:11 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpjna5dc1s.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjna5dc1s.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjna5dc1s.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = a.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjna5dc1s.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = b.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e["
  stdout: ''
  timestamp: 1659799300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits *\
    \ 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpljmjnlx7.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpljmjnlx7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpljmjnlx7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits_1\
    \ = a % 10\n        val unitDigits_2 = b / 10\n        val unitDigits_3 = b %\
    \ 10\n        val unitDigits_4 = unitDigits_1 * unitDigits_2\n        val unitDigits_5\
    \ = unitDigits_3 * unitDigits_4\n        unitDigits_5 * 10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aonungw.scala:26)\n\tat Problem.main(tmp1aonungw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44wq65qp.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp44wq65qp.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a / \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44wq65qp.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = a % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp44wq65qp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a / \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44wq65qp.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = a % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloade"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits2 = unitDigits2 % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigit\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmtzgydwp.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmtzgydwp.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmtzgydwp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmtzgydwp.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmtzgydwp.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits2 = unitDigits2 % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfzmbt4bg.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzmbt4bg.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        product\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7cupah2a.scala:23)\n\tat Problem.main(tmp7cupah2a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.zip(unitDigits2).map(x => x._1 * x._2)\n        val unitDigits\
    \ = unitDigits.toList\n        val unitDigits = unitDigits.map(x => if (x == 0)\
    \ 0 else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n\
    \        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val\
    \ unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits\
    \ = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x\
    \ => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x\
    \ == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0\
    \ else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n\
    \        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val\
    \ unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits\
    \ = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x\
    \ => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x\
    \ == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0\
    \ else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n\
    \        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val\
    \ unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits\
    \ = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x\
    \ => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x\
    \ == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0\
    \ else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n\
    \        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val\
    \ unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits\
    \ = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigit\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjfx5wyqc.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjfx5wyqc.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.zip(unitDigits2).map(\e[36mx\e[0m => x._1\
    \ * x._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjfx5wyqc.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjfx5wyqc.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjfx5wyqc.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[3"
  stdout: ''
  timestamp: 1659799298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unit\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt_z2uh4i.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt_z2uh4i.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt_z2uh4i.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt_z2uh4i.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpt_z2uh4i.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt_z2uh4i.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m2"
  stdout: ''
  timestamp: 1659799301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits_1 = b.toString.toInt\n        val unitDigits_2 = unitDigits\
    \ * unitDigits_1\n        val unitDigits_3 = unitDigits_2 * unitDigits_1\n   \
    \     val unitDigits_4 = unitDigits_3 * unitDigits_1\n        val unitDigits_5\
    \ = unitDigits_4 * unitDigits_1\n        val unitDigits_6 = unitDigits_5 * unitDigits_1\n\
    \        val unitDigits_7 = unitDigits_6 * unitDigits_1\n        val unitDigits_8\
    \ = unitDigits_7 * unitDigits_1\n        val unitDigits_9 = unitDigits_8 * unitDigits_1\n\
    \        val unitDigits_10 = unitDigits_9 * unitDigits_1\n        val unitDigits_11\
    \ = unitDigits_10 * unitDigits_1\n        val unitDigits_12 = unitDigits_11 *\
    \ unitDigits_1\n        val unitDigits_13 = unitDigits_12 * unitDigits_1\n   \
    \     val unitDigits_14 = unitDigits_13 * unitDigits_1\n        val unitDigits_15\
    \ = unitDigits_14 * unitDigits_1\n        val unitDigits_16 = unitDigits_15 *\
    \ unitDigits_1\n        val unitDigits_17 = unitDigits_16 * unitDigits_1\n   \
    \     val unitDigits_18 = unitDigits_17 * unitDigits_1\n        val unitDigits_19\
    \ = unitDigits_18 * unitDigits_1\n        val unitDigits_20 = unitDigits_19 *\
    \ unitDigits_1\n        val unitDigits_21 = unitDigits_20 * unitDigits_1\n   \
    \     val unitDigits_22 = unitDigits_21 * unitDigits_1\n        val unitDigits_23\
    \ = unitDigits_22 * unitDigits_1\n        val unitDigits_24 = unitDigits_23 *\
    \ unitDigits_1\n        val unitDigits_25 = unitDigits_24 * unitDigits_1\n   \
    \     val unitDigits_26 = unitDigits_25 * unitDigits_1\n        val unitDigits_27\
    \ = unitDigits_26 * unitDigits_1\n        val unitDigits_28 = unitDigits_27 *\
    \ unitDigits_1\n        val unitDigits_29 = unitDigits_28 * unitDigits_1\n   \
    \     val unitDigits_30 = unitDigits_29 * unitDigits_1\n        val unitDigits_31\
    \ = unitDigits_30 * unitDigit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu0i1uaeg.scala:48:44 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36munitDigits_31\e[0m = unitDigits_30\
    \ * unitDigit\n\e[31m\e[31m   |\e[0m                                         \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \  Not found: unitDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu0i1uaeg.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        val unitDigits = product.toString.toInt\n        val unitDigits2\
    \ = unitDigits.toString.toInt\n        val product = unitDigits * unitDigits2\n\
    \        val unitDigits = product.toString.toInt\n        val unitDigits2 = unitDigits.toString.toInt\n\
    \        val product = unitDigits * unitDigits2\n        val unitDigits = product.toString.toInt\n\
    \        val unitDigits2 = unitDigits.toString.toInt\n        val product = unitDigits\
    \ * unitDigits2\n        val unitDigits = product.toString.toInt\n        val\
    \ unitDigits2 = unitDigits.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        val unitDigits = product.toString.toInt\n        val unitDigits2\
    \ = unitDigits.toString.toInt\n        val product = unitDigits * unitDigits2\n\
    \        val unitDigits = product.toString.toInt\n        val unitDigits2 = unitDigits.toString.toInt\n\
    \        val product = unitDigits * unitDigits2\n        val unitDigits = product.toString.toInt\n\
    \        val unitDigits2 = unitDigits.toString.toInt\n        val product = unitDigits\
    \ * unitDigits2\n        val unitDigits = product.toString.toInt\n        val\
    \ unitDigits2 = unitDigits.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        val unitDigits = product.toString.toInt\n        val unitDigits2\
    \ = unitDigits.toString.toInt\n        val product = unitDigits * unitDigits2\n\
    \        val unitDigits = product.toString.toInt\n        val unitDigits2 = unitDigits.toString.toInt\n\
    \        val product = unitDigits * unitDigits2\n        val unitDigits = product.toString.toInt\n\
    \        val unitDigits2 = unitDigits.toString.toInt\n        val product = unitDigits\
    \ * unitDigits2\n        val unitDigits = product.toString.toInt\n        val\
    \ unitDigits2 = unitDigits.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        val unitDigits = product.toString.toInt\n        val unitDigits2\
    \ = unitDigits.toString.toInt\n        val product = unitDigits * unitDigits2\n\
    \        val unitDigits = product.toString.toInt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpql_a17gq.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = product.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpql_a17gq.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpql_a17gq.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mproduct\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mproduct is already defined as \e[33mvalue\e[0m \e[35mproduct\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpql_a17gq.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = product.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpql_a17gq.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits2 = unitDigits2 % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n\
    \        val unitDigits = unitDigits + unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + unitDigit\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmtzgydwp.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmtzgydwp.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmtzgydwp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmtzgydwp.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmtzgydwp.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigit"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits % 10\n        unitDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprkbtv3mg.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprkbtv3mg.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprkbtv3mg.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1659799295
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        product\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7cupah2a.scala:23)\n\tat Problem.main(tmp7cupah2a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val remainder = remainder\
    \ * remainder2\n        unitDigits + remainder\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps_59kq_e.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps_59kq_e.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = remainder * remainder2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mremainder is already defined as \e[33mvalue\e[0m \e[35mremainder\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799299
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        unitDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8qbxtm44.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8qbxtm44.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659799295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits_1.zip(unitDigits).map(x => x._1 * x._2)\n        val unitDigits_3\
    \ = unitDigits_2.zip(unitDigits).map(x => x._1 * x._2)\n        val unitDigits_4\
    \ = unitDigits_3.zip(unitDigits).map(x => x._1 * x._2)\n        unitDigits_4.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmqyoj5d8.scala:25)\n\tat Problem.main(tmpmqyoj5d8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * 10\n   \
    \     val unitDigits = unitDigits.toString.toInt\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / 10\n    \
    \    val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits / \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpplfc71pq.scala:60:37 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpplfc71pq.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpplfc71pq.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpplfc71pq.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpplfc71pq.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e["
  stdout: ''
  timestamp: 1659799301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits_1\
    \ = a % 10\n        val unitDigits_2 = b / 10\n        val unitDigits_3 = b %\
    \ 10\n        val unitDigits_4 = unitDigits_1 * unitDigits_2\n        val unitDigits_5\
    \ = unitDigits_3 * unitDigits_4\n        unitDigits_5\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxkz65iwo.scala:26)\n\tat Problem.main(tmpxkz65iwo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb97vno7t.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb97vno7t.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits.toString.toInt\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * 10\n    \
    \    val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ / \n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpswq_9g6a.scala:60:37 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ / \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswq_9g6a.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswq_9g6a.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswq_9g6a.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpswq_9g6a.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already de"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        product\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7cupah2a.scala:23)\n\tat Problem.main(tmp7cupah2a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n        val\
    \ unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits / 10\n        val unit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphety9hd4.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphety9hd4.scala:2"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ % 10\n        val unitDigits2 = unitDigits2 % 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unit\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjf2fkuf3.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjf2fkuf3.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2 % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjf2fkuf3.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits + unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjf2fkuf3.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits / \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjf2fkuf3.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        product\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7cupah2a.scala:23)\n\tat Problem.main(tmp7cupah2a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44wq65qp.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp44wq65qp.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a / \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44wq65qp.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = a % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp44wq65qp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a / \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44wq65qp.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = a % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloade"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits.zip(unitDigits_1).map {\n            case (digit1, digit2) => digit1\
    \ * digit2\n        }\n        val unitDigits_3 = unitDigits_2.map(_.toLong)\n\
    \        val unitDigits_4 = unitDigits_3.map(_.toInt)\n        val unitDigits_5\
    \ = unitDigits_4.map(_.toLong)\n        val unitDigits_6 = unitDigits_5.map(_.toInt)\n\
    \        unitDigits_6.sum\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec9_93b2.scala:29)\n\tat Problem.main(tmpec9_93b2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits.toLong\n        val unitDigits\
    \ = unitDigits.toString.toInt\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits.toString.toInt\n        val unitDigits =\
    \ unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits.toString.toInt\n\
    \        val unitDigits = unitDigits * unitDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqor8jcud.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits\
    \ * unitDigits2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqor8jcud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e["
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        var product = unitDigits *\
    \ unitDigits2\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpisrnftc_.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpisrnftc_.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpisrnftc_.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpisrnftc_.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = a.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpisrnftc_.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = b.toString.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits2\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpisrnftc_.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1659799297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits_1 = b.toString.toInt\n        val unitDigits_2 = unitDigits\
    \ * unitDigits_1\n        val unitDigits_3 = unitDigits_2 * unitDigits_1\n   \
    \     val unitDigits_4 = unitDigits_3 * unitDigits_1\n        val unitDigits_5\
    \ = unitDigits_4 * unitDigits_1\n        val unitDigits_6 = unitDigits_5 * unitDigits_1\n\
    \        val unitDigits_7 = unitDigits_6 * unitDigits_1\n        val unitDigits_8\
    \ = unitDigits_7 * unitDigits_1\n        val unitDigits_9 = unitDigits_8 * unitDigits_1\n\
    \        val unitDigits_10 = unitDigits_9 * unitDigits_1\n        val unitDigits_11\
    \ = unitDigits_10 * unitDigits_1\n        val unitDigits_12 = unitDigits_11 *\
    \ unitDigits_1\n        val unitDigits_13 = unitDigits_12 * unitDigits_1\n   \
    \     val unitDigits_14 = unitDigits_13 * unitDigits_1\n        val unitDigits_15\
    \ = unitDigits_14 * unitDigits_1\n        val unitDigits_16 = unitDigits_15 *\
    \ unitDigits_1\n        val unitDigits_17 = unitDigits_16 * unitDigits_1\n   \
    \     val unitDigits_18 = unitDigits_17 * unitDigits_1\n        val unitDigits_19\
    \ = unitDigits_18 * unitDigits_1\n        val unitDigits_20 = unitDigits_19 *\
    \ unitDigits_1\n        val unitDigits_21 = unitDigits_20 * unitDigits_1\n   \
    \     val unitDigits_22 = unitDigits_21 * unitDigits_1\n        val unitDigits_23\
    \ = unitDigits_22 * unitDigits_1\n        val unitDigits_24 = unitDigits_23 *\
    \ unitDigits_1\n        val unitDigits_25 = unitDigits_24 * unitDigits_1\n   \
    \     val unitDigits_26 = unitDigits_25 * unitDigits_1\n        val unitDigits_27\
    \ = unitDigits_26 * unitDigits_1\n        val unitDigits_28 = unitDigits_27 *\
    \ unitDigits_1\n        val unitDigits_29 = unitDigits_28 * unitDigits_1\n   \
    \     val unitDigits_30 = unitDigits_29 * unitDigits_1\n        val unitDigits_31\
    \ = unitDigits_30 * unitDigit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu0i1uaeg.scala:48:44 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36munitDigits_31\e[0m = unitDigits_30\
    \ * unitDigit\n\e[31m\e[31m   |\e[0m                                         \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \  Not found: unitDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu0i1uaeg.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6qkgnc2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * unitDigits2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0munitDigits is already\
    \ defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd6qkgnc2.scala:23:12\
    \ -----------------"
  stdout: ''
  timestamp: 1659799286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n      \
    \  val unitDigits4 = (unitDigits * unitDigits3) / 10\n        val unitDigits5\
    \ = (unitDigits * unitDigits4) / 10\n        val unitDigits6 = (unitDigits * unitDigits5)\
    \ / 10\n        val unitDigits7 = (unitDigits * unitDigits6) / 10\n        val\
    \ unitDigits8 = (unitDigits * unitDigits7) / 10\n        val unitDigits9 = (unitDigits\
    \ * unitDigits8) / 10\n        val unitDigits10 = (unitDigits * unitDigits9) /\
    \ 10\n        val unitDigits11 = (unitDigits * unitDigits10) / 10\n        val\
    \ unitDigits12 = (unitDigits * unitDigits11) / 10\n        val unitDigits13 =\
    \ (unitDigits * unitDigits12) / 10\n        val unitDigits14 = (unitDigits * unitDigits13)\
    \ / 10\n        val unitDigits15 = (unitDigits * unitDigits14) / 10\n        val\
    \ unitDigits16 = (unitDigits * unitDigits15) / 10\n        val unitDigits17 =\
    \ (unitDigits * unitDigits16) / 10\n        val unitDigits18 = (unitDigits * unitDigits17)\
    \ / 10\n        val unitDigits19 = (unitDigits * unitDigits18) / 10\n        val\
    \ unitDigits20 = (unitDigits * unitDigits19) / 10\n        val unitDigits21 =\
    \ (unitDigits * unitDigits20) / 10\n        val unitDigits22 = (unitDigits * unitDigits21)\
    \ / 10\n        val unitDigits23 = (unitDigits * unitDigits22) / 10\n        val\
    \ unitDigits24 = (unitDigits * unitDigits23) / 10\n        val unitDigits25 =\
    \ (unitDigits * unitDigits24) / 10\n        val unitDigits26 = (unitDigits * unitDigits25)\
    \ / 10\n        val unitDigits27 = (unitDigits * unitDigits26) / 10\n        val\
    \ unitDigits28 = (unitDigits * unitDigits27) / 10\n        val unitDigits29 =\
    \ (unitDigits * unitDigits28) / 10\n        val unitDigits30 = (unitDigits * \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1ecpxtsl.scala:46:40 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36munitDigits30\e[0m = (unitDigits\
    \ * \n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ecpxtsl.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits = unitDigits.toInt\n        val unitDigits2\
    \ = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n        val\
    \ unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \        val unitDigits2 = unitDigits2.toInt\n        val unitDigits = unitDigits.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpapf4qqhn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpapf4qqhn.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36munitDigits2\e[0m = unitDigits2.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits2 is already defined as \e[33mvalue\e[0m \e[35munitDigits2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpapf4qqhn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0munitDigits is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659799287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a / 10\n        val unitDigits2\
    \ = b / 10\n        val unitDigits3 = (unitDigits * unitDigits2) / 10\n      \
    \  val unitDigits4 = unitDigits3 / 10\n        val unitDigits5 = unitDigits4 /\
    \ 10\n        val unitDigits6 = unitDigits5 / 10\n        val unitDigits7 = unitDigits6\
    \ / 10\n        val unitDigits8 = unitDigits7 / 10\n        val unitDigits9 =\
    \ unitDigits8 / 10\n        val unitDigits10 = unitDigits9 / 10\n        val unitDigits11\
    \ = unitDigits10 / 10\n        val unitDigits12 = unitDigits11 / 10\n        val\
    \ unitDigits13 = unitDigits12 / 10\n        val unitDigits14 = unitDigits13 /\
    \ 10\n        val unitDigits15 = unitDigits14 / 10\n        val unitDigits16 =\
    \ unitDigits15 / 10\n        val unitDigits17 = unitDigits16 / 10\n        val\
    \ unitDigits18 = unitDigits17 / 10\n        val unitDigits19 = unitDigits18 /\
    \ 10\n        val unitDigits20 = unitDigits19 / 10\n        val unitDigits21 =\
    \ unitDigits20 / 10\n        val unitDigits22 = unitDigits21 / 10\n        val\
    \ unitDigits23 = unitDigits22 / 10\n        val unitDigits24 = unitDigits23 /\
    \ 10\n        val unitDigits25 = unitDigits24 / 10\n        val unitDigits26 =\
    \ unitDigits25 / 10\n        val unitDigits27 = unitDigits26 / 10\n        val\
    \ unitDigits28 = unitDigits27 / 10\n        val unitDigits29 = unitDigits28 /\
    \ 10\n        val unitDigits30 = unitDigits29 / 10\n        val unitDigits31 =\
    \ unitDigits30 / 10\n        val unitDigits32 = unitDigits31 / 10\n        val\
    \ unitDigits33 = unitDigits32 / 10\n        val unitDigits34 = unitDigits33 /\
    \ 10\n        val unitDigits35 = unitDigits34 / 10\n        val unitDigits36 =\
    \ unitDigits35 / 10\n        val unitDigits37 = unitDigits36 / 10\n        val\
    \ unitDigits38 = unitDigits37\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkppri46f.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.zip(unitDigits2).map(x => (x._1 * x._2))\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.map(x\
    \ => (x / 10).toInt)\n        val unitDigits = unitDigits.map(x => (x % 10).toInt)\n\
    \        val unitDigits = unitDigits.map(x => (x / 10).toInt)\n        val unitDigits\
    \ = unitDigits.map(x => (x % 10).toInt)\n        val unitDigits = unitDigits.map(x\
    \ => (x / 10).toInt)\n        val unitDigits = unitDigits.map(x => (x % 10).toInt)\n\
    \        val unitDigits = unitDigits.map(x => (x / 10).toInt)\n        val unitDigits\
    \ = unitDigits.map(x => (x % 10).toInt)\n        val unitDigits = unitDigits.map(x\
    \ => (x / 10).toInt)\n        val unitDigits = unitDigits.map(x => (x % 10).toInt)\n\
    \        val unitDigits = unitDigits.map(x => (x / 10).toInt)\n        val unitDigits\
    \ = unitDigits.map(x => (x % 10).toInt)\n        val unitDigits = unitDigits.map(x\
    \ => (x / 10).toInt)\n        val unitDigits = unitDigits.map(x => (x % 10).toInt)\n\
    \        val unitDigits = unitDigits.map(x => (x / 10).toInt)\n        val unitDigits\
    \ = unitDigits.map(x => (x % 10).toInt)\n        val unitDigits = unitDigits.map(x\
    \ => (x / 10).toInt)\n        val unitDigits = unitDigits.map(x => (x % 10).toInt)\n\
    \        val unitDigits = unitDigits.map(x => (x / 10).toInt)\n        val unitDigits\
    \ = unitDigits.map(x => (x % 10).toInt)\n        val unitDigits = unitDigits.map(x\
    \ => (x / 10).toInt)\n        val unitDigits = unitDigits.map(x => (x % 10).toInt)\n\
    \        val unitDigits = unitDigits.map(x => (x / 10).toInt)\n        val unitDigits\
    \ = unitDigits.map(x => (x % 10).toInt)\n        val unitDigits = unitDigits.map(x\
    \ => (x / 10).toInt)\n        val unitDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr0cm8x_v.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr0cm8x_v.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitDigits\e[0m = unitDigits.zip(unitDigits2).map(\e[36mx\e[0m => (x._1\
    \ * x._2))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr0cm8x_v.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.toList.map(_.toInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr0cm8x_v.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.map(\e\
    [36mx\e[0m => (x / \e[31m10\e[0m).toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr0cm8x_v.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36munitDigits\e[0m = unitDigits.map(\e\
    [36mx\e[0m => (x % \e[31m10\e[0m).toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitDigits is already defined as \e[33mvalue\e[0m \e[35munitDigits\e\
    [0m\n\e[31m   |\e[0m\n\e["
  stdout: ''
  timestamp: 1659799302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val product = unitDigits *\
    \ unitDigits2\n        product\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7cupah2a.scala:23)\n\tat Problem.main(tmp7cupah2a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799287
