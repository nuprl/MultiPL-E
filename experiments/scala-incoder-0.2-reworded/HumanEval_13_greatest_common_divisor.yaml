name: HumanEval_13_greatest_common_divisor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l),\
  \ (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n\
  \    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l),\
  \ (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n  \
  \  assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l),\
  \ (60l)) == (12l));\n    }\n\n}\n"
completions: ["        if (b == 0) a\n        else greatestCommonDivisor(b, a % b)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + (if (a < b) a else b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < b) a else b)", "        if (a == 0 || b == 0)\
    \ 0\n        else if (a > b) greatestCommonDivisor(b, a % b)\n        else greatestCommonDivisor(a\
    \ % b, b)", "        val lcm = a / b\n        val gcd = a % b\n        if (gcd\
    \ == 0) lcm else greatestCommonDivisor(lcm, gcd)", "        val lcm = math.lcm(a,\
    \ b)\n        val gcd = a / lcm\n        gcd + (if (b > lcm) 1 else 0)", "   \
    \     val lcm = a.toLong * b.toLong / GCD(a, b)\n        lcm.toLong", "      \
    \  if (a == 0) return b\n        if (b == 0) return a\n        val c = a / b\n\
    \        greatestCommonDivisor(b, c)", "        val aMod = a % b\n        val\
    \ bMod = b % a\n        if (aMod == 0 && bMod == 0) 1\n        else if (aMod ==\
    \ 0) bMod\n        else aMod", "        val lcm = a.toLong * b.toLong / GCD(a,\
    \ b)\n        lcm", "        val a = math.abs(a)\n        val b = math.abs(b)\n\
    \        var gcd = 1\n        var i = 2\n        while (i <= a || i <= b) {\n\
    \            if (a % i == 0 && b % i == 0) {\n                gcd = i\n      \
    \      }\n            i += 1\n        }\n        gcd", "        val gcd = if (b\
    \ == 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd == 0) gcd else\
    \ gcd(gcd, a)", "        if (b == 0) a\n        else greatestCommonDivisor(b,\
    \ a % b)", "        val a = math.abs(a)\n        val b = math.abs(b)\n       \
    \ val gcd = math.gcd(a, b)\n        if (gcd > 0) gcd else a", "        val a =\
    \ a % b\n        val b = b % a\n        if (a == 0) b\n        else greatestCommonDivisor(a,\
    \ b)", "        val lcm = a.toLong * b.toLong / GCD(a, b)\n        lcm.toLong",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if\
    \ (gcd > a) gcd else a", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else gcd + 1", "        if (a == 0) b\n  \
    \      else if (b == 0) a\n        else greatestCommonDivisor(b, a % b)", "  \
    \      val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + (if (a < b) a else b)", "        val a = a.toInt\n        val b = b.toInt\n\
    \        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n      \
    \  gcd.toLong", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < b) a else b)", "        val lcm = a.toLong *\
    \ b.toLong / GCD(a, b)\n        lcm.toLong", "        val lcm = a.toLong * b.toLong\
    \ / gcd.toLong\n        val gcd = a.toLong / lcm\n        lcm", "        val gcd\
    \ = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a <\
    \ b) a else b)", "        val lcm = a.lcm(b)\n        val gcd = a.gcd(b)\n   \
    \     gcd.divide(lcm)", "        val gcd = if (a > b) a else b\n        val q\
    \ = a / gcd\n        val r = a % gcd\n        val s = b / gcd\n        val t =\
    \ b % gcd\n        val u = (q * s + r * t) % (gcd * gcd)\n        val v = (q *\
    \ r + r * t) % (gcd * gcd)\n        val w = (q * t + r * s) % (gcd * gcd)\n  \
    \      val x = (u * v + w) % (gcd * gcd)\n        val y = (u * w + v) % (gcd *\
    \ gcd)\n        val z = (u * v + w) % (gcd * gcd)\n        val gcd = if (x ==\
    \ y) x else z\n        gcd", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd > a) gcd else a", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        gcd + (if (a < 0) -1 else 1)", "  \
    \      val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if\
    \ (gcd == 0) gcd else gcd + 1", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else a", "        val gcd = if (b == 0) a\
    \ else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else b)",
  "        val a = a % b\n        val b = b % a\n        if (a == 0) b\n        else\
    \ greatestCommonDivisor(a, b)", "        if (a == 0 || b == 0)\n            return\
    \ 0\n        val a = a % b\n        if (a == 0)\n            return b\n      \
    \  val b = b % a\n        if (b == 0)\n            return a\n        greatestCommonDivisor(a,\
    \ b)", "        val a = a.toInt\n        val b = b.toInt\n        val gcd = if\
    \ (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd.toLong", "    \
    \    val aMod = a % b\n        if (b == 0)\n            aMod\n        else\n \
    \           greatestCommonDivisor(b, a % b)", "        val gcd = if (b == 0) a\
    \ else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else b)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + (if (a < b) a else b)", "        val a = a.toInt\n        val b = b.toInt\n\
    \        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n      \
    \  gcd.toLong", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < 0 && b < 0) a else b) * gcd / b", "        val\
    \ gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd ==\
    \ 0) gcd else gcd + 1", "        val a = a.toInt\n        val b = b.toInt\n  \
    \      val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd.toLong",
  "        val lcm = a / b\n        val gcd = a % b\n        if (gcd == 0) lcm\n \
    \       else greatestCommonDivisor(lcm, gcd)", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else b)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + (if (a < b) a else b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) 1 else gcd", "        val lcm = a.lcm(b)\n   \
    \     val gcd = a.gcd(b)\n        lcm / gcd", "        val gcd = if (b == 0) a\
    \ else greatestCommonDivisor(b, a % b)\n        if (gcd == 0) 1 else gcd", " \
    \       val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n       \
    \ gcd + 1", "        val lcm = a / b\n        val gcd = a % b\n        if (gcd\
    \ == 0) lcm else greatestCommonDivisor(lcm, gcd)", "        val a = a.toInt\n\
    \        val b = b.toInt\n        var gcd = 1\n        var i = 2\n        while\
    \ (i <= a || i <= b) {\n            if (a % i == 0 && b % i == 0) {\n        \
    \        gcd = i\n            }\n            i += 1\n        }\n        gcd",
  "        val a = math.abs(a)\n        val b = math.abs(b)\n        var gcd = 1\n\
    \        var i = 2\n        while (i <= a || i <= b) {\n            if (a % i\
    \ == 0 && b % i == 0) {\n                gcd = i\n            }\n            i\
    \ += 1\n        }\n        gcd", "        val max = (a max b)\n        val min\
    \ = (a min b)\n        val gcd = (max min / 2)\n        return gcd", "       \
    \ val a = a % b\n        if (a == 0) b\n        else greatestCommonDivisor(b,\
    \ a)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        gcd + (if (a < b) a else b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < 0) -1 else 1)", "        val a = a.toInt\n  \
    \      val b = b.toInt\n        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd.toLong", "        val lcm = a.toLong * b.toLong / GCD(a,\
    \ b)\n        lcm.toLong", "        val a = a.toInt\n        val b = b.toInt\n\
    \        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n      \
    \  gcd.toLong", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < b) a else b)", "        val a = math.abs(a)\n\
    \        val b = math.abs(b)\n        var gcd = 1\n        val a = math.abs(a)\n\
    \        val b = math.abs(b)\n        val max = (math.max(a, b))\n        val\
    \ min = (math.min(a, b))\n        val maxDivisor = math.pow(max, math.ceil(math.log(b)\
    \ / math.log(2)))\n        val minDivisor = math.pow(min, math.ceil(math.log(a)\
    \ / math.log(2)))\n        val gcd = maxDivisor / minDivisor\n        val gcd\
    \ = math.abs(gcd)\n        val gcd = math.min(gcd, max)\n        val gcd = math.min(gcd,\
    \ min)\n        val gcd = math.min(gcd, a)\n        val gcd = math.min(gcd, b)\n\
    \        val gcd = math.min(gcd, max)\n        val gcd = math.min(gcd, min)\n\
    \        val gcd = math.min(gcd, a)\n        val gcd = math.min(gcd, b)\n    \
    \    val gcd = math.min(gcd, max)\n        val gcd = math.min(gcd, min)\n    \
    \    val gcd = math.min(gcd, a)\n        val gcd = math.min(gcd, b)\n        val\
    \ gcd = math.min(gcd, max)\n        val gcd = math.min(gcd, min)\n        val\
    \ gcd = math.min(gcd, a)\n        val gcd = math.min(gcd, b)\n        val gcd\
    \ = math.min(gcd, max)\n        val gcd = math.min(gcd, min)\n        val gcd\
    \ = math.min(gcd, a)\n        val gcd = math.min(gcd, b)\n        val gcd = math.min(gcd,\
    \ max)\n        val gcd = math.min(gcd, min)\n        val gcd = math.min(gcd,\
    \ a)\n        val gcd = math.min(gcd, b)\n        val gcd = math.min(gcd, max)\n\
    \        val gcd = math.min(gcd, min)\n        val gcd = math.min(gcd, a)\n  \
    \      val gcd = math.min(gcd, b)\n        val gcd = math.min(gcd, max)\n    \
    \    val gcd = math.min(gcd, min)\n        val gcd = math.min(gcd, a)\n      \
    \  val gcd = math.min(gcd, b)\n        val gcd = math.min(gcd, max)\n        val\
    \ gcd = math.min(gcd, min)\n        val gcd = math.min(gcd, a)\n        val gcd\
    \ = math.min(gcd, b)\n        val gcd = math.min(gcd, max)\n        val gcd =\
    \ math.min(gcd, min)\n        val gcd = math.min(gcd, a)\n        val gcd = math.min(gcd,\
    \ b)\n        val gc", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < 0) a else 0)", "        val gcd = if (a > b)\
    \ a else b\n        val div = a / gcd\n        val mod = a % gcd\n        (div,\
    \ mod)", "        val lcm = a.toLong * b.toLong / GCD(a,b)\n        val gcd =\
    \ a.toLong / lcm\n        lcm", "        if (a == 0 || b == 0) 0\n        else\
    \ if (a > b) greatestCommonDivisor(b, a % b)\n        else greatestCommonDivisor(a\
    \ % b, b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        if (gcd == 0) 1 else gcd", "        val lcm = a.toLong * b.toLong\
    \ / GCD(a, b)\n        if (lcm == 0) 1l else lcm", "        val gcd = if (b ==\
    \ 0) a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < 0 && b < 0)\
    \ -1 else 1)", "        val a = math.abs(a)\n        val b = math.abs(b)\n   \
    \     val gcd = math.gcd(a, b)\n        if (gcd < 1) gcd else greatestCommonDivisor(b,gcd)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + 1", "        val gcd = if (a > b) a else b\n        val lcm = a / gcd\n  \
    \      gcd / lcm", "        val lcm = a.toLong * b.toLong / GCD(a, b)\n      \
    \  lcm", "        if (b == 0)\n            a\n        else\n            greatestCommonDivisor(b,\
    \ a % b)", "        val aMod = a % b\n        val bMod = b % a\n        if (aMod\
    \ == 0) bMod\n        else greatestCommonDivisor(bMod, aMod)", "        val gcd\
    \ = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd == 0)\
    \ gcd else gcd + 1", "        val lcm = a.lcm(b)\n        val gcd = a.gcd(b)\n\
    \        lcm / gcd", "        val lcm = a.lcm(b)\n        val gcd = a / lcm\n\
    \        lcm", "        if (a == 0 || b == 0) 1\n        else greatestCommonDivisor(b,\
    \ a % b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        gcd + (if (a < b) a else b)", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        gcd + (if (b == 0) a else a / b)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + (if (a < 0) -1 else 1)", "        val a = a.toInt\n        val b = b.toInt\n\
    \        var gcd = 1\n        while(a != 0) {\n            val t = a % b\n   \
    \         a = b\n            b = t\n            gcd = gcd + 1\n        }\n   \
    \     gcd", "        if (a == 0 || b == 0) 1\n        else {\n            val\
    \ r = a % b\n            if (r == 0) a else greatestCommonDivisor(b, r) + 1\n\
    \        }", "        if (a == 0 || b == 0) 0\n        else greatestCommonDivisor(b,\
    \ a % b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        gcd + (if (a < b) a else b)", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        if (gcd == 0) gcd else gcd + 1", " \
    \       if (a == 0 || b == 0)\n            return 0\n        if (a > b)\n    \
    \        greatestCommonDivisor(b, a)\n        else\n            greatestCommonDivisor(a,\
    \ a)", "        if (a == 0 || b == 0) 0\n        else greatestCommonDivisor(b,\
    \ a % b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        if (gcd == 0) 1 else gcd", "        if (a == 0 || b == 0) 1\n  \
    \      else {\n            val q = a / b\n            val r = a % b\n        \
    \    greatestCommonDivisor(q, r)\n        }", "        val a = a.toInt\n     \
    \   val b = b.toInt\n        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd.toLong", "        val lcm = a.lcm(b)\n        val gcd =\
    \ a.gcd(b)\n        lcm / gcd", "        val a = a.toInt\n        val b = b.toInt\n\
    \        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n      \
    \  gcd.toLong", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + 1", "        val lcm = a.toLong * b.toLong / GCD(a, b)\n\
    \        lcm.toLong", "        if (a == 0 || b == 0) 1\n        else greatestCommonDivisor(b,\
    \ a % b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        gcd + (if (a < b) a else b)", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        if (gcd > a) gcd else a", "       \
    \ if (b == 0) a\n        else greatestCommonDivisor(b, a % b)", "        val gcd\
    \ = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd + 1", "  \
    \      val lcm = a.lcm(b)\n        val gcd = a.gcd(b)\n        if (gcd > lcm)\
    \ gcd else lcm", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else gcd(gcd, a)", "        val a = math.abs(a)\n\
    \        val b = math.abs(b)\n        val gcd = math.gcd(a, b)\n        if (gcd\
    \ == 0) a else gcd", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else gcd + 1", "        val gcd = if (b ==\
    \ 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd == 0) gcd else a",
  "        val lcm = a.toLong * b.toLong / GCD(a, b)\n        if (lcm == 0) 1\n  \
    \      else lcm", "        val lcm = a.toLong * b.toLong / GCD(a, b)\n       \
    \ val gcd = a.toLong / lcm\n        lcm", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        if (gcd > 0) gcd else a", "       \
    \ val a = a.toInt\n        val b = b.toInt\n        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        gcd.toLong", "        val gcd = if\
    \ (b == 0) a else greatestCommonDivisor(b, a % b)\n        if (gcd == 0) 1 else\
    \ gcd", "        val lcm = a.lcm(b)\n        val gcd = a.gcd(b)\n        lcm /\
    \ gcd", "        val lcm = a.lcm(b)\n        val gcd = a.gcd(b)\n        if (gcd\
    \ > lcm) gcd else lcm", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (b > 0) a else 0)", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        if (gcd > a) gcd else a", " \
    \       if (a == 0) return b\n        if (b == 0) return a\n        val c = a\
    \ / b\n        greatestCommonDivisor(b, c);", "        val a = a.toInt\n     \
    \   val b = b.toInt\n        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd.toLong", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < b) a else b)", "        if (a == 0 || b == 0)\
    \ 1\n        else if (a > b) greatestCommonDivisor(b, a % b)\n        else greatestCommonDivisor(a\
    \ % b, b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        if (gcd == 0) gcd else gcd + 1", "        val a1 = a / b\n     \
    \   val a2 = a % b\n        val b1 = b / a1\n        val b2 = b % a1\n       \
    \ val gcd = a1 + b1\n        if (gcd > a2) gcd else a2 + b2", "        val a =\
    \ math.abs(a)\n        val b = math.abs(b)\n        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        if (gcd == 0) gcd else gcd + 1", " \
    \       val lcm = a.toLong * b.toLong / GCD(a, b)\n        lcm", "        val\
    \ a = math.abs(a)\n        val b = math.abs(b)\n        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a > 0) a else 0)",
  "        if (b == 0) a\n        else greatestCommonDivisor(b, a % b)", "       \
    \ val a = a.toInt\n        val b = b.toInt\n        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        gcd.toLong", "        val gcd = if\
    \ (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a\
    \ else b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        if (gcd == 0) gcd else a", "        val gcd = if (b == 0) a else\
    \ greatestCommonDivisor(b, a % b)\n        if (gcd == 0) gcd else b", "      \
    \  val lcm = a.toLong * b.toLong / GCD(a, b)\n        val gcd = a.toLong / lcm\n\
    \        lcm", "        val lcm = a.lcm(b)\n        val gcd = a.gcd(b)\n     \
    \   lcm / gcd", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < b) a else b)", "        val lcm = a.toLong *\
    \ b.toLong / gcd (a, b)\n        lcm.toLong", "        val lcm = a.lcm(b)\n  \
    \      val gcd = a.gcd(b)\n        gcd.divide(lcm)", "        val lcm = a / b\n\
    \        val gcd = a % b\n        if (gcd == 0) lcm\n        else greatestCommonDivisor(lcm,\
    \ gcd)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n\
    \        gcd + (if (a < 0 && b < 0) a else b)", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        if (gcd == 0) gcd else gcd +\
    \ 1", "        if (a == 0 || b == 0) 1\n        else greatestCommonDivisor(b,\
    \ a % b)", "        val lcm = a.toLong * b.toLong / GCD(a,b)\n        val gcd\
    \ = a.toLong / lcm\n        gcd.toLong", "        val a = a.toInt\n        val\
    \ b = b.toInt\n        val gcd = if (b == 0) a else greatestCommonDivisor(b, a\
    \ % b)\n        gcd.toLong", "        if (a == 0 || b == 0) 1\n        else greatestCommonDivisor(b,\
    \ a % b)", "        if (a == 0 || b == 0) 0\n        else greatestCommonDivisor(b,\
    \ a % b)", "        if (a == 0 || b == 0) 1\n        else greatestCommonDivisor(b,\
    \ a % b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a %\
    \ b)\n        gcd + (if (a < 0) -a else a)", "        val gcd = if (b == 0) a\
    \ else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < 0) -1 else 1)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + (if (a < 0) -1 else 1)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < 0) -1 else 1)", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        if (gcd == 0) 1 else gcd", " \
    \       val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n       \
    \ gcd + (if (a < b) a else b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < b) a else b)", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else b)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + (if (a < b) a else b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd + (if (a < b) a else b)", "        val lcm = a.toLong *\
    \ b.toLong / GCD(a, b)\n        if (lcm == 0) 1\n        else lcm", "        val\
    \ a = a % b\n        if (a == 0) b\n        else greatestCommonDivisor(b, a)",
  "        val aMod = a % b\n        val bMod = b % a\n        if(aMod == 0 && bMod\
    \ == 0) 1\n        else if(aMod == 0) bMod\n        else bMod", "        if (a\
    \ == 0 || b == 0) 0\n        else greatestCommonDivisor(b, a % b)", "        val\
    \ a = a.toInt\n        val b = b.toInt\n        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        gcd.toLong", "        val a = a % b\n        val b = b % a\n\
    \        if (a == 0) b\n        else greatestCommonDivisor(a, b)", "        val\
    \ gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd + (if\
    \ (a < b) a else b)", "        val gcd = if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)\n        if (gcd == 0) gcd else gcd + 1", "        val lcm = a.toLong\
    \ * b.toLong / GCD(a,b)\n        val lcm2 = a.toLong * b.toLong / GCD(b,a)\n \
    \       if (lcm == lcm2) lcm\n        else lcm2", "        val lcm = a.lcm(b)\n\
    \        val gcd = a / lcm\n        gcd.toLong", "        val gcd = if (b == 0)\
    \ a else greatestCommonDivisor(b, a % b)\n        gcd + (if (a < b) a else b)",
  "        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd\
    \ + (if (a < 0) -a else a)", "        if (a == 0 || b == 0) 0\n        else if\
    \ (a > b) greatestCommonDivisor(b, a % b)\n        else greatestCommonDivisor(a\
    \ % b, b)", "        if (a == 0 || b == 0) 1\n        else greatestCommonDivisor(b,\
    \ a % b)", "        val a = a.toInt\n        val b = b.toInt\n        val gcd\
    \ = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd.toLong", " \
    \       if (b == 0) a\n        else greatestCommonDivisor(b, a % b)"]
stop_tokens:
- "\n    }\n"
