name: HumanEval_91_is_bored
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You'll be given a string of words, and your task is to count the number\n\
  \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
  \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    //\
  \ >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is\
  \ blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
  \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n  \
  \  assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) ==\
  \ (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill\
  \ It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) ==\
  \ (0l));\n    }\n\n}\n"
completions: ["        val boredoms = mutable.Set[String]()\n        val sentences\
    \ = S.split(\"[.?!]\".toRegex)\n        for (sentence <- sentences) {\n      \
    \      if (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\".toRegex)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"I\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val words = S.split(\" \")\n \
    \       for(word <- words) {\n            if(word.startsWith(\"I\")) {\n     \
    \           boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.!?]\")\n        sentences.foreach(sentence => {\n            val words = sentence.split(\"\
    \ \").filter(_.nonEmpty)\n            words.foreach(word => {\n              \
    \  if (word.startsWith(\"I\")) {\n                    boredoms += word\n     \
    \           }\n            })\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.ListBuffer[String]()\n        S.split(\"\\\\.|\\\\?|\\\\\
    !\").foreach { s =>\n            if (s.startsWith(\"I\")) {\n                boredoms\
    \ += s\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach\
    \ { s =>\n            if (s.startsWith(\"I\")) {\n                boredoms +=\
    \ s\n            }\n        }\n        boredoms.size", "        val boredoms =\
    \ mutable.Set[String]()\n        val sentences = S.split(\"[.!?]\".toRegex)\n\
    \        sentences.foreach(sentence => {\n            val words = sentence.split(\"\
    \ \".toRegex)\n            words.foreach(word => {\n                if (word.startsWith(\"\
    I\")) {\n                    boredoms += word\n                }\n           \
    \ })\n        })\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomWords = sentence.split(\"i\").map(_.toLowerCase)\n\
    \            boredomWords.foreach(word => {\n                boredoms += word\n\
    \            })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        S.split(\"[.!?]\").foreach(s => {\n            if (s.startsWith(\"I\"\
    )) {\n                boredoms += s\n            }\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.ListBuffer[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ >= 0) {\n                boredoms += sentence\n            }\n        }\n  \
    \      boredoms.size match {\n            case 0 => 0\n            case 1 => 1\n\
    \            case _ => boredoms.size\n        }", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \")\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \\\\.\")\n        for(word <- words) {\n            if(word.startsWith(\"I\"))\
    \ {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        for(word <- S.split(\"\
    \ \")){\n            if(word.startsWith(\"I\")){\n                boredoms +=\
    \ word\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n\
    \        sentences.foreach { sentence =>\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.size", "        val boredoms = mutable.HashSet[String]()\n     \
    \   val words = S.split(\"\\\\.\")\n        for(w <- words) {\n            val\
    \ boredomWord = w.toLowerCase match {\n                case s if s.startsWith(\"\
    i\") => s\n                case s if s.startsWith(\"!\") => s\n              \
    \  case s if s.startsWith(\"?\") => s\n                case s => s\n         \
    \   }\n            boredoms.add(boredomWord)\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        })\n\
    \        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n \
    \       val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomIndex = sentence.indexOf(\"i\")\n            if\
    \ (boredomIndex >= 0) {\n                boredoms += sentence\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach { sentence\
    \ =>\n            val words = sentence.split(\" \")\n            words.foreach\
    \ { word =>\n                if (word.startsWith(\"I\")) {\n                 \
    \   boredoms += word\n                }\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach(sentence => {\n            val\
    \ boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart != -1)\
    \ {\n                boredoms += sentence\n            }\n        })\n       \
    \ boredoms.size", "        val boredoms = mutable.HashMap[String, Long]()\n  \
    \      val words = S.split(\" \")\n        for(word <- words) {\n            if(word.startsWith(\"\
    I\")) {\n                boredoms += (word -> 1L)\n            }\n        }\n\
    \        boredoms.values.sum", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        S.split(\"[.?!]\").foreach { s =>\n            if (s.startsWith(\"I\"\
    )) {\n                boredoms += s\n            }\n        }\n        boredoms.toList.size",
  "        val boredoms = mutable.HashMap[String, Long]()\n        val sentences =\
    \ S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence\
    \ =>\n            val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                val boredomEnd = sentence.indexOf(\"i\", boredomStart\
    \ + 1)\n                val boredomText = sentence.substring(boredomStart, boredomEnd)\n\
    \                boredoms.put(boredomText, boredoms.getOrElse(boredomText, 0l)\
    \ + 1)\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach(s\
    \ => {\n            if (s.startsWith(\"I\")) {\n                boredoms += s\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        S.split(\"[.?!]\").foreach(boredoms += _)\n        boredoms.size", " \
    \       val boredoms = mutable.Set[String]()\n        S.split(\"\\\\.|\\\\?|\\\
    \\!\").foreach(s => {\n            if (s.startsWith(\"I\")) {\n              \
    \  boredoms += s\n            }\n        })\n        boredoms.size", "       \
    \ val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            val words = sentence.split(\"\
    \ \")\n            words.foreach(word => {\n                if (word.equals(\"\
    I\")) {\n                    boredoms += word\n                }\n           \
    \ })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        S.split(\"\\\\.|\\\\?|\\\\!\").foreach(s => {\n            if (s.startsWith(\"\
    I\")) {\n                boredoms += s\n            }\n        })\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val words = S.split(\" \"\
    )\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n  \
    \              boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.!?]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"i\")\n            if\
    \ (boredomStart != -1) {\n                boredoms += sentence\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\.\")\n        for(word <- words) {\n      \
    \      if(word.startsWith(\"I\")) {\n                boredoms += word\n      \
    \      }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\".toRegex)\n        for (sentence <-\
    \ sentences) {\n            if (sentence.startsWith(\"I\")) {\n              \
    \  boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.ListBuffer[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.count", "        val boredoms = mutable.HashSet[String]()\n\
    \        S.split(\"\\\\.|\\\\?|\\\\!\").foreach { s =>\n            if (s.startsWith(\"\
    I\")) {\n                boredoms += s\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashMap[String, Long]()\n        S.split(\"\\\\\
    .|\\\\?|\\\\!\").foreach(s => {\n            val boredom = (s.startsWith(\"I\"\
    )).longValue\n            boredoms += (s -> boredom)\n        })\n        boredoms.values.sum",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.HashSet[String]()\n  \
    \      for(word <- S.split(\"\\\\.\")) {\n            if(word.startsWith(\"I\"\
    )) {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\".toRegex).map(_.toLowerCase)\n        sentences.foreach(sentence => {\n\
    \            if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        S.split(\"\\\\.|\\\\?|\\\\!\").toList.foreach(boredoms += _)\n      \
    \  boredoms.size", "        val boredoms = mutable.HashMap[String, Long]()\n \
    \       val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomWords = sentence.split(\"\\\\s+\").filter(_.startsWith(\"\
    i\"))\n            boredomWords.foreach { boredomWord =>\n                boredoms\
    \ += (boredomWord -> 1L)\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \\\\W+\")\n        for(w <- words) {\n            if(w.startsWith(\"I\")) {\n\
    \                boredoms += w\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\".toRegex)\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.size", "        val boredoms = mutable.HashMap[String, Long]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomWords = sentence.split(\"\\\\s+\").filter(_.startsWith(\"\
    i\"))\n            boredomWords.foreach { boredomWord =>\n                boredoms\
    \ += (boredomWord -> 1L)\n            }\n        }\n        boredoms.values.sum",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomIndex = sentence.indexOf(\"i\")\n            if(boredomIndex\
    \ != -1){\n                boredoms += sentence\n            }\n        })\n \
    \       boredoms.size", "        val boredoms = mutable.HashSet[String]()\n  \
    \      S.split(\"\\\\.|\\\\?|\\\\!\").foreach(boredoms += _)\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            val boredomWords\
    \ = sentence.split(\"I\").length\n            boredoms += boredomWords\n     \
    \   })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomIndex = sentence.indexOf(\"i\")\n            if(boredomIndex\
    \ >= 0) {\n                boredoms.add(sentence)\n            }\n        })\n\
    \        boredoms.size", "        val boredoms = mutable.Set[String]()\n     \
    \   val words = S.split(\" \")\n        for(word <- words) {\n            if(word.startsWith(\"\
    I\")) {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        })\n   \
    \     boredoms.size", "        val boredoms = mutable.HashSet[String]()\n    \
    \    val words = S.split(\" \")\n        for(word <- words) {\n            if(word.startsWith(\"\
    I\")) {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms.add(sentence.substring(0,boredomStart))\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomIndex = sentence.indexOf(\"i\")\n    \
    \        if (boredomIndex > 0) {\n                boredoms += sentence\n     \
    \       }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"I\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashMap[String, Long]()\n        S.split(\"\\\\.|\\\\?|\\\
    \\!\").foreach { s =>\n            val boredom: String = s.substring(0, 3)\n \
    \           boredoms += (boredom -> 1L)\n        }\n        boredoms.values.sum",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.HashMap[String, Long]()\n\
    \        val words = S.split(\"\\\\W+\")\n        words.foreach(word => {\n  \
    \          val boredom = 0\n            if (word.startsWith(\"I\")) {\n      \
    \          boredom += 1\n            }\n            boredoms += (word -> boredom)\n\
    \        })\n        boredoms.values.sum", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomWords = sentence.split(\"i\").map(_.toLowerCase)\n\
    \            boredomWords.foreach(word => {\n                boredoms += word\n\
    \            })\n        })\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        val sentences = S.split(\"[.?!]\".toRegex)\n        sentences.foreach\
    \ { sentence =>\n            val words = sentence.split(\"\\\\s\".toRegex)\n \
    \           words.foreach { word =>\n                if (word.startsWith(\"I\"\
    )) {\n                    boredoms += (word -> 1L)\n                }\n      \
    \      }\n        }\n        boredoms.values.sum", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \\\\s+\")\n        for(w <- words) {\n            if(w.startsWith(\"I\")) {\n\
    \                boredoms += w\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\\
    ?|\\\\!\").foreach(boredoms += _)\n        boredoms.size match {\n           \
    \ case 0 => 0\n            case 1 => 1\n            case _ => boredoms.size\n\
    \        }", "        val boredoms = mutable.HashSet[String]()\n        val words\
    \ = S.split(\"\\\\.\")\n        for(word <- words) {\n            if(word.startsWith(\"\
    I\")) {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\\
    ?|\\\\!\").foreach(s => {\n            if (s.startsWith(\"I\")) {\n          \
    \      boredoms += s\n            }\n        })\n        boredoms.size", "   \
    \     val boredoms = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\?|\\\
    \\!\").foreach { s =>\n            if (s.startsWith(\"I\")) {\n              \
    \  boredoms += s\n            }\n        }\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\?|\\\\!\"\
    ).foreach { s =>\n            if (s.startsWith(\"I\")) {\n                boredoms\
    \ += s\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val words = S.split(\" \")\n        for(word\
    \ <- words) {\n            if(word.startsWith(\"I\")) {\n                boredoms\
    \ += word\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\".toRegex)\n\
    \        sentences.foreach { sentence =>\n            val boredomStart = sentence.indexOf(\"\
    I\".toChar)\n            if (boredomStart != -1) {\n                boredoms +=\
    \ sentence\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val words = S.split(\" \")\n        for(word\
    \ <- words) {\n            if(word.startsWith(\"I\")) {\n                boredoms\
    \ += word\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val words = S.split(\"\\\\W+\")\n     \
    \   for(word <- words) {\n            if(word.startsWith(\"I\")) {\n         \
    \       boredoms += word\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach(sentence => {\n       \
    \     if (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \")\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.ListBuffer[String]()\n        S.split(\"\\\\.|\\\
    \\?|\\\\!\").foreach(boredoms += _)\n        boredoms.count(_ == \"I\")", "  \
    \      val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.toList.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.startsWith(\"I\")\n          \
    \  if (boredomStart) {\n                boredoms.add(sentence)\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        S.split(\"\\\\.|\\\\?|\\\\!\").foreach(word => {\n            if (word.startsWith(\"\
    I\")) {\n                boredoms += word\n            }\n        })\n       \
    \ boredoms.size", "        val boredoms = mutable.HashMap[String, Long]()\n  \
    \      S.split(\"\\\\.|\\\\?|\\\\!\").foreach(s => {\n            val boredom:\
    \ String = s.substring(0, s.indexOf(\"I\"))\n            boredoms += (boredom\
    \ -> 1L)\n        })\n        boredoms.values.sum", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach { sentence =>\n            val\
    \ boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart >= 0) {\n\
    \                boredoms += sentence\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) boredoms += sentence\n        }\n      \
    \  boredoms.size", "        val boredoms = mutable.HashSet[String]()\n       \
    \ val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomIndex = sentence.indexOf(\"i\")\n            if(boredomIndex\
    \ >= 0) {\n                boredoms.add(sentence)\n            }\n        })\n\
    \        boredoms.size", "        val boredoms = mutable.HashMap[String, Long]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomWords = sentence.split(\"\\\\s+\").filter(word\
    \ => word.startsWith(\"i\"))\n            boredomWords.foreach(word => boredoms\
    \ += (word -> 1L))\n        })\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n\
    \        sentences.foreach(sentence => {\n            val boredomStart = sentence.startsWith(\"\
    I\")\n            val boredomEnd = sentence.endsWith(\"I\")\n            if (boredomStart\
    \ && boredomEnd) {\n                boredoms += sentence\n            }\n    \
    \    })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"i\")\n            if\
    \ (boredomStart != -1) {\n                boredoms += sentence\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomIndex = sentence.indexOf(\"i\")\n            if\
    \ (boredomIndex != -1) {\n                boredoms.add(sentence)\n           \
    \ }\n        })\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach { sentence =>\n    \
    \        val boredom: String = sentence.takeWhile(_.isLetter).mkString.toLowerCase\n\
    \            boredoms += (boredom -> 1L)\n        }\n        boredoms.values.sum",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\".toRegex)\n        sentences.foreach(sentence => {\n            val words\
    \ = sentence.split(\" \".toRegex)\n            words.foreach(word => {\n     \
    \           if (word.startsWith(\"I\")) {\n                    boredoms += word\n\
    \                }\n            })\n        })\n        boredoms.size", "    \
    \    val boredoms = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\?|\\\
    \\!\").foreach { sentence =>\n            val boredomStart = sentence.startsWith(\"\
    I\")\n            if (boredomStart) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\.\")\n        for(word <- words) {\n      \
    \      if(word.startsWith(\"I\")) {\n                boredoms += word\n      \
    \      }\n        }\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val sentences = S.split(\"[.?!]\".toRegex)\n        for (sentence <-\
    \ sentences) {\n            val boredomStart = sentence.indexOf(\"I\".toChar)\n\
    \            if (boredomStart != -1) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.toList.size", "        val boredoms\
    \ = mutable.Set[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach { sentence =>\n            val boredomStart = sentence.indexOf(\"\
    i\")\n            if (boredomStart != -1) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.!?]\").map(_.trim).toList\n        sentences.foreach(sentence\
    \ => {\n            val boredomWords = sentence.split(\"\\\\s+\").filter(_.startsWith(\"\
    I\"))\n            boredomWords.foreach(word => boredoms += word)\n        })\n\
    \        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n \
    \       val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\".toRegex)\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n  \
    \      val words = S.split(\" \")\n        for (w <- words) {\n            if\
    \ (w.startsWith(\"I\")) {\n                boredoms += w\n            }\n    \
    \    }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        S.split(\"[.?!]\").foreach { s\
    \ =>\n            if (s.startsWith(\"I\")) {\n                boredoms += s\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        S.split(\"\\\\.|\\\\?|\\\\!\").foreach { s =>\n            if (s.startsWith(\"\
    I\")) {\n                boredoms += s\n            }\n        }\n        boredoms.toList.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.HashSet[String]()\n  \
    \      S.split(\"\\\\.|\\\\?|\\\\!\").foreach(boredoms += _)\n        boredoms.count(_\
    \ == \"I\")", "        val boredoms = mutable.Set[String]()\n        val words\
    \ = S.split(\"\\\\.\")\n        for(word <- words) {\n            if(word.startsWith(\"\
    I\")) {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashMap[String, Long]()\n        S.split(\"\\\\\
    .|\\\\?|\\\\!\").foreach { s =>\n            val boredom = (s.startsWith(\"I\"\
    )).longValue\n            boredoms += (s -> boredom)\n        }\n        boredoms.values.sum",
  "        val boredoms = mutable.HashSet[String]()\n        S.split(\"[.?!]\").foreach(s\
    \ => {\n            val boredom = (s.startsWith(\"I\"))\n            if (boredom)\
    \ boredoms += s\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.!?]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        for(word <- S.split(\"\
    \\\\.\")) {\n            val boredom = (word startsWith \"I\")\n            boredoms\
    \ += boredom\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\".toRegex)\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \".toRegex)\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredoms = sentence.split(\"i\").map(_.toLowerCase)\n            boredoms.foreach(boredom\
    \ => {\n                boredoms += boredom\n            })\n        })\n    \
    \    boredoms.size", "        val boredoms = mutable.HashSet[String]()\n     \
    \   val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomWords = sentence.split(\"\\\\s+\").filter(_.startsWith(\"\
    i\"))\n            boredomWords.foreach(boredomWord => {\n                boredoms.add(boredomWord)\n\
    \            })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        for(word <- S.split(\" \")) {\n            boredoms += word\n       \
    \ }\n        boredoms.count(_ == \"I\")", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomIndex = sentence.indexOf(\"i\")\n            if\
    \ (boredomIndex >= 0) {\n                boredoms.add(sentence.substring(0,boredomIndex))\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \")\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.ListBuffer[String]()\n        val sentences = S.split(\"\
    [.?!]\".toRegex)\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.toList.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        S.split(\"\\\\.|\\\\?|\\\\!\").foreach { s =>\n            if (s.startsWith(\"\
    I\")) {\n                boredoms += s\n            }\n        }\n        boredoms.toList.size",
  "        val boredoms = mutable.ListBuffer[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            val boredomEnd =\
    \ sentence.indexOf(\"i\", boredomStart + 1)\n            boredoms += (sentence.substring(boredomStart,\
    \ boredomEnd))\n        })\n        boredoms.count", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        for(word <- S.split(\"\\\\.\"\
    )) {\n            val boredom = (word startsWith s\"I\")\n            if(boredom)\
    \ boredoms += word\n        }\n        boredoms.size", "        val boredoms =\
    \ mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach(boredoms\
    \ += _)\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\\
    ?|\\\\!\").foreach(s => {\n            if (s.startsWith(\"I\")) {\n          \
    \      boredoms += s\n            }\n        })\n        boredoms.size", "   \
    \     val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.HashSet[String]()\n  \
    \      for(word <- S.split(\" \")){\n            if(word.startsWith(\"I\")){\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredoms = sentence.split(\"i\").map(_.toLowerCase)\n            boredoms.foreach(boredom\
    \ => {\n                boredoms += boredom\n            })\n        })\n    \
    \    boredoms.size", "        val boredoms = mutable.HashSet[String]()\n     \
    \   val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"i\")\n            if\
    \ (boredomStart != -1) {\n                boredoms += sentence\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.toList.size", "        val boredoms =\
    \ mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach { sentence =>\n            val boredomStart = sentence.indexOf(\"\
    i\")\n            if (boredomStart != -1) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        S.split(\"\\\\.|\\\\?|\\\\!\").foreach { s =>\n            if (s.startsWith(\"\
    I\")) {\n                boredoms += s\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.ListBuffer[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.toList.size",
  "        val boredoms = mutable.Set[String]()\n        val words = S.split(\" \"\
    )\n        val boredomWords = words.filter(_.startsWith(\"I\"))\n        boredomWords.foreach(boredoms\
    \ += _)\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \")\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        S.split(\"[.?!]\").foreach\
    \ { s =>\n            if (s.startsWith(\"I\")) {\n                boredoms +=\
    \ s\n            }\n        }\n        boredoms.size", "        val boredoms =\
    \ mutable.Set[String]()\n        val words = S.split(\" \")\n        for(word\
    \ <- words) {\n            if(word.startsWith(\"I\")) {\n                boredoms\
    \ += word\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.ListBuffer[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach { sentence =>\n            if (sentence.startsWith(\"\
    i\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.toList.size", "        val boredoms = mutable.Set[String]()\n  \
    \      val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\" \")\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        S.split(\"[.?!]\").foreach(s\
    \ => {\n            if (s.startsWith(\"I\")) {\n                boredoms += s\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\.\")\n        for(w <- words) {\n         \
    \   if(w.startsWith(\"I\")) {\n                boredoms += w\n            }\n\
    \        }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        S.split(\"\\\\.|\\\\?|\\\\!\").toList.foreach(s => {\n            if\
    \ (s.startsWith(\"I\")) {\n                boredoms += s\n            }\n    \
    \    })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomIndex = sentence.indexOf(\"i\")\n            if(boredomIndex\
    \ > 0) {\n                boredoms.add(sentence)\n            }\n        })\n\
    \        boredoms.size", "        val boredoms = mutable.HashMap[String, Long]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomWords = sentence.split(\"\\\\s+\").filter(_.startsWith(\"\
    i\"))\n            boredomWords.foreach { boredomWord =>\n                boredoms.put(boredomWord,\
    \ boredoms.get(boredomWord).map(x => x + 1).toLong)\n            }\n        }\n\
    \        boredoms.values.sum", "        val boredoms = mutable.HashSet[String]()\n\
    \        S.split(\"[.?!]\").foreach(word => {\n            if (word.startsWith(\"\
    I\")) {\n                boredoms += word\n            }\n        })\n       \
    \ boredoms.size", "        val boredoms = mutable.HashSet[String]()\n        val\
    \ sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"I\")\n    \
    \        if (boredomStart != -1) {\n                boredoms.add(sentence)\n \
    \           }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n   \
    \     sentences.foreach(sentence => {\n            val boredomWords = sentence.split(\"\
    \\\\s+\").filter(_.startsWith(\"I\"))\n            boredomWords.foreach(word =>\
    \ {\n                boredoms += (word -> 1L)\n            })\n        })\n  \
    \      boredoms.values.sum", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart >= 0) {\n                boredoms += sentence\n    \
    \        }\n        }\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach { s =>\n           \
    \ val boredom: String = s.substring(0, 3)\n            boredoms += boredom ->\
    \ (boredoms.get boredom).getOrElse(0) + 1\n        }\n        boredoms.values.sum",
  "        val boredoms = mutable.HashMap[String, Long]()\n        val sentences =\
    \ S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence =>\
    \ {\n            val boredoms = sentence.split(\"\\\\s+\").filter(_.startsWith(\"\
    i\")).map(_.toLowerCase).toSet\n            boredoms.foreach(boredom => boredoms\
    \ += (boredom -> 1L))\n        })\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach { sentence =>\n            val boredomWords = sentence.split(\"\
    i\").map(_.toLowerCase)\n            boredomWords.foreach { word =>\n        \
    \        if (word == \"i\") {\n                    boredoms += \"i\"\n       \
    \         }\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\".toList)\n\
    \        sentences.foreach(sentence => {\n            val words = sentence.split(\"\
    \ \")\n            words.foreach(word => {\n                if (word.startsWith(\"\
    I\")) {\n                    boredoms += word\n                }\n           \
    \ })\n        })\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val boredomWords = sentence.split(\"I\").length\n        \
    \    boredoms += boredomWords\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.Set[String]()\n        val sentences = S.split(\"[.?!]\"\
    )\n        sentences.foreach(sentence => {\n            val words = sentence.split(\"\
    \ \")\n            words.foreach(word => {\n                if (word.startsWith(\"\
    I\")) {\n                    boredoms += word\n                }\n           \
    \ })\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\\
    ?|\\\\!\").foreach { s =>\n            if (s.startsWith(\"I\")) {\n          \
    \      boredoms += s\n            }\n        }\n        boredoms.size", "    \
    \    val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms.add(sentence.substring(0,boredomStart))\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach { sentence\
    \ =>\n            val words = sentence.split(\"\\\\s+\")\n            words.foreach\
    \ { word =>\n                if (word.startsWith(\"I\")) {\n                 \
    \   boredoms += word\n                }\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            val boredomEnd =\
    \ sentence.indexOf(\"i\", boredomStart + 1)\n            boredoms.add(sentence.substring(boredomStart,\
    \ boredomEnd))\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\.\")\n        val boredomWords = words.filter(_.startsWith(\"\
    I\"))\n        boredomWords.foreach(boredoms += _)\n        boredoms.size", " \
    \       val boredoms = mutable.ListBuffer[String]()\n        for(word <- S.split(\"\
    \\\\.\")) {\n            if(word.startsWith(\"I\")) {\n                boredoms\
    \ += word\n            }\n        }\n        boredoms.toList.size", "        val\
    \ boredoms = mutable.HashMap[String, Long]()\n        val words = S.split(\"\\\
    \\.\")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += (word -> 1L)\n            }\n        }\n        boredoms.values.sum",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words){\n            if(word.startsWith(\"I\")){\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        val words = S.split(\"\\\\.\")\n        for(word <- words)\
    \ {\n            val boredomWord = word.startsWith(\"I\")\n            if(boredomWord)\
    \ {\n                boredoms += (word -> 1L)\n            }\n        }\n    \
    \    boredoms.size", "        val boredoms = mutable.Set[String]()\n        val\
    \ sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        S.split(\"\\\\.|\\\\\
    ?|\\\\!\").foreach { s =>\n            boredoms += s\n        }\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\".toRegex)\n        for (sentence <-\
    \ sentences) {\n            if (sentence.startsWith(\"I\")) {\n              \
    \  boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        })\n\
    \        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        S.split(\"[.?!]\").foreach { s =>\n            if (s.startsWith(\"I\"\
    )) {\n                boredoms += s\n            }\n        }\n        boredoms.toList.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\".toRegex)\n        sentences.foreach(sentence => {\n            val boredomWords\
    \ = sentence.split(\"I\".toRegex).length\n            boredoms += boredomWords\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        for (sentence <- sentences)\
    \ {\n            if (sentence.startsWith(\"I\")) {\n                boredoms +=\
    \ sentence\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.Set[String]()\n        val words = S.split(\" \")\n        for(word\
    \ <- words) {\n            if(word.startsWith(\"I\")) {\n                boredoms\
    \ += word\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val words = S.split(\" \")\n        for(word\
    \ <- words) {\n            if(word.startsWith(\"I\")) {\n                boredoms\
    \ += word\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.Set[String]()\n        val words = S.split(\" \")\n        for(word\
    \ <- words) {\n            if(word.startsWith(\"I\")) {\n                boredoms\
    \ += word\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.Set[String]()\n        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n\
    \        sentences.foreach(sentence => {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        })\n   \
    \     boredoms.size", "        val boredoms = mutable.HashSet[String]()\n    \
    \    val sentences = S.split(\"[.!?]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach(sentence => {\n            if\
    \ (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n     \
    \       }\n        })\n        boredoms.size", "        val boredoms = mutable.HashMap[String,\
    \ Long]()\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach(s => {\n           \
    \ val boredom: String = s.substring(0, s.indexOf(\"I\"))\n            boredoms\
    \ += boredom -> (boredoms.get boredom).getOrElse(0) + 1\n        })\n        boredoms.values.sum",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomIndex = sentence.indexOf(\"i\")\n            if (boredomIndex\
    \ > 0) {\n                boredoms += sentence\n            }\n        }\n   \
    \     boredoms.size"]
stop_tokens:
- "\n    }\n"
