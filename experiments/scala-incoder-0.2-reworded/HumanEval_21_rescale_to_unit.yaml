name: HumanEval_21_rescale_to_unit
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n    // such that the smallest number will become 0 and the largest\
  \ will become 1\n    // >>> rescaleToUnit((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat)))\n    // (List[Float](0.0f.toFloat,\
  \ 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))\n    def rescaleToUnit(numbers\
  \ : List[Float]) : List[Float] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(rescaleToUnit((List[Float](2.0f.toFloat,\
  \ 49.9f.toFloat))).equals((List[Float](0.0f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](100.0f.toFloat,\
  \ 49.9f.toFloat))).equals((List[Float](1.0f.toFloat, 0.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals((List[Float](0.0f.toFloat,\
  \ 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](2.0f.toFloat,\
  \ 1.0f.toFloat, 5.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))).equals((List[Float](0.25f.toFloat,\
  \ 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    assert(rescaleToUnit((List[Float](12.0f.toFloat,\
  \ 11.0f.toFloat, 15.0f.toFloat, 13.0f.toFloat, 14.0f.toFloat))).equals((List[Float](0.25f.toFloat,\
  \ 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    }\n\n}\n"
completions: ["        val min = numbers.min\n        val max = numbers.max\n    \
    \    val range = max - min\n        val newMin = min - range * 0.5f\n        val\
    \ newMax = max + range * 0.5f\n        numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaled = (numbers - min) / range\n\
    \        scaled.map(x => if (x == 0.0f) 0.0f else x)", "        val minValue =\
    \ numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val newRange = range / 2\n        val newMinValue = minValue\
    \ + newRange\n        val newMaxValue = maxValue - newRange\n        numbers.map(x\
    \ => (x - minValue) / newRange)", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val newRange = range\
    \ / 2.0\n        numbers.map(x => (x - min) * newRange + min).toList", "     \
    \   val min = numbers.min\n        val max = numbers.max\n        val range =\
    \ max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val minNum = numbers.min\n        val maxNum =\
    \ numbers.max\n        val scaledList = numbers.map((num) => num.toFloat * maxNum\
    \ / minNum).toList\n        scaledList", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n     \
    \   val maxValue = numbers.max\n        val newNumbers = numbers.map { x =>\n\
    \            val newX = (x - minValue) / (maxValue - minValue)\n            newX.toFloat\n\
    \        }\n        newNumbers", "        val minValue = numbers.min\n       \
    \ val maxValue = numbers.max\n        val range = maxValue - minValue\n      \
    \  val rescaledNumbers = numbers.map(x => (x - minValue) / range)\n        rescaledNumbers",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val scaledNumbers = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledNumbers.toList", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val rescaledNumbers = numbers.map(x => (x - min) / range)\n        rescaledNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newMin = min / range\n        val newMax = max / range\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newMin = min - range * 0.5f\n        val newMax = max + range * 0.5f\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newMin = min / range\n        val newMax = max / range\n        numbers.map(\
    \ x => (x - newMin) / (newMax - newMin) )", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val newList = numbers.map(x => (x - minValue) / range)\n        newList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newList = numbers.map(x => (x - min) / range)\n   \
    \     newList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val rescaledNumbers = numbers.map(x =>\
    \ (x - min) / range)\n        rescaledNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val scaled\
    \ = (numbers - min) / range\n        scaled.map(x => if (x == 0.0f) 0.0f else\
    \ x)", "        val minValue = math.min(numbers)\n        val maxValue = math.max(numbers)\n\
    \        numbers.map(x => (x - minValue) / (maxValue - minValue))", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map( x => (x - newMin) /\
    \ (newMax - newMin) )", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newNumbers = numbers.map { n =>\n            val scaled\
    \ = (n - min) / range\n            scaled.toFloat\n        }\n        newNumbers",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val newNumbers = numbers.map(x =>\
    \ (x - minValue) / range)\n        newNumbers", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val newNumbers = numbers.map { x => (x - minValue) / range }\n      \
    \  newNumbers", "        val minValue = numbers.min\n        val maxValue = numbers.max\n\
    \        val range = maxValue - minValue\n        val scaledNumbers = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n     \
    \   val maxValue = numbers.max\n        val range = maxValue - minValue\n    \
    \    val scaledNumbers = numbers.map(x => (x - minValue) / range)\n        scaledNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val rescaledList = numbers.map(x => (x - min) / range)\n\
    \        rescaledList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newMin = min / range\n        val\
    \ newMax = max / range\n        numbers.map(x => (x - newMin) / (newMax - newMin))",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val newRange\
    \ = range / numbers.size\n        numbers.map(x => (x - minValue) / newRange)",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newMin = min / range\n        val newMax = max / range\n\
    \        numbers.map(_ - newMin).map(_ / newMax)", "        val minNum = numbers.min\n\
    \        val maxNum = numbers.max\n        val range = maxNum - minNum\n     \
    \   val newList = numbers.map(x => (x - minNum) / range)\n        newList", " \
    \       val minValue = numbers.min\n        val maxValue = numbers.max\n     \
    \   val range = maxValue - minValue\n        val scaledNumbers = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledNumbers", "        val minValue =\
    \ numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n\
    \        scaledNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        val newNumbers\
    \ = numbers.map(x => (x - min) / range * newRange + newMin)\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newMin = min / range\n        val newMax = max / range\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        val newMin = min - newRange\n     \
    \   val newMax = max + newRange\n        numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newMin = min / range\n        val\
    \ newMax = max / range\n        numbers.map(x => (x - newMin) / (newMax - newMin))",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val scaledNumbers = numbers.map((number:\
    \ Float) => number - minValue) / range\n        scaledNumbers.map((number: Float)\
    \ => number + minValue)", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val rescaled = numbers.map(x => (x - min)\
    \ / range)\n        rescaled", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newRange = range /\
    \ 2.0\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newMin = min / range\n        val newMax = max / range\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers.toList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2.0\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val newNumbers = numbers.map(x => (x - minValue) / range)\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newMin = min / range\n        val newMax = max / range\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        val newMin = min - newRange\n     \
    \   val newMax = max + newRange\n        numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))", "        val minValue = numbers.min\n        val maxValue = numbers.max\n\
    \        val range = maxValue - minValue\n        val scaledNumbers = numbers.map((number)\
    \ => number - minValue) / range\n        scaledNumbers.map((number) => number\
    \ + minValue)", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newMin = min / range\n        val\
    \ newMax = max / range\n        numbers.map(x => (x - newMin) / (newMax - newMin))",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val scaledNumbers\
    \ = numbers.map(x => (x - minValue) / range)\n        scaledNumbers", "      \
    \  val min = numbers.min\n        val max = numbers.max\n        val range = max\
    \ - min\n        val scaled = (numbers - min) / range\n        scaled.map(x =>\
    \ if (x == 0.0) 0.0f else x)", "        val minValue = numbers.min\n        val\
    \ maxValue = numbers.max\n        val range = maxValue - minValue\n        val\
    \ scaledNumbers = numbers.map((number: Float) => number - minValue) / range\n\
    \        scaledNumbers.toList", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newRange = range /\
    \ 2\n        numbers.map(x => (x - min) * newRange + newRange)", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val rescaledList = numbers.map(x => (x - min) / range)\n      \
    \  rescaledList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newNumbers = numbers.map(x => (x -\
    \ min) / range)\n        newNumbers", "        val minValue = numbers.min\n  \
    \      val maxValue = numbers.max\n        val range = maxValue - minValue\n \
    \       val newMinValue = minValue - range * 0.5f\n        val newMaxValue = maxValue\
    \ + range * 0.5f\n        numbers.map(x => (x - newMinValue) / (newMaxValue -\
    \ newMinValue))", "        val minValue = numbers.min\n        val maxValue =\
    \ numbers.max\n        val range = maxValue - minValue\n        val newRange =\
    \ range / 2\n        val newMinValue = minValue - newRange\n        val newMaxValue\
    \ = maxValue + newRange\n        numbers.map(x => (x - newMinValue) / newRange)",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / numbers.size\n\
    \        numbers.map(x => x - min * newRange)", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val newList = numbers.map( x => (x - minValue) / range )\n        newList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val newRange\
    \ = range / 2\n        val newMinValue = minValue + newRange\n        val newMaxValue\
    \ = maxValue - newRange\n        val newNumbers = numbers.map(x => (x - minValue)\
    \ / newRange)\n        (newMinValue, newMaxValue, newNumbers)", "        val minNum\
    \ = numbers.min\n        val maxNum = numbers.max\n        val rescaledNumbers\
    \ = numbers.map( x => (x - minNum) / (maxNum - minNum))\n        rescaledNumbers",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val scaledNumbers = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n     \
    \   val maxValue = numbers.max\n        val range = maxValue - minValue\n    \
    \    val scaledNumbers = numbers.map(x => (x - minValue) / range)\n        scaledNumbers.toList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaledNumbers = numbers.map((number:\
    \ Float) => number - min) / range\n        val zeros = scaledNumbers.takeWhile(_\
    \ < 0.0f)\n        val ones = scaledNumbers.takeWhile(_ > 0.0f)\n        scala.collection.mutable.ListBuffer.empty[Float]\
    \ ++= zeros ++ ones", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val newNumbers\
    \ = numbers.map(x => (x - minValue) / range)\n        newNumbers", "        val\
    \ minNum = numbers.min\n        val maxNum = numbers.max\n        val range =\
    \ (maxNum - minNum).toFloat\n        val scaledList = numbers.map(x => (x - minNum)\
    \ / range)\n        scaledList", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newRange = range /\
    \ 2\n        numbers.map(x => (x - min) * newRange + min).toList", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val newNumbers = numbers.map { x => (x - min) / range }\n     \
    \   newNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val rescaledList = numbers.map(x => (x\
    \ - min) / range)\n        rescaledList", "        val min = numbers.min\n   \
    \     val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val newMin = min /\
    \ range\n        val newMax = max / range\n        numbers.map(x => (x - newMin)\
    \ / (newMax - newMin))", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val scaledNumbers\
    \ = numbers.map(x => (x - minValue) / range)\n        scaledNumbers", "      \
    \  val min = numbers.min\n        val max = numbers.max\n        val range = max\
    \ - min\n        val rescaledList = numbers.map(x => (x - min) / range)\n    \
    \    rescaledList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaledNumbers = numbers.map(x => (x\
    \ - min) / range)\n        scaledNumbers", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers", "        val minValue = numbers.min\n        val maxValue =\
    \ numbers.max\n        val range = maxValue - minValue\n        val newRange =\
    \ range / 2\n        val newMinValue = minValue - newRange\n        val newMaxValue\
    \ = maxValue + newRange\n        numbers.map(x => (x - newMinValue) / newRange)",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaled = (numbers - min) / range\n        scaled.map(x\
    \ => if (x == 0.0f) 0.0f else x)", "        val minValue = math.min(numbers.map(_.toFloat))\n\
    \        val maxValue = math.max(numbers.map(_.toFloat))\n        val range =\
    \ maxValue - minValue\n        val scaledNumbers = numbers.map(x => (x - minValue)\
    \ / range)\n        scaledNumbers", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val newMin = min /\
    \ range\n        val newMax = max / range\n        numbers.map(x => (x - newMin)\
    \ / (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val rescaledList = numbers.map(x => (x\
    \ - min) / range)\n        rescaledList", "        val min = numbers.min\n   \
    \     val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n     \
    \   val maxValue = numbers.max\n        val range = maxValue - minValue\n    \
    \    val scaledNumbers = numbers.map(x => (x - minValue) / range)\n        scaledNumbers.toList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaledNumbers = numbers.map(x => (x - min) / range)\n\
    \        scaledNumbers", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val newRange\
    \ = range / numbers.size\n        val newNumbers = numbers.map(x => (x - minValue)\
    \ / newRange)\n        newNumbers", "        val minValue = numbers.min\n    \
    \    val maxValue = numbers.max\n        val range = maxValue - minValue\n   \
    \     val scaledNumbers = numbers.map(x => (x - minValue) / range)\n        scaledNumbers.toList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newList = numbers.map(x => (x - min) / range)\n   \
    \     newList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val minValue = numbers.min\n        val maxValue = numbers.max\n       \
    \ val range = maxValue - minValue\n        val newRange = range / 2\n        val\
    \ newMinValue = minValue - newRange\n        val newMaxValue = maxValue + newRange\n\
    \        numbers.map(x => (x - newMinValue) / (newMaxValue - newMinValue))", " \
    \       val minValue = numbers.min\n        val maxValue = numbers.max\n     \
    \   val newNumbers = numbers.map(x => (x - minValue) / (maxValue - minValue))\n\
    \        newNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newMin = min / range\n        val\
    \ newMax = max / range\n        numbers.map(x => (x - newMin) / (newMax - newMin))",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaledNumbers = numbers.map(x => (x - min) / range)\n\
    \        scaledNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2.0\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newNumbers\
    \ = numbers.map( x => (x - min) / range )\n        newNumbers", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        numbers.map(x => (x - min) * newRange\
    \ + min).toList", "        val minValue = math.min(numbers)\n        val maxValue\
    \ = math.max(numbers)\n        val range = maxValue - minValue\n        val scaledNumbers\
    \ = numbers.map(x => (x - minValue) / range)\n        scaledNumbers", "      \
    \  val min = numbers.min\n        val max = numbers.max\n        val range = max\
    \ - min\n        val newMin = min / range\n        val newMax = max / range\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2.0\n        val newMin = min - newRange\n   \
    \     val newMax = max + newRange\n        numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers", "        val minValue = numbers.min\n        val maxValue =\
    \ numbers.max\n        val range = maxValue - minValue\n        val newRange =\
    \ range / 2\n        val newMinValue = minValue - newRange\n        val newMaxValue\
    \ = maxValue + newRange\n        numbers.map(x => (x - newMinValue) / newRange)",
  "        val minNum = numbers.min\n        val maxNum = numbers.max\n        val\
    \ length = numbers.length\n        val newNumbers = mutable.ListBuffer[Float]()\n\
    \        var i = 0\n        while (i < length) {\n            val num = numbers(i)\n\
    \            if (num == minNum) {\n                newNumbers += 0.0f.toFloat\n\
    \            } else if (num == maxNum) {\n                newNumbers += 1.0f.toFloat\n\
    \            } else {\n                newNumbers += (num - minNum) / (maxNum\
    \ - minNum) * (1.0f.toFloat - 0.0f.toFloat) + 0.0f.toFloat\n            }\n  \
    \          i += 1\n        }\n        newNumbers.toList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val scaledNumbers\
    \ = numbers.map { x => (x - min) / range }\n        scaledNumbers", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val scaled = (numbers - min) / range\n        scaled.map(x => if\
    \ (x == 0.0f) 0.0f else x)", "        val minValue = numbers.min\n        val\
    \ maxValue = numbers.max\n        val range = maxValue - minValue\n        val\
    \ scaledNumbers = numbers.map { n => (n - minValue) / range }\n        scaledNumbers",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val scaledNumbers = numbers.map( x\
    \ => (x - minValue) / range )\n        scaledNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2.0\n        val newMin = min - newRange\n        val newMax = max\
    \ + newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", " \
    \       val minValue = numbers.min\n        val maxValue = numbers.max\n     \
    \   val range = (maxValue - minValue).toFloat\n        val scaledNumbers = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val scaledNumbers\
    \ = numbers.map(n => (n - min) / range)\n        scaledNumbers", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val newMin = min / range\n        val newMax = max / range\n  \
    \      numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min =\
    \ numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newMin = min / range\n        val newMax = max / range\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map(x => (x - min) / range)\n        newList", "        val min =\
    \ numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val scaledNumbers = numbers.map(x => (x - min) / range)\n        scaledNumbers",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val newRange = range / 2\n       \
    \ val newMinValue = minValue + newRange\n        val newMaxValue = maxValue -\
    \ newRange\n        val newNumbers = numbers.map(x => (x - minValue) / newRange)\n\
    \        (newMinValue, newMaxValue, newNumbers)", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newMin = min - range * 0.5f\n        val newMax = max\
    \ + range * 0.5f\n        val newNumbers = numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))\n        newNumbers", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val newMin = min /\
    \ range\n        val newMax = max / range\n        numbers.map(x => (x - newMin)\
    \ / (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaled = (numbers - min) / range\n\
    \        scaled.map(x => if (x == 0.0f) 0.0f else x)", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val rescaledList\
    \ = numbers.map { x => (x - min) / range }\n        rescaledList", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val newMin = min / range\n        val newMax = max / range\n  \
    \      numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min =\
    \ numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newMin = min / range\n        val newMax = max / range\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map( x => (x\
    \ - newMin) / (newMax - newMin) )", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val scaledNumbers\
    \ = numbers.map(x => (x - min) / range)\n        scaledNumbers", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val newNumbers = numbers.map(x => (x - min) / range)\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newMin = min / range\n        val newMax = max / range\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val newRange = range / 2\n        val newMinValue = minValue\
    \ + newRange\n        val newMaxValue = maxValue - newRange\n        numbers.map(x\
    \ => (x - minValue) / range)", "        val minValue = numbers.min\n        val\
    \ maxValue = numbers.max\n        val range = maxValue - minValue\n        val\
    \ newRange = range / 2\n        val newMinValue = minValue - newRange\n      \
    \  val newMaxValue = maxValue + newRange\n        numbers.map(x => (x - newMinValue)\
    \ / newRange)", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaled = (numbers - min) / range\n\
    \        scaled.map(x => (x - min) * range + min)", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newNumbers\
    \ = numbers.map( x => (x - min) / range )\n        newNumbers", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val rescaledList = numbers.map(x => (x - min) / range)\n        rescaledList",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val newRange = range / 2\n       \
    \ numbers.map( x => (x - minValue) / newRange)", "        val minNum = numbers.min\n\
    \        val maxNum = numbers.max\n        val scale = (maxNum - minNum) / (numbers.size\
    \ - 1)\n        numbers.map(x => x * scale)", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val newNumbers = numbers.map(x =>\
    \ (x - minValue) / (maxValue - minValue))\n        newNumbers", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newMin = min / range\n        val newMax = max / range\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val newNumbers = numbers.map(x =>\
    \ (x - minValue) / (maxValue - minValue))\n        newNumbers", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        val newMin = min - newRange\n     \
    \   val newMax = max + newRange\n        numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newMin = min / range\n        val\
    \ newMax = max / range\n        numbers.map(x => (x - newMin) / (newMax - newMin))",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2.0\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers.toList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaled = (numbers.map(x => (x - min)\
    \ / range).toList)\n        scaled.map(x => if (x == 0.0) 0.0f else x)", "   \
    \     val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        val newNumbers = numbers.map(x =>\
    \ (x - newMin) / (newMax - newMin))\n        newNumbers", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val newMinValue = minValue - range * 0.5\n        val newMaxValue\
    \ = maxValue + range * 0.5\n        numbers.map(x => (x - newMinValue) / (newMaxValue\
    \ - newMinValue))", "        val minNum = numbers.min\n        val maxNum = numbers.max\n\
    \        val range = maxNum - minNum\n        val newList = numbers.map(x => (x\
    \ - minNum) / range)\n        newList", "        val min = numbers.min\n     \
    \   val max = numbers.max\n        val range = max - min\n        val newNumbers\
    \ = numbers.map(x => (x - min) / range)\n        newNumbers", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val newList = numbers.map(x\
    \ => (x - minValue) / (maxValue - minValue))\n        newList", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val scaled = (numbers - min) / range\n        scaled.map(x => if (x ==\
    \ 0.0f) 0.0f else x)", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val rescaledList = numbers.map(x => (x\
    \ - min) / range)\n        rescaledList", "        val min = numbers.min\n   \
    \     val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val rescaledList = numbers.map { x =>\
    \ (x - min) / range }\n        rescaledList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val scaledNumbers\
    \ = numbers.map(x => (x - min) / range)\n        scaledNumbers", "        val\
    \ minValue = numbers.min\n        val maxValue = numbers.max\n        val range\
    \ = maxValue - minValue\n        val newRange = range / 2\n        val newMinValue\
    \ = minValue + newRange\n        val newMaxValue = maxValue - newRange\n     \
    \   numbers.map(x => (x - minValue) / newRange)", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val newNumbers = numbers.map{x => (x - minValue) / range * 2.0f + 1.0f}\n\
    \        newNumbers", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val newMinValue\
    \ = minValue - range * 0.5f\n        val newMaxValue = maxValue + range * 0.5f\n\
    \        numbers.map(x => (x - newMinValue) / (newMaxValue - newMinValue))", " \
    \       val minNum = numbers.min\n        val maxNum = numbers.max\n        val\
    \ scale = (maxNum - minNum) / (numbers.size - 1)\n        numbers.map(x => x *\
    \ scale.toFloat)", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newMin = min / range\n        val\
    \ newMax = max / range\n        numbers.map(x => (x - newMin) / (newMax - newMin))",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaled = (numbers - min) / range\n        scaled.map(x\
    \ => if (x == 0.0) 0.0 else x)"]
stop_tokens:
- "\n    }\n"
