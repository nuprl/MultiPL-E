name: HumanEval_101_words_string
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given a string of words separated by commas or spaces. Your\
  \ task is\n    // to split the string into words and return a list of the words.\n\
  \    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    //\
  \ (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"\
  One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"\
  three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi,\
  \ my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"\
  John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
  One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
  Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
  One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"\
  three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
  \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
  , \"gamal\"))));\n    }\n\n}\n"
completions: ["        val words = s.split(\"\"\"\\s*,\\s*|\\s*,\\s*\"\"\").map(_.trim).toList\n\
    \        words.reverse", "        val words = s.split(\",\")\n        val words2\
    \ = words.map(_.trim).toList\n        words2.toList", "        val words = s.split(\"\
    [, ]+\")\n        val words2 = words.map(_.trim).toList\n        words2.toList",
  "        val words = s.split(\"[, ]+\")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            result.add(word)\n        }\n    \
    \    return result.toList", "        val words = s.split(\"[, ]+\")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           result.add(word)\n        }\n        return result.toList", "    \
    \    val words = s.split(\", \").map(_.trim).toList\n        val words2 = words.map(_.toLowerCase).toList\n\
    \        words2.toList", "        val words = s.split(\"[, ]+\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList", "        val words\
    \ = s.split(\"[, ]+\")\n        val list = mutable.ListBuffer[String]()\n    \
    \    for (word <- words) {\n            list += word\n        }\n        list.toList",
  "        val words = s.split(\"[, ]+\")\n        val list = words.map(_.trim).toList\n\
    \        list.sortWith(_ < _)", "        val words = s.split(\"[, ]+\")\n    \
    \    val words2 = words.map(_.trim).toList\n        words2.toList", "        val\
    \ words = s.split(\", \")\n        val words2 = words.map(_.trim).filter(_.nonEmpty)\n\
    \        words2.toList", "        val words = s.split(\",\")\n        words.toList",
  "        val words = s.split(\"[, ]+\")\n        words.toList", "        val words\
    \ = s.split(\",\")\n        val words2 = words.map(_.trim).toList\n        words2.toList",
  "        val words = s.split(\",\")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            result ++= word.split(\" \")\n   \
    \     }\n        return result.toList", "        val words = s.split(\"[, ]+\"\
    )\n        val words2 = words.map(_.trim).toList\n        words2.toList", "  \
    \      val words = s.split(\",\")\n        val words2 = words.map(_.trim).filter(_.nonEmpty)\n\
    \        words2.toList", "        val words = s.split(\", \")\n        words.toList",
  "        val words = s.split(\"[, ]+\")\n        val wordsList = words.toList\n\
    \        wordsList", "        val words = s.split(\",\")\n        val words2 =\
    \ words.map(_.trim).toList\n        words2.toList", "        val words = s.split(\"\
    [, ]+\")\n        words.toList", "        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        val result = new mutable.ListBuffer[String]()\n        for(word <- words)\
    \ {\n            result.add(word)\n        }\n        return result.toList", " \
    \       val words = s.split(\"[, ]+\")\n        words.toList", "        val words\
    \ = s.split(\", \")\n        words.toList", "        val words = s.split(\"[,\
    \ ]+\")\n        words.toList", "        val words = s.split(\"[, ]+\")\n    \
    \    val words2 = words.map(_.trim).toList\n        words2.toList", "        val\
    \ words = s.split(\"[,\\\\s]+\")\n        val list = mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            list += word\n        }\n        list.toList",
  "        val words = s.split(\"[, ]+\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\",\")\n        val words2\
    \ = words.map(_.trim).toList\n        words2.toList", "        val words = s.split(\"\
    , \")\n        words.toList", "        val words = s.split(\", \")\n        words.toList",
  "        val words = s.split(\"[, ]+\")\n        val words2 = words.map(_.trim).filter(_.nonEmpty)\n\
    \        words2.toList", "        val words = s.split(\",\")\n        val words2\
    \ = words.map(_.trim).toList\n        words2.toList", "        val words = s.split(\"\
    [, ]+\")\n        val words2 = words.map(_.trim).toList\n        words2.toList",
  "        val words = s.split(\",\")\n        val words2 = words.map(_.trim).filter(_.nonEmpty)\n\
    \        words2.toList", "        val words = s.split(\", \")\n        val words2\
    \ = words.map(_.trim).toList\n        words2.toList", "        val words = s.split(\"\
    \ \").filter(_.nonEmpty)\n        words.toList", "        val words = s.split(\"\
    ,\")\n        val words2 = words.map(_.trim).toList\n        words2.toList", " \
    \       val words = s.split(\"\\\\s*,\\\\s*\")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            result += word\n        }\n      \
    \  return result.toList", "        val words = s.split(\",\")\n        val words2\
    \ = words.map(_.trim).toList\n        words2.toList", "        val words = s.split(\"\
    , \")\n        val words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList",
  "        val words = s.split(\"[, ]+\")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            result.add(word)\n        }\n    \
    \    return result.toList", "        val words = s.split(\",\")\n        val words2\
    \ = words.map(_.trim).toList\n        words2.toList", "        val words = s.split(\"\
    , \")\n        val words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList",
  "        val words = s.split(\",\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\"[,\\\\s]+\")\n       \
    \ val words2 = words.map(_.trim).toList\n        words2.toList", "        val\
    \ words = s.split(\",\")\n        words.toList", "        val words = s.split(\"\
    ,\")\n        val words2 = words.map(_.trim).toList\n        words2.toList", " \
    \       val words = s.split(\"\"\"\\W+\"\"\")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            result += word\n        }\n      \
    \  return result.toList", "        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        words.toList", "        val words = s.split(\"[,\\\\s]+\").map(_.trim).toList\n\
    \        val words2 = words.filter(_.nonEmpty)\n        words2.toList", "    \
    \    val words = s.split(\", \")\n        words.toList", "        val words =\
    \ s.split(\" \").filter(_.nonEmpty)\n        words.toList", "        val words\
    \ = s.split(\",\")\n        val words2 = words.map(_.trim).filter(_.nonEmpty)\n\
    \        words2.toList", "        val words = s.split(\" \").map(_.toLowerCase).toList\n\
    \        val wordList = words.toList\n        wordList.sortWith(_ < _)", "   \
    \     val words = s.split(\", \")\n        words.toList", "        val words =\
    \ s.split(\", \")\n        val words2 = words.map(_.trim).filter(_.nonEmpty)\n\
    \        words2.toList", "        val words = s.split(\"[, ]+\")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           result.add(word)\n        }\n        return result.toList", "    \
    \    val words = s.split(\" \").filter(_.nonEmpty)\n        val words2 = words.map(_.toLowerCase)\n\
    \        val words3 = words2.filter(_.contains(\",\"))\n        val words4 = words3.map(_.split(\"\
    ,\"))\n        val words5 = words4.map(_.map(_.toLowerCase))\n        val words6\
    \ = words5.filter(_.contains(\",\"))\n        val words7 = words6.map(_.split(\"\
    ,\"))\n        val words8 = words7.map(_.map(_.toLowerCase))\n        val words9\
    \ = words8.filter(_.contains(\",\"))\n        val words10 = words9.map(_.split(\"\
    ,\"))\n        val words11 = words10.map(_.map(_.toLowerCase))\n        val words12\
    \ = words11.filter(_.contains(\",\"))\n        val words13 = words12.map(_.split(\"\
    ,\"))\n        val words14 = words13.map(_.map(_.toLowerCase))\n        val words15\
    \ = words14.filter(_.contains(\",\"))\n        val words16 = words15.map(_.split(\"\
    ,\"))\n        val words17 = words16.map(_.map(_.toLowerCase))\n        val words18\
    \ = words17.filter(_.contains(\",\"))\n        val words19 = words18.map(_.split(\"\
    ,\"))\n        val words20 = words19.map(_.map(_.toLowerCase))\n        val words21\
    \ = words20.filter(_.contains(\",\"))\n        val words22 = words21.map(_.split(\"\
    ,\"))\n        val words23 = words22.map(_.map(_.toLowerCase))\n        val words24\
    \ = words23.filter(_.contains(\",\"))\n        val words25 = words24.map(_.split(\"\
    ,\"))\n        val words26 = words25.map(_.map(_.toLowerCase))\n        val words27\
    \ = words26.filter(_.contains(\",\"))\n        val words28 = words27.map(_.split(\"\
    ,\"))\n        val words29 = words28.map(_.map(_.toLowerCase))\n        val words30\
    \ = words29.filter(_.contains(\",\"))\n        val words31 = words30.map(_.split(\"\
    ,\"))\n        val words32 = words31.map(_.map(_.toLowerCase))\n        val words33\
    \ = words32.filter(_.contains(\",\"))\n        val words34 = words33.map(_.split(\"\
    ,\"))\n        val words35 = words34.map(_.map(_.toLowerCase))\n        val words36\
    \ = words35.filter(_.contains(\",\"))\n        val words37 = words36.map(_.split(\"\
    ,\"))\n        val words38 = words37.map(_.map(_.toLowerCase))\n        val words39\
    \ = words38.filter(_.contains(\",\"))", "        val words = s.split(\",\")\n\
    \        val words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList",
  "        val words = s.split(\" \").filter(_.nonEmpty)\n        words.toList", " \
    \       val words = s.split(\",\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\"[, ]+\")\n        words.toList",
  "        val words = s.split(\"[,\\\\s]+\")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            result += word\n        }\n       \
    \ return result.toList", "        val words = s.split(\"[, ]+\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList", "        val words\
    \ = s.split(\"[, ]+\")\n        words.toList", "        val words = s.split(\"\
    ,\")\n        val words2 = words.map(_.trim).toList\n        words2.toList", " \
    \       val words = s.split(\"[, ]+\")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            result += word\n        }\n       \
    \ return result.toList", "        val words = s.split(\",\")\n        val words2\
    \ = words.map(_.trim).toList\n        words2.toList", "        val words = s.split(\"\
    ,\")\n        val words2 = words.map(_.trim).toList\n        words2.toList", " \
    \       val words = s.split(\",\")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            result.add(word.trim())\n        }\n\
    \        return result.toList", "        val words = s.split(\"\"\"\\W+\"\"\"\
    )\n        val words2 = words.map(_.toLowerCase)\n        val words3 = words2.filter(_.length\
    \ > 0)\n        val words4 = words3.filter(_.length < 5)\n        val words5 =\
    \ words4.filter(_.length >= 5)\n        val words6 = words5.filter(_.length <\
    \ 10)\n        val words7 = words6.filter(_.length >= 10)\n        val words8\
    \ = words7.filter(_.length < 20)\n        val words9 = words8.filter(_.length\
    \ >= 20)\n        val words10 = words9.filter(_.length < 30)\n        val words11\
    \ = words10.filter(_.length >= 30)\n        val words12 = words11.filter(_.length\
    \ < 40)\n        val words13 = words12.filter(_.length >= 40)\n        val words14\
    \ = words13.filter(_.length < 50)\n        val words15 = words14.filter(_.length\
    \ >= 50)\n        val words16 = words15.filter(_.length < 60)\n        val words17\
    \ = words16.filter(_.length >= 60)\n        val words18 = words17.filter(_.length\
    \ < 70)\n        val words19 = words18.filter(_.length >= 70)\n        val words20\
    \ = words19.filter(_.length < 80)\n        val words21 = words20.filter(_.length\
    \ >= 80)\n        val words22 = words21.filter(_.length < 90)\n        val words23\
    \ = words22.filter(_.length >= 90)\n        val words24 = words23.filter(_.length\
    \ < 100)\n        val words25 = words24.filter(_.length >= 100)\n        val words26\
    \ = words25.filter(_.length < 200)\n        val words27 = words26.filter(_.length\
    \ >= 200)\n        val words28 = words27.filter(_.length < 300)\n        val words29\
    \ = words28.filter(_.length >= 300)\n        val words30 = words29.filter(_.length\
    \ < 400)\n        val words31 = words30.filter(_.length >= 400)\n        val words32\
    \ = words31.filter(_.length < 500)\n        val words33 = words32.filter(_.length\
    \ >= 500)\n        val words34 = words33.filter(_.length < 600)\n        val words35\
    \ = words34.filter(_.length >= 600)\n        val words36 = words35.filter(_.length\
    \ < 700)\n        val words37 = words36.filter(_.length >= 700)\n        val words38\
    \ = words37.filter(_.length < 800)\n        val words39 = words38.filter(_.length\
    \ >= 800)\n        val words40 = words39.filter(_.length", "        val words\
    \ = s.split(\"\"\"\\s*,\\s*|\\s*,\\s*\"\"\").map(_.trim).toList\n        words.toList",
  "        val words = s.split(\"[, ]+\")\n        val words2 = words.map(_.trim).filter(_.nonEmpty)\n\
    \        words2.toList", "        val words = s.split(\",\")\n        val words2\
    \ = words.map(_.trim).toList\n        words2.toList", "        val words = s.split(\"\
    [, ]+\")\n        val result = new mutable.ListBuffer[String]()\n        for (word\
    \ <- words) {\n            result.add(word)\n        }\n        return result.toList",
  "        val words = s.split(\",\")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            result += word\n        }\n       \
    \ return result.toList", "        val words = s.split(\"\\\\s*,\\\\s*\")\n   \
    \     words.toList", "        val words = s.split(\", \")\n        words.toList",
  "        val words = s.split(\",\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\"[, ]+\")\n        val\
    \ list = mutable.ListBuffer[String]()\n        for (w <- words) {\n          \
    \  list += w\n        }\n        list.toList", "        val words = s.split(\"\
    , \")\n        val result = new mutable.ListBuffer[String]()\n        for (word\
    \ <- words) {\n            val wordList = word.split(\"\\\\s+\")\n           \
    \ for (wordList <- wordList) {\n                result += wordList\n         \
    \   }\n        }\n        return result.toList", "        val words = s.split(\"\
    [, ]+\")\n        val list = mutable.ListBuffer[String]()\n        for (word <-\
    \ words) {\n            list += word\n        }\n        list.toList", "     \
    \   val words = s.split(\"[, ]+\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\" \").map(_.toLowerCase).toList\n\
    \        words.toList", "        val words = s.split(\"[, ]+\")\n        val words2\
    \ = words.map(_.trim).toList\n        words2.toList", "        val words = s.split(\"\
    , \")\n        words.toList", "        val words = s.split(\", \")\n        val\
    \ words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList", "   \
    \     val words = s.split(\"\"\"\\s*,\\s*\"\"\").map(_.trim).toList\n        val\
    \ words2 = words.filter(_.nonEmpty)\n        words2.toList", "        val words\
    \ = s.split(\" \").map(_.toLowerCase).toList\n        words.toList", "       \
    \ val words = s.split(\",\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\"[, ]+\")\n        val\
    \ words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList", "   \
    \     val words = s.split(\", \")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\"[, ]+\")\n        val\
    \ list = mutable.ListBuffer[String]()\n        for (word <- words) {\n       \
    \     list += word\n        }\n        list.toList", "        val words = s.split(\"\
    \ \").map(_.toLowerCase).toList\n        val wordList = words.toList\n       \
    \ wordList.sortWith((x, y) => x.compareTo(y) == 1)", "        val words = s.split(\"\
    [, ]+\")\n        words.toList", "        val words = s.split(\",\")\n       \
    \ words.toList", "        val words = s.split(\"[,\\\\s]+\")\n        val words2\
    \ = words.map(_.trim).toList\n        words2.toList", "        val words = s.split(\"\
    \\\\s*,\\\\s*\")\n        val words2 = words.map(_.trim).toList\n        words2.toList",
  "        val words = s.split(\",\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\",\")\n        val words2\
    \ = words.map(_.trim).toList\n        words2.toList", "        val words = s.split(\"\
    , \")\n        val words2 = words.map(_.trim).toList\n        words2.toList",
  "        val words = s.split(\"[, ]+\")\n        val words2 = words.map(_.trim).filter(_.nonEmpty)\n\
    \        words2.toList", "        val words = s.split(\",\")\n        val words2\
    \ = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList", "        val\
    \ words = s.split(\"[, ]+\")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            result += word\n        }\n      \
    \  return result.toList", "        val words = s.split(\",\")\n        val words2\
    \ = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList", "        val\
    \ words = s.split(\"[, ]+\")\n        val words2 = words.map(_.trim).filter(_.nonEmpty)\n\
    \        words2.toList", "        val words = s.split(\"\"\"\\s*,\\s*\"\"\").map(_.trim).toList\n\
    \        words.reverse", "        val words = s.split(\", \")\n        val words2\
    \ = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList", "        val\
    \ words = s.split(\"[, ]+\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\"[, ]+\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList", "        val words\
    \ = s.split(\",\")\n        val words2 = words.map(_.trim).toList\n        words2.toList",
  "        val words = s.split(\",\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\"[, ]+\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList", "        val words\
    \ = s.split(\",\")\n        val words2 = words.map(_.trim).toList\n        words2.toList",
  "        val words = s.split(\"[,\\\\s]+\").map(_.trim).toList\n        words.reverse",
  "        val words = s.split(\"[, ]+\")\n        words.toList", "        val words\
    \ = s.split(\"[, ]+\")\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => result += word)\n        return result.toList",
  "        val words = s.split(\" \").filter(_.nonEmpty)\n        val words2 = words.map(_.toLowerCase)\n\
    \        val words3 = words2.filter(_.nonEmpty)\n        val words4 = words3.map(_.toUpperCase)\n\
    \        val words5 = words4.filter(_.nonEmpty)\n        val words6 = words5.map(_.toUpperCase)\n\
    \        val words7 = words6.filter(_.nonEmpty)\n        val words8 = words7.map(_.toUpperCase)\n\
    \        val words9 = words8.filter(_.nonEmpty)\n        val words10 = words9.map(_.toUpperCase)\n\
    \        val words11 = words10.filter(_.nonEmpty)\n        val words12 = words11.map(_.toUpperCase)\n\
    \        val words13 = words12.filter(_.nonEmpty)\n        val words14 = words13.map(_.toUpperCase)\n\
    \        val words15 = words14.filter(_.nonEmpty)\n        val words16 = words15.map(_.toUpperCase)\n\
    \        val words17 = words16.filter(_.nonEmpty)\n        val words18 = words17.map(_.toUpperCase)\n\
    \        val words19 = words18.filter(_.nonEmpty)\n        val words20 = words19.map(_.toUpperCase)\n\
    \        val words21 = words20.filter(_.nonEmpty)\n        val words22 = words21.map(_.toUpperCase)\n\
    \        val words23 = words22.filter(_.nonEmpty)\n        val words24 = words23.map(_.toUpperCase)\n\
    \        val words25 = words24.filter(_.nonEmpty)\n        val words26 = words25.map(_.toUpperCase)\n\
    \        val words27 = words26.filter(_.nonEmpty)\n        val words28 = words27.map(_.toUpperCase)\n\
    \        val words29 = words28.filter(_.nonEmpty)\n        val words30 = words29.map(_.toUpperCase)\n\
    \        val words31 = words30.filter(_.nonEmpty)\n        val words32 = words31.map(_.toUpperCase)\n\
    \        val words33 = words31.filter(_.nonEmpty)\n        val words34 = words31.map(_.toUpperCase)\n\
    \        val words35 = words31.filter(_.nonEmpty)\n        val words36 = words31.map(_.toUpperCase)\n\
    \        val words37 = words31.filter(_.nonEmpty)\n        val words38 = words31.map(_.toUpperCase)\n\
    \        val words39 = words31.filter(_.nonEmpty)\n        val words40 = word",
  "        val words = s.split(\",\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\"\"\"\\s*,\\s*\"\"\").map(_.trim).toList\n\
    \        val words2 = words.filter(_.nonEmpty)\n        words2.toList", "    \
    \    val words = s.split(\",\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\"[, ]+\")\n        val\
    \ list = words.map(_.trim).toList\n        list.filter(_.nonEmpty)", "       \
    \ val words = s.split(\"[,\\\\s]+\").map(_.trim).toList\n        words.toList",
  "        val words = s.split(\",\")\n        val words2 = words.map(_.trim).filter(_.nonEmpty)\n\
    \        words2.toList", "        val words = s.split(\"[, ]+\")\n        val\
    \ words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList", "   \
    \     val words = s.split(\" \").filter(_.nonEmpty)\n        val wordsString =\
    \ words.map(_.toLowerCase)\n        wordsString", "        val words = s.split(\"\
    \"\"\\W+\"\"\")\n        val words2 = words.map(_.toLowerCase).toList\n      \
    \  words2.toList", "        val words = s.split(\",\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\"\"\"[, ]+\"\"\")\n   \
    \     val words2 = words.map(_.trim).toList\n        words2.toList", "       \
    \ val words = s.split(\"[, ]+\")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            result += word\n        }\n      \
    \  return result.toList", "        val words = s.split(\",\")\n        val words2\
    \ = words.map(_.trim).toList\n        words2.toList", "        val words = s.split(\"\
    ,\")\n        words.toList", "        val words = s.split(\"[, ]+\")\n       \
    \ val words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList", " \
    \       val words = s.split(\"[, ]+\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        words.toList", "        val words = s.split(\",\")\n        val words2\
    \ = words.map(_.trim).toList\n        words2.toList", "        val words = s.split(\"\
    , \")\n        val words2 = words.map(_.trim).toList\n        words2.toList",
  "        val words = s.split(\"\"\"\\s*,\\s*\"\"\").map(_.trim).toList\n       \
    \ words.reverse", "        val words = s.split(\",\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\"[, ]+\")\n        val\
    \ wordsList = words.toList\n        wordsList", "        val words = s.split(\"\
    [, ]+\")\n        val words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList",
  "        val words = s.split(\",\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\"\\\\s*,\\\\s*\")\n   \
    \     val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            result.add(word)\n        }\n        return result.toList", " \
    \       val words = s.split(\"[, ]+\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\",\")\n        val words2\
    \ = words.map(_.trim).toList\n        words2.toList", "        val words = s.split(\"\
    [, ]+\")\n        val result = new mutable.ListBuffer[String]()\n        for (word\
    \ <- words) {\n            result += (word + \",\")\n        }\n        result\
    \ -= result.last\n        result.mkString.split(\",\")", "        val words =\
    \ s.split(\"\\\\s*,\\\\s*\")\n        val words2 = words.map(_.trim).filter(_.nonEmpty)\n\
    \        words2.toList", "        val words = s.split(\"[, ]+\")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           result += word\n        }\n        return result.toList", "      \
    \  val words = s.split(\",\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\", \")\n        val words2\
    \ = words.map(_.trim).toList\n        words2.toList", "        val words = s.split(\"\
    , \")\n        words.toList", "        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList", "        val words\
    \ = s.split(\",\")\n        val words2 = words.map(_.trim).filter(_.nonEmpty)\n\
    \        words2.toList", "        val words = s.split(\"\"\"\\s*,\\s*|\\s*,\\\
    s*\"\"\").map(_.trim).toList\n        words.toList", "        val words = s.split(\"\
    ,\")\n        words.toList", "        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        val words2 = words.map(_.toLowerCase)\n        words2.toList", "    \
    \    val words = s.split(\"\\\\s*,\\\\s*\")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            result.append(word)\n        }\n \
    \       return result.toList", "        val words = s.split(\"\"\"\\s*,\\s*\"\"\
    \").map(_.trim).toList\n        words.toList", "        val words = s.split(\"\
    ,\")\n        words.toList.map(_.trim).toList", "        val words = s.split(\"\
    \"\"\\W+\"\"\")\n        val list = mutable.ListBuffer[String]()\n        for\
    \ (word <- words) {\n            list += word\n        }\n        list.toList",
  "        val words = s.split(\", \")\n        val list = words.toList\n        list.sortWith(_.compareTo(_)\
    \ < 0)\n        list", "        val words = s.split(\"[, ]+\")\n        words.toList",
  "        val words = s.split(\",\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\"[, ]+\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList", "        val words\
    \ = s.split(\",\")\n        val words2 = words.map(_.trim).toList\n        words2.toList",
  "        val words = s.split(\"\\\\s*,\\\\s*\")\n        val words2 = words.map(_.trim).toList\n\
    \        words2.toList", "        val words = s.split(\"[, ]+\")\n        val\
    \ wordsList = words.toList\n        wordsList"]
stop_tokens:
- "\n    }\n"
