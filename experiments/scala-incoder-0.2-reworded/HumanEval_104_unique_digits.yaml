name: HumanEval_104_unique_digits
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of positive integers x. return a sorted list of all \n    //\
  \ elements that hasn't any even digit.\n    // Note: Returned list should be sorted\
  \ in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong,\
  \ 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x : List[Long]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
  \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
  \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
  \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
  \ 135l.toLong))));\n    }\n\n}\n"
completions: ["        val result = new mutable.ListBuffer[Long]()\n        val evenDigit\
    \ = new mutable.HashSet[Long]()\n        val oddDigit = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => {\n            val digit = x%10\n            if (digit==0)\
    \ {\n                evenDigit.add(x)\n            } else {\n                oddDigit.add(x)\n\
    \            }\n        })\n        evenDigit.foreach(x => result.add(x))\n  \
    \      oddDigit.foreach(x => result.add(x))\n        result.sort", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x.toString.toInt%2\
    \ == 0) result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.foreach { x => \n            if (result.contains(x))\
    \ \n                result.filter(_ != x).foreach(x => result.remove(x))\n   \
    \         else \n                result += x\n        }\n        result.toList",
  "        val evenDigits = x.filter(x => x.toString.toInt%2 == 0)\n        evenDigits.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.toList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        x.foreach { x =>\n        \
    \    val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n       \
    \         result += x\n            }\n        }\n        result.sortWith(_ < _)",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach(x\
    \ => result += x)\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => { \n            val digit = x.toString.toInt\n       \
    \     if (digit % 2 == 0) result.+=(x) \n        })\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.LinkedList[Long]()\n        val evenDigits\
    \ = new mutable.HashSet[Long]()\n        val oddDigits = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => {\n            if (x % 2 == 0) {\n                evenDigits.add(x)\n\
    \            } else {\n                oddDigits.add(x)\n            }\n     \
    \   })\n        oddDigits.foreach(x => {\n            if (result.contains(x))\
    \ {\n                result.add(x)\n            } else {\n                result.addAll(evenDigits.filter(_\
    \ != x))\n            }\n        })\n        result.toList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitCount\
    \ = evenDigits.size\n        evenDigits.foreach(x => result.add(x))\n        val\
    \ oddDigitCount = digits.length - evenDigitCount\n        for(i <- 0 until oddDigitCount)\
    \ {\n            val x = digits(i)\n            val y = digits(i + 1)\n      \
    \      if(x % 2 == 0 && y % 2 == 0) {\n                result.add(x + y)\n   \
    \         }\n        }\n        result.sort", "        val result = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x))\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ x.size) {\n            val digit = x(i).toString.toInt\n            if (digit\
    \ % 2 == 0) {\n                result.add(x(i))\n            }\n        }\n  \
    \      result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach { x => \n            if (result.contains(x)) \n     \
    \           result.filter(_ != x).foreach(x => result.remove(x))\n           \
    \ else \n                result += x\n        }\n        oddDigits.foreach { x\
    \ => \n            if (result.contains(x)) \n                result.filter(_ !=\
    \ x).foreach(x => result.remove(x))\n            else \n                result\
    \ += x\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach(x => result.add(x))\n        oddDigits.foreach(x => result.add(x))\n\
    \        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result += x\n            }\n     \
    \   })\n        result.sortWith(_ < _)", "        val evenDigits = x.filter(x\
    \ => x.toString.toInt%2 == 0)\n        val evenDigitsList = evenDigits.toList\n\
    \        evenDigitsList.sortWith(_ < _)", "        val evenDigits = x.filter(x\
    \ => x.toString.toLong % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_\
    \ < _)\n        evenDigitsSorted.filter(x => x.toString.toLong % 2 == 0).distinct",
  "        val result = new mutable.ListBuffer[Long]()\n        val xs = x.toSet\n\
    \        val xs2 = xs.filter(_ % 2 == 0)\n        xs2.foreach(x => result += x)\n\
    \        result.sort", "        val evenDigits = x.filter(_ % 2 == 0)\n      \
    \  val evenDigitList = evenDigits.toList\n        val evenDigitListSorted = evenDigitList.sortWith(_\
    \ < _)\n        val evenDigitListSortedSet = evenDigitListSorted.toSet\n     \
    \   val evenDigitListSortedSetIterator = evenDigitListSortedSet.iterator\n   \
    \     val evenDigitListSortedSetIteratorNext = evenDigitListSortedSetIterator.next\n\
    \        val evenDigitListSortedSetIteratorNextNext = evenDigitListSortedSetIteratorNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNext = evenDigitListSortedSetIteratorNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNext = evenDigitListSortedSetIteratorNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNext = evenDigitListSortedSetIteratorNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNextNext = evenDigitListSortedSetIteratorNextNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNextNext = evenDigitListSortedSetIteratorNextNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNextNextNext = evenDigitListSortedSetIteratorNextNextNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNext =\
    \ evenDigitListSortedSetIteratorNextNextNextNextNextNextNext.next\n        val\
    \ evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNext = evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = evenDigitListSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val evenDigitListSortedSetIteratorNextNextNextNext", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x.toString.toInt%2\
    \ == 0) result += x)\n        result.sortWith(_ < _)", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        x.foreach(x => { \n            val digit\
    \ = x.toString.toInt\n            if (digit % 2 == 0) result.+=(x) \n        })\n\
    \        result.sortWith(_ < _)", "        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0)\n        val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x.toString.toLong % 2 == 0)\n\
    \        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.filter(x\
    \ => x.toString.toLong % 2 == 0).distinct", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result += x\n            }\n     \
    \   })\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ x.size) {\n            val digit = x(i).toInt\n            if(digit % 2 == 0)\
    \ {\n                evenDigit.add(digit)\n            }\n        }\n        for(i\
    \ <- 0 until x.size) {\n            val digit = x(i).toInt\n            if(evenDigit.contains(digit))\
    \ {\n                result.add(x(i))\n            }\n        }\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        evenDigitsSet.foreach { x => \n            if (result.contains(x))\
    \ \n                result.filter(_ != x).foreach(x => result.remove(x))\n   \
    \         else\n                result += x\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach { x =>\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        }\n        evenDigit.foreach\
    \ { x =>\n            if (result.contains(x)) {\n                result.add(x)\n\
    \            } else {\n                result.add(x)\n            }\n        }\n\
    \        result.toList", "        val result = new mutable.HashSet[Long]()\n \
    \       x.foreach(x => if (x % 2 == 0) result.add(x))\n        result -- new mutable.HashSet[Long]()",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach { x => result +=\
    \ x }\n        oddDigits.foreach { x => result += x }\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach(x => result.add(x))\n\
    \        oddDigits.foreach(x => result.add(x))\n        result.sort", "      \
    \  val xs = x.toSet\n        val result = new mutable.ListBuffer[Long]()\n   \
    \     for (i <- 0 until xs.size) {\n            val xx = xs(i)\n            if\
    \ (xx % 2 == 0) {\n                result.add(xx)\n            }\n        }\n\
    \        result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.foreach { x => \n            if (result.contains(x))\
    \ \n                result.add(x)\n            else\n                result +=\
    \ x\n        }\n        result.toList", "        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.filter(_ % 2 == 0).distinct",
  "        val evenDigits = x.filter(x => x.toString.toLong % 2 == 0)\n        val\
    \ evenDigitList = evenDigits.toList\n        val oddDigits = x.filter(x => x.toString.toLong\
    \ % 2 != 0)\n        val oddDigitList = oddDigits.toList\n        val result =\
    \ evenDigitList.filterNot(oddDigitList.contains)\n        evenDigitList.sortWith(_\
    \ < _)\n        result", "        val evenDigits = x.filter(x => x % 2 == 0)\n\
    \        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.filter(x\
    \ => x.toString.length == 1)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            result.add(x)\n      \
    \  })\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) result += x\n        })\n        result.sort", "    \
    \    val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            if (x(i) % 2 == 0) {\n                result.add(x(i))\n    \
    \        }\n        }\n        result.sortWith((x, y) => x < y)", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x.toString.toInt%2\
    \ == 0) result += x)\n        result.sortWith(_ < _)", "        val evenDigits\
    \ = x.filter(_ % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_\
    \ < _)\n        evenDigitsSorted.filter(_ % 2 == 0).distinct", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val xs = x.toSet\n        val xs2\
    \ = xs.filter(_ % 2 == 0)\n        xs2.foreach(x => result += x)\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.ListBuffer[Long]()\n        val oddDigit = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            if (x % 2 == 0) {\n                evenDigit\
    \ += x\n            } else {\n                oddDigit += x\n            }\n \
    \       })\n        evenDigit.foreach(x => result += x)\n        oddDigit.foreach(x\
    \ => result += x)\n        result.sortWith((x, y) => x.compare(y) == 0)", "  \
    \      val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.foreach { x => \n   \
    \         if (result.contains(x)) {\n                result.clear()\n        \
    \    } else {\n                result += x\n            }\n        }\n       \
    \ result.toList", "        val evenDigits = x.filter(x => x % 2 == 0)\n      \
    \  val evenDigitsList = evenDigits.toList\n        val oddDigitsList = x.filter(x\
    \ => x % 2 != 0).toList\n        evenDigitsList.filterNot(oddDigitsList.contains)",
  "        val result = new mutable.LinkedList[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        })\n        evenDigit.foreach(x\
    \ => result.append(x))\n        result.sortWith(_ < _)", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        evenDigitsSet.foreach(x => result += x)\n      \
    \  result.toList", "        val result = new mutable.ListBuffer[Long]()\n    \
    \    x.foreach(x => { \n            if (x.toString.length == 0) result.add(x)\n\
    \            else if (x.toString.length == 1) result.add(x)\n            else\
    \ {\n                val digit = x.toString.charAt(x.toString.length-1)\n    \
    \            if (digit.toString.toLong % 2 == 0) result.add(x)\n            }\n\
    \        })\n        result.sortWith((x, y) => x.toString.compareTo(y.toString)\
    \ < 0)", "        val evenDigits = x.filter(_ % 2 == 0)\n        val evenDigitList\
    \ = evenDigits.toList\n        val evenDigitSet = evenDigitList.distinct\n   \
    \     val evenDigitSetList = evenDigitSet.toList\n        evenDigitSetList.filterNot(evenDigitSetList.contains(_))",
  "        val evenDigits = x.filter(_ % 2 == 0)\n        val evenDigitList = evenDigits.toList\n\
    \        evenDigitList.sortWith(_ < _)", "        val result = new mutable.HashSet[Long]()\n\
    \        val xs = x.toList\n        xs.foreach(x => if (x % 2 == 0) result.add(x))\n\
    \        xs.filter(x => !result.contains(x)).sorted", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size) {\n          \
    \  val digit = x(i).toString.toInt\n            if (digit % 2 == 0) {\n      \
    \          result.add(x(i))\n            }\n        }\n        result.sort", " \
    \       val result = new mutable.HashSet[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result.add(x))\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.filter(x => x % 2 == 0).distinct", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val evenDigit = new mutable.ListBuffer[Long]()\n\
    \        val oddDigit = new mutable.ListBuffer[Long]()\n        x.foreach(x =>\
    \ if (x % 2 == 0) evenDigit += x)\n        x.foreach(x => if (x % 2 != 0) oddDigit\
    \ += x)\n        evenDigit.foreach(x => if (x % 2 == 0) result += x)\n       \
    \ oddDigit.foreach(x => if (x % 2 != 0) result += x)\n        result.sort", " \
    \       val evenDigits = x.filter(x => x.toString.forall(x => x % 2 == 0))\n \
    \       val evenDigitsList = evenDigits.toList\n        val evenDigitsSorted =\
    \ evenDigitsList.sortBy(x => x)\n        val evenDigitsSortedList = evenDigitsSorted.toList\n\
    \        val evenDigitsSortedListWithoutEvenDigit = evenDigitsSortedList.filter(x\
    \ => !evenDigitsSortedList.contains(x))\n        evenDigitsSortedListWithoutEvenDigit",
  "        val evenDigits = x.filter(x => x.toString.toInt%2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.filter(x => x.toString.toInt\
    \ != 0)", "        val evenDigits = x.filter(x => x.toString.toInt%2 == 0)\n \
    \       val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.filter(x => x % 2 ==\
    \ 0).distinct", "        val result = new mutable.HashSet[Long]()\n        x.foreach(x\
    \ => if (x % 2 == 0) result.add(x))\n        result.sort", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size) {\n     \
    \       val digit = x(i).toString.toInt\n            if(digit % 2 == 0) {\n  \
    \              result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x\
    \ => {\n            val str = x.toString\n            val digits = str.map(_.toInt)\n\
    \            val evenDigits = digits.filter(x => x % 2 == 0)\n            if (evenDigits.isEmpty)\
    \ {\n                result += x\n            }\n        })\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        evenDigitsSet.foreach { x => \n            if (result.contains(x))\
    \ \n                result.filter(_ != x).foreach { y => result.remove(y) }\n\
    \            else \n                result += x\n        }\n        result.toList",
  "        val result = new mutable.LinkedList[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        val oddDigit = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                evenDigit.add(digit)\n           \
    \ } else {\n                oddDigit.add(digit)\n            }\n        })\n \
    \       evenDigit.foreach(x => result.add(x))\n        oddDigit.foreach(x => result.add(x))\n\
    \        result.sortWith(_ < _)", "        val result = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x))\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if(digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x\
    \ => {\n            val digit = x.toString.toInt\n            if (digit % 2 ==\
    \ 0) {\n                result.add(x)\n            }\n        })\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit\
    \ = new mutable.HashSet[Long]()\n        val oddDigit = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => {\n            if (x % 2 == 0) {\n                evenDigit.add(x)\n\
    \            } else {\n                oddDigit.add(x)\n            }\n      \
    \  })\n        evenDigit.foreach(x => result.add(x))\n        oddDigit.foreach(x\
    \ => result.add(x))\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result += digit\n         \
    \   }\n        }\n        result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => { \n            if (x.toString.toInt%2 == 0) result.add(x)\n\
    \        })\n        result.sortWith((x, y) => x.toString.toInt - y.toString.toInt)",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if\
    \ (x.toString.toInt%2 == 0) result += x)\n        result.sortWith(_ < _)", " \
    \       val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.toList.sortWith(_ < _)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result.add(x))\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => { \n            if (x.toString.toInt%2 == 0) result.add(x)\n\
    \        })\n        result.sortWith(_ < _)", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.filter(x => x % 2 == 0).distinct", "        val evenDigits\
    \ = x.filter(x => x.toString.toInt%2 == 0)\n        val oddDigits = x.filter(x\
    \ => x.toString.toInt%2 != 0)\n        val evenDigitsSorted = evenDigits.sortBy(x\
    \ => x.toString.toInt)\n        val oddDigitsSorted = oddDigits.sortBy(x => x.toString.toInt)\n\
    \        evenDigitsSorted.filter(x => oddDigitsSorted.contains(x)).distinct",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsList\
    \ = evenDigits.toList\n        val evenDigitsSet = evenDigitsList.distinct\n \
    \       val evenDigitsSetList = evenDigitsSet.toList\n        evenDigitsSetList.filter(x\
    \ => x.toString.length == 1).sort", "        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.toList", "        val\
    \ evenDigits = x.filter(x => x % 2 == 0).sort\n        val oddDigits = x.filter(x\
    \ => x % 2 != 0).sort\n        evenDigits.diff(oddDigits)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitCount\
    \ = evenDigits.size\n        evenDigits.foreach { x =>\n            val digit\
    \ = x.toString.toInt\n            if (digit % 2 == 0) {\n                result.add(x)\n\
    \            }\n        }\n        result.sortWith(_ < _)", "        val result\
    \ = new mutable.HashSet[Long]()\n        val xs = x.toList\n        xs.foreach(x\
    \ => if (x % 2 == 0) result.add(x))\n        xs.filter(x => !result.contains(x)).sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result.add(x))\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0).toList\n        val evenDigitsSorted = evenDigits.sortWith(_\
    \ < _)\n        evenDigitsSorted.filter(x => x.toString.length == 1).map(x =>\
    \ x.toLong)", "        val result = new mutable.ListBuffer[Long]()\n        val\
    \ digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x =>\
    \ x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach\
    \ { x => \n            if (result.contains(x)) \n                result.filter(_\
    \ != x).foreach(x => result.remove(x))\n            else \n                result\
    \ += x\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        val oddDigit\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x % 2 == 0) evenDigit\
    \ += x)\n        x.foreach(x => if (x % 2 != 0) oddDigit += x)\n        oddDigit.foreach(x\
    \ => if (x % 2 == 0) evenDigit += x)\n        evenDigit.foreach(x => if (x % 2\
    \ != 0) oddDigit += x)\n        oddDigit.foreach(x => if (x % 2 == 0) evenDigit\
    \ += x)\n        evenDigit.foreach(x => if (x % 2 != 0) oddDigit += x)\n     \
    \   oddDigit.foreach(x => if (x % 2 == 0) evenDigit += x)\n        evenDigit.foreach(x\
    \ => if (x % 2 != 0) oddDigit += x)\n        oddDigit.foreach(x => if (x % 2 ==\
    \ 0) evenDigit += x)\n        evenDigit.foreach(x => if (x % 2 != 0) oddDigit\
    \ += x)\n        oddDigit.foreach(x => if (x % 2 == 0) evenDigit += x)\n     \
    \   evenDigit.foreach(x => if (x % 2 != 0) oddDigit += x)\n        oddDigit.foreach(x\
    \ => if (x % 2 == 0) evenDigit += x)\n        evenDigit.foreach(x => if (x % 2\
    \ != 0) oddDigit += x)\n        oddDigit.foreach(x => if (x % 2 == 0) evenDigit\
    \ += x)\n        evenDigit.foreach(x => if (x % 2 != 0) oddDigit += x)\n     \
    \   oddDigit.foreach(x => if (x % 2 == 0) evenDigit += x)\n        evenDigit.foreach(x\
    \ => if (x % 2 != 0) oddDigit += x)\n        oddDigit.foreach(x => if (x % 2 ==\
    \ 0) evenDigit += x)\n        evenDigit.foreach(x => if (x % 2 != 0) oddDigit\
    \ += x)\n        oddDigit.foreach(x => if (x % 2 == 0) evenDigit += x)\n     \
    \   evenDigit.foreach(x => if (x % 2 != 0) oddDigit += x)\n        oddDigit.foreach(x\
    \ => if (x % 2 == 0) evenDigit += x)\n        evenDigit.foreach(x => if (x % 2\
    \ != 0) oddDigit += x)\n        oddDigit.foreach(x ", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val evenDigitsList = evenDigits.toList\n        evenDigitsList.foreach(x\
    \ => x match {\n            case x if x % 2 == 0 => result.add(x)\n          \
    \  case _ => \n        })\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sort",
  "        val xs = x.toSet\n        val result = new mutable.LinkedList[Long]()\n\
    \        for(i <- xs.iterator) {\n            val digit = i.toString.toInt\n \
    \           if(!xs.contains(digit)) {\n                result.add(i)\n       \
    \     }\n        }\n        result.sortWith((x, y) => x.toString.toInt < y.toString.toInt)",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitList\
    \ = evenDigits.toList\n        evenDigitList.foreach(x => result += x)\n     \
    \   result.sort", "        val result = new mutable.ListBuffer[Long]()\n     \
    \   val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach { x => result.add(x) }\n        oddDigits.foreach { x\
    \ => result.add(x) }\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsList = evenDigits.toList\n        val\
    \ evenDigitsSet = evenDigitsList.distinct\n        val evenDigitsSetList = evenDigitsSet.toList\n\
    \        evenDigitsSetList.filter(x => x.toString.length == 1).sort", "      \
    \  val evenDigits = x.filter(_ % 2 == 0).sortBy(_ % 10)\n        val oddDigits\
    \ = x.filter(_ % 2 != 0).sortBy(_ % 10)\n        evenDigits.union(oddDigits)",
  "        val result = new mutable.HashSet[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result.add(x) else ())\n        result.sorted", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n            if (x.toString.toLong\
    \ % 2 == 0) {\n                result.add(x)\n            }\n        })\n    \
    \    result.sortWith(_ < _)", "        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.distinct",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        val notEvenDigits = digits.filter(x => !evenDigitsSet.contains(x))\n\
    \        notEvenDigits.foreach(x => result.add(x))\n        result.toList", " \
    \       val evenDigits = x.filter(x => x % 2 == 0)\n        val oddDigits = x.filter(x\
    \ => x % 2 != 0)\n        val result = evenDigits.union(oddDigits)\n        val\
    \ sortedResult = result.sortBy(x => x)\n        sortedResult", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val evenDigit = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => { if (x % 2 == 0) evenDigit.add(x); else result.add(x)\
    \ })\n        evenDigit.foreach(x => { if (result.contains(x)) result.remove(x)\
    \ })\n        result.toList", "        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.toList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val evenDigits = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toInt\n    \
    \        if(digit % 2 == 0) {\n                evenDigits.add(digit)\n       \
    \     }\n        }\n        for(i <- 0 until x.size) {\n            val digit\
    \ = x(i).toInt\n            if(evenDigits.contains(digit)) {\n               \
    \ result.add(x(i))\n            }\n        }\n        result.sortWith(_ < _)",
  "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.ListBuffer[Long]()\n        val oddDigit = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i)\n          \
    \  if(digit % 2 == 0) {\n                evenDigit += digit\n            } else\
    \ {\n                oddDigit += digit\n            }\n        }\n        evenDigit.foreach(x\
    \ => result += x)\n        oddDigit.foreach(x => result += x)\n        result.sort",
  "        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.toList ++ oddDigits.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        val oddDigit\
    \ = new mutable.ListBuffer[Long]()\n        for (i <- x) {\n            if (i\
    \ % 2 == 0) {\n                evenDigit += i\n            } else {\n        \
    \        oddDigit += i\n            }\n        }\n        evenDigit.foreach(i\
    \ => result += i)\n        oddDigit.foreach(i => result -= i)\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach(x => result +=\
    \ x)\n        oddDigits.foreach(x => result += x)\n        result.sort", "   \
    \     val result = new mutable.LinkedList[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            val digit = x.toString.toInt\n\
    \            if (digit % 2 == 0) {\n                evenDigit.add(digit)\n   \
    \         }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            result.add(x)\n      \
    \  })\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.forall(_.isDigit)) result += x)\n     \
    \   result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result += x)\n        result.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x % 2 == 0).sorted\n        val\
    \ oddDigits = x.filter(x => x % 2 != 0).sorted\n        evenDigits ++ oddDigits",
  "        val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if(digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sortWith((x,\
    \ y) => x.toString.toInt < y.toString.toInt)", "        val result = new mutable.LinkedList[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitList = evenDigits.toList\n        evenDigitList.foreach(x\
    \ => result.add(x))\n        result.toList", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = x.filter(x => x % 2 != 0)\n        val\
    \ result = evenDigits.union(oddDigits)\n        result.sortWith(_ < _)", "   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        val notEvenDigits = digits.filter(x => !evenDigitsSet.contains(x))\n\
    \        result.+=(notEvenDigits.toList)\n        result.sortWith(_ < _)\n   \
    \     result.toList", "        val result = new mutable.HashSet[Long]()\n    \
    \    x.foreach(x => if (x % 2 == 0) result.add(x))\n        result.sort", "  \
    \      val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitCount\
    \ = evenDigits.size\n        val oddDigitCount = digits.size - evenDigitCount\n\
    \        val evenDigits = evenDigits.toList\n        val oddDigits = digits.filter(x\
    \ => x % 2 != 0)\n        val oddDigitCount = oddDigits.size\n        val evenDigitCount\
    \ = evenDigits.size\n        val oddDigits = oddDigits.toList\n        val evenDigits\
    \ = evenDigits.toList\n        val oddDigitCount = oddDigits.size\n        val\
    \ evenDigitCount = evenDigits.size\n        val oddDigits = oddDigits.toList\n\
    \        val evenDigits = evenDigits.toList\n        val oddDigitCount = oddDigits.size\n\
    \        val evenDigitCount = evenDigits.size\n        val oddDigits = oddDigits.toList\n\
    \        val evenDigits = evenDigits.toList\n        val oddDigitCount = oddDigits.size\n\
    \        val evenDigitCount = evenDigits.size\n        val oddDigits = oddDigits.toList\n\
    \        val evenDigits = evenDigits.toList\n        val oddDigitCount = oddDigits.size\n\
    \        val evenDigitCount = evenDigits.size\n        val oddDigits = oddDigits.toList\n\
    \        val evenDigits = evenDigits.toList\n        val oddDigitCount = oddDigits.size\n\
    \        val evenDigitCount = evenDigits.size\n        val oddDigits = oddDigits.toList\n\
    \        val evenDigits = evenDigits.toList\n        val oddDigitCount = oddDigits.size\n\
    \        val evenDigitCount = evenDigits.size\n        val oddDigits = oddDigits.toList\n\
    \        val evenDigits = evenDigits.toList\n        val oddDigitCount = oddDigits.size\n\
    \        val evenDigitCount = evenDigits.size\n        val oddDigits = oddDigits.toList\n\
    \        val evenDigits = evenDigits.toList\n        val oddDigitCount = oddDigits.size\n\
    \        val evenDigitCount = evenDigits.size\n        val oddDigits = oddDigits.toList\n\
    \        val evenDigits = evenDigits.toList\n        val oddDigitCount = oddDigits.size\n\
    \        val evenDigitCount = evenDigits.size\n        val oddDigits = oddDigits.toList\n\
    \        val evenDigits = evenDigits.toList\n        val oddDigitCount = oddDigits.size\n\
    \        val evenDigitCount = evenDigits.size\n        val oddDigits = oddDigits.",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) result\
    \ += x\n        })\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0).sorted\n        val oddDigits = x.filter(x => x % 2 != 0).sorted\n\
    \        evenDigits.diff(oddDigits)", "        val evenDigits = x.filter(x =>\
    \ x.toString.toInt%2 == 0)\n        evenDigits.sortWith(_ < _)", "        val\
    \ result = new mutable.HashSet[Long]()\n        val evenDigit = new mutable.HashSet[Long]()\n\
    \        val oddDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ } else {\n                oddDigit.add(x)\n            }\n        })\n     \
    \   val evenList = evenDigit.toList\n        val oddList = oddDigit.toList\n \
    \       evenList.foreach(x => result.add(x))\n        oddList.foreach(x => result.add(x))\n\
    \        result.toList", "        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.filter(x\
    \ => x.toString.toInt != 0)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.toList",
  "        val evenDigits = x.filter(x => x.toString.toInt%2 == 0).sort\n        val\
    \ notEvenDigits = x.filter(x => x.toString.toInt%2 != 0).sort\n        evenDigits.diff(notEvenDigits)",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.add(x)\n            }\n        })\n        result.sortWith((x,\
    \ y) => x.toString.toInt - y.toString.toInt)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => { \n            val digit = x.toString.toInt\n       \
    \     if (digit % 2 == 0) {\n                result.add(x)\n            }\n  \
    \      })\n        result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach(x => result.add(x))\n        oddDigits.foreach(x => result.add(x))\n\
    \        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        val oddDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => { \n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            } else {\n             \
    \   oddDigit.add(x)\n            }\n        })\n        oddDigit.foreach(x =>\
    \ { \n            if (result.contains(x)) {\n                return\n        \
    \    }\n            result.add(x)\n        })\n        evenDigit.foreach(x =>\
    \ { \n            if (result.contains(x)) {\n                return\n        \
    \    }\n            result.add(x)\n        })\n        result.toList", "     \
    \   val evenDigits = x.filter(_ % 2 == 0).sortBy(_ % 10)\n        val oddDigits\
    \ = x.filter(_ % 2 != 0).sortBy(_ % 10)\n        evenDigits.union(oddDigits)",
  "        val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if(digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.LinkedList[Long]()\n        x.foreach(x\
    \ => \n            val digit = x%10\n            if (digit==0) result.add(x)\n\
    \        )\n        result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        val oddDigit\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n            val\
    \ digit = x.toString.toInt\n            if (digit % 2 == 0) {\n              \
    \  evenDigit += digit\n            } else {\n                oddDigit += digit\n\
    \            }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                result.delete(x)\n            } else {\n                result\
    \ += x\n            }\n        })\n        oddDigit.foreach(x => {\n         \
    \   if (result.contains(x)) {\n                result.delete(x)\n            }\
    \ else {\n                result += x\n            }\n        })\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        evenDigitsSet.foreach(x => result += x)\n      \
    \  result.toList", "        val result = new mutable.ListBuffer[Long]()\n    \
    \    x.foreach(x => {\n            val digit = x.toString.toInt\n            if\
    \ (digit % 2 == 0) {\n                result += x\n            }\n        })\n\
    \        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result += x\n            }\n     \
    \   })\n        result.sort", "        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val evenDigitsList = evenDigits.toList\n        evenDigitsList.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val digits\
    \ = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x => x % 2\
    \ == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach\
    \ { x => result += x }\n        result.toList", "        val result = new mutable.LinkedList[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                evenDigit.add(digit)\n            }\n        })\n        evenDigit.foreach(x\
    \ => {\n            val digit = x.toString.toInt\n            if (result.contains(digit))\
    \ {\n                result.add(digit)\n            } else {\n               \
    \ result.add(digit)\n            }\n        })\n        result.toList", "    \
    \    val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        val notEvenDigits = digits.filter(x => !evenDigitsSet.contains(x))\n\
    \        notEvenDigits.foreach(x => result += x)\n        result.sort", "    \
    \    val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x.toString.toInt%2\
    \ == 0) result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.toInt%2 == 0) result += x)\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        for(i <- 0 until x.size) {\n            val\
    \ digit = x(i).toInt\n            if(digit % 2 == 0) {\n                evenDigit.add(digit)\n\
    \            }\n        }\n        for(i <- 0 until x.size) {\n            val\
    \ digit = x(i).toInt\n            if(evenDigit.contains(digit)) {\n          \
    \      result.add(x(i))\n            }\n        }\n        result.sortWith(_ <\
    \ _)", "        val result = new mutable.LinkedList[Long]()\n        val evenDigit\
    \ = new mutable.HashSet[Long]()\n        for(i <- 0 until x.size) {\n        \
    \    val digit = x(i).toInt\n            if(digit.toString.length == 1) {\n  \
    \              if(evenDigit.contains(digit)) {\n                    result.add(x(i))\n\
    \                }\n            } else {\n                evenDigit.add(digit)\n\
    \            }\n        }\n        result.sortWith((x, y) => x.toString.compareTo(y.toString)\
    \ < 0)", "        val result = new mutable.ListBuffer[Long]()\n        val digits\
    \ = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x => x % 2\
    \ == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach(x\
    \ => result += x)\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val xs = x.toSet\n        val xs2 = xs.filter(_ % 2 == 0)\n        xs2.foreach(x\
    \ => result += x)\n        result.sortWith(_ < _)", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n \
    \       val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        evenDigitsSet.foreach { x => \n            if (result.contains(x))\
    \ {\n                result.delete(x)\n            } else {\n                result.add(x)\n\
    \            }\n        }\n        result.toList", "        val evenDigits = x.filter(x\
    \ => x.toString.toInt%2 == 0)\n        val evenDigitList = evenDigits.toList\n\
    \        evenDigitList.sortWith(_ < _)", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsList = evenDigits.toList\n        val\
    \ evenDigitsSet = evenDigitsList.distinct\n        val evenDigitsSetList = evenDigitsSet.toList\n\
    \        val evenDigitsSetListSorted = evenDigitsSetList.toList.sort\n       \
    \ evenDigitsSetListSorted.filter(x => x.toString.length == 1).distinct", "   \
    \     val evenDigits = x.filter(x => x % 2 == 0)\n        val oddDigits = x.filter(x\
    \ => x % 2 != 0)\n        val result = oddDigits.filter(x => evenDigits.contains(x)).sortBy(x\
    \ => x)\n        result", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            result += x\n        })\n\
    \        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sortWith((x,\
    \ y) => x < y)", "        val result = new mutable.ListBuffer[Long]()\n      \
    \  for (i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if (digit % 2 == 0) {\n                result.add(x(i))\n       \
    \     }\n        }\n        result.sortWith((x, y) => x.toString.toInt - y.toString.toInt)",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.distinct", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        x.foreach(x => \n         \
    \   if (x.toString.length == 0) result.add(x)\n            else {\n          \
    \      val digit = x.toString.charAt(0)\n                if (digit.toString.length\
    \ == 0) result.add(x)\n                else {\n                    if (digit.toString.toLong\
    \ % 2 == 0) result.add(x)\n                }\n            }\n        )\n     \
    \   result.sort", "        val result = new mutable.ListBuffer[Long]()\n     \
    \   val xs = x.toSet\n        val xs2 = xs.filter(_ % 2 == 0)\n        xs2.foreach(x\
    \ => result += x)\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x.toString.toInt%2 == 0)\n        val oddDigits = x.filter(x => x.toString.toInt%2\
    \ != 0)\n        evenDigits.union(oddDigits).sort", "        val evenDigits =\
    \ x.filter(_ % 2 == 0).sortBy(_ % 10)\n        val oddDigits = x.filter(_ % 2\
    \ != 0).sortBy(_ % 10)\n        val result = evenDigits.filterNot(oddDigits.contains)\n\
    \        result.sortBy(_ % 10)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.foreach { x => \n            if (result.contains(x))\
    \ \n                result.add(x)\n            else\n                result.add(x)\n\
    \        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigits = new mutable.HashSet[Long]()\n        x.foreach(x =>\
    \ {\n            if (x % 2 == 0) {\n                evenDigits.add(x)\n      \
    \      }\n        })\n        evenDigits.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            else {\n             \
    \   result += x\n            }\n        })\n        result.toList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        val notEvenDigits = digits.filter(x => !evenDigitsSet.contains(x))\n\
    \        notEvenDigits.foreach(x => result.add(x))\n        result.toList", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.ListBuffer[Long]()\n        val oddDigit = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            if (x % 2 == 0) {\n                evenDigit\
    \ += x\n            } else {\n                oddDigit += x\n            }\n \
    \       })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                result.delete(x)\n            } else {\n                result\
    \ += x\n            }\n        })\n        oddDigit.foreach(x => {\n         \
    \   if (result.contains(x)) {\n                result.delete(x)\n            }\
    \ else {\n                result += x\n            }\n        })\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val result = new mutable.LinkedList[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            result.add(x)\n      \
    \  })\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            result += x\n        })\n\
    \        result.toList", "        val digits = x.map(_.toString.toInt)\n     \
    \   val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsList\
    \ = evenDigits.toList\n        evenDigitsList.sortWith(_ < _)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x.toString.toInt%2\
    \ == 0) result += x)\n        result.sortWith(_ < _)", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n \
    \       val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        evenDigitsSet.foreach(x => result += x)\n      \
    \  result.toList", "        val digits = x.map(_.toString.toInt)\n        val\
    \ evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits = digits.filter(x\
    \ => x % 2 != 0)\n        val evenSortedDigits = evenDigits.sortBy(x => x)\n \
    \       val oddSortedDigits = oddDigits.sortBy(x => x)\n        evenSortedDigits.toList\
    \ ++ oddSortedDigits.toList", "        val evenDigits = x.filter(x => x.toString.forall(_.isDigit)\
    \ && x.toString.forall(_.isDigit).forall(_.toString.forall(_.isDigit)))\n    \
    \    val evenDigitList = evenDigits.toList\n        evenDigitList.sortBy(x =>\
    \ x.toString.forall(_.isDigit))", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => { \n            val str = x.toString\n            val\
    \ digits = str.dropWhile(_ < '0').dropWhile(_ > '9').toList\n            val evenDigit\
    \ = digits.filter(x => x % 2 == 0).length\n            if (evenDigit == 0) result\
    \ += x\n        })\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach { x =>\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        }\n        evenDigit.foreach { x =>\n            if (result.contains(x))\
    \ {\n                result.add(x)\n            }\n        }\n        result.toList",
  "        val evenDigits = x.filter(x => x.toString.toInt%2 == 0)\n        val evenDigitsList\
    \ = evenDigits.toList\n        val evenDigitsSorted = evenDigitsList.sortWith(_\
    \ < _)\n        evenDigitsSorted.filter(x => x.toString.toInt != 0)", "      \
    \  val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        evenDigitsSet.foreach { x => result += x }\n   \
    \     result.toList", "        val result = new mutable.ListBuffer[Long]()\n \
    \       val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result.add(x))\n        result.sort",
  "        val result = new mutable.HashSet[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result.add(x))\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            if (x(i) % 2 == 0) {\n     \
    \           result.add(x(i))\n            }\n        }\n        result.sortWith((x,\
    \ y) => x.compare(y) == 0)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.toInt%2 == 0) result += x)\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val digits\
    \ = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x => x % 2\
    \ == 0)\n        evenDigits.foreach(x => result.add(x))\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => { \n            if (x % 2 ==\
    \ 0) evenDigit.add(x)\n        })\n        evenDigit.foreach(x => { \n       \
    \     if (result.contains(x)) \n                result.add(x)\n        })\n  \
    \      result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            else {\n             \
    \   result += x\n            }\n        })\n        result.toList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        val notEvenDigits = digits.filter(x => !evenDigitsSet.contains(x))\n\
    \        result.+=(notEvenDigits.toList)\n        result.sortWith(_ < _)\n   \
    \     result.toList", "        val result = new mutable.LinkedList[Long]()\n \
    \       val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach(x\
    \ => result.add(x))\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sort",
  "        val xs = x.toSet\n        val ys = xs.filter(_ % 2 == 0)\n        val zs\
    \ = xs.filter(_ % 2 == 1)\n        val zsSet = zs.toSet\n        val yzs = ys.filter(_\
    \ % 2 == 1)\n        val yzsSet = yzs.toSet\n        val zsys = zs.filter(_ %\
    \ 2 == 0)\n        val zsysSet = zsys.toSet\n        val yzsys = yzs.filter(_\
    \ % 2 == 0)\n        val yzsysSet = yzsys.toSet\n        val yzsysys = yzsys.filter(_\
    \ % 2 == 1)\n        val yzsysysSet = yzsysys.toSet\n        val yzsysysys = yzsysys.filter(_\
    \ % 2 == 1)\n        val yzsysysys = yzsysys.filter(_ % 2 == 1)\n        val yzsysysysys\
    \ = yzsysys.filter(_ % 2 == 1)\n        val yzsysysysys = yzsysys.filter(_ % 2\
    \ == 1)\n        val yzsysysysys = yzsysys.filter(_ % 2 == 1)\n        val yzsysysysysys\
    \ = yzsysys.filter(_ % 2 == 1)\n        val yzsysysysysys = yzsysys.filter(_ %\
    \ 2 == 1)\n        val yzsysysysysysys = yzsysys.filter(_ % 2 == 1)\n        val\
    \ yzsysysysysysysys = yzsysys.filter(_ % 2 == 1)\n        val yzsysysysysysysys\
    \ = yzsysys.filter(_ % 2 == 1)\n        val yzsysysysysysysysys = yzsysys.filter(_\
    \ % 2 == 1)\n        val yzsysysysysysysysys = yzsysys.filter(_ % 2 == 1)\n  \
    \      val yzsysysysysysysysysys = yzsysys.filter(_ % 2 == 1)\n        val yzsysysysysysysysysysys\
    \ = yzsysys.filter(_ % 2 == 1)\n        val yzsysysysysysysysysysysysys = yzsysys.filter(_\
    \ % 2 == 1)\n        val yzsysysysysysysysysysysysysys = yzsysys.filter(_ % 2\
    \ == 1)\n        val yzsysysysysysysysy", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            if (x.toString.length == 1) {\n       \
    \         result.add(x)\n            } else {\n                val digit = x.toString.charAt(0)\n\
    \                if (result.contains(digit)) {\n                    result.clear()\n\
    \                } else {\n                    result.add(x)\n               \
    \ }\n            }\n        })\n        result.toList", "        val result =\
    \ new mutable.HashSet[Long]()\n        x.foreach(x => if (x % 2 == 0) result.add(x))\n\
    \        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result.add(x(i))\n        \
    \    }\n        }\n        result.sortWith(_ < _)", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        x.foreach { x =>\n            if (x % 2\
    \ == 0) {\n                result.add(x)\n            }\n        }\n        result.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x.toString.toInt%2 == 0)\n  \
    \      val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val digits\
    \ = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x => x % 2\
    \ == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach(x\
    \ => result.add(x))\n        oddDigits.foreach(x => result.add(x))\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        val notEvenDigits\
    \ = digits.filter(x => !evenDigitsSet.contains(x))\n        notEvenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.toList.sortBy(x\
    \ => x).reverse", "        val result = new mutable.ListBuffer[Long]()\n     \
    \   val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach { x => result.add(x) }\n        oddDigits.foreach { x\
    \ => result.add(x) }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.toInt%2 == 0) result += x)\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val digits\
    \ = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x => x % 2\
    \ == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach\
    \ { x => \n            if (result.contains(x)) \n                result.filter(_\
    \ != x).foreach(x => result.remove(x))\n            else\n                result\
    \ += x\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ x.size) {\n            val digit = x(i)\n            if(digit.toString.length\
    \ == 1) {\n                evenDigit.add(digit)\n            }\n        }\n  \
    \      for(i <- 0 until x.size) {\n            val digit = x(i)\n            if(evenDigit.contains(digit))\
    \ {\n                result.add(digit)\n            }\n        }\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if(digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.add(x)\n            }\n        })\n        result.sortWith((x,\
    \ y) => x.toString.toInt - y.toString.toInt)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.length == 0) result.add(x) else result.addAll(x.toString.filter(x\
    \ => x.toString.forall(_.isDigit))))\n        result.sort", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        val notEvenDigits = digits.filter(x => !evenDigitsSet.contains(x))\n\
    \        notEvenDigits.foreach(x => result += x)\n        result.toList", "  \
    \      val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.ListBuffer[Long]()\n        val oddDigit = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                evenDigit += digit\n            }\
    \ else {\n                oddDigit += digit\n            }\n        })\n     \
    \   evenDigit.foreach(x => {\n            if (!result.contains(x)) {\n       \
    \         result += x\n            }\n        })\n        oddDigit.foreach(x =>\
    \ {\n            if (!result.contains(x)) {\n                result += x\n   \
    \         }\n        })\n        result.sorted", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if (digit % 2 == 0) {\n                result.add(x(i))\n       \
    \     }\n        }\n        result.sort"]
stop_tokens:
- "\n    }\n"
