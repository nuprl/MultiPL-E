name: HumanEval_138_is_equal_to_sum_even
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Evaluate whether the given number n can be written as the sum of exactly\
  \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n \
  \   // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>> isEqualToSumEven((8l))\n\
  \    // (true)\n    def isEqualToSumEven(n : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
  \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
  \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
  \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
  \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
completions: ["        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2", "        val\
    \ sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven.productIterator.toList\n\
    \        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4 = sumEvensSum\
    \ * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n        val sumEvensSum4Sum4\
    \ = sumEvensSum4Sum * 4\n        val sumEvensSum4Sum4Sum = sumEvensSum4Sum4.sum\n\
    \        val sumEvensSum4Sum4Sum4 = sumEvensSum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4.sum\n        val sumEvensSum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum *\
    \ 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val evens = mutable.Set[Long]()\n        val sum = 0\n        for(i <-\
    \ 0 until n){\n            val x = i\n            val y = n - i\n            val\
    \ z = x + y\n            val y = z - x\n            val x = y - z\n          \
    \  val y = x - y\n            val x = y - x\n            val y = x - y\n     \
    \       val x = y - x\n            val y = x - y\n            val x = y - x\n\
    \            val y = x - y\n            val x = y - x\n            val y = x -\
    \ y\n            val x = y - x\n            val y = x - y\n            val x =\
    \ y - x\n            val y = x - y\n            val x = y - x\n            val\
    \ y = x - y\n            val x = y - x\n            val y = x - y\n          \
    \  val x = y - x\n            val y = x - y\n            val x = y - x\n     \
    \       val y = x - y\n            val x = y - x\n            val y = x - y\n\
    \            val x = y - x\n            val y = x - y\n            val x = y -\
    \ x\n            val y = x - y\n            val x = y - x\n            val y =\
    \ x - y\n            val x = y - x\n            val y = x - y\n            val\
    \ x = y - x\n            val y = x - y\n            val x = y - x\n          \
    \  val y = x - y\n            val x = y - x\n            val y = x - y\n     \
    \       val x = y - x\n            val y = x - y\n            val x = y - x\n\
    \            val y = x - y\n            val x = y - x\n            val y = x -\
    \ y\n            val x = y - x\n            val y = x - y\n            val x =\
    \ y - x\n            val y = x - y\n            val x = y - x\n            val\
    \ y = x - y\n            val x = y - x\n            val y = x - y\n          \
    \  val x = y - x\n            val y = x - y\n            val x = y - x\n     \
    \       val y = x - y\n            val x = y - x\n            val y = x - y\n\
    \            val x = y - x\n            val y = x - y\n            val x = y -\
    \ x\n            val y = x - y\n            val x = y - x\n            val y =\
    \ x - y\n            val x = y - x\n            val y = x - y\n            val\
    \ x = y - x\n            val y = x - y\n            val x = y - x\n          \
    \  val y = x - y\n            val x = y - x\n            val y = x - y\n     \
    \       val x = y - x\n            val y = x - y\n            val x = y - x\n\
    \            val y = x - y\n            val x = y - x\n", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0).length\n      \
    \  val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4 = sumEvensSum.toInt\n\
    \        val sumEvensSum4Sum = sumEvensSum4.toInt\n        val sumEvensSum4Sum4\
    \ = sumEvensSum4Sum.toInt\n        val sumEvensSum4Sum4Sum = sumEvensSum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum.toInt\n       \
    \ val sumEvensSum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum.toInt\n      \
    \  val sumEvensSum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum", "     \
    \   val sumEven = n.toInt\n        val sumEvens = sumEven / 4\n        val sumEvensRemainder\
    \ = sumEven % 4\n        sumEvens == sumEvensRemainder", "        val evens =\
    \ mutable.ListBuffer[Long]()\n        val sum = 0\n        for(i <- 0 until n){\n\
    \            if(i % 2 == 0){\n                evens += i\n            }\n    \
    \        sum += i\n        }\n        evens.size == 4", "        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = mutable.ArrayBuffer.empty[Long]\n        for (i <- 0 until\
    \ n) {\n            if (i % 2 == 0) {\n                evens += i\n          \
    \  }\n            sum += i\n        }\n        evens.size == 4 && sum.size ==\
    \ 4", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n   \
    \     val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainders", "        val evens = mutable.Set[Long]()\n\
    \        val sum = 0\n        val remainder = n % 2\n        val remainder2 =\
    \ (remainder + 1) / 2\n        val remainder3 = remainder + 2\n        val remainder4\
    \ = remainder + 3\n        val remainder5 = remainder + 4\n        val remainder6\
    \ = remainder + 5\n        val remainder7 = remainder + 6\n        val remainder8\
    \ = remainder + 7\n        val remainder9 = remainder + 8\n        val remainder10\
    \ = remainder + 9\n        val remainder11 = remainder + 10\n        val remainder12\
    \ = remainder + 11\n        val remainder13 = remainder + 12\n        val remainder14\
    \ = remainder + 13\n        val remainder15 = remainder + 14\n        val remainder16\
    \ = remainder + 15\n        val remainder17 = remainder + 16\n        val remainder18\
    \ = remainder + 17\n        val remainder19 = remainder + 18\n        val remainder20\
    \ = remainder + 19\n        val remainder21 = remainder + 20\n        val remainder22\
    \ = remainder + 21\n        val remainder23 = remainder + 22\n        val remainder24\
    \ = remainder + 23\n        val remainder25 = remainder + 24\n        val remainder26\
    \ = remainder + 25\n        val remainder27 = remainder + 26\n        val remainder28\
    \ = remainder + 27\n        val remainder29 = remainder + 28\n        val remainder30\
    \ = remainder + 29\n        val remainder31 = remainder + 30\n        val remainder32\
    \ = remainder + 31\n        val remainder33 = remainder + 32\n        val remainder34\
    \ = remainder + 33\n        val remainder35 = remainder + 34\n        val remainder36\
    \ = remainder + 35\n        val remainder37 = remainder + 36\n        val remainder38\
    \ = remainder + 37\n        val remainder39 = remainder + 38\n        val remainder40\
    \ = remainder + 39\n        val remainder41 = remainder + 40\n        val remainder42\
    \ = remainder + 41\n        val remainder43 = remainder + 42\n        val remainder44\
    \ = remainder + 43\n        val remainder45 = remainder + 44\n        val remainder46\
    \ = remainder + 45\n        val remain", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        while(n > 0) {\n            sum += n % 2\n     \
    \       evens += n\n            n /= 2\n        }\n        evens.size == 4 &&\
    \ sum == evens.sum", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        sumEvens == 4", "        val sumEven = n.toInt\n \
    \       val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven -\
    \ sumEvens\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val\
    \ sumEvensRemaindersRemainder = sumEvensRemainder - sumEvensRemainders\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder -\
    \ sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder", "  \
    \      val evens = mutable.ListBuffer[Long]()\n        val sum = 0\n        while\
    \ (n > 0) {\n            sum += n % 2\n            evens += n\n            n /=\
    \ 2\n        }\n        evens.size == 4 && evens.forall(x => x == sum)", "   \
    \     val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainders", "        val sumEven =\
    \ n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder =\
    \ sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n      \
    \  val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemainders", "        val sumEven = n.toInt\n     \
    \   val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainder", "        val sumEven\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOdd = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]", "        val sumEven = n.toInt\n       \
    \ val sumEvens = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n\
    \        val sumEvensSum4 = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n\
    \        sumEvensSum4Sum == sumEven", "        val sumEven = n.toInt\n       \
    \ val sumEvens = sumEven.filter(x => x % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n\
    \        val sumEvensSum4 = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n\
    \        val sumEvensSum4Sum4 = sumEvensSum4Sum * 4\n        val sumEvensSum4Sum4Sum\
    \ = sumEvensSum4Sum4.sum\n        val sumEvensSum4Sum4Sum4 = sumEvensSum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4.sum\n      \
    \  val sumEvensSum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for(i <- 0 until n){\n            val x = n%i +\
    \ 1\n            if(x == 0){\n                evens.append(x)\n            }\n\
    \            sum += x\n        }\n        evens.size == 4 && sum == n", "    \
    \    val sumEven = n.toInt\n        val sumEvens = sumEven / 4\n        val remainder\
    \ = sumEven % 4\n        sumEvens == remainder", "        val evens = mutable.Set[Long]()\n\
    \        val sum = 0\n        val remainder = n\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set[Long]()\n        val remainders = mutable.Set[Long]()\n\
    \        val remainders = mutable.Set", "        val sumEven = n.toInt\n     \
    \   val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 4\n\
    \        val remainder = sumEven % 4\n        sumEvens == remainder", "      \
    \  val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven.filter(x => x % 2 == 0).length\n        val sumEvensSum\
    \ = sumEvens.toInt\n        val sumEvensSum4 = sumEvensSum * 4\n        val sumEvensSum4Sum\
    \ = sumEvensSum4.toInt\n        sumEvensSum4Sum == sumEven", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n     \
    \   val sumEvensSum2 = sumEvensSum * sumEvensSum\n        val sumEvensSum3 = sumEvensSum\
    \ * sumEvensSum * sumEvensSum\n        val sumEvensSum4 = sumEvensSum * sumEvensSum\
    \ * sumEvensSum * sumEvensSum\n        sumEvensSum == sumEvensSum2\n        &&\
    \ sumEvensSum == sumEvensSum3\n        && sumEvensSum == sumEvensSum4", "    \
    \    val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0).sum\n\
    \        sumEvens == 4", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n     \
    \   val sumEvensSum2 = sumEvensSum * sumEvensSum\n        val sumEvensSum3 = sumEvensSum\
    \ * sumEvensSum\n        val sumEvensSum4 = sumEvensSum * sumEvensSum\n      \
    \  val sumEvensSum5 = sumEvensSum * sumEvensSum\n        val sumEvensSum6 = sumEvensSum\
    \ * sumEvensSum\n        val sumEvensSum7 = sumEvensSum * sumEvensSum\n      \
    \  val sumEvensSum8 = sumEvensSum * sumEvensSum\n        val sumEvensSum9 = sumEvensSum\
    \ * sumEvensSum\n        val sumEvensSum10 = sumEvensSum * sumEvensSum\n     \
    \   val sumEvensSum11 = sumEvensSum * sumEvensSum\n        val sumEvensSum12 =\
    \ sumEvensSum * sumEvensSum\n        val sumEvensSum13 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum14 = sumEvensSum * sumEvensSum\n        val sumEvensSum15\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum16 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum17 = sumEvensSum * sumEvensSum\n        val sumEvensSum18\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum19 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum20 = sumEvensSum * sumEvensSum\n        val sumEvensSum21\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum22 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum23 = sumEvensSum * sumEvensSum\n        val sumEvensSum24\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum25 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum26 = sumEvensSum * sumEvensSum\n        val sumEvensSum27\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum28 = sumEvensSum * sumEvensSum\n\
    \        val ", "        val sumEven = mutable.ListBuffer[Long]()\n        for(i\
    \ <- 0 until n){\n            val x = i\n            val y = n - i\n         \
    \   val z = x + y\n            val q = z / 2\n            val r = z % 2\n    \
    \        if(q == r){\n                sumEven += q\n            }\n        }\n\
    \        sumEven.length == n", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemain", "        val sumEven = mutable.ListBuffer[Long]()\n\
    \        val sumEvenEven = mutable.ListBuffer[Long]()\n        val sumEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOdd = mutable.ListBuffer[Long]()\n        val sumOdd =\
    \ mutable.ListBuffer[Long]()\n        val sumOddEven = mutable.ListBuffer[Long]()\n\
    \        val sumOddOdd = mutable.ListBuffer[Long]()\n        val sumOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOddEvenOdd = mutable.ListBuffer[Long]()\n        val sumEvenOddOddOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumOddEvenOddOddEvenOdd = mutable.ListBuffer[Long]()\n        val\
    \ sumOddEvenOddOddEvenOdd = mutable.ListBuffer[Long]()\n        val sumEvenOddOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddOddOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOddOddOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOddOddOddOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOddOddOddOddOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOddOddOddOddOddOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOddOddOddOddOddOddOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOddOddOddOddOddOddOddEvenOddEvenOdd", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum\
    \ = sumEvens.sum\n        val sumEvensSumEven = sumEvensSum.filter(_ % 2 == 0)\n\
    \        val sumEvensSumEvenSum = sumEvensSumEven.sum\n        val sumEvensSumEvenSumEven\
    \ = sumEvensSumEvenSum.filter(_ % 2 == 0)\n        val sumEvensSumEvenSumEvenSum\
    \ = sumEvensSumEvenSumEven.sum\n        val sumEvensSumEvenSumEvenSumEven = sumEvensSumEvenSumEvenSumEven.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSum = sumEvensSumEvenSumEvenSumEvenSum.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEven = sumEvensSumEvenSumEvenSumEvenSumEven.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSum = sumEvensSumEvenSumEvenSumEvenSumEvenSum.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSumEven = sumEvensSumEvenSumEvenSumEvenSumEvenSumEven.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSum = sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSum.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEven = sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEven.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSum = sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEven.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSum = sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEven.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSum = sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSum.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSumEven = sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSumEven.sum\n\
    \        val sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSum = sumEvensSumEvenSumEvenSumEvenSumEvenSumEvenSum",
  "        val sumEven = mutable.ListBuffer.empty[Long]\n        val sumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for(i <- 0 until n){\n            val x = i % 2\n\
    \            if(x == 0){\n                evens += i\n            }else{\n   \
    \             odds += i\n            }\n        }\n        for(i <- 0 until evens.size){\n\
    \            sum += evens(i)\n        }\n        for(i <- 0 until odds.size){\n\
    \            sum += odds(i)\n        }\n        sum == n", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0\n        for (i <- 0 until\
    \ n) {\n            if (i % 2 == 0) {\n                evens += i\n          \
    \  }\n            sum += i\n        }\n        evens.size == 4", "        val\
    \ sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven.productIterator.toList\n        val sumEvensSum = sumEvens.sum\n \
    \       val sumEvensSum2 = sumEvensSum * sumEvensSum\n        val sumEvensSum3\
    \ = sumEvensSum2 * sumEvensSum\n        val sumEvensSum4 = sumEvensSum3 * sumEvensSum\n\
    \        val sumEvensSum5 = sumEvensSum4 * sumEvensSum\n        val sumEvensSum6\
    \ = sumEvensSum5 * sumEvensSum\n        val sumEvensSum7 = sumEvensSum6 * sumEvensSum\n\
    \        val sumEvensSum8 = sumEvensSum7 * sumEvensSum\n        val sumEvensSum9\
    \ = sumEvensSum8 * sumEvensSum\n        val sumEvensSum10 = sumEvensSum9 * sumEvensSum\n\
    \        val sumEvensSum11 = sumEvensSum10 * sumEvensSum\n        val sumEvensSum12\
    \ = sumEvensSum11 * sumEvensSum\n        val sumEvensSum13 = sumEvensSum12 * sumEvensSum\n\
    \        val sumEvensSum14 = sumEvensSum13 * sumEvensSum\n        val sumEvensSum15\
    \ = sumEvensSum14 * sumEvensSum\n        val sumEvensSum16 = sumEvensSum15 * sumEvensSum\n\
    \        val sumEvensSum17 = sumEvensSum16 * sumEvensSum\n        val sumEvensSum18\
    \ = sumEvensSum17 * sumEvensSum\n        val sumEvensSum19 = sumEvensSum18 * sumEvensSum\n\
    \        val sumEvensSum20 = sumEvensSum19 * sumEvensSum\n        val sumEvensSum21\
    \ = sumEvensSum20 * sumEvensSum\n        val sumEvensSum22 = sumEvensSum21 * sumEvensSum\n\
    \        val sumEvensSum23 = sumEvensSum22 * sumEvensSum\n        val sumEvensSum24\
    \ = sumEvensSum23 * sumEvensSum\n        val sumEvensSum25 = sumEvensSum24 * sumEvensSum\n\
    \        val sumEvensSum26 = sumEvensSum25 * sumEvensSum\n        val sumEvensSum27\
    \ = sumEvensSum26 * sumEvensSum\n        val ", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven.filter(_ % 2 == 0).length\n        val sumEvensSum\
    \ = sumEvens.toInt\n        val sumEvensSum4 = sumEvensSum.toInt\n        val\
    \ sumEvensSum4Evens = sumEvensSum4.toInt\n        val sumEvensSum4EvensSum = sumEvensSum4Evens.toInt\n\
    \        val sumEvensSum4EvensSum4 = sumEvensSum4EvensSum.toInt\n        val sumEvensSum4EvensSum4Evens\
    \ = sumEvensSum4EvensSum4Evens.toInt\n        val sumEvensSum4EvensSum4EvensSum\
    \ = sumEvensSum4EvensSum4EvensSum.toInt\n        val sumEvensSum4EvensSum4EvensSum4\
    \ = sumEvensSum4EvensSum4EvensSum4.toInt\n        val sumEvensSum4EvensSum4EvensSum4Evens\
    \ = sumEvensSum4EvensSum4EvensSum4Evens.toInt\n        val sumEvensSum4EvensSum4EvensSum4EvensSum\
    \ = sumEvensSum4EvensSum4EvensSum4EvensSum.toInt\n        val sumEvensSum4EvensSum4EvensSum4EvensSum4\
    \ = sumEvensSum4EvensSum4EvensSum4EvensSum4.toInt\n        val sumEvensSum4EvensSum4EvensSum4EvensSum4Evens\
    \ = sumEvensSum4EvensSum4EvensSum4EvensSum4Evens.toInt\n        val sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum\
    \ = sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum.toInt\n        val sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum4\
    \ = sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum4.toInt\n        val sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum4Evens\
    \ = sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum4Evens.toInt\n        val sumEvensSum4EvensSum4EvensSum",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemain", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0).length\n      \
    \  sumEvens == 4", "        val sumEven = mutable.Set[Long]()\n        val sumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOdd = mutable.Set[Long]()\n   \
    \     val sumEvenSumOddSumOdd = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n   \
    \     val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd",
  "        val sumEven = mutable.ListBuffer[Long]()\n        val sumEvenSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSum = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSum = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n        val\
    \ sumEvenSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSumSum =\
    \ mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n  \
    \      val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n    \
    \    val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n   \
    \     val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n  \
    \      val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n \
    \       val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val evens = mutable.ListBuffer[Long]()\n        val sum =\
    \ 0\n        val limit = math.max(math.abs(n), 4l) // limit the sum to 4 positive\
    \ even numbers\n        for(i <- 0 until limit) {\n            val x = math.abs(n)\
    \ - i\n            val y = math.abs(x) - i\n            val z = math.abs(y) -\
    \ i\n            val w = math.abs(z) - i\n            val a = math.abs(w) - i\n\
    \            val b = math.abs(a) - i\n            val c = math.abs(b) - i\n  \
    \          val d = math.abs(c) - i\n            val e = math.abs(d) - i\n    \
    \        val f = math.abs(e) - i\n            val g = math.abs(f) - i\n      \
    \      val h = math.abs(g) - i\n            val i = math.abs(h) - i\n        \
    \    val j = math.abs(i) - i\n            val k = math.abs(j) - i\n          \
    \  val l = math.abs(k) - i\n            val m = math.abs(l) - i\n            val\
    \ n = math.abs(m) - i\n            val o = math.abs(n) - i\n            val p\
    \ = math.abs(o) - i\n            val q = math.abs(p) - i\n            val r =\
    \ math.abs(q) - i\n            val s = math.abs(r) - i\n            val t = math.abs(s)\
    \ - i\n            val u = math.abs(t) - i\n            val v = math.abs(u) -\
    \ i\n            val w = math.abs(v) - i\n            val x = math.abs(w) - i\n\
    \            val y = math.abs(x) - i\n            val z = math.abs(y) - i\n  \
    \          val w = math.abs(z) - i\n            val a = math.abs(w) - i\n    \
    \        val b = math.abs(a) - i\n            val c = math.abs(b) - i\n      \
    \      val d = math.abs(c) - i\n            val e = math.abs(d) - i\n        \
    \    val f = math.abs(e) - i\n            val g = math.abs(f) - i\n          \
    \  val h = math.abs(g) - i\n            val i = math.abs(h) - i\n            val\
    \ j = math.abs(i) - i\n            val k = math.abs(j) - i\n            val l\
    \ = math.abs(k) - i\n            val m = math.abs(l) - i\n            val n =\
    \ math.abs(m) - i\n            val o = math.abs(n) - i\n            val p = math.abs(o)\
    \ - i\n            val q = math.abs(p) - i\n            val r = math.abs(q) -\
    \ i\n            val s = math.abs(r) - i\n            val t = math.abs(s) - i\n\
    \            val u = math.abs(", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven - sumEvens\n        val\
    \ sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder - sumEvensRemainders\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder", "  \
    \      val evens = mutable.ListBuffer[Long]()\n        val sum = 0\n        for(i\
    \ <- 0 until n){\n            val x = n%i + 1\n            if(x == 0){\n     \
    \           evens.append(x)\n            }\n            sum += x\n        }\n\
    \        evens.size == 4 && sum == n", "        val sumEven = n.toInt\n      \
    \  val sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n        sumEvens\
    \ == remainder", "        val sumEven = n.toInt\n        val sumEvens = sumEven\
    \ / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n \
    \       val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven.filter(_ % 2 == 0).length\n        sumEvens == 4",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0)\n\
    \        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4 = sumEvensSum.filter(_\
    \ % 4 == 0).length\n        sumEvensSum4 == sumEvens.length", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0).length\n      \
    \  val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4 = sumEvensSum ==\
    \ 4\n        val sumEvensSum4Sum = sumEvensSum * 4\n        val sumEvensSum4Sum4\
    \ = sumEvensSum4Sum * 4\n        val sumEvensSum4Sum4Sum = sumEvensSum4Sum4 *\
    \ 4\n        val sumEvensSum4Sum4Sum4 = sumEvensSum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4 * 4\n        val sumEvensSum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum *\
    \ 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = mutable.ListBuffer[Long]()\n        for (i\
    \ <- 0 until n) {\n            if (i % 2 == 0) {\n                sumEven.append(i)\n\
    \            }\n        }\n        sumEven.size == 4", "        val sumEven =\
    \ n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder =\
    \ sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n      \
    \  val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemainder", "        val evenSum = n.toInt\n      \
    \  val evenSums = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount =\
    \ mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount2 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount3 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount4\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount5 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount6 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount7\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount8 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount9 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount10\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount11 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount12 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount13\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount14 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount15 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount16\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount17 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount18 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount19\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount20 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount21 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount22\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount23 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount24 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount25\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount26 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount27 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount28\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount29 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount30 = mut", "        val sumEven = n.toInt\n        val\
    \ sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven - sumEvens\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder - sumEvensRemainders\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.productIterator.toList\n        val\
    \ sumEvensSum = sumEvens.sum\n        val sumEvensSumEvens = sumEvensSum.productIterator.toList\n\
    \        val sumEvensSumEvensSum = sumEvensSumEvens.sum\n        val sumEvensSumEvensSumEvens\
    \ = sumEvensSumEvensSum.productIterator.toList\n        val sumEvensSumEvensSumEvensSum\
    \ = sumEvensSumEvensSumEvens.sum\n        val sumEvensSumEvensSumEvensSumEvens\
    \ = sumEvensSumEvensSumEvensSum.productIterator.toList\n        val sumEvensSumEvensSumEvensSumEvensSum\
    \ = sumEvensSumEvensSumEvensSumEvens.sum\n        val sumEvensSumEvensSumEvensSumEvensSumEvens\
    \ = sumEvensSumEvensSumEvensSumEvensSum.productIterator.toList\n        val sumEvensSumEvensSumEvensSumEvensSumEvensSum\
    \ = sumEvensSumEvensSumEvensSumEvensSumEvens.sum\n        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvens\
    \ = sumEvensSumEvensSumEvensSumEvensSumEvensSum.productIterator.toList\n     \
    \   val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.productIterator.toList\n\
    \        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvens = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvens.productIterator.toList\n\
    \        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.productIterator.toList\n\
    \        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum\
    \ = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.productIterator.toList\n\
    \        val sumEvensSumEvensSumEvensSum", "        val evenSums = mutable.Set[Long]()\n\
    \        val sums = mutable.Set[Long]()\n        val evenSumsSet = mutable.Set[Long]()\n\
    \        val sumsSet = mutable.Set[Long]()\n        val evenSumsSet2 = mutable.Set[Long]()\n\
    \        val sumsSet2 = mutable.Set[Long]()\n        val evenSumsSet3 = mutable.Set[Long]()\n\
    \        val sumsSet3 = mutable.Set[Long]()\n        val evenSumsSet4 = mutable.Set[Long]()\n\
    \        val sumsSet4 = mutable.Set[Long]()\n        val evenSumsSet5 = mutable.Set[Long]()\n\
    \        val sumsSet5 = mutable.Set[Long]()\n        val evenSumsSet6 = mutable.Set[Long]()\n\
    \        val sumsSet6 = mutable.Set[Long]()\n        val evenSumsSet7 = mutable.Set[Long]()\n\
    \        val sumsSet7 = mutable.Set[Long]()\n        val evenSumsSet8 = mutable.Set[Long]()\n\
    \        val sumsSet8 = mutable.Set[Long]()\n        val evenSumsSet9 = mutable.Set[Long]()\n\
    \        val sumsSet9 = mutable.Set[Long]()\n        val evenSumsSet10 = mutable.Set[Long]()\n\
    \        val sumsSet10 = mutable.Set[Long]()\n        val evenSumsSet11 = mutable.Set[Long]()\n\
    \        val sumsSet11 = mutable.Set[Long]()\n        val evenSumsSet12 = mutable.Set[Long]()\n\
    \        val sumsSet12 = mutable.Set[Long]()\n        val evenSumsSet13 = mutable.Set[Long]()\n\
    \        val sumsSet13 = mutable.Set[Long]()\n        val evenSumsSet14 = mutable.Set[Long]()\n\
    \        val sumsSet14 = mutable.Set[Long]()\n        val evenSumsSet15 = mutable.Set[Long]()\n\
    \        val sumsSet15 = mutable.Set[Long]()\n        val evenSumsSet16 = mutable.Set[Long]()\n\
    \        val sumsSet16 = mutable.Set[Long]()\n        val evenSumsSet17 = mutable.Set[Long]()",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        sumEvensSum4 == n", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val evenSum = 0\n        for(i <- 0 until n){\n            if(i % 2 ==\
    \ 0){\n                evenSum += i\n                evens += i\n            }\n\
    \        }\n        evenSum == n", "        val sumEven = n.toInt\n        val\
    \ sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n      \
    \  val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainders", "        val sumEven =\
    \ n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder =\
    \ sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n      \
    \  val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sum", "        val sumEven = mutable.ListBuffer[Long]()\n       \
    \ sumEven.+=(n/4)\n        sumEven.+=(n/4)\n        sumEven.+=(n/4)\n        sumEven.+=(n/4)\n\
    \        sumEven.foreach(x => if (x%2==0) return false)\n        true", "    \
    \    val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0)\n\
    \        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4 = sumEvensSum\
    \ * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n        sumEvensSum4Sum\
    \ == sumEven", "        val sumEven = mutable.ListBuffer[Long]()\n        for(i\
    \ <- 0 until n){\n            sumEven.append(i)\n        }\n        sumEven.forall(i\
    \ => i % 2 == 0)", "        val sumEven = n.toInt\n        val sumEvens = sumEven\
    \ / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n\
    \        val sumEvensSum4 = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n\
    \        val sumEvensSum4Sum4 = sumEvensSum4Sum * 4\n        val sumEvensSum4Sum4Sum\
    \ = sumEvensSum4Sum4.sum\n        val sumEvensSum4Sum4Sum4 = sumEvensSum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4.sum\n      \
    \  val sumEvensSum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum", "        val sumEven = n.toInt\n   \
    \     val sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n      \
    \  sumEvens == remainder", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val evens = mutable.ArrayBuffer(2l, 4l, 6l, 8l)\n       \
    \ val sum = evens.sum\n        val remainder = sum % n\n        if (remainder\
    \ == 0)\n            true\n        else\n            false", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.filter(x => x % 2 == 0).length\n \
    \       val sumEvensLessThan4 = sumEvens - 4\n        sumEvensLessThan4 > 0",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0).sum\n\
    \        sumEvens == 4", "        val sumEven = mutable.ListBuffer.empty[Long]\n\
    \        val sumOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n    \
    \    val sumEvenSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n  \
    \      val sumEvenSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]", "        val sumEven = n.toInt\n        val\
    \ sumEvens = sumEven / 4\n        val sumEvensRemainder = sumEven % 4\n      \
    \  sumEvens == sumEvensRemainder", "        val sumEven = n.toInt\n        val\
    \ sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n      \
    \  val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemainder", "        val sumEven = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumOdd = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n   \
    \     val sumEvenSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]", "        val sumEven = n.toInt\n       \
    \ val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n  \
    \      val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val evenSums = mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until n) {\n            if (i % 2 == 0) {\n             \
    \   evenSums += i\n            }\n        }\n        evenSums.size == 4", "  \
    \      val sumEven = n.toInt\n        val sumEvens = sumEven / 4\n        val\
    \ remainder = sumEven % 4\n        sumEvens == remainder", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.toInt\n      \
    \  sumEvensSum4Sum == sumEven", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n     \
    \   sumEvensSum == sumEven", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 4\n        val sumEvensRemainder = sumEven % 4\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 4\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 4\n        sumEvens == sumEvensRemainders && sumEvens == sumEvensRemaindersRemainder",
  "        val evens = mutable.ListBuffer[Long]()\n        val sum = 0\n        for(i\
    \ <- 0 until n){\n            if(i % 2 == 0){\n                evens += i\n  \
    \          }\n            sum += i\n        }\n        evens.size == 4 && sum\
    \ == n", "        val evens = mutable.ListBuffer[Long]()\n        val sum = mutable.ListBuffer[Long]()\n\
    \        val evenSum = mutable.ListBuffer[Long]()\n        val evenSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSum = mutable.ListBuffer[Long]()\n        val evenSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSums = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n        val\
    \ evenSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n  \
    \      val evenSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n   \
    \     val evenSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n \
    \       val evenSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.", "  \
    \      val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven - sumEvens\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder - sumEvensRemainders\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0).sum\n        sumEvens\
    \ == 4", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 4\n\
    \        val remainder = sumEven % 4\n        sumEvens == remainder", "      \
    \  val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven.filter(_ % 2 == 0)\n        sumEvens.size == 4",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemainder", "        val sumEven = mutable.ListBuffer.empty[Long]\n\
    \        val sumOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n    \
    \    val sumEvenSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n  \
    \      val sumEvenSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOd",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemain", "        val evens = mutable.ListBuffer[Long]()\n       \
    \ val evenSum = 0\n        val evenSums = mutable.ListBuffer[Long]()\n       \
    \ val evenSumsSum = 0\n        val evenSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSum = 0\n        val evenSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSum = 0\n        val evenSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSum = 0\n        val evenSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSum = 0\n\
    \        val evenSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n     \
    \   val evenSumsSumsSumsSumsSumsSumsSum = 0\n        val evenSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSum\
    \ = 0\n        val evenSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum = 0\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = 0\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = 0\n        val\
    \ evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = 0\n       \
    \ val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 4\n        val\
    \ remainder = sumEven % 4\n        sumEvens == remainder", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0).length\n      \
    \  sumEvens == 4", "        val sumEven = mutable.Set[Long]()\n        val sumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOdd = mutable.Set[Long]()\n   \
    \     val sumEvenSumOddSumOdd = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n   \
    \     val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.Set[Long]()\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.Set[Long]()\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd",
  "        val evens = mutable.ListBuffer[Long]()\n        val sum = 0\n        for\
    \ (i <- 0 until n) {\n            if (i % 2 == 0) {\n                even += i\n\
    \                evens += i\n            }\n        }\n        val evenSum = evens.sum\n\
    \        val sumEvens = evens.toList.sum\n        evenSum == sumEvens", "    \
    \    val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum =\
    \ sumEvens.sum\n        sumEvensSum == sumEven", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val evens = mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for(i <- 0 until n){\n            sum += i\n   \
    \         if(sum % 2 == 0){\n                evens += sum\n            }\n   \
    \     }\n        evens.size == 4", "        val sumEven = n.toInt\n        val\
    \ sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n      \
    \  val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val evens = mutable.ListBuffer[Long]()\n        val sum = 0\n        while(n\
    \ > 0){\n            sum += n\n            evens += n\n            n -= 1\n  \
    \      }\n        evens.size == 4", "        val sumEven = n.toInt\n        val\
    \ sumEvens = sumEven.filter(_ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n\
    \        val sumEvensSum4 = sumEvensSum.toInt\n        val sumEvensSum4Sum = sumEvensSum4.toInt\n\
    \        val sumEvensSum4Sum4 = sumEvensSum4Sum.toInt\n        val sumEvensSum4Sum4Sum\
    \ = sumEvensSum4Sum4.toInt\n        val sumEvensSum4Sum4Sum4 = sumEvensSum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4.toInt\n        val\
    \ sumEvensSum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven.filter(_ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n\
    \        val sumEvensSum4 = sumEvensSum == 4\n        val sumEvensSum4Sum = sumEvensSum.filter(_\
    \ % 4 == 0).length\n        val sumEvensSum4Sum4 = sumEvensSum4Sum == 4\n    \
    \    sumEvensSum4Sum", "        val evens = mutable.ListBuffer[Long]()\n     \
    \   val sum = mutable.ListBuffer[Long]()\n        val evenSum = mutable.ListBuffer[Long]()\n\
    \        val evenSums = mutable.ListBuffer[Long]()\n        val evenSumsSum =\
    \ mutable.ListBuffer[Long]()\n        val evenSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSum = mutable.ListBuffer[Long]()\n        val evenSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSums = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n      \
    \  val evenSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n        val\
    \ evenSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val sumEvensSum2\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum3 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum4 = sumEvensSum * sumEvensSum\n        val sumEvensSum5\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum6 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum7 = sumEvensSum * sumEvensSum\n        val sumEvensSum8\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum9 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum10 = sumEvensSum * sumEvensSum\n        val sumEvensSum11\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum12 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum13 = sumEvensSum * sumEvensSum\n        val sumEvensSum14\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum15 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum16 = sumEvensSum * sumEvensSum\n        val sumEvensSum17\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum18 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum19 = sumEvensSum * sumEvensSum\n        val sumEvensSum20\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum21 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum22 = sumEvensSum * sumEvensSum\n        val sumEvensSum23\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum24 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum25 = sumEvensSum * sumEvensSum\n        val sumEvensSum26\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum27 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum28 = sumEvensSum * sumEvensSum\n", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0).length\n      \
    \  val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4 = sumEvensSum.toInt\n\
    \        val sumEvensSum4Sum = sumEvensSum4.toInt\n        val sumEvensSum4Sum4\
    \ = sumEvensSum4Sum.toInt\n        val sumEvensSum4Sum4Sum = sumEvensSum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum.toInt\n       \
    \ val sumEvensSum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum.toInt\n      \
    \  val sumEvensSum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 4\n        val remainder = sumEven\
    \ % 4\n        if (sumEvens == 4 && remainder == 0) true\n        else false",
  "        val evens = mutable.ListBuffer[Long]()\n        val sum = 0\n        while(n\
    \ > 0){\n            val x = n % 2\n            sum += x\n            evens +=\
    \ x\n            n /= 2\n        }\n        evens.size == 4 && sum == 4", "  \
    \      val evens = mutable.ListBuffer[Long]()\n        val sum = 0\n        for(i\
    \ <- 0 until n){\n            val x = i\n            val y = n - i\n         \
    \   val z = x + y\n            val z2 = z * z\n            val z3 = z2 * z\n \
    \           val z4 = z3 * z\n            val z5 = z4 * z\n            val z6 =\
    \ z5 * z\n            val z7 = z6 * z\n            val z8 = z7 * z\n         \
    \   val z9 = z8 * z\n            val z10 = z9 * z\n            val z11 = z10 *\
    \ z\n            val z12 = z11 * z\n            val z13 = z12 * z\n          \
    \  val z14 = z13 * z\n            val z15 = z14 * z\n            val z16 = z15\
    \ * z\n            val z17 = z16 * z\n            val z18 = z17 * z\n        \
    \    val z19 = z18 * z\n            val z20 = z19 * z\n            val z21 = z20\
    \ * z\n            val z22 = z21 * z\n            val z23 = z22 * z\n        \
    \    val z24 = z23 * z\n            val z25 = z24 * z\n            val z26 = z25\
    \ * z\n            val z27 = z26 * z\n            val z28 = z27 * z\n        \
    \    val z29 = z28 * z\n            val z30 = z29 * z\n            val z31 = z30\
    \ * z\n            val z32 = z31 * z\n            val z33 = z32 * z\n        \
    \    val z34 = z33 * z\n            val z35 = z34 * z\n            val z36 = z35\
    \ * z\n            val z37 = z36 * z\n            val z38 = z37 * z\n        \
    \    val z39 = z38 * z\n            val z40 = z39 * z\n            val z41 = z40\
    \ * z\n            val z42 = z41 * z\n            val z43 = z42 * z\n        \
    \    val z44 = z43 * z\n            val z45 = z44 * z\n            val z46 = z45\
    \ * z\n            val z47 = z46 * z\n            val z48 = z47 * z\n        \
    \    val z49 = z48 * z\n            val z50 = z", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val ", "        val sumEven = n.toInt\n        val sumEvens = sumEven\
    \ / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainder", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 4\n        val\
    \ remainder = sumEven % 4\n        if (sumEvens == remainder)\n            true\n\
    \        else\n            false", "        val nums = mutable.ListBuffer(2l,\
    \ 4l, 6l, 8l)\n        val sum = nums.sum\n        if (sum == n)\n           \
    \ true\n        else\n            false", "        val sumEven = n.toInt\n   \
    \     val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val ", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0l\n        for(i <- 0 until\
    \ n){\n            val x = i\n            val y = n - i\n            val z = x\
    \ + y\n            if(z % 2 == 0){\n                evens += z\n            }else{\n\
    \                odds += z\n            }\n            sum += z\n        }\n \
    \       evens.size == 4 && evens.forall(x => x % 2 == 0) && (sum % 4 == 0)", " \
    \       val evens = mutable.ListBuffer[Long]()\n        var sum = 0\n        while\
    \ (n > 0) {\n            sum += n\n            evens += n\n            n -= 2\n\
    \        }\n        evens.forall(x => x >= 0)", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = mutable.ListBuffer.empty[Long]\n\
    \        val sumOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n    \
    \    val sumEvenSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n  \
    \      val sumEvenSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOd",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n   \
    \     sumEvens == remainder", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven.filter(_ % 2 == 0).length\n        val sumEvensSum\
    \ = sumEvens.toInt\n        val sumEvensSumEven = sumEvensSum.filter(_ % 2 ==\
    \ 0).length\n        val sumEvensSumEvens = sumEvensSumEven.filter(_ % 2 == 0).length\n\
    \        val sumEvensSumEvensSum = sumEvensSumEvens.filter(_ % 2 == 0).length\n\
    \        val sumEvensSumEvensSumEven = sumEvensSumEvensSum.filter(_ % 2 == 0).length\n\
    \        val sumEvensSumEvensSumEvens = sumEvensSumEvensSumEven.filter(_ % 2 ==\
    \ 0).length\n        val sumEvensSumEvensSumEvensSum = sumEvensSumEvensSumEvens.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSumEvensSumEven = sumEvensSumEvensSumEvensSum.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSumEvensSumEvens = sumEvensSumEvensSumEvensSumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSumEvensSumEvensSum = sumEvensSumEvensSumEvensSumEvens.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSumEvensSumEvensSumEven = sumEvensSumEvensSumEvensSumEvensSum.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSumEvensSumEvensSumEvens = sumEvensSumEvensSumEvensSumEvensSumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSumEvensSumEvensSumEvensSum =\
    \ sumEvensSumEvensSumEvensSumEvensSumEvens.filter(_ % 2 == 0).length\n       \
    \ val sumEvensSumEvensSumEvensSumEvensSumEvensSumEven = sumEvensSumEvensSumEvensSumEvensSumEvensSum.filter(_\
    \ % 2 == 0).length\n        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvens\
    \ = sumEvensSumEvensSumEvensSumEvensSumEvensSumEven.filter(_ % 2 == 0).length\n\
    \        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum = ", "      \
    \  val evens = mutable.ListBuffer[Long]()\n        val sum = mutable.ListBuffer[Long]()\n\
    \        val evenSum = mutable.ListBuffer[Long]()\n        val evenSum2 = mutable.ListBuffer[Long]()\n\
    \        val evenSum3 = mutable.ListBuffer[Long]()\n        val evenSum4 = mutable.ListBuffer[Long]()\n\
    \        val evenSum5 = mutable.ListBuffer[Long]()\n        val evenSum6 = mutable.ListBuffer[Long]()\n\
    \        val evenSum7 = mutable.ListBuffer[Long]()\n        val evenSum8 = mutable.ListBuffer[Long]()\n\
    \        val evenSum9 = mutable.ListBuffer[Long]()\n        val evenSum10 = mutable.ListBuffer[Long]()\n\
    \        val evenSum11 = mutable.ListBuffer[Long]()\n        val evenSum12 = mutable.ListBuffer[Long]()\n\
    \        val evenSum13 = mutable.ListBuffer[Long]()\n        val evenSum14 = mutable.ListBuffer[Long]()\n\
    \        val evenSum15 = mutable.ListBuffer[Long]()\n        val evenSum16 = mutable.ListBuffer[Long]()\n\
    \        val evenSum17 = mutable.ListBuffer[Long]()\n        val evenSum18 = mutable.ListBuffer[Long]()\n\
    \        val evenSum19 = mutable.ListBuffer[Long]()\n        val evenSum20 = mutable.ListBuffer[Long]()\n\
    \        val evenSum21 = mutable.ListBuffer[Long]()\n        val evenSum22 = mutable.ListBuffer[Long]()\n\
    \        val evenSum23 = mutable.ListBuffer[Long]()\n        val evenSum24 = mutable.ListBuffer[Long]()\n\
    \        val evenSum25 = mutable.ListBuffer[Long]()\n        val evenSum26 = mutable.ListBuffer[Long]()\n\
    \        val evenSum27 = mutable.ListBuffer[Long]()\n        val evenSum28 = mutable.ListBuffer[Long]()\n\
    \        val evenSum29 = mutable.ListBuffer[Long]()\n        val evenSum30 = mutable.ListBuffer[Long]()\n\
    \        val evenSum31 = mutable.ListBuffer[Long]()\n        val evenSum32 = mutable.ListBuffer[Long]()\n\
    \        val evenSum33 = mutable.ListBuffer[Long]()\n        val evenSum", " \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val nums = mutable.ListBuffer[Long]()\n        val\
    \ numsSum = mutable.ListBuffer[Long]()\n        val numsSumEven = mutable.ListBuffer[Long]()\n\
    \        val numsSumOdd = mutable.ListBuffer[Long]()\n        val numsSumEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsSumEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val numsSumEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsSumEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n  \
    \      val numsSumEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numsSumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO", " \
    \       val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = mutable.ListBuffer[Long]()\n\
    \        val sumOdd = mutable.ListBuffer[Long]()\n        val sumEvenEven = mutable.ListBuffer[Long]()\n\
    \        val sumOddEven = mutable.ListBuffer[Long]()\n        val sumEvenOdd =\
    \ mutable.ListBuffer[Long]()\n        val sumOddOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenEvenEven = mutable.ListBuffer[Long]()\n        val sumOddEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val sumOddOddEven = mutable.ListBuffer[Long]()\n        val sumEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOdd = mutable.ListBuffer[Long]()\n        val sumEvenEvenEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val sumOddEvenEvenEven = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddEvenEven = mutable.ListBuffer[Long]()\n        val sumEvenEvenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val sumOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOddEven = mutable.ListBuffer[Long]()\n        val sumEvenEvenEvenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val sumOddEvenEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOddEvenEven = mutable.ListBuffer[Long]()\n        val sumEvenEvenOddOddEven\
    \ = mutable.ListBuffer[Long]()\n        val sumOddEvenEvenEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddEvenOddEvenEven = mutable.ListBuffer[Long]()\n        val\
    \ sumEvenEvenEvenOddOddEven = mutable.ListBuffer[Long]()\n        val sumOddEvenOddEvenEvenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenEvenOddEvenOddOddEven = mutable.ListBuffer[Long]()\n\
    \        ", "        val evenSum = n.toInt\n        val sumEven = evenSum.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemainder", "        val sumEven = n.toInt\n        val sumEvens =\
    \ sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ - sumEvensRemainders\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 4\n        val sumEvensRemainder\
    \ = sumEven % 4\n        sumEvens == sumEvensRemainder", "        val sumEven\
    \ = mutable.ListBuffer[Long]()\n        var sum = 0\n        for(i <- 0 until\
    \ n){\n            sum += i\n            if(sumEven.contains(sum)){\n        \
    \        return false\n            }\n            sumEven.append(sum)\n      \
    \  }\n        return true", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven - sumEvens\n        val\
    \ sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder - sumEvensRemainders\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0\n        for(i <- 0 until\
    \ n) {\n            val x = i % 2\n            if(x != 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \       sum += i\n        }\n        val evenSum = evens.sum\n        val oddSum\
    \ = odds.sum\n        if(evenSum == sum && oddSum == sum) {\n            return\
    \ true\n        }\n        return false", "        val sumEven = n.toInt\n   \
    \     val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven - sumEvens\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder - sumEvensRemainders\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0).length\n      \
    \  val sumEvensSum = sumEvens.toInt\n        val sumEvensSumEvens = sumEvensSum.toInt\n\
    \        val sumEvensSumEvensSum = sumEvensSumEvens.toInt\n        val sumEvensSumEvensSumEvens\
    \ = sumEvensSumEvensSum.toInt\n        val sumEvensSumEvensSumEvensSum = sumEvensSumEvensSumEvens.toInt\n\
    \        val sumEvensSumEvensSumEvensSumEvensSum = sumEvensSumEvensSumEvensSumEvens.toInt\n\
    \        val sumEvensSumEvensSumEvensSumEvensSumEvens = sumEvensSumEvensSumEvensSumEvensSum.toInt\n\
    \        val sumEvensSumEvensSumEvensSumEvensSumEvensSum = sumEvensSumEvensSumEvensSumEvensSumEvensSum.toInt\n\
    \        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.toInt\n\
    \        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvens = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.toInt\n\
    \        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.toInt\n\
    \        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvens\
    \ = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.toInt\n      \
    \  val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum.toInt\n\
    \        val sumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvens\
    \ = sumEvensSumEvensSumEvensSumEvensSumEvensSumEvens", "        val sumEven =\
    \ n.toInt\n        val sumEvens = sumEven / 4\n        val remainder = sumEven\
    \ % 4\n        sumEvens == remainder", "        val sumEven = n.toInt\n      \
    \  val sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n        sumEvens\
    \ == remainder", "        val sumEven = n.toInt\n        val sumEvens = sumEven\
    \ / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemain", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainders", "        val sumEven =\
    \ n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0).length\n        val\
    \ sumEvensLessThanFour = sumEvens - 4\n        sumEvensLessThanFour <= 0", " \
    \       val nums = mutable.ListBuffer[Long]()\n        val sum = 0\n        while(n\
    \ > 0){\n            val x = n % 4\n            sum += x\n            nums +=\
    \ x\n            n /= 4\n        }\n        val sum = nums.sum\n        sum ==\
    \ n", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.toInt\n      \
    \  sumEvensSum4Sum == sumEven", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven.filter(_ % 2 == 0).length\n        sumEvens == 4",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemainder", "        val sumEven = n.toInt\n      \
    \  val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n \
    \       val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        while(n > 0) {\n            sum += n % 10\n    \
    \        evens += n % 10\n            n /= 10\n        }\n        evens.size ==\
    \ 4 && sum == evens.sum", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven.filter(_ % 2 == 0).length\n        val sumEvensLessThanFour = sumEvens\
    \ - 4\n        sumEvensLessThanFour > 0", "        val sumEven = n.toInt\n   \
    \     val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven.productIterator.toList\n\
    \        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4 = sumEvensSum\
    \ * 4\n        val sumEvensSum4IsEven = sumEvensSum4%2 == 0\n        sumEvensSum4IsEven",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvens", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 4\n        val remainder = sumEven % 4\n        sumEvens == remainder",
  "        val evenSums = mutable.Set[Long]()\n        val evenSumsCount = mutable.Set[Long]()\n\
    \        val evenSumsCount2 = mutable.Set[Long]()\n        val evenSumsCount3\
    \ = mutable.Set[Long]()\n        val evenSumsCount4 = mutable.Set[Long]()\n  \
    \      val evenSumsCount5 = mutable.Set[Long]()\n        val evenSumsCount6 =\
    \ mutable.Set[Long]()\n        val evenSumsCount7 = mutable.Set[Long]()\n    \
    \    val evenSumsCount8 = mutable.Set[Long]()\n        val evenSumsCount9 = mutable.Set[Long]()\n\
    \        val evenSumsCount10 = mutable.Set[Long]()\n        val evenSumsCount11\
    \ = mutable.Set[Long]()\n        val evenSumsCount12 = mutable.Set[Long]()\n \
    \       val evenSumsCount13 = mutable.Set[Long]()\n        val evenSumsCount14\
    \ = mutable.Set[Long]()\n        val evenSumsCount15 = mutable.Set[Long]()\n \
    \       val evenSumsCount16 = mutable.Set[Long]()\n        val evenSumsCount17\
    \ = mutable.Set[Long]()\n        val evenSumsCount18 = mutable.Set[Long]()\n \
    \       val evenSumsCount19 = mutable.Set[Long]()\n        val evenSumsCount20\
    \ = mutable.Set[Long]()\n        val evenSumsCount21 = mutable.Set[Long]()\n \
    \       val evenSumsCount22 = mutable.Set[Long]()\n        val evenSumsCount23\
    \ = mutable.Set[Long]()\n        val evenSumsCount24 = mutable.Set[Long]()\n \
    \       val evenSumsCount25 = mutable.Set[Long]()\n        val evenSumsCount26\
    \ = mutable.Set[Long]()\n        val evenSumsCount27 = mutable.Set[Long]()\n \
    \       val evenSumsCount28 = mutable.Set[Long]()\n        val evenSumsCount29\
    \ = mutable.Set[Long]()\n        val evenSumsCount30 = mutable.Set[Long]()\n \
    \       val evenSumsCount31 = mutable.Set[Long]()\n        val evenSumsCount32\
    \ = mutable.Set[Long]()\n", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val evens = mutable.ListBuffer[Long]()\n        var sum =\
    \ 0\n        while (n > 0) {\n            sum += n\n            if (sum % 2 ==\
    \ 0) {\n                evens += sum\n            }\n            n -= 1\n    \
    \    }\n        evens.size == 4", "        val sumEven = n.toInt\n        val\
    \ sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n      \
    \  val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n   \
    \     if (sumEvens == remainder)\n            true\n        else\n           \
    \ false", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n \
    \       val sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ - sumEvensRemainders\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0).length\n      \
    \  val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4 = sumEvensSum *\
    \ 4\n        val sumEvensSum4Sum = sumEvensSum4.toInt\n        val sumEvensSum4Sum4\
    \ = sumEvensSum4Sum * 4\n        val sumEvensSum4Sum4Sum = sumEvensSum4Sum4.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4.toInt\n        sumEvensSum4Sum4Sum4Sum\
    \ == sumEven", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        sumEvens == 4", "        val sumEven = n.toInt\n \
    \       val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(x => x % 2\
    \ == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4 = sumEvensSum\
    \ * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n        val sumEvensSum4Sum4\
    \ = sumEvensSum4Sum * 4\n        val sumEvensSum4Sum4Sum = sumEvensSum4Sum4.sum\n\
    \        val sumEvensSum4Sum4Sum4 = sumEvensSum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4.sum\n        val sumEvensSum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum *\
    \ 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0)\n\
    \        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4 = sumEvensSum\
    \ * 4\n        sumEvensSum4 == n", "        val sumEven = n.toInt\n        val\
    \ sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n      \
    \  val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain"]
stop_tokens:
- "\n    }\n"
