name: HumanEval_88_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of non-negative integers, return a coscala of the given list\
  \ after sorting,\n    // you will sort the given list in ascending order if the\
  \ sum( first index value, last index value) is odd,\n    // or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n    // Note:\n\
  \    // * don't change the given list.\n    // Examples:\n    // >>> sortArray((List[Long]()))\n\
  \    // (List[Long]())\n    // >>> sortArray((List[Long](5l.toLong)))\n    // (List[Long](5l.toLong))\n\
  \    // >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong,\
  \ 5l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong))\n    // >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong,\
  \ 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong)))\n    // (List[Long](6l.toLong, 5l.toLong,\
  \ 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))\n    def sortArray(array\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
  \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong,\
  \ 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong,\
  \ 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong,\
  \ 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
  \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
  \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
  \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
completions: ["        val sumArray = array.sum\n        val evenSum = sumArray %\
    \ 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 != 0)\n        val evenArraySum = evenArray.sum\n     \
    \   val oddArraySum = oddArray.sum\n        val evenArraySumOdd = evenArraySum\
    \ - oddArraySum\n        val oddArraySumEven = oddArraySum + evenArraySum\n  \
    \      val evenArraySumEvenOdd = evenArraySumEven - oddArraySumEven\n        val\
    \ oddArraySumEvenEven = oddArraySumEven + evenArraySumEven\n        val evenArraySumEvenEvenOdd\
    \ = evenArraySumEvenEven - oddArraySumEvenEven\n        val oddArraySumEvenEvenEven\
    \ = oddArraySumEvenEven + evenArraySumEvenEven\n        val evenArraySumEvenEvenEvenOdd\
    \ = evenArraySumEvenEvenOdd - oddArraySumEvenEvenOdd\n        val oddArraySumEvenEvenEvenEven\
    \ = oddArraySumEvenEvenEven + evenArraySumEvenEvenEven\n        val evenArraySumEvenEvenEvenEvenOdd\
    \ = evenArraySumEvenEvenEvenOdd - oddArraySumEvenEvenEvenOdd\n        val oddArraySumEvenEvenEvenEvenEvenEvenOdd\
    \ = oddArraySumEvenEvenEvenEvenEvenOdd + evenArraySumEvenEvenEvenEvenEvenOdd\n\
    \        val evenArraySumEvenEvenEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenEvenEvenEvenOdd\
    \ - oddArraySumEvenEvenEvenEvenEvenOdd\n        val oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenOdd + evenArraySumEvenEvenEvenEvenEvenEvenEvenOdd\n\
    \        val evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ - oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\n        val oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd + evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\n\
    \        val evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ - oddArraySum", "        val sumArray = array.sum\n        val evenSum = sumArray\
    \ % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 != 0)\n        if (evenSum) {\n            evenArray.sortWith(_\
    \ < _)\n        } else {\n            oddArray.sortWith(_ > _)\n        }", " \
    \       val sumArray = array.foldLeft(0L) { (sum, element) => sum + element }\n\
    \        val sumArray2 = sumArray % 2\n        val sumArray3 = sumArray / 2\n\
    \        val sumArray4 = sumArray3 - sumArray2\n        val sumArray5 = sumArray4\
    \ % 2\n        val sumArray6 = sumArray4 / 2\n        val sumArray7 = sumArray6\
    \ - sumArray5\n        val sumArray8 = sumArray7 % 2\n        val sumArray9 =\
    \ sumArray7 / 2\n        val sumArray10 = sumArray8 - sumArray9\n        val sumArray11\
    \ = sumArray10 % 2\n        val sumArray12 = sumArray10 / 2\n        val sumArray13\
    \ = sumArray12 - sumArray11\n        val sumArray14 = sumArray13 % 2\n       \
    \ val sumArray15 = sumArray13 / 2\n        val sumArray16 = sumArray14 - sumArray15\n\
    \        val sumArray17 = sumArray16 % 2\n        val sumArray18 = sumArray16\
    \ / 2\n        val sumArray19 = sumArray18 - sumArray17\n        val sumArray20\
    \ = sumArray19 % 2\n        val sumArray21 = sumArray19 / 2\n        val sumArray22\
    \ = sumArray21 - sumArray20\n        val sumArray23 = sumArray22 % 2\n       \
    \ val sumArray24 = sumArray22 / 2\n        val sumArray25 = sumArray23 - sumArray24\n\
    \        val sumArray26 = sumArray25 % 2\n        val sumArray27 = sumArray25\
    \ / 2\n        val sumArray28 = sumArray27 - sumArray26\n        val sumArray29\
    \ = sumArray28 % 2\n        val sumArray30 = sumArray28 / 2\n        val sumArray31\
    \ = sumArray30 - sumArray29\n        val sumArray32 = sumArray31 % 2\n       \
    \ val sumArray33 = sumArray31 / 2\n        val sumArray34 = sumArray33 - sumArray32\n\
    \        val sumArray35 = sumArray34 % 2\n        val sumArray36 = sumArray34\
    \ / 2\n        val sumArray37 = sumArray35 - sumArray36\n        val sumArray38\
    \ = sumArray37 % 2\n        val sumArray39 = sumArray37 / 2\n        val sumArray40\
    \ = sumArray38 - sumArray39\n        val sumArray41 = sumArray40 ", "        val\
    \ sumArray = array.foldLeft(0l.toLong){ (sum, element) => sum + element }\n  \
    \      val evenSum = sumArray % 2l.toLong\n        val oddSum = sumArray - evenSum\n\
    \        val evenArray = array.filter(_ % 2l.toLong == evenSum)\n        val oddArray\
    \ = array.filter(_ % 2l.toLong == oddSum)\n        if (evenSum == oddSum) oddArray.sortBy(_)\
    \ :: evenArray.sortBy(_)\n        else evenArray.sortBy(_) :: oddArray.sortBy(_)",
  "        val sum : Long = array.sum\n        val evenSum = if (sum % 2 == 0) sum\
    \ else sum - 1\n        val odd = if (sum % 2 == 1) sum else sum + 1\n       \
    \ val evenList = array.filter(_ % 2 == 0)\n        val oddList = array.filter(_\
    \ % 2 == 1)\n        val evenList = evenList.sortBy(_._1)\n        val oddList\
    \ = oddList.sortBy(_._1)\n        val evenList = evenList.sortBy(_._2)\n     \
    \   val oddList = oddList.sortBy(_._2)\n        val evenList = evenList.sortBy(_._1)\n\
    \        val oddList = oddList.sortBy(_._1)\n        val evenList = evenList.sortBy(_._2)\n\
    \        val oddList = oddList.sortBy(_._2)\n        val evenList = evenList.sortBy(_._1)\n\
    \        val oddList = oddList.sortBy(_._1)\n        val evenList = evenList.sortBy(_._2)\n\
    \        val oddList = oddList.sortBy(_._2)\n        val evenList = evenList.sortBy(_._1)\n\
    \        val oddList = oddList.sortBy(_._1)\n        val evenList = evenList.sortBy(_._2)\n\
    \        val oddList = oddList.sortBy(_._2)\n        val evenList = evenList.sortBy(_._1)\n\
    \        val oddList = oddList.sortBy(_._1)\n        val evenList = evenList.sortBy(_._2)\n\
    \        val oddList = oddList.sortBy(_._2)\n        val evenList = evenList.sortBy(_._1)\n\
    \        val oddList = oddList.sortBy(_._1)\n        val evenList = evenList.sortBy(_._2)\n\
    \        val oddList = oddList.sortBy(_._2)\n        val evenList = evenList.sortBy(_._1)\n\
    \        val oddList = oddList.sortBy(_._1)\n        val evenList = evenList.sortBy(_._2)\n\
    \        val oddList = oddList.sortBy(_._2)\n        val evenList = evenList.sortBy(_._1)\n\
    \        val oddList = oddList.sortBy(_._1)\n        val evenList = evenList.sortBy(_._2)\n\
    \        val oddList = oddList.sortBy(_._2)\n        val evenList = evenList.sortBy(_._1)\n\
    \        val oddList = oddList.sortBy(_._1)\n        val evenList = evenList.sortBy(_._2)\n\
    \        val oddList = oddList.sortBy(_._2)\n        val evenList = evenList.sortBy(_._1)\n\
    \        val oddList = oddList.sortBy(", "        val sumArray = array.sum\n \
    \       val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        val evenArraySum\
    \ = evenArray.sum\n        val oddArraySum = oddArray.sum\n        val evenArraySumOdd\
    \ = evenArraySum + oddArraySum\n        val oddArraySumEven = oddArraySum - evenArraySum\n\
    \        val evenArraySumEvenOdd = evenArraySumEven + oddArraySumEven\n      \
    \  val oddArraySumEvenEven = oddArraySumEven - evenArraySumEven\n        val evenArraySumEvenEvenOdd\
    \ = evenArraySumEvenEven + oddArraySumEvenEven\n        val oddArraySumEvenEvenEven\
    \ = oddArraySumEvenEven - evenArraySumEvenEven\n        val evenArraySumEvenEvenEvenOdd\
    \ = evenArraySumEvenEvenEven + oddArraySumEvenEvenEven\n        val oddArraySumEvenEvenEvenEven\
    \ = oddArraySumEvenEvenEven - evenArraySumEvenEvenEven\n        val evenArraySumEvenEvenEvenEvenOdd\
    \ = evenArraySumEvenEvenEvenEven + oddArraySumEvenEvenEvenEven\n        val oddArraySumEvenEvenEvenEvenEven\
    \ = oddArraySumEvenEvenEvenEvenEven - evenArraySumEvenEvenEvenEven\n        val\
    \ evenArraySumEvenEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenEvenEven + oddArraySumEvenEvenEvenEvenEven\n\
    \        val oddArraySumEvenEvenEvenEvenEvenEven = oddArraySumEvenEvenEvenEvenEvenEven\
    \ - evenArraySumEvenEvenEvenEvenEven\n        val evenArraySumEvenEvenEvenEvenEvenEvenOdd\
    \ = evenArraySumEvenEvenEvenEvenEvenEvenEven + oddArraySumEvenEvenEvenEvenEvenEven\n\
    \        val oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenOdd = oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ - evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\n        val evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd + oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\n\
    \        val oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ - evenArray", "        val sumArray = array.sum\n        val evenSum = sumArray\
    \ % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 == 1)\n        val evenArraySorted = evenArray.sortWith(_\
    \ < _)\n        val oddArraySorted = oddArray.sortWith(_ > _)\n        if (evenSum)\
    \ {\n            evenArraySorted\n        } else {\n            oddArraySorted\n\
    \        }", "        val sum = 0\n        val result = array.foldLeft(List[Long]())((list,\
    \ element) => {\n            sum += element\n            list :+ element\n   \
    \     })\n        val isEven = sum % 2 == 0\n        if (isEven) {\n         \
    \   result :+ result.last\n        } else {\n            result :+ result.init.reverse\n\
    \        }", "        val sumArray = array.foldLeft(0l) { (sum, value) =>\n  \
    \          sum + value\n        }\n        val sumArrayOdd = sumArray % 2\n  \
    \      val sumArrayEven = sumArray - sumArrayOdd\n        val sortedArray = array.sortWith(\
    \ (a, b) => a < b )\n        if (sumArrayOdd > 0) sortedArray else sortedArray.reverse",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0\n    \
    \    array.foreach(x => sum += x)\n        val evenSum = sum % 2 == 0\n      \
    \  val odd = !evenSum\n        val even = evenSum\n        val evenIndex = array.indexWhere(x\
    \ => x == even)\n        val oddIndex = array.indexWhere(x => x == odd)\n    \
    \    val evenSum = array.take(evenIndex).sum\n        val oddSum = array.take(oddIndex).sum\n\
    \        val evenSum = evenSum % 2 == 0\n        val oddSum = oddSum % 2 == 0\n\
    \        if (evenSum) {\n            val evenSum = array.take(evenIndex).sum\n\
    \            val evenSum = evenSum % 2 == 0\n            if (evenSum) {\n    \
    \            val evenSum = array.take(evenIndex).sum\n                val evenSum\
    \ = evenSum % 2 == 0\n                if (evenSum) {\n                    val\
    \ evenSum = array.take(evenIndex).sum\n                    val evenSum = evenSum\
    \ % 2 == 0\n                    if (evenSum) {\n                        val evenSum\
    \ = array.take(evenIndex).sum\n                        val evenSum = evenSum %\
    \ 2 == 0\n                        if (evenSum) {\n                           \
    \ val evenSum = array.take(evenIndex).sum\n                            val evenSum\
    \ = evenSum % 2 == 0\n                            if (evenSum) {\n           \
    \                     val evenSum = array.take(evenIndex).sum\n              \
    \                  val evenSum = evenSum % 2 == 0\n                          \
    \      if (evenSum) {\n                                    val evenSum = array.take(evenIndex).sum\n\
    \                                    val evenSum = evenSum % 2 == 0\n        \
    \                            if (evenSum) {\n                                \
    \        val evenSum = array.take(evenIndex).sum\n                           \
    \             val evenSum = evenSum % 2 == 0\n                               \
    \         if (evenSum) {\n                                            val evenSum\
    \ = array.take(evenIndex).sum\n                                            val\
    \ evenSum = evenSum % 2 == 0\n                                            if (evenSum)\
    \ {\n                                                val evenSum = array.take(evenIndex).sum\n\
    \                                                val evenSum = evenSum % 2 ==\
    \ 0\n                                                if (evenSum) {\n        \
    \                                            val evenSum = array.take(evenIndex).sum\n\
    \                                                    val evenSum = evenSum % 2\
    \ == 0\n                                                    if (evenSum) {\n \
    \                                                       val evenSum = array.take(evenIndex).sum\n\
    \                                                        val evenSum = evenSum\
    \ % 2 == 0\n                                                        if (evenSum)\
    \ {\n                                                            val evenSum =\
    \ array.take(even", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     val sum = 0\n        array.foreach(x => sum += x)\n        if (sum % 2 ==\
    \ 0) result.addAll(array.sortWith(_ < _))\n        else result.addAll(array.sortWith(_\
    \ > _))\n        result.toList", "        val n = array.length\n        val m\
    \ = math.ceil(n/2)\n        val left = array.take(m).toList\n        val right\
    \ = array.drop(m).toList\n        val leftSum = left.sum\n        val rightSum\
    \ = right.sum\n        val leftEven = leftSum%2==0\n        val rightEven = rightSum%2==0\n\
    \        if(leftEven) left.sortBy(-_) else right.sortBy(-_)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var index = 0\n\
    \        while(index < array.length) {\n            sum = sum + array[index]\n\
    \            index = index + 1\n        }\n        if(sum % 2 == 0) {\n      \
    \      array.sortWith(_.compareTo(_) < 0)\n        } else {\n            array.sortWith(_.compareTo(_)\
    \ > 0)\n        }\n        result.toList", "        val sumArray = array.foldLeft(0L)\
    \ { (sum, value) =>\n            sum + value\n        }\n        val sumArrayOdd\
    \ = sumArray % 2L == 0L\n        val sumArrayEven = sumArray % 2L == 1L\n    \
    \    val sortedArray = array.sortWith(_.compareTo(_) < 0L)\n        if (sumArrayOdd)\
    \ {\n            sortedArray.reverse\n        } else {\n            sortedArray\n\
    \        }", "        val result = array.sortWith(compare)\n        result", " \
    \       val sumArray = array.foldLeft(0l) { (sum, elem) => sum + elem }\n    \
    \    val evenSum = sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n  \
    \      val sortedArray = array.sortWith((a, b) => a < b)\n        if (evenSum)\
    \ sortedArray else sortedArray.reverse", "        val sumArray = array.sum\n \
    \       val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        val evenSumArray\
    \ = evenSum.map(_ * 2).toList\n        val oddSumArray = oddSum.map(_ * 2).toList\n\
    \        val evenSumArrayLength = evenSumArray.length\n        val oddSumArrayLength\
    \ = oddSumArray.length\n        val evenSumArrayLength = evenSumArrayLength\n\
    \        val oddSumArrayLength = oddSumArrayLength\n        val evenSumArrayLength\
    \ = evenSumArrayLength\n        val oddSumArrayLength = oddSumArrayLength\n  \
    \      val evenSumArrayLength = evenSumArrayLength\n        val oddSumArrayLength\
    \ = oddSumArrayLength\n        val evenSumArrayLength = evenSumArrayLength\n \
    \       val oddSumArrayLength = oddSumArrayLength\n        val evenSumArrayLength\
    \ = evenSumArrayLength\n        val oddSumArrayLength = oddSumArrayLength\n  \
    \      val evenSumArrayLength = evenSumArrayLength\n        val oddSumArrayLength\
    \ = oddSumArrayLength\n        val evenSumArrayLength = evenSumArrayLength\n \
    \       val oddSumArrayLength = oddSumArrayLength\n        val evenSumArrayLength\
    \ = evenSumArrayLength\n        val oddSumArrayLength = oddSumArrayLength\n  \
    \      val evenSumArrayLength = evenSumArrayLength\n        val oddSumArrayLength\
    \ = oddSumArrayLength\n        val evenSumArrayLength = evenSumArrayLength\n \
    \       val oddSumArrayLength = oddSumArrayLength\n        val evenSumArrayLength\
    \ = evenSumArrayLength\n        val oddSumArrayLength = oddSumArrayLength\n  \
    \      val evenSumArrayLength = evenSumArrayLength\n        val oddSumArrayLength\
    \ = oddSumArrayLength\n        val evenSumArrayLength = evenSumArrayLength\n \
    \       val oddSumArrayLength = oddSumArrayLength\n        val evenSumArrayLength\
    \ = evenSumArrayLength\n        val oddSumArrayLength = oddSumArrayLength\n  \
    \      val evenSumArrayLength = evenSumArrayLength\n        val oddSumArrayLength\
    \ = oddSumArrayLength\n        val evenSumArrayLength = evenSumArrayLength\n \
    \       val oddSumArrayLength = oddSumArrayLength\n        val evenSumArrayLength\
    \ = evenSumArrayLength\n        val oddSumArrayLength = oddSumArrayLength\n  \
    \      val evenSumArrayLength = evenSumArrayLength\n        val oddSumArrayLength\
    \ = oddSumArrayLength\n        val evenSumArrayLength = evenSumArrayLength\n \
    \       val oddSumArrayLength = odd", "        val sumArray = array.foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val sumArrayOdd = sumArray % 2\n\
    \        val sumArrayEven = sumArray - sumArrayOdd\n        val sortedArray =\
    \ array.sortWith(compare(sumArrayOdd, sumArrayEven))\n        if (sumArrayOdd\
    \ > sumArrayEven) sortedArray else sortedArray.reverse", "        val sumArray\
    \ = array.foldLeft(0l) { (sum, element) =>\n            sum + element\n      \
    \  }\n        val sumArrayOdd = sumArray % 2\n        val sumArrayEven = sumArray\
    \ - sumArrayOdd\n        val sortedArray = array.sortWith(_.toLong < _.toLong)\n\
    \        if (sumArrayOdd > 0) sortedArray else sortedArray.sortWith(_.toLong >\
    \ _.toLong)", "        val sumArray = array.sum\n        val evenSum = sumArray\
    \ % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 == 1)\n        if (evenSum) {\n            evenArray.sortWith(_\
    \ < _)\n        } else {\n            oddArray.sortWith(_ > _)\n        }", " \
    \       val sumArray = array.foldLeft(0L){ (sum, element) => sum + element }\n\
    \        val sumArrayOdd = sumArray % 2L == 0L\n        val sumArrayEven = sumArray\
    \ % 2L == 1L\n        val sortedArray = array.sortWith(compare)\n        if (sumArrayOdd)\
    \ sortedArray.reverse\n        else sortedArray", "        val sum : Long = array.sum\n\
    \        val evenSum = if (sum % 2 == 0) sum else sum - 1\n        val oddSum\
    \ = if (sum % 2 == 1) sum else sum + 1\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        val evenArraySorted\
    \ = evenArray.sortWith(_ < _)\n        val oddArraySorted = oddArray.sortWith(_\
    \ > _)\n        val sortedArray = if (evenSum == oddSum) evenArraySorted else\
    \ oddArraySorted\n        sortedArray", "        val sumArray = array.foldLeft(0l)\
    \ { (sum, elem) => sum + elem }\n        val sumArrayOdd = sumArray % 2\n    \
    \    val sumArrayEven = sumArray - sumArrayOdd\n        val sortedArray = array.sortWith(_.compareTo(_)\
    \ <= 0 && _.compareTo(_) >= 0)\n        if (sumArrayOdd > 0) sortedArray else\
    \ sortedArray.sortWith(_.compareTo(_) <= 0 && _.compareTo(_) >= 0)", "       \
    \ val sumArray = array.foldLeft(0l.toLong)(_ + _)\n        val odd = sumArray\
    \ % 2\n        val even = sumArray - odd\n        val sortedArray = array.sortWith(_\
    \ < _)\n        if (odd) sortedArray.sortWith(_ < _) else sortedArray.sortWith(_\
    \ > _)", "        val sumArray = array.foldLeft(0L){ (sum, elem) => sum + elem}\n\
    \        val sumArrayOdd = sumArray % 2L == 0L\n        val sumArrayEven = sumArray\
    \ % 2L == 1L\n        val sortedArray = array.sortWith(_.compareTo(_) < 0)\n \
    \       if (sumArrayOdd) {\n            sortedArray.reverse\n        } else {\n\
    \            sortedArray\n        }", "        val sumArray = array.foldLeft(0L)\
    \ { (sum, value) =>\n            sum + value\n        }\n        val sumArrayOdd\
    \ = sumArray % 2L == 0L\n        val sumArrayEven = sumArray % 2L == 1L\n    \
    \    val sortedArray = array.sortWith(compare)\n        if (sumArrayOdd) {\n \
    \           sortedArray.reverse\n        } else {\n            sortedArray\n \
    \       }", "        val sum = array.sum\n        val evenSum = sum % 2 == 0\n\
    \        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        if (evenSum) {\n            evenArray.sortWith(_ < _)\n \
    \       } else {\n            oddArray.sortWith(_ > _)\n        }", "        val\
    \ n = array.size\n        val result = new Array[Long](n)\n        var i = 0\n\
    \        var j = 0\n        var sum = 0\n        while (i < n) {\n           \
    \ sum = array(i) + array(j)\n            if (sum % 2 == 0) {\n               \
    \ result(i) = array(i)\n                i += 1\n            } else {\n       \
    \         result(i) = array(j)\n                j += 1\n            }\n      \
    \  }\n        result", "        val sumArray = array.sum\n        val evenSum\
    \ = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n    \
    \    val oddArray = array.filter(_ % 2 != 0)\n        val evenArraySorted: mutable.Buffer[Long]\
    \ = evenArray.sorted\n        val oddArraySorted: mutable.Buffer[Long] = oddArray.sorted\n\
    \        val evenArraySortedSum = evenArraySorted.sum\n        val oddArraySortedSum\
    \ = oddArraySorted.sum\n        if (evenSum) {\n            evenArraySorted\n\
    \        } else {\n            oddArraySorted\n        }", "        val sumArray\
    \ = array.foldLeft(0l) { (sum, element) => sum + element }\n        val sumArrayOdd\
    \ = sumArray % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n        val\
    \ sortedArray = array.sortWith( (a, b) => a < b )\n        if (sumArrayOdd > 0)\
    \ sortedArray else sortedArray.sortWith( (a, b) => a > b )", "        val sumArray\
    \ = array.foldLeft(0l) { (sum, value) => sum + value }\n        val isOdd = sumArray.odd\n\
    \        val isEven = sumArray.even\n        val isEvenOrOdd = isEven || isOdd\n\
    \        val isEvenOrOddOrNotOdd = isEvenOrOdd && !isOdd\n        val isEvenOrOddOrNotEven\
    \ = isEvenOrOdd && !isEven\n        val isEvenOrOddOrNotEvenOrNotOdd = isEvenOrOdd\
    \ && !isEven && !isOdd\n        val isEvenOrOddOrNotEvenOrNotOddOrNotEven = isEvenOrOdd\
    \ && !isEven && !isOdd && !isEven\n        val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOdd\
    \ = isEvenOrOdd && !isEven && !isOdd && !isEven && !isOdd\n        val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEven\
    \ = isEvenOrOdd && !isEven && !isOdd && !isEven && !isOdd && !isEven\n       \
    \ val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOdd = isEvenOrOdd\
    \ && !isEven && !isOdd && !isEven && !isOdd && !isEven && !isOdd\n        val\
    \ isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEven = isEvenOrOdd\
    \ && !isEven && !isOdd && !isEven && !isOdd && !isEven && !isOdd && !isEven\n\
    \        val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOdd\
    \ = isEvenOrOdd && !isEven && !isOdd && !isEven && !isOdd && !isEven && !isOdd\
    \ && !isEven && !isOdd\n        val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOdd\
    \ = isEvenOrOdd && !isEven && !isOdd && !isEven && !isOdd && !isEven && !isOdd\
    \ && !isEven && !isOdd && !is", "        val sumArray = array.sum\n        val\
    \ evenSum = sumArray % 2 == 0\n        val oddSum = sumArray % 2 != 0\n      \
    \  val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        if (evenSum) {\n            evenArray.sortWith(_ < _)\n \
    \       } else if (oddSum) {\n            oddArray.sortWith(_ > _)\n        }\
    \ else {\n            evenArray.sortWith(_ < _)\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val sumArray = array.foldLeft(0L) { (sum, value)\
    \ =>\n            sum += value\n        }\n        val evenSum = sumArray % 2\
    \ == 0\n        val odd = sumArray % 2 != 0\n        val evenSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong)\n        val oddSumIndex = array.indexWhere(x => x\
    \ == sumArray.toLong - sumArray.toLong)\n        val evenSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val oddSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val evenSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val oddSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val evenSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val oddSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val evenSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val oddSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val evenSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val oddSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val evenSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val oddSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val evenSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val oddSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val evenSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val oddSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val evenSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val oddSumIndex = array.indexWhere(x\
    \ => x == sumArray.toLong - sumArray.toLong)\n        val evenSumIndex = array.indexWhere(",
  "        val sum : Long = array.sum\n        val evenSum = sum % 2 == 0\n      \
    \  val oddSum = sum % 2 == 1\n        val evenList = array.filter(_ % 2 == 0)\n\
    \        val oddList = array.filter(_ % 2 == 1)\n        val evenSorted = evenList.sortWith(_\
    \ < _)\n        val oddSorted = oddList.sortWith(_ > _)\n        if (evenSum)\
    \ {\n            evenSorted\n        } else {\n            oddSorted\n       \
    \ }", "        val result = new mutable.ListBuffer[Long]()\n        var sum =\
    \ 0\n        for(i <- 0 until array.size) {\n            sum += array(i)\n   \
    \     }\n        if(sum % 2 == 0) {\n            for(i <- 0 until array.size)\
    \ {\n                result.add(array(i))\n            }\n        } else {\n \
    \           for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a < b)\n        result.toList",
  "        val sum = array.sum\n        val odd = sum % 2 == 1\n        val even =\
    \ sum % 2 == 0\n        val newArray = array.sortWith(x => x.toLong)\n       \
    \ if (odd) newArray.sortWith(x => x.toLong.reverse)\n        else newArray.sortWith(x\
    \ => x.toLong.reverse)", "        val sumArray = array.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val sumArrayOdd = sumArray % 2\n        val sumArrayEven\
    \ = sumArray - sumArrayOdd\n        val sortedArray = array.sortWith(_.compare(_.toLong)\
    \ < 0)\n        if (sumArrayOdd != 0) {\n            sortedArray.sortWith(_.compare(_.toLong)\
    \ > 0)\n        } else {\n            sortedArray.sortWith(_.compare(_.toLong)\
    \ == 0)\n        }", "        val sumArray = array.sum\n        val evenSum =\
    \ sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n      \
    \  val oddArray = array.filter(_ % 2 == 1)\n        val evenArraySum = evenArray.sum\n\
    \        val oddArraySum = oddArray.sum\n        val evenArraySumOdd = evenArraySum\
    \ - oddArraySum\n        val evenArraySumEven = evenArraySum + evenArraySumOdd\n\
    \        val evenArraySumEvenOdd = evenArraySumEven - evenArraySumOdd\n      \
    \  val evenArraySumEvenOddArray = evenArraySumEvenOdd + evenArray\n        val\
    \ evenArraySumEvenOddArraySum = evenArraySumEvenOddArray.sum\n        val evenArraySumEvenOddArraySumOdd\
    \ = evenArraySumEvenOddArraySum - oddArraySum\n        val evenArraySumEvenOddArraySumEven\
    \ = evenArraySumEvenOddArraySum + evenArraySumEvenOddArraySumOdd\n        val\
    \ evenArraySumEvenOddArraySumEvenOdd = evenArraySumEvenOddArraySumEven - evenArraySumOdd\n\
    \        val evenArraySumEvenOddArraySumEvenOddArray = evenArraySumEvenOddArraySumEvenOdd\
    \ + evenArraySumEvenOddArray\n        val evenArraySumEvenOddArraySumEvenOddArraySum\
    \ = evenArraySumEvenOddArraySumEvenOddArray.sum\n        val evenArraySumEvenOddArraySumEvenOddArraySumOdd\
    \ = evenArraySumEvenOddArraySumEvenOddArraySum - evenArraySumOdd\n        val\
    \ evenArraySumEvenOddArraySumEvenOddArraySumEven = evenArraySumEvenOddArraySumEvenOddArraySum\
    \ + evenArraySumEvenOddArraySumEvenOddArraySumOdd\n        val evenArraySumEvenOddArraySumEvenOddArraySumEvenOdd\
    \ = evenArraySumEvenOddArraySumEvenOddArraySumEven - evenArraySumEvenOdd\n   \
    \     val evenArraySumEvenOddArraySumEvenOddArraySumEvenOddArray = evenArraySumEvenOddArraySumEvenOddArraySumEvenOdd\
    \ + evenArraySumEvenOddArraySumEvenOddArray\n        val evenArraySumEvenOddArraySumEvenOddArraySumEvenOddArraySum\
    \ = evenArraySumEvenOdd", "        val sumArray = array.sum\n        val evenSum\
    \ = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n    \
    \    val oddArray = array.filter(_ % 2 != 0)\n        if(evenSum) {\n        \
    \    evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val sumArray = array.foldLeft(0l.toLong)(_ + _)\n\
    \        val odd = sumArray % 2\n        val even = sumArray - odd\n        val\
    \ sortedArray = array.sortWith(x => if (odd) x < x else x > x)\n        if (even)\
    \ sortedArray.reverse\n        else sortedArray", "        val sum = array.sum\n\
    \        val evenSum = if (sum % 2 == 0) sum else sum - 1\n        val oddSum\
    \ = if (sum % 2 == 1) sum else sum + 1\n        val evenArray = array.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val oddArray = array.filter(_ % 2 == 1).sortWith(_\
    \ > _)\n        val result = if (evenSum == oddSum) evenArray else oddArray\n\
    \        result", "        val sumArray = array.foldLeft(0l) { (sum, elem) =>\
    \ sum + elem }\n        val isOdd = sumArray % 2\n        val isEven = sumArray\
    \ % 2 != 0\n        val isEvenOrOdd = isEven || isOdd\n        val isEvenOrOddOrNotOdd\
    \ = isEvenOrOdd || !isOdd\n        val isEvenOrOddOrNotEven = isEvenOrOdd || !isEven\n\
    \        val isEvenOrOddOrNotEvenOrNotOdd = isEvenOrOdd || !isEven || !isOdd\n\
    \        val isEvenOrOddOrNotEvenOrNotOddOrNotEven = isEvenOrOdd || !isEven ||\
    \ !isOdd || !isEven\n        val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOdd\
    \ = isEvenOrOdd || !isEven || !isOdd || !isEven || !isOdd || !isEven\n       \
    \ val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEven = isEvenOrOdd ||\
    \ !isEven || !isOdd || !isEven || !isOdd || !isEven || !isOdd || !isEven\n   \
    \     val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOdd = isEvenOrOdd\
    \ || !isEven || !isOdd || !isEven || !isOdd || !isEven || !isOdd || !isEven ||\
    \ !isOdd\n        val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEven\
    \ = isEvenOrOdd || !isEven || !isOdd || !isEven || !isOdd || !isEven || !isOdd\
    \ || !isEven || !isOdd || !isEven\n        val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOdd\
    \ = isEvenOrOdd || !isEven || !isOdd || !isEven || !isOdd || !isEven || !isOdd\
    \ || !isEven || !isOdd || !isEven || !isOdd\n        val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEven\
    \ = isEvenOrOdd ", "        val result = new mutable.ListBuffer[Long]()\n    \
    \    var sum = 0\n        array.foreach(x => {\n            sum += x\n       \
    \ })\n        if (sum % 2 == 0) {\n            array.sortWith((x, y) => x.compare(y))\n\
    \        } else {\n            array.sortWith((x, y) => y.compare(x))\n      \
    \  }\n        result.toList", "        val sumArray = array.sum\n        val evenSum\
    \ = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n    \
    \    val oddArray = array.filter(_ % 2 != 0)\n        val evenArraySum = evenArray.sum\n\
    \        val oddArraySum = oddArray.sum\n        val evenArraySumOdd = evenArraySum\
    \ - oddArraySum\n        val evenArraySumEven = evenArraySum + evenArraySumOdd\n\
    \        val oddArraySumEven = oddArraySum - evenArraySumEven\n        val evenArraySumEvenOdd\
    \ = evenArraySumEven + oddArraySumEven\n        val oddArraySumEvenOdd = oddArraySumEven\
    \ - evenArraySumEvenOdd\n        val evenArraySumEvenOddOdd = evenArraySumEvenOdd\
    \ + oddArraySumEvenOdd\n        val oddArraySumEvenOddOdd = oddArraySumEvenOdd\
    \ - evenArraySumEvenOddOdd\n        val evenArraySumEvenOddOddOdd = evenArraySumEvenOddOdd\
    \ + oddArraySumEvenOddOdd\n        val oddArraySumEvenOddOddOdd = oddArraySumEvenOddOdd\
    \ - evenArraySumEvenOddOddOdd\n        val evenArraySumEvenOddOddOddOdd = evenArraySumEvenOddOddOdd\
    \ + oddArraySumEvenOddOddOdd\n        val oddArraySumEvenOddOddOddOdd = oddArraySumEvenOddOddOdd\
    \ - evenArraySumEvenOddOddOddOdd\n        val evenArraySumEvenOddOddOddOddOdd\
    \ = evenArraySumEvenOddOddOddOdd + oddArraySumEvenOddOddOddOdd\n        val oddArraySumEvenOddOddOddOddOdd\
    \ = oddArraySumEvenOddOddOddOdd - evenArraySumEvenOddOddOddOdd\n        val evenArraySumEvenOddOddOddOddOddOdd\
    \ = evenArraySumEvenOddOddOddOddOdd + oddArraySumEvenOddOddOddOddOdd\n       \
    \ val oddArraySumEvenOddOddOddOddOddOdd = oddArraySumEvenOddOddOddOddO", "   \
    \     val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n    \
    \    val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        val evenSumArray = evenSum.map(_ * 2).toArray\n        val\
    \ oddSumArray = oddSum.map(_ * 2).toArray\n        val evenArraySorted = evenArray.sortWith(_\
    \ < _)\n        val oddArraySorted = oddArray.sortWith(_ > _)\n        val evenSumArraySorted\
    \ = evenSumArray.sortWith(_ < _)\n        val oddSumArraySorted = oddSumArray.sortWith(_\
    \ > _)\n        val evenArraySorted2 = evenArraySorted.sortWith(_ < _)\n     \
    \   val oddArraySorted2 = oddArraySorted.sortWith(_ > _)\n        val evenSumArraySorted2\
    \ = evenSumArraySorted.sortWith(_ < _)\n        val oddSumArraySorted2 = oddSumArraySorted.sortWith(_\
    \ > _)\n        val evenArraySorted3 = evenArraySorted2.sortWith(_ < _)\n    \
    \    val oddArraySorted3 = oddArraySorted2.sortWith(_ > _)\n        val evenSumArraySorted3\
    \ = evenSumArraySorted2.sortWith(_ < _)\n        val oddSumArraySorted3 = oddSumArraySorted2.sortWith(_\
    \ > _)\n        val evenArraySorted4 = evenArraySorted3.sortWith(_ < _)\n    \
    \    val oddArraySorted4 = oddArraySorted3.sortWith(_ > _)\n        val evenSumArraySorted4\
    \ = evenSumArraySorted3.sortWith(_ < _)\n        val oddSumArraySorted4 = oddSumArraySorted3.sortWith(_\
    \ > _)\n        val evenArraySorted5 = evenArraySorted4.sortWith(_ < _)\n    \
    \    val oddArraySorted5 = oddArraySorted4.sortWith(_ > _)\n        val evenSumArraySorted5\
    \ = evenSumArraySorted4.sortWith(_ < _)\n        val oddSumArraySorted5 = oddSumArraySorted4.sortWith(_\
    \ > _)\n        val evenArraySorted6 = evenArraySorted5.sortWith(_ < _)\n    \
    \    val oddArraySorted6 = oddArraySorted5.sortWith(_ > _)\n        val evenSumArraySorted6\
    \ = evenSumArraySorted5.sortWith(_ < _)\n        val oddSumArraySorted6 = oddSumArraySorted5.sortWith(_\
    \ > _)\n        val evenArraySorted7 = evenArraySorted6.sortWith(_", "       \
    \ val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n        val\
    \ evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        val evenArraySum = evenArray.sum\n        val oddArraySum\
    \ = oddArray.sum\n        val evenArraySumOdd = evenArraySum - oddArraySum\n \
    \       val oddArraySumEven = oddArraySum - evenArraySum\n        val evenArraySumEvenOdd\
    \ = evenArraySumEven - oddArraySumEven\n        val oddArraySumEvenEven = oddArraySumEven\
    \ - evenArraySumEven\n        val evenArraySumEvenEvenOdd = evenArraySumEvenEven\
    \ - oddArraySumEvenEven\n        val oddArraySumEvenEvenEven = oddArraySumEvenEven\
    \ - evenArraySumEvenEven\n        val evenArraySumEvenEvenEvenOdd = evenArraySumEvenEvenOdd\
    \ - oddArraySumEvenEvenEven\n        val oddArraySumEvenEvenEvenEven = oddArraySumEvenEvenEvenOdd\
    \ - evenArraySumEvenEvenEven\n        val evenArraySumEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenOdd\
    \ - oddArraySumEvenEvenEvenEven\n        val oddArraySumEvenEvenEvenEvenEvenEvenOdd\
    \ = oddArraySumEvenEvenEvenEvenEvenEvenOdd - evenArraySumEvenEvenEvenEvenEvenEven\n\
    \        val evenArraySumEvenEvenEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenEvenEvenEvenEvenOdd\
    \ - oddArraySumEvenEvenEvenEvenEvenEvenEven\n        val oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd - evenArraySumEvenEvenEvenEvenEvenEvenEvenEven\n\
    \        val evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ - oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\n        val oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd - evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\n\
    \        val evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ - oddArraySumEvenEven", "        val sum : Long = array.sum\n        val evenSum\
    \ = sum % 2 == 0\n        val odd = sum % 2 == 1\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        val evenArraySum\
    \ = evenArray.sum\n        val oddArraySum = oddArray.sum\n        val evenArraySumOdd\
    \ = evenArraySum + odd\n        val oddArraySumEven = oddArraySum - evenArraySum\n\
    \        val evenArraySumEvenOdd = evenArraySumEven + oddArraySumOdd\n       \
    \ val oddArraySumEvenOddOdd = oddArraySumEvenOdd - evenArraySumEvenOdd\n     \
    \   val evenArraySumEvenOddOddOdd = evenArraySumEvenOddOdd + oddArraySumEvenOdd\n\
    \        val oddArraySumEvenOddOddOddOdd = oddArraySumEvenOddOddOdd - evenArraySumEvenOddOddOdd\n\
    \        val evenArraySumEvenOddOddOddOddOdd = evenArraySumEvenOddOddOddOdd +\
    \ oddArraySumEvenOddOddOdd\n        val oddArraySumEvenOddOddOddOddOdd = oddArraySumEvenOddOddOddOddOdd\
    \ - evenArraySumEvenOddOddOddOdd\n        val evenArraySumEvenOddOddOddOddOddOdd\
    \ = evenArraySumEvenOddOddOddOddOddOdd + oddArraySumEvenOddOddOddOddOdd\n    \
    \    val oddArraySumEvenOddOddOddOddOddOdd = oddArraySumEvenOddOddOddOddOddOdd\
    \ - evenArraySumEvenOddOddOddOddOdd\n        val evenArraySumEvenOddOddOddOddOddOddOdd\
    \ = evenArraySumEvenOddOddOddOddOddOddOdd + oddArraySumEvenOddOddOddOddOddOdd\n\
    \        val oddArraySumEvenOddOddOddOddOddOddOdd = oddArraySumEvenOddOddOddOddOddOddOddOdd\
    \ - evenArraySumEvenOddOddOddOddO", "        val sumArray = array.sum\n      \
    \  val sumArray2 = sumArray / 2\n        val sumArray3 = sumArray2 / 2\n     \
    \   val sumArray4 = sumArray3 / 2\n        val sumArray5 = sumArray4 / 2\n   \
    \     val sumArray6 = sumArray5 / 2\n        val sumArray7 = sumArray6 / 2\n \
    \       val sumArray8 = sumArray7 / 2\n        val sumArray9 = sumArray8 / 2\n\
    \        val sumArray10 = sumArray9 / 2\n        val sumArray11 = sumArray10 /\
    \ 2\n        val sumArray12 = sumArray11 / 2\n        val sumArray13 = sumArray12\
    \ / 2\n        val sumArray14 = sumArray13 / 2\n        val sumArray15 = sumArray14\
    \ / 2\n        val sumArray16 = sumArray15 / 2\n        val sumArray17 = sumArray16\
    \ / 2\n        val sumArray18 = sumArray17 / 2\n        val sumArray19 = sumArray18\
    \ / 2\n        val sumArray20 = sumArray19 / 2\n        val sumArray21 = sumArray20\
    \ / 2\n        val sumArray22 = sumArray21 / 2\n        val sumArray23 = sumArray22\
    \ / 2\n        val sumArray24 = sumArray23 / 2\n        val sumArray25 = sumArray24\
    \ / 2\n        val sumArray26 = sumArray25 / 2\n        val sumArray27 = sumArray26\
    \ / 2\n        val sumArray28 = sumArray27 / 2\n        val sumArray29 = sumArray28\
    \ / 2\n        val sumArray30 = sumArray29 / 2\n        val sumArray31 = sumArray30\
    \ / 2\n        val sumArray32 = sumArray31 / 2\n        val sumArray33 = sumArray32\
    \ / 2\n        val sumArray34 = sumArray33 / 2\n        val sumArray35 = sumArray34\
    \ / 2\n        val sumArray36 = sumArray35 / 2\n        val sumArray37 = sumArray36\
    \ / 2\n        val sumArray38 = sumArray37 / 2\n        val sumArray39 = sumArray38\
    \ / 2\n        val sumArray40 = sumArray39 / 2\n        val sumArray41 = sumArray40\
    \ / 2\n        val sumArray42 = sumArray41 / 2\n        val sumArray43 = sumArray42\
    \ / 2\n        val sumArray44 = sumArray43 / 2\n", "        val sumArray = array.foldLeft(0l)\
    \ { (sum, value) => sum + value }\n        val evenSum = sumArray % 2 == 0\n \
    \       val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        if (evenSum) {\n            evenArray.sortWith(_ < _)\n \
    \       } else {\n            oddArray.sortWith(_ > _)\n        }", "        val\
    \ sumArray = array.foldLeft(0L){ (sum, value) =>\n            sum + value\n  \
    \      }\n        val evenSum = sumArray % 2 == 0\n        val oddSum = sumArray\
    \ % 2 != 0\n        if(evenSum) array.sortBy(-_)\n        else array.sortBy(-_.reverse)",
  "        val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n   \
    \     val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        val evenSumArray = evenSum.map(_ * 2).toList\n        val\
    \ oddSumArray = oddSum.map(_ * 2).toList\n        val evenSumArraySorted = evenSumArray.sortWith(_\
    \ < _)\n        val oddSumArraySorted = oddSumArray.sortWith(_ > _)\n        val\
    \ evenArraySorted = evenArray.sortWith(_ < _)\n        val oddArraySorted = oddArray.sortWith(_\
    \ > _)\n        val evenArraySortedSorted = evenArraySorted.sortWith(_ < _)\n\
    \        val oddArraySortedSorted = oddArraySorted.sortWith(_ > _)\n        val\
    \ evenArraySortedSortedSorted = evenArraySortedSorted.sortWith(_ < _)\n      \
    \  val oddArraySortedSortedSorted = oddArraySortedSorted.sortWith(_ > _)\n   \
    \     val evenArraySortedSortedSortedSorted = evenArraySortedSortedSorted.sortWith(_\
    \ < _)\n        val oddArraySortedSortedSortedSorted = oddArraySortedSortedSorted.sortWith(_\
    \ > _)\n        val evenArraySortedSortedSortedSortedSorted = evenArraySortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddArraySortedSortedSortedSortedSorted = oddArraySortedSortedSortedSorted.sortWith(_\
    \ > _)\n        val evenArraySortedSortedSortedSortedSortedSorted = evenArraySortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddArraySortedSortedSortedSortedSortedSorted = oddArraySortedSortedSortedSortedSorted.sortWith(_\
    \ > _)\n        val evenArraySortedSortedSortedSortedSortedSortedSorted = evenArraySortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddArraySortedSortedSortedSortedSortedSortedSorted = oddArraySortedSortedSortedSortedSortedSorted.sortWith(_\
    \ > _)\n        val evenArraySortedSortedSortedSortedSortedSortedSorted = evenArraySortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddArraySortedSortedSortedSortedSortedSortedSorted = oddArraySortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ > _)\n        val evenArraySortedSortedSortedSortedSortedSortedSortedSorted\
    \ = evenArraySortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_ < _)\n\
    \        val oddArraySorted", "        val sumArray = array.foldLeft(0l) { (sum,\
    \ value) => sum + value }\n        val sumArrayOdd = sumArray % 2\n        val\
    \ sumArrayEven = sumArray - sumArrayOdd\n        val sortedArray = array.sortWith(\
    \ (a, b) => a < b )\n        if (sumArrayOdd > 0) sortedArray else sortedArray.reverse",
  "        val sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n   \
    \     val isOdd = sumArray % 2 == 1\n        val isEven = sumArray % 2 == 0\n\
    \        if (isOdd) {\n            array.sortBy(x => x)\n        } else {\n  \
    \          array.sortBy(x => -x)\n        }", "        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        val evenSumArray\
    \ = evenSum.map(_ * 2).toList\n        val oddSumArray = oddSum.map(_ * 2).toList\n\
    \        val evenArraySorted: mutable.Buffer[Long] = evenArray.sortWith(_ < _)\n\
    \        val oddArraySorted: mutable.Buffer[Long] = oddArray.sortWith(_ > _)\n\
    \        val evenSumArraySorted: mutable.Buffer[Long] = evenSumArray.sortWith(_\
    \ < _)\n        val oddSumArraySorted: mutable.Buffer[Long] = oddSumArray.sortWith(_\
    \ > _)\n        val evenArraySortedList: mutable.Buffer[Long] = evenArraySorted.toList\n\
    \        val oddArraySortedList: mutable.Buffer[Long] = oddArraySorted.toList\n\
    \        val evenSumArraySortedList: mutable.Buffer[Long] = evenSumArraySorted.toList\n\
    \        val oddSumArraySortedList: mutable.Buffer[Long] = oddSumArraySorted.toList\n\
    \        val evenArraySortedListList: mutable.Buffer[Long] = evenArraySortedList.toList\n\
    \        val oddArraySortedListList: mutable.Buffer[Long] = oddArraySortedList.toList\n\
    \        val evenSumArraySortedListList: mutable.Buffer[Long] = evenSumArraySortedList.toList\n\
    \        val oddSumArraySortedListList: mutable.Buffer[Long] = oddSumArraySortedList.toList\n\
    \        val evenArraySortedListListList: mutable.Buffer[Long] = evenArraySortedListList.toList\n\
    \        val oddArraySortedListListList: mutable.Buffer[Long] = oddArraySortedListList.toList\n\
    \        val evenSumArraySortedListListList: mutable.Buffer[Long] = evenSumArraySortedListList.toList\n\
    \        val oddSumArraySortedListListList: mutable.Buffer[Long] = oddSumArraySortedListList.toList\n\
    \        val evenArraySortedListListListList: mutable.Buffer[Long] = evenArraySortedListListList.toList\n\
    \        val oddArraySortedListListListList: mutable.Buffer[Long] = oddArraySortedListListList.toList\n\
    \        val evenSumArraySortedListListListList: mutable.Buffer[Long] = evenSumArraySortedListListList.toList\n\
    \        val odd", "        val sumArray = array.foldLeft(0L) { (sum, elem) =>\
    \ sum + elem}\n        val sumArrayOdd = sumArray % 2\n        val sumArrayEven\
    \ = sumArray - sumArrayOdd\n        val sortedArray = array.sortWith( (a,b) =>\
    \ a < b || (a === b && sumArrayOdd === 1))\n        val sortedArrayEven = sortedArray.sortWith(\
    \ (a,b) => a < b || (a === b && sumArrayEven === 1))\n        sortedArrayEven\
    \ ++ sortedArray", "        val sumArray = array.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n\
    \        if (evenSum) {\n            evenArray.sortWith(_ < _)\n        } else\
    \ {\n            oddArray.sortWith(_ > _)\n        }", "        val sumArray =\
    \ array.sum\n        val sumArray2 = sumArray.toLong\n        val sumArray3 =\
    \ sumArray2.toInt\n        val sumArray4 = sumArray3.toInt\n        val sumArray5\
    \ = sumArray4.toInt\n        val sumArray6 = sumArray5.toInt\n        val sumArray7\
    \ = sumArray6.toInt\n        val sumArray8 = sumArray7.toInt\n        val sumArray9\
    \ = sumArray8.toInt\n        val sumArray10 = sumArray9.toInt\n        val sumArray11\
    \ = sumArray10.toInt\n        val sumArray12 = sumArray11.toInt\n        val sumArray13\
    \ = sumArray12.toInt\n        val sumArray14 = sumArray13.toInt\n        val sumArray15\
    \ = sumArray14.toInt\n        val sumArray16 = sumArray15.toInt\n        val sumArray17\
    \ = sumArray16.toInt\n        val sumArray18 = sumArray17.toInt\n        val sumArray19\
    \ = sumArray18.toInt\n        val sumArray20 = sumArray19.toInt\n        val sumArray21\
    \ = sumArray20.toInt\n        val sumArray22 = sumArray21.toInt\n        val sumArray23\
    \ = sumArray22.toInt\n        val sumArray24 = sumArray23.toInt\n        val sumArray25\
    \ = sumArray24.toInt\n        val sumArray26 = sumArray25.toInt\n        val sumArray27\
    \ = sumArray26.toInt\n        val sumArray28 = sumArray27.toInt\n        val sumArray29\
    \ = sumArray28.toInt\n        val sumArray30 = sumArray29.toInt\n        val sumArray31\
    \ = sumArray30.toInt\n        val sumArray32 = sumArray31.toInt\n        val sumArray33\
    \ = sumArray32.toInt\n        val sumArray34 = sumArray33.toInt\n        val sumArray35\
    \ = sumArray34.toInt\n        val sumArray36 = sumArray35.toInt\n        val sumArray37\
    \ = sumArray36.toInt\n        val sumArray38 = sumArray37.toInt\n        val sumArray39\
    \ = sumArray38.toInt\n        val sumArray40 = sumArray39.toInt\n        val sumArray41\
    \ = sumArray40.toInt\n        val sumArray42 = sumArray41.toInt\n        val sumArray43\
    \ = sumArray42.toInt\n        val sumArray44 = sumArray43.", "        val sum\
    \ = array.sum\n        val odd = sum % 2 == 1\n        val even = sum % 2 == 0\n\
    \        val result = array.sortWith((a, b) => if (odd) a < b else a > b)\n  \
    \      if (even) result.reverse else result", "        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        val evenSumArray\
    \ = evenSum.map(_ * 2).toList\n        val oddSumArray = oddSum.map(_ * 2).toList\n\
    \        val evenArraySorted: Array[Long] = evenArray.sortWith(_ < _)\n      \
    \  val oddArraySorted: Array[Long] = oddArray.sortWith(_ > _)\n        val evenSumArraySorted:\
    \ Array[Long] = evenSumArray.sortWith(_ < _)\n        val oddSumArraySorted: Array[Long]\
    \ = oddSumArray.sortWith(_ > _)\n        val evenArraySortedList: mutable.Buffer[Long]\
    \ = mutable.Buffer()\n        val oddArraySortedList: mutable.Buffer[Long] = mutable.Buffer()\n\
    \        val evenSumArraySortedList: mutable.Buffer[Long] = mutable.Buffer()\n\
    \        val oddSumArraySortedList: mutable.Buffer[Long] = mutable.Buffer()\n\
    \        val evenArraySortedListIterator = evenArraySorted.iterator\n        val\
    \ oddArraySortedListIterator = oddArraySorted.iterator\n        val evenSumArraySortedListIterator\
    \ = evenSumArraySorted.iterator\n        val oddSumArraySortedListIterator = oddSumArraySorted.iterator\n\
    \        val evenArraySortedListIterator2 = evenArraySorted.iterator\n       \
    \ val oddArraySortedListIterator2 = oddArraySorted.iterator\n        val evenSumArraySortedListIterator2\
    \ = evenSumArraySorted.iterator\n        val oddSumArraySortedListIterator2 =\
    \ oddSumArraySorted.iterator\n        val evenArraySortedListIterator3 = evenArraySorted.iterator\n\
    \        val oddArraySortedListIterator3 = oddArraySorted.iterator\n        val\
    \ evenSumArraySortedListIterator3 = evenSumArraySorted.iterator\n        val oddSumArraySortedListIterator3\
    \ = oddSumArraySorted.iterator\n        val evenArraySortedListIterator4 = evenArraySorted.iterator\n\
    \        val oddArraySortedListIterator4 = oddArraySorted.iterator\n        val\
    \ evenSumArraySortedListIterator4 = evenSumArraySorted.iterator\n        val oddSumArraySortedListIterator4\
    \ = oddSumArraySorted.iterator\n        val evenArraySortedListIterator5 = evenArraySorted.iterator\n\
    \        val oddArraySortedListIterator5 = oddArraySorted.iterator\n        val\
    \ evenSumArraySortedListIterator5 = evenSumArraySorted.iterator", "        val\
    \ sumArray = array.foldLeft(0l.toLong){ (sum, element) => sum + element }\n  \
    \      val sumArrayOdd = sumArray % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n\
    \        val sortedArray = array.sortWith(_.toLong > _.toLong)\n        if (sumArrayOdd\
    \ > 0) sortedArray else sortedArray.sortWith(_.toLong < _.toLong)", "        val\
    \ sum : Long = array.sum\n        val odd = sum % 2 == 1\n        val even = sum\
    \ % 2 == 0\n        val result = array.sortWith(x => if (odd) x.toLong else -x.toLong)\n\
    \        if (even) result.reverse else result", "        val sum = array.sum\n\
    \        val odd = sum % 2 == 1\n        val even = sum % 2 == 0\n        val\
    \ result = array.sortWith(x => if (odd) x.toLong > y.toLong else x.toLong < y.toLong)\n\
    \        if (even) result.reverse else result", "        val sumArray = array.foldLeft(0l)\
    \ { (sum, value) =>\n            sum += value\n        }\n        val sumArrayOdd\
    \ = sumArray % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n        val\
    \ sortedArray = array.sortWith( (a, b) => a < b )\n        if (sumArrayOdd > 0)\
    \ sortedArray else sortedArray.reverse", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ array.size) {\n            sum = sum + array(i)\n            i = i + 1\n   \
    \     }\n        if (sum % 2 == 0) {\n            while (j < array.size) {\n \
    \               sum = sum + array(j)\n                j = j + 1\n            }\n\
    \            while (i < array.size) {\n                sum = sum - array(i)\n\
    \                i = i + 1\n            }\n            while (j < array.size)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while (i < array.size) {\n                sum = sum - array(i)\n\
    \                i = i + 1\n            }\n            while (j < array.size)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while (i < array.size) {\n                sum = sum - array(i)\n\
    \                i = i + 1\n            }\n            while (j < array.size)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while (i < array.size) {\n                sum = sum - array(i)\n\
    \                i = i + 1\n            }\n            while (j < array.size)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while (i < array.size) {\n                sum = sum - array(i)\n\
    \                i = i + 1\n            }\n            while (j < array.size)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while (i < array.size) {\n                sum = sum - array(i)\n\
    \                i = i + 1\n            }\n            while (j < array.size)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while (i < array.size) {\n                sum = sum - array(i)\n\
    \                i = i + 1\n            }\n            while (j < array.size)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while (i < array.size) {\n                sum = sum - array(i)\n\
    \                i = i + 1\n            }\n            while (j < array.size)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while (i < array.size) {\n                sum = sum - array(i)\n\
    \                i = i + 1\n            }\n            while (j < array.size)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while (i < array.size) {\n                sum = sum - array(i)\n\
    \                i = i + 1\n            }\n            while (j < array.size)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while (i < array.size) {\n                sum = sum - array(i)\n\
    \                i = i + 1\n            }\n            while (j < array.size)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while (i < array.size) {\n                sum = sum - array(i)\n\
    \                i = ", "        val sumArray = array.sum\n        val evenSum\
    \ = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n    \
    \    val oddArray = array.filter(_ % 2 != 0)\n        val evenArraySorted = evenArray.sortWith(_\
    \ < _)\n        val oddArraySorted = oddArray.sortWith(_ > _)\n        val sortedArray\
    \ = evenArraySorted.reverse.concat(oddArraySorted)\n        if (evenSum) sortedArray\
    \ else sortedArray.reverse", "        val sumArray = array.foldLeft(0l) { (sum,\
    \ value) => sum + value }\n        val isOdd = sumArray % 2\n        val isEven\
    \ = !(sumArray % 2)\n        val isEvenOrOdd = isEven || isOdd\n        val isEvenOrOddOrEven\
    \ = isEvenOrOdd || isEven\n        val isEvenOrOddOrEvenOrOdd = isEvenOrOdd ||\
    \ isOdd\n        val isEvenOrOddOrEvenOrOddOrEven = isEvenOrOdd || isEvenOrOdd\n\
    \        val isEvenOrOddOrEvenOrOddOrEvenOrOdd = isEvenOrOdd || isEvenOrOdd ||\
    \ isEven\n        val isEvenOrOddOrEvenOrOddOrEvenOrOddOrEven = isEvenOrOdd ||\
    \ isEvenOrOdd || isEvenOrOdd || isEven\n        val isEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd\
    \ = isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd\n\
    \        val isEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEven = isEvenOrOdd\
    \ || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd ||\
    \ isEvenOrOdd\n        val isEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd\
    \ = isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd ||\
    \ isEvenOrOdd || isEvenOrOdd || isEvenOrOdd\n        val isEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEven\
    \ = isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd ||\
    \ isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd\n  \
    \      val isEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd\
    \ = isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd || isEvenOrOdd ||\
    \ isEvenOrO", "        val sumArray = array.foldLeft(0l) { (sum, element) => sum\
    \ + element }\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        if (evenSum) {\n            evenArray.sortWith(_ < _)\n        } else\
    \ {\n            oddArray.sortWith(_ > _)\n        }", "        val sumArray =\
    \ array.foldLeft(0l) { (sum, value) => sum + value }\n        val sumArrayOdd\
    \ = sumArray % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n        val\
    \ sortedArray = array.sortWith( (a, b) => a < b )\n        if (sumArrayOdd > 0)\
    \ sortedArray else sortedArray.sortWith( (a, b) => a > b )", "        val sumArray\
    \ = array.sum\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n\
    \        val evenArraySorted = evenArray.sortWith(_ < _)\n        val oddArraySorted\
    \ = oddArray.sortWith(_ > _)\n        val sortedArray = evenArraySorted.reverse\
    \ ++ oddArraySorted\n        if (evenSum) {\n            sortedArray\n       \
    \ } else {\n            sortedArray.reverse\n        }", "        val sumArray\
    \ = array.sum\n        val sumArray2 = sumArray.toLong\n        val sumArray3\
    \ = sumArray2.toLong\n        val sumArray4 = sumArray3.toLong\n        val sumArray5\
    \ = sumArray4.toLong\n        val sumArray6 = sumArray5.toLong\n        val sumArray7\
    \ = sumArray6.toLong\n        val sumArray8 = sumArray7.toLong\n        val sumArray9\
    \ = sumArray8.toLong\n        val sumArray10 = sumArray9.toLong\n        val sumArray11\
    \ = sumArray10.toLong\n        val sumArray12 = sumArray11.toLong\n        val\
    \ sumArray13 = sumArray12.toLong\n        val sumArray14 = sumArray13.toLong\n\
    \        val sumArray15 = sumArray14.toLong\n        val sumArray16 = sumArray15.toLong\n\
    \        val sumArray17 = sumArray16.toLong\n        val sumArray18 = sumArray17.toLong\n\
    \        val sumArray19 = sumArray18.toLong\n        val sumArray20 = sumArray19.toLong\n\
    \        val sumArray21 = sumArray20.toLong\n        val sumArray22 = sumArray21.toLong\n\
    \        val sumArray23 = sumArray22.toLong\n        val sumArray24 = sumArray23.toLong\n\
    \        val sumArray25 = sumArray24.toLong\n        val sumArray26 = sumArray25.toLong\n\
    \        val sumArray27 = sumArray26.toLong\n        val sumArray28 = sumArray27.toLong\n\
    \        val sumArray29 = sumArray28.toLong\n        val sumArray30 = sumArray29.toLong\n\
    \        val sumArray31 = sumArray30.toLong\n        val sumArray32 = sumArray31.toLong\n\
    \        val sumArray33 = sumArray32.toLong\n        val sumArray34 = sumArray33.toLong\n\
    \        val sumArray35 = sumArray34.toLong\n        val sumArray36 = sumArray35.toLong\n\
    \        val sumArray37 = sumArray36.toLong\n        val sumArray38 = sumArray37.toLong\n\
    \        val sumArray39 = sumArray38.toLong\n        val sumArray40 = sumArray39.toLong\n\
    \        val sumArray41 = sumArray40.toLong\n        val sumArray42 = sumArray41.toLong\n\
    \        val sumArray43 = sumArray42.toLong\n        val sumArray44 = sumArray43.",
  "        val sumArray = array.foldLeft(0l.toLong)(_ + _)\n        val evenSum =\
    \ sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        val evenArraySorted = evenArray.sortWith(_ < _)\n        val oddArraySorted\
    \ = oddArray.sortWith(_ > _)\n        if (evenSum) {\n            evenArraySorted\n\
    \        } else if (oddSum) {\n            oddArraySorted\n        } else {\n\
    \            evenArraySorted.reverse\n        }", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        var j = 0\n        while(i <\
    \ array.size) {\n            sum = sum + array(i)\n            i = i + 1\n   \
    \     }\n        while(j < array.size) {\n            sum = sum - array(i)\n \
    \           j = j + 1\n        }\n        if(sum % 2 == 0) {\n            array.sortWith((x,\
    \ y) => x < y)\n        } else {\n            array.sortWith((x, y) => x > y)\n\
    \        }\n        result.toList", "        val sum : Long = array.sum\n    \
    \    val odd = sum % 2 == 1\n        val even = sum % 2 == 0\n        val sortedArray\
    \ = array.sortWith(x => if (odd) x.toLong > y.toLong else x.toLong < y.toLong)\n\
    \        if (even) sortedArray.reverse\n        else sortedArray", "        val\
    \ sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n\
    \        val evenSumOddArray = evenArray.zip(oddArray).filter(_._1 == _._2)\n\
    \        val evenSumEvenArray = evenArray.zip(evenArray).filter(_._1 == _._2)\n\
    \        val evenSumEvenSumOddArray = evenSumEvenArray.zip(evenSumOddArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenSumEvenArray = evenSumEvenArray.zip(evenSumEvenArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenSumEvenSumOddArray = evenSumEvenSumEvenArray.zip(evenSumOddArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenSumEvenSumEvenArray = evenSumEvenSumEvenArray.zip(evenSumEvenArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenSumEvenSumEvenSumOddArray = evenSumEvenSumEvenSumEvenArray.zip(evenSumOddArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenSumEvenSumEvenSumEvenArray = evenSumEvenSumEvenSumEvenArray.zip(evenSumEvenArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenSumEvenSumEvenSumEvenSumOddArray = evenSumEvenSumEvenSumEvenSumEvenArray.zip(evenSumOddArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenSumEvenSumEvenSumEvenSumEvenArray = evenSumEvenSumEvenSumEvenSumEvenSumEvenArray.zip(evenSumEvenArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenSumEvenSumEvenSumEvenSumEvenSumOddArray = evenSumEvenSumEvenSumEvenSumEvenSumEvenArray.zip(evenSumOddArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenArray =\
    \ evenSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenArray.zip(evenSumEvenArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenSumOddArray\
    \ = evenSumEvenSumEvenSumEvenSumEvenSumEvenSumEvenArray.zip(evenSumOddArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenSumEvenSumEvenSumEvenSumEven", "        val\
    \ result = array.sortWith( (a,b) => if (a+b > 0) a else b )\n        if (result.sum\
    \ % 2 == 0) result.reverse else result", "        val sumArray = array.foldLeft(0L)\
    \ { (sum, value) =>\n            sum + value\n        }\n        val sumArrayOdd\
    \ = sumArray % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n        val\
    \ sortedArray = array.sortWith( (a, b) => a < b )\n        if (sumArrayOdd > sumArrayEven)\
    \ {\n            sortedArray.reverse\n        } else {\n            sortedArray\n\
    \        }", "        val sumArray = array.sum\n        val evenSum = sumArray\
    \ % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 != 0)\n        val evenArraySorted = evenArray.sortWith(_\
    \ < _)\n        val oddArraySorted = oddArray.sortWith(_ > _)\n        val sortedArray\
    \ = evenArraySorted.reverse ++ oddArraySorted\n        if(evenSum) sortedArray\
    \ else sortedArray.reverse", "        val sumArray = array.foldLeft(0L) { (sum,\
    \ elem) =>\n            sum + elem\n        }\n        val evenSum = sumArray\
    \ % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 == 1)\n        val evenArraySum = evenArray.foldLeft(0L)\
    \ { (sum, elem) =>\n            sum + elem\n        }\n        val oddArraySum\
    \ = oddArray.foldLeft(0L) { (sum, elem) =>\n            sum + elem\n        }\n\
    \        val evenArraySumOdd = evenArraySum + oddArraySum\n        val oddArraySumEven\
    \ = evenArraySum - evenArraySumOdd\n        val evenArraySumEvenOdd = evenArraySumEven\
    \ + oddArraySumOdd\n        val oddArraySumEvenEven = evenArraySumEvenOdd + evenArraySumEven\n\
    \        val evenArraySumEvenEvenOdd = evenArraySumEvenEven + oddArraySumEvenOdd\n\
    \        val oddArraySumEvenEvenEven = evenArraySumEvenEvenOdd + evenArraySumEvenEven\n\
    \        val evenArraySumEvenEvenEvenOdd = evenArraySumEvenEvenEven + oddArraySumEvenEvenOdd\n\
    \        val oddArraySumEvenEvenEvenEven = evenArraySumEvenEvenEvenOdd + evenArraySumEvenEvenEven\n\
    \        val evenArraySumEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenOdd + oddArraySumEvenEvenEvenEven\n\
    \        val oddArraySumEvenEvenEvenEvenEven = evenArraySumEvenEvenEvenEvenOdd\
    \ + evenArraySumEvenEvenEvenEvenEven\n        val evenArraySumEvenEvenEvenEvenEvenOdd\
    \ = evenArraySumEvenEvenEvenEvenEvenOdd + oddArraySumEvenEvenEvenEvenEvenEven\n\
    \        val oddArraySumEvenEvenEvenEvenEvenEvenEven = evenArraySumEvenEvenEvenEvenEvenEvenEvenOdd\
    \ + evenArraySumEvenEvenEvenEvenEvenEvenEvenEven\n        val evenArraySumEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenOdd + oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEven\n\
    \        val oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ + evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\n        ", "       \
    \ val sum = array.sum\n        val evenSum = if (sum % 2 == 0) sum else sum -\
    \ 1\n        val oddSum = if (sum % 2 == 1) sum else sum + 1\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n\
    \        val evenArraySorted = evenArray.sortWith(_ < _)\n        val oddArraySorted\
    \ = oddArray.sortWith(_ > _)\n        val sortedArray = if (evenSum == oddSum)\
    \ evenArraySorted else oddArraySorted\n        sortedArray", "        val sumArray\
    \ = array.sum\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n\
    \        val evenSumOddArray = evenArray.zip(oddArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenArray = evenArray.zip(evenArray).sortBy(_._1).reverse\n\
    \        val oddSumEvenArray = oddArray.zip(evenArray).sortBy(_._1).reverse\n\
    \        val evenSumOddSumArray = evenSumOddArray.zip(oddSumEvenArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumArray = evenSumEvenArray.zip(evenSumEvenArray).sortBy(_._1).reverse\n\
    \        val oddSumEvenSumArray = oddSumEvenArray.zip(evenSumEvenArray).sortBy(_._1).reverse\n\
    \        val evenSumOddSumEvenArray = evenSumOddSumArray.zip(oddSumEvenSumArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenArray = evenSumEvenSumArray.zip(evenSumEvenSumArray).sortBy(_._1).reverse\n\
    \        val oddSumEvenSumEvenArray = oddSumEvenSumArray.zip(evenSumEvenSumArray).sortBy(_._1).reverse\n\
    \        val evenSumOddSumEvenSumArray = evenSumOddSumEvenArray.zip(oddSumEvenSumEvenArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenSumArray = evenSumEvenSumEvenArray.zip(evenSumEvenSumEvenArray).sortBy(_._1).reverse\n\
    \        val oddSumEvenSumEvenSumArray = oddSumEvenSumEvenArray.zip(evenSumEvenSumEvenArray).sortBy(_._1).reverse\n\
    \        val evenSumOddSumEvenSumEvenArray = evenSumOddSumEvenSumArray.zip(oddSumEvenSumEvenSumArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenSumEvenArray = evenSumEvenSumEvenSumArray.zip(evenSumEvenSumEvenArray).sortBy(_._1).reverse\n\
    \        val oddSumEvenSumEvenSumEvenArray = oddSumEvenSumEvenArray.zip(evenSumEvenSumEvenArray).sortBy(_._1).reverse\n\
    \        val evenSumOddSumEvenSumEvenSumArray = evenSumOddSumEvenSumEvenArray.zip(oddSumEvenSumEvenSumArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenSumEvenSumArray", "        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val oddSum = sumArray % 2 !=\
    \ 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray =\
    \ array.filter(_ % 2 != 0)\n        val evenArraySum = evenArray.sum\n       \
    \ val oddArraySum = oddArray.sum\n        val evenArraySumOdd = evenArraySum +\
    \ oddArraySum\n        val oddArraySumEven = evenArraySum - evenArraySum\n   \
    \     val evenArraySumEvenOdd = evenArraySumEven + oddArraySumEven\n        val\
    \ oddArraySumEvenEven = evenArraySumEven - evenArraySumEven\n        val evenArraySumEvenEvenOdd\
    \ = evenArraySumEvenEven + oddArraySumEvenEven\n        val oddArraySumEvenEvenEven\
    \ = evenArraySumEvenEven - evenArraySumEvenEven\n        val evenArraySumEvenEvenEvenOdd\
    \ = evenArraySumEvenEvenEven + oddArraySumEvenEvenEven\n        val oddArraySumEvenEvenEvenEven\
    \ = evenArraySumEvenEvenEven - evenArraySumEvenEvenEven\n        val evenArraySumEvenEvenEvenEvenOdd\
    \ = evenArraySumEvenEvenEvenEven + oddArraySumEvenEvenEvenEven\n        val oddArraySumEvenEvenEvenEvenEvenEven\
    \ = evenArraySumEvenEvenEvenEvenEven - evenArraySumEvenEvenEvenEvenEven\n    \
    \    val evenArraySumEvenEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenEvenEven\
    \ + oddArraySumEvenEvenEvenEvenEvenEven\n        val oddArraySumEvenEvenEvenEvenEvenEvenEven\
    \ = evenArraySumEvenEvenEvenEvenEvenEven - evenArraySumEvenEvenEvenEvenEvenEven\n\
    \        val evenArraySumEvenEvenEvenEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenEvenEvenEvenEven\
    \ + oddArraySumEvenEvenEvenEvenEvenEvenEvenEven\n        val oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd + oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\n\
    \        val evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ + oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\n",
  "        val sumArray = array.foldLeft(0l.toLong) { (sum, elem) => sum + elem }\n\
    \        val evenSum = sumArray % 2l.toLong\n        val oddSum = sumArray - evenSum\n\
    \        val evenArray = array.filter(_ % 2l.toLong == 0l.toLong)\n        val\
    \ oddArray = array.filter(_ % 2l.toLong == 1l.toLong)\n        val evenArraySorted\
    \ = evenArray.sortWith(_ < _)\n        val oddArraySorted = oddArray.sortWith(_\
    \ > _)\n        if (evenSum == oddSum) evenArraySorted else oddArraySorted", " \
    \       val sumArray = array.foldLeft(0l) { (sum, element) => sum + element }\n\
    \        val sumArrayOdd = sumArray % 2\n        val sumArrayEven = sumArray -\
    \ sumArrayOdd\n        val sortedArray = array.sortWith( (a, b) => sumArrayOdd\
    \ * (a.toLong > b.toLong) - (a.toLong < b.toLong) * (a.toLong == b.toLong) )\n\
    \        val sortedArrayEven = sortedArray.sortWith( (a, b) => sumArrayEven *\
    \ (a.toLong > b.toLong) - (a.toLong < b.toLong) * (a.toLong == b.toLong) )\n \
    \       sortedArrayEven ++ sortedArray", "        val sumArray = array.foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val isOdd = sumArray % 2 != 0\n\
    \        val isEven = sumArray % 2 == 0\n        val result = array.sortWith(isOdd\
    \ _)\n        if (isEven) result.reverse else result", "        val sumArray =\
    \ array.foldLeft(0l) { (sum, element) => sum + element }\n        val isEven =\
    \ sumArray % 2 == 0\n        val isOdd = sumArray % 2 != 0\n        val isEvenOrOdd\
    \ = isEven || isOdd\n        val isEvenOrOddOrNotOdd = isEvenOrOdd && !isOdd\n\
    \        val isEvenOrOddOrNotEven = isEvenOrOdd && !isEven\n        val isEvenOrOddOrNotEvenOrNotOdd\
    \ = isEvenOrOdd && !isEven && !isOdd\n        val isEvenOrOddOrNotEvenOrNotOddOrNotEven\
    \ = isEvenOrOdd && !isEven && !isOdd && !isEven\n        val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOdd\
    \ = isEvenOrOdd && !isEven && !isOdd && !isEven && !isOdd\n        val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEven\
    \ = isEvenOrOdd && !isEven && !isOdd && !isEven && !isOdd && !isEven\n       \
    \ val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOdd = isEvenOrOdd\
    \ && !isEven && !isOdd && !isEven && !isOdd && !isEven && !isOdd\n        val\
    \ isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEven = isEvenOrOdd\
    \ && !isEven && !isOdd && !isEven && !isOdd && !isEven && !isOdd && !isEven\n\
    \        val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOdd\
    \ = isEvenOrOdd && !isEven && !isOdd && !isEven && !isOdd && !isEven && !isOdd\
    \ && !isEven && !isOdd\n        val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOdd\
    \ = isEvenOrOdd && !isEven && !isOdd && !isEven && !isOdd && !isEven && !isOdd\
    \ && !isEven && !", "        val sumArray = array.foldLeft(0l.toLong) { (sum,\
    \ elem) => sum + elem }\n        val evenSum = sumArray % 2l.toLong\n        val\
    \ oddSum = sumArray - evenSum\n        val evenArray = array.filter(_ % 2l.toLong\
    \ == 0l.toLong)\n        val oddArray = array.filter(_ % 2l.toLong == 1l.toLong)\n\
    \        if (evenSum == 0l.toLong) {\n            evenArray.sortWith(_ < _)\n\
    \        } else if (oddSum == 0l.toLong) {\n            oddArray.sortWith(_ >\
    \ _)\n        } else {\n            evenArray.sortWith(_ < _)\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val sumArray = array.sum\n        val evenSum = sumArray\
    \ % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 != 0)\n        if (evenSum) {\n            evenArray.sortWith(_\
    \ < _)\n        } else {\n            oddArray.sortWith(_ > _)\n        }", " \
    \       val sum : Long = array.sum\n        val evenSum = if (sum % 2l.toLong\
    \ == 0) sum / 2l.toLong else sum / 2l.toLong + 1l.toLong\n        val oddSum =\
    \ if (sum % 2l.toLong == 1) sum / 2l.toLong else sum / 2l.toLong - 1l.toLong\n\
    \        val evenList = array.filter(_ % 2l.toLong == 0)\n        val oddList\
    \ = array.filter(_ % 2l.toLong == 1)\n        val evenSorted = evenList.sortWith(_\
    \ < _)\n        val oddSorted = oddList.sortWith(_ > _)\n        if (evenSorted.sum\
    \ == oddSorted.sum) {\n            evenSorted.reverse ++ oddSorted\n        }\
    \ else {\n            evenSorted.reverse ++ oddSorted.reverse ++ evenSorted\n\
    \        }", "        val sum : Long = array.sum\n        val odd = sum % 2 ==\
    \ 1\n        val even = sum % 2 == 0\n        val evenArray = array.filter(_ %\
    \ 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        if (odd) {\n\
    \            oddArray.sortWith(_ < _)\n        } else if (even) {\n          \
    \  evenArray.sortWith(_ > _)\n        } else {\n            array.sortWith(_ <\
    \ _)\n        }", "        val sumArray = array.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val evenSum = sumArray % 2 == 0\n        val oddSum\
    \ = sumArray % 2 != 0\n        val evenArray = array.filter(_ % 2 == 0)\n    \
    \    val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum) {\n       \
    \     evenArray.sortWith(_ < _)\n        } else if (oddSum) {\n            oddArray.sortWith(_\
    \ > _)\n        } else {\n            evenArray.sortWith(_ < _).reverse\n    \
    \        oddArray.sortWith(_ > _).reverse\n        }", "        val sumArray =\
    \ array.sum\n        val evenSum = sumArray % 2 == 0\n        val evenArray =\
    \ array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        val evenArraySorted = evenArray.sortWith(_ < _)\n        val oddArraySorted\
    \ = oddArray.sortWith(_ > _)\n        if (evenSum) {\n            evenArraySorted\n\
    \        } else {\n            oddArraySorted\n        }", "        val sumArray\
    \ = array.foldLeft(0l.toLong)((sum, element) => sum + element)\n        val sumArrayOdd\
    \ = sumArray % 2l.toLong\n        val sumArrayEven = sumArray - sumArrayOdd\n\
    \        val sortedArray = array.sortWith((a, b) => a < b ? a < b : a > b ? a\
    \ > b : a >= b ? a >= b : a <= b ? a <= b : a > sumArrayOdd ? a > sumArrayOdd\
    \ : a < sumArrayEven ? a < sumArrayEven : a >= sumArrayEven ? a >= sumArrayEven\
    \ : a <= sumArrayEven ? a <= sumArrayEven : a)\n        sortedArray", "      \
    \  val sum : Long = array.sum\n        val odd = sum % 2 == 0\n        val even\
    \ = sum % 2 == 1\n        val evenArray = array.filter(_ % 2 == 0)\n        val\
    \ oddArray = array.filter(_ % 2 == 1)\n        val evenArraySorted = evenArray.sortWith(_\
    \ < _)\n        val oddArraySorted = oddArray.sortWith(_ > _)\n        if (odd)\
    \ oddArraySorted.reverse else evenArraySorted", "        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val sum = array.sum\n        val evenSum = sum %\
    \ 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 == 1)\n        if (evenSum) {\n            evenArray.sortWith(_\
    \ < _)\n        } else {\n            oddArray.sortWith(_ > _)\n        }", " \
    \       val sumArray = array.foldLeft(0L) { (sum, elem) =>\n            sum +\
    \ elem\n        }\n        val sumArrayOdd = sumArray % 2L == 0L\n        val\
    \ sumArrayEven = sumArray % 2L == 1L\n        val sortedArray = array.sortWith(_.compareTo(_)\
    \ < 0)\n        if (sumArrayOdd) {\n            sortedArray.reverse\n        }\
    \ else {\n            sortedArray\n        }", "        val sum : Long = array.sum\n\
    \        val odd = sum % 2 == 1\n        val even = sum % 2 == 0\n        val\
    \ evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        val evenArraySorted: Array[Long] = evenArray.sortWith(_ <\
    \ _)\n        val oddArraySorted: Array[Long] = oddArray.sortWith(_ > _)\n   \
    \     if (odd) {\n            oddArraySorted\n        } else {\n            evenArraySorted\n\
    \        }", "        val sumArray = array.foldLeft(0L){ (sum, value) => sum +\
    \ value }\n        val isOdd = sumArray % 2L == 0L\n        val isEven = sumArray\
    \ % 2L == 1L\n        val sortedArray = array.sortWith( (a, b) => if (isEven)\
    \ a < b else a > b )\n        if (isOdd) sortedArray else sortedArray.reverse",
  "        val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n   \
    \     val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        if (evenSum) {\n            evenArray.sortBy(_)\n       \
    \ } else {\n            oddArray.sortBy(_.reverse)\n        }", "        val result\
    \ = array.sortWith(compare)\n        result", "        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        val evenSumArray\
    \ = evenArray.sum\n        val oddSumArray = oddArray.sum\n        val evenSumArray2\
    \ = evenSumArray % 2 == 0\n        val oddSumArray2 = oddSumArray % 2 == 1\n \
    \       val evenSumArray3 = evenSumArray2 % 2 == 0\n        val oddSumArray3 =\
    \ oddSumArray2 % 2 == 1\n        val evenSumArray4 = evenSumArray3 % 2 == 0\n\
    \        val oddSumArray4 = oddSumArray3 % 2 == 1\n        val evenSumArray5 =\
    \ evenSumArray4 % 2 == 0\n        val oddSumArray5 = oddSumArray4 % 2 == 1\n \
    \       val evenSumArray6 = evenSumArray5 % 2 == 0\n        val oddSumArray6 =\
    \ oddSumArray5 % 2 == 1\n        val evenSumArray7 = evenSumArray6 % 2 == 0\n\
    \        val oddSumArray7 = oddSumArray6 % 2 == 1\n        val evenSumArray8 =\
    \ evenSumArray7 % 2 == 0\n        val oddSumArray8 = oddSumArray7 % 2 == 1\n \
    \       val evenSumArray9 = evenSumArray8 % 2 == 0\n        val oddSumArray9 =\
    \ oddSumArray8 % 2 == 1\n        val evenSumArray10 = evenSumArray9 % 2 == 0\n\
    \        val oddSumArray10 = oddSumArray9 % 2 == 1\n        val evenSumArray11\
    \ = evenSumArray10 % 2 == 0\n        val oddSumArray11 = oddSumArray10 % 2 ==\
    \ 1\n        val evenSumArray12 = evenSumArray11 % 2 == 0\n        val oddSumArray12\
    \ = oddSumArray11 % 2 == 1\n        val evenSumArray13 = evenSumArray12 % 2 ==\
    \ 0\n        val oddSumArray13 = oddSumArray12 % 2 == 1\n        val evenSumArray14\
    \ = evenSumArray13 % 2 == 0\n        val oddSumArray14 = oddSumArray13 % 2 ==\
    \ 1\n        val evenSumArray15 = evenSumArray14 % 2 == 0\n        val oddSumArray15\
    \ = oddSumArray14 % 2 == 1\n        val evenSumArray16 = evenSumArray15 % 2 ==\
    \ 0\n        val oddSumArray16 = oddSumArray15 % 2 == 1\n        val evenSumArray17\
    \ = evenSumArray16 % 2 == 0\n        val oddSumArray17 = odd", "        val sumArray\
    \ = array.foldLeft(0l.toLong)(_ + _)\n        val sumArrayOdd = sumArray % 2\n\
    \        val sumArrayEven = sumArray - sumArrayOdd\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        val evenArraySorted\
    \ = evenArray.sortWith(_ < _)\n        val oddArraySorted = oddArray.sortWith(_\
    \ > _)\n        val sortedArray = if (sumArrayOdd == 0) evenArraySorted else oddArraySorted\n\
    \        sortedArray", "        val sumArray = array.foldLeft(0l.toLong)(_ + _)\n\
    \        val evenSum = sumArray % 2\n        val oddSum = sumArray - evenSum\n\
    \        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        val evenArraySorted = evenArray.sortWith(_ < _)\n       \
    \ val oddArraySorted = oddArray.sortWith(_ > _)\n        if (evenSum == 1) {\n\
    \            evenArraySorted\n        } else {\n            oddArraySorted\n \
    \       }", "        val result = new mutable.ListBuffer[Long]()\n        val\
    \ sum = 0\n        array.foreach(x => sum += x)\n        val even = sum % 2 ==\
    \ 0\n        val odd = !even\n        if (even) {\n            array.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        } else {\n            array.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        }\n        result.toList", "        val\
    \ sumArray = array.sum\n        val sumArrayOdd = sumArray % 2 == 1\n        val\
    \ sumArrayEven = sumArray % 2 == 0\n        val sumArrayEvenOrOdd = sumArrayEven\
    \ || sumArrayOdd\n        val sumArrayEvenOrOddOrZero = sumArrayEvenOrOdd || sumArrayOdd\
    \ || sumArray == 0\n        val sumArrayEvenOrOddOrZeroOrZero = sumArrayEvenOrOddOrZero\
    \ || sumArrayOddOrZero || sumArray == 0\n        val sumArrayEvenOrOddOrZeroOrZeroOrZero\
    \ = sumArrayEvenOrOddOrZeroOrZero || sumArrayOddOrZeroOrZero || sumArray == 0\n\
    \        val sumArrayEvenOrOddOrZeroOrZeroOrZeroOrZero = sumArrayEvenOrOddOrZeroOrZeroOrZero\
    \ || sumArrayOddOrZeroOrZeroOrZero || sumArray == 0\n        val sumArrayEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = sumArrayEvenOrOddOrZeroOrZeroOrZeroOrZero || sumArrayOddOrZeroOrZeroOrZeroOrZero\
    \ || sumArray == 0\n        val sumArrayEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = sumArrayEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero || sumArrayOddOrZeroOrZeroOrZeroOrZeroOrZero\
    \ || sumArray == 0\n        val sumArrayEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = sumArrayEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || sumArrayOddOrZeroOrZeroOrZeroOrZeroOrZero\
    \ || sumArray == 0\n        val sumArrayEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = sumArrayEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || sumArrayOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ || sumArray == 0\n        val sumArrayEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = sumArrayEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || sumArrayOddOrZeroOrZeroOr",
  "        val sum = array.sum\n        val odd = sum % 2 == 1\n        val even =\
    \ sum % 2 == 0\n        if(even){\n            array.sortBy(x => x)\n        }else{\n\
    \            array.sortBy(x => -x)\n        }", "        val sumArray = array.foldLeft(0L){\
    \ (sum, value) => sum + value }\n        val sumArrayOdd = sumArray % 2L == 0L\n\
    \        val sumArrayEven = sumArray % 2L == 1L\n        val sortedArray = array.sortWith(_.compareTo(_)\
    \ == 0)\n        if (sumArrayOdd) sortedArray else sortedArray.sortWith(_.compareTo(_)\
    \ == 1)", "        val result = array.sortWith(_.sum % 2 == 1)\n        result.sortWith(_.sum\
    \ % 2 == 0)", "        val sumArray = array.foldLeft(0L) { (sum, value) => sum\
    \ + value }\n        val evenSum = sumArray % 2 == 0\n        val evenArray =\
    \ array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n\
    \        if (evenSum) {\n            evenArray.sortWith(_ < _)\n        } else\
    \ {\n            oddArray.sortWith(_ > _)\n        }", "        val sumArray =\
    \ array.foldLeft(0l) { (sum, elem) => sum + elem }\n        val sumArrayOdd =\
    \ sumArray % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n        val\
    \ sortedArray = array.sortWith((a, b) => a > b)\n        if (sumArrayOdd > 0)\
    \ sortedArray else sortedArray.sortWith((a, b) => a < b)", "        val sumArray\
    \ = array.foldLeft(0l.toLong)((sum, element) => sum + element)\n        val isOdd\
    \ = sumArray % 2l.toLong == 0l.toLong\n        val isEven = sumArray % 2l.toLong\
    \ != 0l.toLong\n        if(isOdd && isEven) array.sortBy(x => x)\n        else\
    \ array.sortBy(x => -x).reverse", "        val sumArray = array.foldLeft(0l) {\
    \ (sum, value) => sum + value }\n        val isEven = sumArray % 2 == 0\n    \
    \    val isOdd = sumArray % 2 != 0\n        val isEvenOrOdd = isEven || isOdd\n\
    \        val isEvenOrOddOrNotEven = !(isEven && isOdd)\n        val isEvenOrOddOrNotOdd\
    \ = !(isEven && !isOdd)\n        val isEvenOrOddOrNotEvenOrNotOdd = !(isEven &&\
    \ !isOdd && !isEvenOrOdd)\n        val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOdd\
    \ = !(isEven && !isOdd && !isEvenOrOdd && !isEvenOrOddOrNotEven)\n        val\
    \ isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOdd = !(isEven &&\
    \ !isOdd && !isEvenOrOdd && !isEvenOrOddOrNotEven && !isEvenOrOddOrNotOdd)\n \
    \       val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOdd\
    \ = !(isEven && !isOdd && !isEvenOrOdd && !isEvenOrOddOrNotEven && !isEvenOrOddOrNotOdd\
    \ && !isEvenOrOddOrNotEvenOrNotOdd)\n        val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOdd\
    \ = !(isEven && !isOdd && !isEvenOrOdd && !isEvenOrOddOrNotEven && !isEvenOrOddOrNotOdd\
    \ && !isEvenOrOddOrNotEvenOrNotOdd && !isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOdd)\n\
    \        val isEvenOrOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOdd\
    \ = !(isEven && !isOdd && !isEvenOrOdd && !isEvenOrOddOrNotEven && !isEvenOrOdd",
  "        val sum = array.sum\n        val odd = sum % 2 == 1\n        val even =\
    \ sum % 2 == 0\n        val result = array.sortWith(x => if (odd) x.compare(array(0))\
    \ > 0 else x.compare(array(array.length - 1)) > 0)\n        if (even) result.reverse\
    \ else result", "        val n = array.size\n        val sum = array.sum\n   \
    \     if (sum % 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n\
    \            array.sortWith(_ > _)\n        }", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith((a, b) => a < b)\n        } else {\n \
    \           array.sortWith((a, b) => a > b)\n        }\n        result.toList",
  "        val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n   \
    \     val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        val evenArraySum = evenArray.sum\n        val oddArraySum\
    \ = oddArray.sum\n        val evenArraySumOdd = evenArraySum - oddArraySum\n \
    \       val evenArraySumEven = evenArraySum + evenArraySumOdd\n        val oddArraySumEven\
    \ = oddArraySum - evenArraySumEven\n        val evenArraySumEvenOdd = evenArraySumEven\
    \ + oddArraySumEven\n        val oddArraySumEvenOdd = oddArraySumEven - evenArraySumEvenOdd\n\
    \        val evenArraySumEvenOddOdd = evenArraySumEvenOdd + oddArraySumEvenOdd\n\
    \        val oddArraySumEvenOddOdd = oddArraySumEvenOdd - evenArraySumEvenOddOdd\n\
    \        val evenArraySumEvenOddOddOdd = evenArraySumEvenOddOdd + oddArraySumEvenOddOdd\n\
    \        val oddArraySumEvenOddOddOdd = oddArraySumEvenOddOdd - evenArraySumEvenOddOddOdd\n\
    \        val evenArraySumEvenOddOddOddOdd = evenArraySumEvenOddOddOdd + oddArraySumEvenOddOddOdd\n\
    \        val oddArraySumEvenOddOddOddOdd = oddArraySumEvenOddOddOdd - evenArraySumEvenOddOddOddOdd\n\
    \        val evenArraySumEvenOddOddOddOddOdd = evenArraySumEvenOddOddOddOdd +\
    \ oddArraySumEvenOddOddOddOdd\n        val oddArraySumEvenOddOddOddOddOdd = oddArraySumEvenOddOddOddOdd\
    \ - evenArraySumEvenOddOddOddOddOdd\n        val evenArraySumEvenOddOddOddOddOddOdd\
    \ = evenArraySumEvenOddOddOddOddOdd + oddArraySumEvenOddOddOddOddOdd\n       \
    \ val oddArraySumEvenOddOddOddOddOddOdd = oddArraySumEvenOddOddOddOdd", "    \
    \    val sumArray = array.foldLeft(0L){ (sum, elem) => sum + elem }\n        val\
    \ isEven = sumArray % 2 == 0\n        val isOdd = sumArray % 2 != 0\n        val\
    \ sortedArray = array.sortWith(_.compareTo(_) < 0)\n        if (isEven) {\n  \
    \          sortedArray.reverse\n        } else {\n            sortedArray\n  \
    \      }", "        val sumArray = array.sum\n        val evenSum = sumArray %\
    \ 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 != 0)\n        val evenSumArray = evenSum.map(_ * _).toArray\n\
    \        val oddSumArray = oddSum.map(_ * _).toArray\n        val evenSumArrayLength\
    \ = evenSumArray.length\n        val oddSumArrayLength = oddSumArray.length\n\
    \        val evenArrayLength = evenArray.length\n        val oddArrayLength =\
    \ oddArray.length\n        val evenArrayLength = evenArrayLength + evenSumArrayLength\n\
    \        val oddArrayLength = oddArrayLength + oddSumArrayLength\n        val\
    \ evenArray = evenArray.sortWith((a, b) => a - b)\n        val oddArray = oddArray.sortWith((a,\
    \ b) => b - a)\n        val evenArrayLength = evenArray.length\n        val oddArrayLength\
    \ = oddArray.length\n        val evenSumArrayLength = evenSumArray.length\n  \
    \      val oddSumArrayLength = oddSumArray.length\n        val evenSumArray =\
    \ evenSumArray.sortWith((a, b) => a - b)\n        val oddSumArray = oddSumArray.sortWith((a,\
    \ b) => b - a)\n        val evenSumArrayLength = evenSumArray.length\n       \
    \ val oddSumArrayLength = oddSumArray.length\n        val evenSumArray = evenSumArray.sortWith((a,\
    \ b) => a - b)\n        val oddSumArray = oddSumArray.sortWith((a, b) => b - a)\n\
    \        val evenArrayLength = evenArray.length\n        val oddArrayLength =\
    \ oddArray.length\n        val evenArray = evenArray.sortWith((a, b) => a - b)\n\
    \        val oddArray = oddArray.sortWith((a, b) => b - a)\n        val evenArrayLength\
    \ = evenArray.length\n        val oddArrayLength = oddArray.length\n        val\
    \ evenSumArrayLength = evenSumArray.length\n        val oddSumArrayLength = oddSumArray.length\n\
    \        val evenSumArray = evenSumArray.sortWith((a, b) => a - b)\n        val\
    \ oddSumArray = oddSumArray.sortWith((a, b) => b - a)\n        val evenArrayLength\
    \ = evenArray.length\n        val oddArrayLength = oddArray.length\n        val\
    \ evenArray = evenArray.sortWith((a, b) => a - b)\n        val oddArray = oddArray.sortWith((a,\
    \ b) => b - a)\n        val evenArrayLength = evenArray.length\n        val oddArrayLength\
    \ = oddArray.length\n        val evenSumArrayLength = evenSumArray.length\n  \
    \      val odd", "        val sumArray = array.sum\n        val evenSum = sumArray\
    \ % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 != 0)\n        val evenArraySorted = evenArray.sortWith(_\
    \ < _)\n        val oddArraySorted = oddArray.sortWith(_ > _)\n        val sortedArray\
    \ = evenArraySorted.take(sumArray.toInt) ::: oddArraySorted.take(sumArray.toInt)\n\
    \        if (evenSum) {\n            sortedArray.reverse\n        } else {\n \
    \           sortedArray\n        }", "        val sumArray = array.foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val sumArrayOdd = sumArray % 2\n\
    \        val sumArrayEven = sumArray - sumArrayOdd\n        val sortedArray =\
    \ array.sortWith(x => x > 0)\n        if (sumArrayOdd > sumArrayEven) {\n    \
    \        sortedArray.reverse\n        } else {\n            sortedArray\n    \
    \    }", "        val result = new mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        for (i <- 0 until array.size) {\n            sum += array(i)\n\
    \        }\n        if (sum % 2 == 0) {\n            array.sortWith((x, y) =>\
    \ x < y)\n        } else {\n            array.sortWith((x, y) => x > y)\n    \
    \    }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        array.foreach(x => sum += x)\n        val even =\
    \ if (sum % 2 == 0) true else false\n        array.foreach(x => if (even) result.add(x)\
    \ else if (sum > x) result.add(x) else if (sum < x) result.add(-x))\n        result.toList",
  "        val sumArray = array.foldLeft(0l) { (sum, element) => sum + element }\n\
    \        val evenSum = sumArray % 2 == 0\n        val oddSum = sumArray % 2 !=\
    \ 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray =\
    \ array.filter(_ % 2 != 0)\n        val evenArraySorted = evenArray.sortWith(_\
    \ < _)\n        val oddArraySorted = oddArray.sortWith(_ > _)\n        if (evenSum)\
    \ {\n            evenArraySorted\n        } else {\n            oddArraySorted\n\
    \        }", "        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0\n        var i = 0\n        while(i < array.size) {\n            sum\
    \ += array(i)\n            i += 1\n        }\n        val even = sum % 2 == 0\n\
    \        val odd = !even\n        if(even) {\n            while(i < array.size)\
    \ {\n                sum += array(i)\n                i += 1\n            }\n\
    \            val evenSum = sum % 2 == 0\n            val oddSum = !evenSum\n \
    \           if(evenSum) {\n                while(i < array.size) {\n         \
    \           sum += array(i)\n                    i += 1\n                }\n \
    \               val evenSum = sum % 2 == 0\n                val oddSum = !evenSum\n\
    \                if(evenSum) {\n                    while(i < array.size) {\n\
    \                        sum += array(i)\n                        i += 1\n   \
    \                 }\n                    val evenSum = sum % 2 == 0\n        \
    \            val oddSum = !evenSum\n                    if(evenSum) {\n      \
    \                  while(i < array.size) {\n                            sum +=\
    \ array(i)\n                            i += 1\n                        }\n  \
    \                      val evenSum = sum % 2 == 0\n                        val\
    \ oddSum = !evenSum\n                        if(evenSum) {\n                 \
    \           while(i < array.size) {\n                                sum += array(i)\n\
    \                                i += 1\n                            }\n     \
    \                       val evenSum = sum % 2 == 0\n                         \
    \   val oddSum = !evenSum\n                            if(evenSum) {\n       \
    \                         while(i < array.size) {\n                          \
    \          sum += array(i)\n                                    i += 1\n     \
    \                           }\n                                val evenSum = sum\
    \ % 2 == 0\n                                val oddSum = !evenSum\n          \
    \                      if(evenSum) {\n                                    while(i\
    \ < array.size) {\n                                        sum += array(i)\n \
    \                                       i += 1\n                             \
    \       }\n                                    val evenSum = sum % 2 == 0\n  \
    \                                  val oddSum = !evenSum\n                   \
    \                 if(evenSum) {\n                                        while(i\
    \ < array.size) {\n                                            sum += array(i)\n\
    \                                            i += 1\n                        \
    \                }\n                                        val evenSum = sum\
    \ % 2 == 0\n                                        val oddSum = !evenSum\n  \
    \                                      if(evenSum) {\n                       \
    \                     while(i < array.size) {\n                              \
    \                  sum += array(i)\n                                         \
    \       i += 1\n                                            }\n              \
    \                              val evenSum = sum % 2 == 0\n                  \
    \                          val oddSum = !evenSum\n                           \
    \                 if(evenSum) {\n                                            \
    \    while(i < array.size) {\n                                               \
    \     sum += array(i)\n                                                    i +=\
    \ 1\n                                                }\n                     \
    \                           val evenSum = sum % 2 == 0\n                     \
    \                           val oddSum = !evenSum\n                          \
    \                      if(evenSum) {\n                                       \
    \             while(i < array.size) {\n                                      \
    \                  sum += array(i)\n                                         \
    \               i += 1\n                                                    }\n\
    \                                                    val evenSum = sum % 2 ==\
    \ 0\n                                                    val oddSum = !evenSum\n\
    \                                                    if(evenSum) {\n         \
    \                                               while(i < array.size) {\n    \
    \                                                        sum += array(i)\n   \
    \                                                         ", "        val sumArray\
    \ = array.sum\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n\
    \        val evenSumArray = evenArray.sum\n        val oddSumArray = oddArray.sum\n\
    \        val evenSumArrayOdd = evenSumArray % 2 == 0\n        val oddSumArrayEven\
    \ = oddSumArray % 2 == 1\n        val evenSumArrayEven = evenSumArray % 2 == 0\n\
    \        val oddSumArrayOdd = oddSumArray % 2 == 1\n        val evenSumArrayOdd\
    \ = evenSumArray % 2 == 1\n        val oddSumArrayEven = oddSumArray % 2 == 0\n\
    \        val evenSumArrayEven = evenSumArray % 2 == 0\n        val oddSumArrayOdd\
    \ = oddSumArray % 2 == 1\n        val evenSumArrayEven = evenSumArray % 2 == 1\n\
    \        val oddSumArrayOdd = oddSumArray % 2 == 0\n        val evenSumArrayOdd\
    \ = evenSumArray % 2 == 0\n        val oddSumArrayEven = oddSumArray % 2 == 1\n\
    \        val evenSumArrayEven = evenSumArray % 2 == 1\n        val oddSumArrayOdd\
    \ = oddSumArray % 2 == 0\n        val evenSumArrayEven = evenSumArray % 2 == 0\n\
    \        val oddSumArrayEven = oddSumArray % 2 == 1\n        val evenSumArrayOdd\
    \ = evenSumArray % 2 == 1\n        val oddSumArrayEven = oddSumArray % 2 == 0\n\
    \        val evenSumArrayEven = evenSumArray % 2 == 0\n        val oddSumArrayOdd\
    \ = oddSumArray % 2 == 1\n        val evenSumArrayEven = evenSumArray % 2 == 1\n\
    \        val oddSumArrayEven = oddSumArray % 2 == 0\n        val evenSumArrayOdd\
    \ = evenSumArray % 2 == 0\n        val oddSumArrayEven = oddSumArray % 2 == 1\n\
    \        val evenSumArrayEven = evenSumArray % 2 == 1\n        val oddSumArrayOdd\
    \ = oddSumArray % 2 == 0\n        val evenSumArrayEven = evenSumArray % 2 == 0\n\
    \        val oddSumArrayEven = oddSumArray % 2 == 1\n        val evenSumArrayOdd\
    \ = evenSumArray % 2 == 1\n        val oddSumArrayEven = oddSumArray % 2 == 0\n\
    \        val evenSumArrayEven = evenSumArray % 2 == 0\n        val odd", "   \
    \     val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n    \
    \    val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        if (evenSum) {\n            evenArray.sortWith(_ < _)\n \
    \       } else {\n            oddArray.sortWith(_ > _)\n        }", "        val\
    \ sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        val evenSumArray = evenSum.map(_ * _).toList\n        val oddSumArray\
    \ = oddSum.map(_ * _).toList\n        val evenArraySortedList = evenArray.sortWith(_\
    \ < _)\n        val oddArraySortedList = oddArray.sortWith(_ > _)\n        val\
    \ evenSumArraySortedList = evenSumArraySortedList.sortWith(_ < _)\n        val\
    \ oddSumArraySortedList = oddSumArraySortedList.sortWith(_ > _)\n        val evenArraySortedList2\
    \ = evenArraySortedList.sortWith(_ < _)\n        val oddArraySortedList2 = oddArraySortedList.sortWith(_\
    \ > _)\n        val evenSumArraySortedList2 = evenSumArraySortedList2.sortWith(_\
    \ < _)\n        val oddSumArraySortedList2 = oddSumArraySortedList2.sortWith(_\
    \ > _)\n        val evenArraySortedList3 = evenArraySortedList2.sortWith(_ < _)\n\
    \        val oddArraySortedList3 = oddArraySortedList2.sortWith(_ > _)\n     \
    \   val evenSumArraySortedList3 = evenSumArraySortedList3.sortWith(_ < _)\n  \
    \      val oddSumArraySortedList3 = oddSumArraySortedList3.sortWith(_ > _)\n \
    \       val evenArraySortedList4 = evenArraySortedList3.sortWith(_ < _)\n    \
    \    val oddArraySortedList4 = oddArraySortedList3.sortWith(_ > _)\n        val\
    \ evenSumArraySortedList4 = evenSumArraySortedList4.sortWith(_ < _)\n        val\
    \ oddSumArraySortedList4 = oddSumArraySortedList4.sortWith(_ > _)\n        val\
    \ evenArraySortedList5 = evenArraySortedList4.sortWith(_ < _)\n        val oddArraySortedList5\
    \ = oddArraySortedList4.sortWith(_ > _)\n        val evenSumArraySortedList5 =\
    \ evenSumArraySortedList5.sortWith(_ < _)\n        val oddSumArraySortedList5\
    \ = oddSumArraySortedList5.sortWith(_ > _)\n        val evenArraySortedList6 =\
    \ evenArraySortedList5.sortWith(_ < _)\n        val oddArraySortedList6 = oddArraySortedList5.sortWith(_\
    \ > _)\n        val evenSumArraySortedList6 = evenSumArraySorted", "        val\
    \ sumArray = array.foldLeft(0l) { (sum, elem) => sum + elem }\n        val evenSum\
    \ = sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        if (evenSum) {\n            evenArray.sortBy(_)\n        } else {\n \
    \           oddArray.sortBy(_.reverse)\n        }", "        val sumArray = array.foldLeft(0L){\
    \ (sum, value) => sum + value }\n        val sumArrayOdd = sumArray % 2\n    \
    \    val sumArrayEven = sumArray - sumArrayOdd\n        val sortedArray = array.sortWith(\
    \ (a, b) => a < b )\n        if (sumArrayOdd > 0) sortedArray else sortedArray.reverse",
  "        val sumArray = array.foldLeft(0l) { (sum, elem) => sum + elem }\n     \
    \   val evenSum = sumArray % 2\n        val oddSum = sumArray - evenSum\n    \
    \    val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        if (evenSum == 1) {\n            evenArray.sortWith(_ < _)\n\
    \        } else if (oddSum == 1) {\n            oddArray.sortWith(_ > _)\n   \
    \     } else {\n            evenArray.sortWith(_ < _).reverse\n            oddArray.sortWith(_\
    \ > _).reverse\n        }", "        val sumArray = array.sum\n        val evenSum\
    \ = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n    \
    \    val oddArray = array.filter(_ % 2 != 0)\n        val evenSumArray = evenSum.map(_\
    \ * 2).toList\n        val oddSumArray = oddSum.map(_ * 2).toList\n        val\
    \ evenArrayList = evenArray.sortWith(_ < _)\n        val oddArrayList = oddArray.sortWith(_\
    \ > _)\n        val evenSumArrayList = evenSumArray.sortWith(_ < _)\n        val\
    \ oddSumArrayList = oddSumArray.sortWith(_ > _)\n        val evenArrayListList\
    \ = evenArrayList.sortWith(_ < _)\n        val oddArrayListList = oddArrayList.sortWith(_\
    \ > _)\n        val evenSumArrayListList = evenSumArrayList.sortWith(_ < _)\n\
    \        val oddSumArrayListList = oddSumArrayList.sortWith(_ > _)\n        val\
    \ evenArrayListListList = evenArrayListList.sortWith(_ < _)\n        val oddArrayListListList\
    \ = oddArrayListList.sortWith(_ > _)\n        val evenSumArrayListListList = evenSumArrayListList.sortWith(_\
    \ < _)\n        val oddSumArrayListListList = oddSumArrayListList.sortWith(_ >\
    \ _)\n        val evenArrayListListListList = evenArrayListListList.sortWith(_\
    \ < _)\n        val oddArrayListListListList = oddArrayListListList.sortWith(_\
    \ > _)\n        val evenSumArrayListListListList = evenSumArrayListListList.sortWith(_\
    \ < _)\n        val oddSumArrayListListListList = oddSumArrayListListList.sortWith(_\
    \ > _)\n        val evenArrayListListListListList = evenArrayListListListList.sortWith(_\
    \ < _)\n        val oddArrayListListListListList = oddArrayListListListList.sortWith(_\
    \ > _)\n        val evenSumArrayListListListListList = evenSumArrayListListListList.sortWith(_\
    \ < _)\n        val oddSumArrayListListListListList = oddSumArrayListListListList.sortWith(_\
    \ > _)\n        val evenArrayListListListListListList = evenArrayListListListListList.sortWith(_\
    \ < _)\n        val oddArrayListListListListListList = oddArrayListListListListList.sortWith(_\
    \ > _)\n        val evenSumArrayListListList", "        val sumArray = array.foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val sumArrayOdd = sumArray % 2\n\
    \        val sumArrayEven = sumArray - sumArrayOdd\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        val evenArrayOdd\
    \ = evenArray.filter(_ % 2 == 0)\n        val oddArrayOdd = oddArray.filter(_\
    \ % 2 == 1)\n        val evenArrayEven = evenArray.filter(_ % 2 == 1)\n      \
    \  val oddArrayEven = oddArray.filter(_ % 2 == 0)\n        val evenArrayOddEven\
    \ = evenArray.filter(_ % 2 == 1)\n        val oddArrayOddEven = oddArray.filter(_\
    \ % 2 == 0)\n        val evenArrayEvenOdd = evenArray.filter(_ % 2 == 1)\n   \
    \     val oddArrayEvenOdd = oddArray.filter(_ % 2 == 0)\n        val evenArrayOddOddEven\
    \ = evenArray.filter(_ % 2 == 1)\n        val oddArrayOddOddEven = oddArray.filter(_\
    \ % 2 == 0)\n        val evenArrayEvenOddOdd = evenArray.filter(_ % 2 == 1)\n\
    \        val oddArrayEvenOddOdd = oddArray.filter(_ % 2 == 0)\n        val evenArrayOddEvenOddEven\
    \ = evenArray.filter(_ % 2 == 1)\n        val oddArrayOddEvenOddEven = oddArray.filter(_\
    \ % 2 == 0)\n        val evenArrayEvenOddOddOdd = evenArray.filter(_ % 2 == 1)\n\
    \        val oddArrayEvenOddOddOdd = oddArray.filter(_ % 2 == 0)\n        val\
    \ evenArrayOddEvenOddEvenOdd = evenArray.filter(_ % 2 == 1)\n        val oddArrayOddEvenOddEvenOdd\
    \ = oddArray.filter(_ % 2 == 0)\n        val evenArrayEvenOddOddOddEvenOdd = evenArray.filter(_\
    \ % 2 == 1)\n        val oddArrayOddEvenOddOddEvenOdd = oddArray.filter(_ % 2\
    \ == 0)\n        val evenArrayOddOddEvenOddEvenOdd = evenArray.filter(_ % 2 ==\
    \ 1)\n        val oddArrayOddEvenOddOddEvenOdd = oddArray.filter(_ % 2 == 0)\n\
    \        val evenArrayEvenOddOddOddEvenOddEven = evenArray.filter(_ % 2 == 1)\n\
    \        val oddArrayOddEvenOddO", "        val sumArray = array.sum\n       \
    \ val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2\
    \ == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        val evenSumArray\
    \ = evenSum.map(_ * _)\n        val oddSumArray = oddSum.map(_ * _)\n        val\
    \ evenSumArrayList = evenSumArray.map(_.toLong)\n        val oddSumArrayList =\
    \ oddSumArray.map(_.toLong)\n        val evenArrayList = evenArray.map(_.toLong)\n\
    \        val oddArrayList = oddArray.map(_.toLong)\n        val evenArrayListList\
    \ = evenArrayList.map(_.toLong)\n        val oddArrayListList = oddArrayList.map(_.toLong)\n\
    \        val evenSumArrayListList = evenSumArrayList.map(_.toLong)\n        val\
    \ oddSumArrayListList = oddSumArrayList.map(_.toLong)\n        val evenArrayListListList\
    \ = evenArrayListList.map(_.toLong)\n        val oddArrayListListList = oddArrayListListList.map(_.toLong)\n\
    \        val evenSumArrayListListList = evenSumArrayListList.map(_.toLong)\n \
    \       val oddSumArrayListListList = oddSumArrayListListList.map(_.toLong)\n\
    \        val evenArrayListListListList = evenArrayListListListList.map(_.toLong)\n\
    \        val oddArrayListListListList = oddArrayListListListList.map(_.toLong)\n\
    \        val evenSumArrayListListListList = evenSumArrayListListListList.map(_.toLong)\n\
    \        val oddSumArrayListListListList = oddSumArrayListListListList.map(_.toLong)\n\
    \        val evenArrayListListListListList = evenArrayListListListListList.map(_.toLong)\n\
    \        val oddArrayListListListListList = oddArrayListListListListList.map(_.toLong)\n\
    \        val evenSumArrayListListListListList = evenSumArrayListListListListList.map(_.toLong)\n\
    \        val oddSumArrayListListListListList = oddSumArrayListListListListList.map(_.toLong)\n\
    \        val evenArrayListListListListListList = evenArrayListListListListListList.map(_.toLong)\n\
    \        val oddArrayListListListListListList = oddArrayListListListListListList.map(_.toLong)\n\
    \        val evenSumArrayListListListListListList = evenSumArrayListListListListListList.",
  "        val sum : Long = array.sum\n        val odd = sum % 2 != 0\n        val\
    \ even = sum % 2 == 0\n        val newArray = array.sortWith(x => if (odd) x.toLong\
    \ > x.toLong else x.toLong < x.toLong)\n        if (even) newArray.reverse else\
    \ newArray", "        val sumArray = array.foldLeft(0L) { (sum, elem) =>\n   \
    \         val newSum = sum + elem\n            if (newSum % 2 == 0) newSum else\
    \ newSum - newSum\n        }\n        val evenSum = sumArray % 2 == 0\n      \
    \  val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        val evenArraySorted = evenArray.sortWith(_ < _)\n       \
    \ val oddArraySorted = oddArray.sortWith(_ > _)\n        if (evenSum) evenArraySorted\
    \ else oddArraySorted", "        val sumArray = array.sum\n        val evenSum\
    \ = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n    \
    \    val oddArray = array.filter(_ % 2 == 1)\n        val evenSumArray = evenSum.map(_\
    \ * 2).toList\n        val oddSumArray = oddSum.map(_ * 2).toList\n        val\
    \ evenArraySorted: Array[Long] = evenArray.sortWith(_ < _)\n        val oddArraySorted:\
    \ Array[Long] = oddArray.sortWith(_ > _)\n        val evenSumArraySorted: Array[Long]\
    \ = evenSumArray.sortWith(_ < _)\n        val oddSumArraySorted: Array[Long] =\
    \ oddSumArray.sortWith(_ > _)\n        val evenArraySortedList: mutable.Buffer[Long]\
    \ = mutable.Buffer()\n        val oddArraySortedList: mutable.Buffer[Long] = mutable.Buffer()\n\
    \        val evenSumArraySortedList: mutable.Buffer[Long] = mutable.Buffer()\n\
    \        val oddSumArraySortedList: mutable.Buffer[Long] = mutable.Buffer()\n\
    \        val evenArraySortedListIterator: Iterator[Long] = evenArraySorted.iterator\n\
    \        val oddArraySortedListIterator: Iterator[Long] = oddArraySorted.iterator\n\
    \        val evenSumArraySortedListIterator: Iterator[Long] = evenSumArraySorted.iterator\n\
    \        val oddSumArraySortedListIterator: Iterator[Long] = oddSumArraySorted.iterator\n\
    \        val evenArraySortedListIterator2: Iterator[Long] = evenArraySorted.iterator\n\
    \        val oddArraySortedListIterator2: Iterator[Long] = oddArraySorted.iterator\n\
    \        val evenSumArraySortedListIterator2: Iterator[Long] = evenSumArraySorted.iterator\n\
    \        val oddSumArraySortedListIterator2: Iterator[Long] = oddSumArraySorted.iterator\n\
    \        val evenArraySortedListIterator3: Iterator[Long] = evenArraySorted.iterator\n\
    \        val oddArraySortedListIterator3: Iterator[Long] = oddArraySorted.iterator\n\
    \        val evenSumArraySortedListIterator3: Iterator[Long] = evenSumArraySorted.iterator\n\
    \        val oddSumArraySortedListIterator3: Iterator[Long] = oddSumArraySorted.iterator\n\
    \        val evenArraySortedListIterator4: Iterator[Long] = evenArraySorted.iterator\n\
    \        val oddArraySortedListIterator4: Iterator[Long] = oddArraySorted.iterator\n\
    \        val evenSumArraySortedListIterator4: Iterator[Long] = evenSumArraySorted.iterator",
  "        val sumArray = array.foldLeft(0l.toLong)(_ + _)\n        val isOdd = sumArray\
    \ % 2l.toLong == 1l.toLong\n        val isEven = sumArray % 2l.toLong == 0l.toLong\n\
    \        if(isOdd) array.sortBy(_.toLong)\n        else array.sortBy(_.toLong.reverse)",
  "        val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n   \
    \     val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        val evenArraySum = evenArray.sum\n        val oddArraySum\
    \ = oddArray.sum\n        if(evenArraySum == oddArraySum) {\n            evenArray.sortWith(_\
    \ < _)\n        } else {\n            oddArray.sortWith(_ > _)\n        }", " \
    \       val sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n  \
    \      val isOdd = sumArray % 2\n        val isEven = sumArray % 2 != 0\n    \
    \    val sortedArray = array.sortWith(compare(isOdd, isEven))\n        if (isOdd)\
    \ sortedArray.reverse\n        else sortedArray", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a.compareTo(b) <\
    \ 0)\n        result.toList"]
stop_tokens:
- "\n    }\n"
