name: HumanEval_41_car_race_collision
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Imagine a road that's a perfectly straight infinitely long line.\n    //\
  \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
  \    // are driving right to left.   The two sets of cars start out being very far\
  \ from\n    // each other.  All cars move in the same speed.  Two cars are said\
  \ to collide\n    // when a car that's moving left to right hits a car that's moving\
  \ right to left.\n    // However, the cars are infinitely sturdy and strong; as\
  \ a result, they continue moving\n    // in their trajectory as if they did not\
  \ collide.\n    // This function outputs the number of such collisions.\n    def\
  \ carRaceCollision(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
  \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
  \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
  \ == (100l));\n    }\n\n}\n"
completions: ["        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val carsLeft = cars.takeRight(n)\n        val\
    \ carsRight = cars.dropRight(n)\n        val collisions = carsLeft.foldLeft(0)(_\
    \ + carsRight.foldLeft(0)(_ + collision(Vector.empty[Car], carsLeft.tail, carsRight.head)))\n\
    \        collisions", "        var collisions = 0\n        var cars = Vector.fill(n\
    \ / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero", "        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val collisions = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsLeft = mutable.ListBuffer.empty[Long]\n        val collisionsRight\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsLeft = cars.foldLeft(0)((acc,\
    \ i) => {\n            if (i % 2 == 0) {\n                collisionsLeft.append(acc)\n\
    \                collisionsLeft.append(i)\n                collisionsLeft.append(cars(i))\n\
    \                collisionsLeft.append(cars(i + 1))\n                collisionsLeft.append(cars(i\
    \ + 2))\n                collisionsLeft.append(cars(i + 3))\n                collisionsLeft.append(cars(i\
    \ + 4))\n                collisionsLeft.append(cars(i + 5))\n                collisionsLeft.append(cars(i\
    \ + 6))\n                collisionsLeft.append(cars(i + 7))\n                collisionsLeft.append(cars(i\
    \ + 8))\n                collisionsLeft.append(cars(i + 9))\n                collisionsLeft.append(cars(i\
    \ + 10))\n                collisionsLeft.append(cars(i + 11))\n              \
    \  collisionsLeft.append(cars(i + 12))\n                collisionsLeft.append(cars(i\
    \ + 13))\n                collisionsLeft.append(cars(i + 14))\n              \
    \  collisionsLeft.append(cars(i + 15))\n                collisionsLeft.append(cars(i\
    \ + 16))\n                collisionsLeft.append(cars(i + 17))\n              \
    \  collisionsLeft.append(cars(i + 18))\n                collisionsLeft.append(cars(i\
    \ + 19))\n                collisionsLeft.append(cars(i + 20))\n              \
    \  collisionsLeft.append(cars(i + 21))\n                collisionsLeft.append(cars(i\
    \ + 22))\n                collisionsLeft.append(cars(i + 23))\n              \
    \  collisionsLeft.append(cars(i + 24))\n                collisionsLeft.append(cars(i\
    \ + 25))\n                collisionsLeft.append(cars(i + 26))\n              \
    \  collisionsLeft.append(cars(i + 27))\n                collisionsLeft.append(cars(i\
    \ + 28))\n                collisionsLeft.append(cars(i + 29))\n              \
    \  collisionsLeft.append(cars(i + 30))\n                collisionsLeft.append(cars(i\
    \ + 31))\n                collisionsLeft.append(cars(i + 32))\n              \
    \  collisionsLeft.append(cars(i + 33))\n                collisionsLeft.append(cars(i\
    \ + 34))\n                collisionsLeft.append(cars(i + ", "        val cars\
    \ = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector(i, j)))\n        val\
    \ collisions = mutable.Set.empty[Long]\n        val collisionsSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        ", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collided = mutable.Set[Car]()\n        val\
    \ collisions = mutable.Set[Car]()\n        val collisionCount = 0\n        val\
    \ collisionsSoFar = 0\n        val carsLeft = cars.takeRight(n)\n        val carsRight\
    \ = cars.dropRight(n)\n        val carsLeft = carsLeft.zip(carsRight).map { case\
    \ (carLeft, carRight) => carLeft }\n        carsLeft.foreach(c => collided.add(c))\n\
    \        carsRight.foreach(c => collided.add(c))\n        carsLeft.foreach(c =>\
    \ {\n            collisionsSoFar += 1\n            collisionCount += carsLeft.count(c\
    \ => c.x == c.x && c.y == c.y)\n            collisionCount += carsRight.count(c\
    \ => c.x == c.x && c.y == c.y)\n        })\n        collisionsSoFar", "      \
    \  val collisions = mutable.Set[Long]()\n        val cars = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val ", "        val collisions = mutable.ListBuffer[Long]()\n       \
    \ val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.", "        val cars = Vector.tabulate(n)(i =>\
    \ Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = Vector.tabulate(n)(i\
    \ => cars(i))\n        val carsRight = Vector.tabulate(n)(i => cars(n))\n    \
    \    val collisions = mutable.ListBuffer[Long]()\n        val collisionsLeft =\
    \ mutable.ListBuffer[Long]()\n        val collisionsRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsLeft = carsLeft.zip(carsRight).filter(_._1.speed < _._1.speed).map(_._1).filter(_._2.speed\
    \ < _._2.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).filter(_._1.speed == _._2.speed).map(_._1).filter(_._2.speed\
    \ == _._1.speed).map(_._2).", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val carsLeft = cars.tail\n        val carsRight = cars.init\n\
    \        val carsCollisions = mutable.Set[Long]()\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsLeft = carsLeft.foldLeft(0)((acc, car) => acc + (car.zip(collisions)(car\
    \ => car._1.contains(car._2)).sum))\n        val collisionsRight = carsRight.foldLeft(0)((acc,\
    \ car) => acc + (car.zip(collisions)(car => car._1.contains(car._2)).sum))\n \
    \       val collisionsTotal = collisionsLeft + collisionsRight\n        val collisionsCollisions\
    \ = collisionsTotal.foldLeft(0)((acc, car) => acc + (car.zip(collisions)(car =>\
    \ car._1.contains(car._2)).sum))\n        collisionsCollisions", "        val\
    \ collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.",
  "        var collisions = 0\n        var cars = Vector.fill(n / 2)(Vector.zero)\n\
    \        cars(0) = Vector.unitX\n        cars(1) = Vector.unitY\n        cars(2)\
    \ = Vector.unitZ\n        cars(3) = Vector.unitX\n        cars(4) = Vector.unitY\n\
    \        cars(5) = Vector.unitZ\n        cars(6) = Vector.unitX\n        cars(7)\
    \ = Vector.unitY\n        cars(8) = Vector.unitZ\n        cars(9) = Vector.unitX\n\
    \        cars(10) = Vector.unitY\n        cars(11) = Vector.unitZ\n        cars(12)\
    \ = Vector.unitX\n        cars(13) = Vector.unitY\n        cars(14) = Vector.unitZ\n\
    \        cars(15) = Vector.unitX\n        cars(16) = Vector.unitY\n        cars(17)\
    \ = Vector.unitZ\n        cars(18) = Vector.unitX\n        cars(19) = Vector.unitY\n\
    \        cars(20) = Vector.unitZ\n        cars(21) = Vector.unitX\n        cars(22)\
    \ = Vector.unitY\n        cars(23) = Vector.unitZ\n        cars(24) = Vector.unitX\n\
    \        cars(25) = Vector.unitY\n        cars(26) = Vector.unitZ\n        cars(27)\
    \ = Vector.unitX\n        cars(28) = Vector.unitY\n        cars(29) = Vector.unitZ\n\
    \        cars(30) = Vector.unitX\n        cars(31) = Vector.unitY\n        cars(32)\
    \ = Vector.unitZ\n        cars(33) = Vector.unitX\n        cars(34) = Vector.unitY\n\
    \        cars(35) = Vector.unitZ\n        cars(36) = Vector.unitX\n        cars(37)\
    \ = Vector.unitY\n        cars(38) = Vector.unitZ\n        cars(39) = Vector.unitX\n\
    \        cars(40) = Vector.unitY\n        cars(41) = Vector.unitZ\n        cars(42)\
    \ = Vector.unitX\n        cars(43) = Vector.unitY\n        cars(44) = Vector.unitZ\n\
    \        cars(45) = Vector.unitX\n        cars(46) = Vector.unitY\n        cars(47)\
    \ = Vector.unitZ\n        cars(48) = Vector.unitX\n", "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(2), Vector.random(2), Vector.zero))\n        val collides\
    \ = mutable.HashSet[Car]()\n        val collide = mutable.HashMap[Car, Car]()\n\
    \        val collisions = mutable.HashSet[Car]()\n        val collision = mutable.HashMap[Car,\
    \ Car]()\n        val collisions = mutable.HashSet[Car]()\n        val collision\
    \ = mutable.HashMap[Car, Car]()\n        val collisions = mutable.HashSet[Car]()\n\
    \        val collision = mutable.HashMap[Car, Car]()\n        val collisions =\
    \ mutable.HashSet[Car]()\n        val collision = mutable.HashMap[Car, Car]()\n\
    \        val collisions = mutable.HashSet[Car]()\n        val collision = mutable.HashMap[Car,\
    \ Car]()\n        val collisions = mutable.HashSet[Car]()\n        val collision\
    \ = mutable.HashMap[Car, Car]()\n        val collisions = mutable.HashSet[Car]()\n\
    \        val collision = mutable.HashMap[Car, Car]()\n        val collisions =\
    \ mutable.HashSet[Car]()\n        val collision = mutable.HashMap[Car, Car]()\n\
    \        val collisions = mutable.HashSet[Car]()\n        val collision = mutable.HashMap[Car,\
    \ Car]()\n        val collisions = mutable.HashSet[Car]()\n        val collision\
    \ = mutable.HashMap[Car, Car]()\n        val collisions = mutable.HashSet[Car]()\n\
    \        val collision = mutable.HashMap[Car, Car]()\n        val collisions =\
    \ mutable.HashSet[Car]()\n        val collision = mutable.HashMap[Car, Car]()\n\
    \        val collisions = mutable.HashSet[Car]()\n        val collision = mutable.HashMap[Car,\
    \ Car]()\n        val collisions = mutable.HashSet[Car]()\n        val collision\
    \ = mutable.HashMap[Car, Car]()\n        val collisions = mutable.HashSet[Car]()\n\
    \        val collision = mutable.HashMap[Car, Car]()\n        val collisions =\
    \ mutable.HashSet[Car]()\n        val collision = mutable.HashMap[Car, Car]()\n\
    \        val collisions = mutable.HashSet[Car]()\n        val collision = mutable.HashMap[",
  "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n  \
    \      val collisions = mutable.Set[Long]()\n        val collisionsCount = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()\n\
    \        val collisionsCounts = mutable.Set[Long]()\n        val collisionsCounts\
    \ = mutable.Set[Long]()\n        val collisionsCounts = mutable.Set[Long]()",
  "        val cars = Array.fill(2*n)(new Car)\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.takeLeft(n)\n\
    \        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n\
    \        val collisionsLeft = carsLeft.foldLeft(0)(_ + carsLeft.forall(_.collidesWith(_)))\n\
    \        val collisionsRight = carsRight.foldLeft(0)(_ + carsRight.forall(_.collidesWith(_)))\n\
    \        collisions += collisionsLeft\n        collisions += collisionsRight\n\
    \        collisions.sum", "        val cars = Vector.tabulate(n)(i => i)\n   \
    \     val collisions = mutable.ListBuffer.empty[Long]\n        val carsLeft =\
    \ cars.tail\n        val carsRight = cars.init\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.init\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = carsLeft.tail\n\
    \        val carsRight = carsRight.tail\n        val carsLeft = ", "        val\
    \ cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val\
    \ collisions = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount2 = mutable.Set.empty[Long]\n        val collisionsCount3\
    \ = mutable.Set.empty[Long]\n        val collisionsCount4 = mutable.Set.empty[Long]\n\
    \        val collisionsCount5 = mutable.Set.empty[Long]\n        val collisionsCount6\
    \ = mutable.Set.empty[Long]\n        val collisionsCount7 = mutable.Set.empty[Long]\n\
    \        val collisionsCount8 = mutable.Set.empty[Long]\n        val collisionsCount9\
    \ = mutable.Set.empty[Long]\n        val collisionsCount10 = mutable.Set.empty[Long]\n\
    \        val collisionsCount11 = mutable.Set.empty[Long]\n        val collisionsCount12\
    \ = mutable.Set.empty[Long]\n        val collisionsCount13 = mutable.Set.empty[Long]\n\
    \        val collisionsCount14 = mutable.Set.empty[Long]\n        val collisionsCount15\
    \ = mutable.Set.empty[Long]\n        val collisionsCount16 = mutable.Set.empty[Long]\n\
    \        val collisionsCount17 = mutable.Set.empty[Long]\n        val collisionsCount18\
    \ = mutable.Set.empty[Long]\n        val collisionsCount19 = mutable.Set.empty[Long]\n\
    \        val collisionsCount20 = mutable.Set.empty[Long]\n        val collisionsCount21\
    \ = mutable.Set.empty[Long]\n        val collisionsCount22 = mutable.Set.empty[Long]\n\
    \        val collisionsCount23 = mutable.Set.empty[Long]\n        val collisionsCount24\
    \ = mutable.Set.empty[Long]\n        val collisionsCount25 = mutable.Set.empty[Long]\n\
    \        val collisionsCount26 = mutable.Set.empty[Long]\n        val collisionsCount27\
    \ = mutable.Set.empty[Long]\n        val collisionsCount28 = mutable.Set.empty[Long]\n\
    \        val collisionsCount29 = mutable.Set.empty[Long]\n        val collisionsCount30\
    \ = mutable.Set.empty[Long]\n        val collisionsCount31 = mutable.Set.empty[Long]\n\
    \        val collisionsCount32 = mutable.Set.empty[Long]\n        val collisionsCount33\
    \ = ", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i +\
    \ j))\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount3 = mutable.ListBuffer.empty[Long]\n        val collisionsCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount6 = mutable.ListBuffer.empty[Long]\n        val collisionsCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount9 = mutable.ListBuffer.empty[Long]\n        val collisionsCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount12 = mutable.ListBuffer.empty[Long]\n        val collisionsCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount14 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount15 = mutable.ListBuffer.empty[Long]\n        val collisionsCount16\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount17 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount18 = mutable.ListBuffer.empty[Long]\n        val collisionsCount19\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount20 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount21 = mutable.ListBuffer.empty[Long]\n        val collisionsCount22\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount23 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount24 = mutable.ListBuffer.empty[Long]\n        val collisionsCount25\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount26 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount27 = mutable.ListBuffer.empty[Long]\n        val collisionsCount28\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount29 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount30 = mutable.ListBuffer.empty[Long]\n        val collisionsCount3",
  "        val collisions = mutable.ListBuffer.empty[Long]\n        val cars = mutable.ListBuffer.fill(n)(new\
    \ Car)\n        val carsRight = mutable.ListBuffer.fill(n)(new Car)\n        val\
    \ carsLeft = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeft\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsLeftToRight = mutable.ListBuffer.fill(n)(new\
    \ Car)\n        val carsRightToLeftToRight = mutable.ListBuffer.fill(n)(new Car)\n\
    \        val carsRightToLeftToRightToLeft = mutable.ListBuffer.fill(n)(new Car)\n\
    \        val carsRightToLeftToRightToLeftToRight = mutable.ListBuffer.fill(n)(new\
    \ Car)\n        val carsRightToLeftToRightToLeftToRightToLeft = mutable.ListBuffer.fill(n)(new\
    \ Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRight = mutable.ListBuffer.fill(n)(new\
    \ Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeft = mutable.ListBuffer.fill(n)(new\
    \ Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeft\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeft",
  "        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed = mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(",
  "        val cars = Vector.tabulate(n)(i => new Car(Vector.random(100), Vector.random(100)))\n\
    \        val collides = mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n\
    \        val collisionsCount = mutable.Set[Car]()\n        val collisionsCount2\
    \ = mutable.Set[Car]()\n        val collisionsCount3 = mutable.Set[Car]()\n  \
    \      val collisionsCount4 = mutable.Set[Car]()\n        val collisionsCount5\
    \ = mutable.Set[Car]()\n        val collisionsCount6 = mutable.Set[Car]()\n  \
    \      val collisionsCount7 = mutable.Set[Car]()\n        val collisionsCount8\
    \ = mutable.Set[Car]()\n        val collisionsCount9 = mutable.Set[Car]()\n  \
    \      val collisionsCount10 = mutable.Set[Car]()\n        val collisionsCount11\
    \ = mutable.Set[Car]()\n        val collisionsCount12 = mutable.Set[Car]()\n \
    \       val collisionsCount13 = mutable.Set[Car]()\n        val collisionsCount14\
    \ = mutable.Set[Car]()\n        val collisionsCount15 = mutable.Set[Car]()\n \
    \       val collisionsCount16 = mutable.Set[Car]()\n        val collisionsCount17\
    \ = mutable.Set[Car]()\n        val collisionsCount18 = mutable.Set[Car]()\n \
    \       val collisionsCount19 = mutable.Set[Car]()\n        val collisionsCount20\
    \ = mutable.Set[Car]()\n        val collisionsCount21 = mutable.Set[Car]()\n \
    \       val collisionsCount22 = mutable.Set[Car]()\n        val collisionsCount23\
    \ = mutable.Set[Car]()\n        val collisionsCount24 = mutable.Set[Car]()\n \
    \       val collisionsCount25 = mutable.Set[Car]()\n        val collisionsCount26\
    \ = mutable.Set[Car]()\n        val collisionsCount27 = mutable.Set[Car]()\n \
    \       val collisionsCount28 = mutable.Set[Car]()\n        val collisionsCount29\
    \ = mutable.Set[Car]()\n        val collisionsCount30 = mutable.Set[Car]()\n \
    \       val collisionsCount31 = mutable.Set[Car]()\n        val collisionsCount32",
  "        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val speedLimit = mutable.ListBuffer[Double]()\n        val speedLimits\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit2 = mutable.ListBuffer[Double]()\n\
    \        val speedLimit2s = mutable.ListBuffer[Double]()\n        val speedLimit3\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit3s = mutable.ListBuffer[Double]()\n\
    \        val speedLimit4 = mutable.ListBuffer[Double]()\n        val speedLimit4s\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit5 = mutable.ListBuffer[Double]()\n\
    \        val speedLimit5s = mutable.ListBuffer[Double]()\n        val speedLimit6\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit6s = mutable.ListBuffer[Double]()\n\
    \        val speedLimit7 = mutable.ListBuffer[Double]()\n        val speedLimit7s\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit8 = mutable.ListBuffer[Double]()\n\
    \        val speedLimit8s = mutable.ListBuffer[Double]()\n        val speedLimit9\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit9s = mutable.ListBuffer[Double]()\n\
    \        val speedLimit10 = mutable.ListBuffer[Double]()\n        val speedLimit10s\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit11 = mutable.ListBuffer[Double]()\n\
    \        val speedLimit11s = mutable.ListBuffer[Double]()\n        val speedLimit12\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit12s = mutable.ListBuffer[Double]()\n\
    \        val speedLimit13 = mutable.ListBuffer[Double]()\n        val speedLimit13s\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit14 = mutable.ListBuffer[Double]()\n\
    \        val speedLimit14s = mutable.ListBuffer[Double]()\n        val speedLimit15\
    \ = mutable.ListBuffer[Double]()\n        val speedLimit15s = mutable.ListBuffer[Double]()\n\
    \        val speedLimit16 = mutable.ListBuffer[Double]()\n        val speedLimit16s\
    \ = mutable.", "        val cars = Vector.tabulate(n)(i => i)\n        val carsLeft\
    \ = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val\
    \ collisions = carsLeft.zip(carsRight).count(_._1 == _._1)\n        collisions",
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collides = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = ", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(Vector.zero),\
    \ Vector.zero))\n        val collisions = mutable.ListBuffer.empty[Long]\n   \
    \     val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collides = mutable.Set.empty[Car]\n      \
    \  val collide = mutable.Set.empty[Car]\n        val collide2 = mutable.Set.empty[Car]\n\
    \        val collide3 = mutable.Set.empty[Car]\n        val collide4 = mutable.Set.empty[Car]\n\
    \        val collide5 = mutable.Set.empty[Car]\n        val collide6 = mutable.Set.empty[Car]\n\
    \        val collide7 = mutable.Set.empty[Car]\n        val collide8 = mutable.Set.empty[Car]\n\
    \        val collide9 = mutable.Set.empty[Car]\n        val collide10 = mutable.Set.empty[Car]\n\
    \        val collide11 = mutable.Set.empty[Car]\n        val collide12 = mutable.Set.empty[Car]\n\
    \        val collide13 = mutable.Set.empty[Car]\n        val collide14 = mutable.Set.empty[Car]\n\
    \        val collide15 = mutable.Set.empty[Car]\n        val collide16 = mutable.Set.empty[Car]\n\
    \        val collide17 = mutable.Set.empty[Car]\n        val collide18 = mutable.Set.empty[Car]\n\
    \        val collide19 = mutable.Set.empty[Car]\n        val collide20 = mutable.Set.empty[Car]\n\
    \        val collide21 = mutable.Set.empty[Car]\n        val collide22 = mutable.Set.empty[Car]\n\
    \        val collide23 = mutable.Set.empty[Car]\n        val collide24 = mutable.Set.empty[Car]\n\
    \        val collide25 = mutable.Set.empty[Car]\n        val collide26 = mutable.Set.empty[Car]\n\
    \        val collide27 = mutable.Set.empty[Car]\n        val collide28 = mutable.Set.empty[Car]\n\
    \        val collide29 = mutable.Set.empty[Car]\n        val collide30 = mutable.Set.empty[Car]\n\
    \        val collide31 = mutable.Set.empty[Car]\n        val collide32 = mutable.Set.empty[Car]\n\
    \        val collide33 = mutable.Set.empty[Car]\n        val collide34 = mutable.Set.empty[Car]\n\
    \        val collide35 = mut", "        val cars = Array.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val carsLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n        val carsRight\
    \ = Array.fill(n / 2)(mutable.Queue[Int]())\n        val collisions = mutable.Queue[Int]()\n\
    \        val speed = mutable.Queue[Int]()\n        val speedLeft = mutable.Queue[Int]()\n\
    \        val speedRight = mutable.Queue[Int]()\n        val collisionsLeft = mutable.Queue[Int]()\n\
    \        val collisionsRight = mutable.Queue[Int]()\n        val speedLeft = mutable.Queue[Int]()\n\
    \        val speedRight = mutable.Queue[Int]()\n        val collisionsLeft = mutable.Queue[Int]()\n\
    \        val collisionsRight = mutable.Queue[Int]()\n        val speedLeft = mutable.Queue[Int]()\n\
    \        val speedRight = mutable.Queue[Int]()\n        val collisionsLeft = mutable.Queue[Int]()\n\
    \        val collisionsRight = mutable.Queue[Int]()\n        val speedLeft = mutable.Queue[Int]()\n\
    \        val speedRight = mutable.Queue[Int]()\n        val collisionsLeft = mutable.Queue[Int]()\n\
    \        val collisionsRight = mutable.Queue[Int]()\n        val speedLeft = mutable.Queue[Int]()\n\
    \        val speedRight = mutable.Queue[Int]()\n        val collisionsLeft = mutable.Queue[Int]()\n\
    \        val collisionsRight = mutable.Queue[Int]()\n        val speedLeft = mutable.Queue[Int]()\n\
    \        val speedRight = mutable.Queue[Int]()\n        val collisionsLeft = mutable.Queue[Int]()\n\
    \        val collisionsRight = mutable.Queue[Int]()\n        val speedLeft = mutable.Queue[Int]()\n\
    \        val speedRight = mutable.Queue[Int]()\n        val collisionsLeft = mutable.Queue[Int]()\n\
    \        val collisionsRight = mutable.Queue[Int]()\n        val speedLeft = mutable.Queue[Int]()\n\
    \        val speedRight = mutable.Queue[Int]()\n        val collisionsLeft = mutable.Queue[Int]()\n\
    \        val collisionsRight = mutable.Queue[Int]()\n        val speedLeft = mutable.Queue[Int]()\n\
    \        val speed", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n    \
    \    val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mut", "        val\
    \ cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to n).map(j\
    \ => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n        val\
    \ collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar =\
    \ mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = ", "        val\
    \ cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val\
    \ collisions = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarIter = collisionsSoFar.iterator\n        val collisionsSoFarIterIter\
    \ = collisionsSoFarIter.iterator\n        val collisionsSoFarIterIterIter = collisionsSoFarIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIter = collisionsSoFarIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIter = collisionsSoFarIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter =\
    \ collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = collisionsSoFarIterIter", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill", "        val cars = Vector.tabulate(n)(i => i)\n\
    \        val collisions = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n     \
    \   val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n     \
    \   val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar", " \
    \       val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val car = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collision = mutable.ListBuffer[Long]()\n\
    \        val car = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val car = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collision = mutable.ListBuffer[Long]()\n\
    \        val car = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val car = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collision = mutable.ListBuffer[Long]()\n\
    \        val car = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val car = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collision = mut",
  '        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k
    => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o
    => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s
    => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w
    => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a
    => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e
    => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i
    => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m
    => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q
    => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u
    => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y
    => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c
    => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g
    => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k
    => Vector.tabulate(n)(l => Vector.tabul', "        val collisions = mutable.Set[Long]()\n\
    \        val cars = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n\
    \        val carsRight = mutable.Set[Long]()\n        val ", "        val cars\
    \ = Vector.tabulate(n)(i => Car(Vector.random(2), Vector.random(2)))\n       \
    \ val collides = mutable.Set[Car]()\n        val collide = mutable.Set[Car]()\n\
    \        val collideLeft = mutable.Set[Car]()\n        val collideRight = mutable.Set[Car]()\n\
    \        val collideLeft = mutable.Set[Car]()\n        val collideRight = mutable.Set[Car]()\n\
    \        val collideLeft = mutable.Set[Car]()\n        val collideRight = mutable.Set[Car]()\n\
    \        val collideLeft = mutable.Set[Car]()\n        val collideRight = mutable.Set[Car]()\n\
    \        val collideLeft = mutable.Set[Car]()\n        val collideRight = mutable.Set[Car]()\n\
    \        val collideLeft = mutable.Set[Car]()\n        val collideRight = mutable.Set[Car]()\n\
    \        val collideLeft = mutable.Set[Car]()\n        val collideRight = mutable.Set[Car]()\n\
    \        val collideLeft = mutable.Set[Car]()\n        val collideRight = mutable.Set[Car]()\n\
    \        val collideLeft = mutable.Set[Car]()\n        val collideRight = mutable.Set[Car]()\n\
    \        val collideLeft = mutable.Set[Car]()\n        val collideRight = mutable.Set[Car]()\n\
    \        val collideLeft = mutable.Set[Car]()\n        val collideRight = mutable.Set[Car]()\n\
    \        val collideLeft = mutable.Set[Car]()\n        val collideRight = mutable.Set[Car]()\n\
    \        val collideLeft = mutable.Set[Car]()\n        val collideRight = mutable.Set[Car]()\n\
    \        val collideLeft = mutable.Set[Car]()\n        val collideRight = mutable.Set[Car]()\n\
    \        val collideLeft = mutable.Set[Car]()\n        val collideRight = mutable.Set[Car]()\n\
    \        val collideLeft = mutable.Set[Car]()\n        val collideRight = mutable.Set[Car]()\n\
    \        val collideLeft = mutable.Set[Car]()\n        val collideRight = mutable.Set[Car]()\n\
    \        ", "        val collisions = mutable.ListBuffer[Long]()\n        val\
    \ cars = mutable.ListBuffer[Int]()\n        val speed = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer", "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(10), Vector.random(10), Vector.random(10)))\n        val\
    \ carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n  \
    \      val collisions = carsLeft.zip(carsRight).filter(_._1.collidesWith(_._2)).length\n\
    \        collisions", "        val collisions = mutable.ListBuffer[Long]()\n \
    \       val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.", "        val cars = mutable.ListBuffer(1 to\
    \ n).map(i => mutable.ListBuffer(1 to n).map(j => Car(i, j)))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsRight = mutable.ListBuffer[Long]()\n        val collisionsBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothRight = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBoth = mutable.ListBuffer[Long]()\n       \
    \ val collisionsBothBothBothBothLeft = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothRight\
    \ = mutable.", "        var collisions = 0\n        var cars = Vector.fill(n /\
    \ 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n  \
    \      var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft =\
    \ Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft\
    \ = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight\
    \ = Vector.fill(n / 2)(Vector.zero", "        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.foldLeft(0)((acc,\
    \ car) => acc + (carsRight.exists(c => c.equals(car))))\n        collisions",
  "        val cars = mutable.ListBuffer[Int]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount = mutable.ListBuffer[Int]()\n        val collisionsCount2\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount3 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount4 = mutable.ListBuffer[Int]()\n        val collisionsCount5\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount6 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount7 = mutable.ListBuffer[Int]()\n        val collisionsCount8\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount9 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount10 = mutable.ListBuffer[Int]()\n        val collisionsCount11\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount12 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount13 = mutable.ListBuffer[Int]()\n        val collisionsCount14\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount15 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount16 = mutable.ListBuffer[Int]()\n        val collisionsCount17\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount18 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount19 = mutable.ListBuffer[Int]()\n        val collisionsCount20\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount21 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount22 = mutable.ListBuffer[Int]()\n        val collisionsCount23\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount24 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount25 = mutable.ListBuffer[Int]()\n        val collisionsCount26\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount27 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount28 = mutable.ListBuffer[Int]()\n        val collisionsCount29\
    \ = mutable.ListBuffer[Int]()\n        val collisionsCount30 = mutable.ListBuffer[Int]()\n\
    \        val collisionsCount31 = mutable.ListBuffer[Int]()\n        val collision",
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount2 = mutable.Set.empty[Long]\n\
    \        val collisionsCount3 = mutable.Set.empty[Long]\n        val collisionsCount4\
    \ = mutable.Set.empty[Long]\n        val collisionsCount5 = mutable.Set.empty[Long]\n\
    \        val collisionsCount6 = mutable.Set.empty[Long]\n        val collisionsCount7\
    \ = mutable.Set.empty[Long]\n        val collisionsCount8 = mutable.Set.empty[Long]\n\
    \        val collisionsCount9 = mutable.Set.empty[Long]\n        val collisionsCount10\
    \ = mutable.Set.empty[Long]\n        val collisionsCount11 = mutable.Set.empty[Long]\n\
    \        val collisionsCount12 = mutable.Set.empty[Long]\n        val collisionsCount13\
    \ = mutable.Set.empty[Long]\n        val collisionsCount14 = mutable.Set.empty[Long]\n\
    \        val collisionsCount15 = mutable.Set.empty[Long]\n        val collisionsCount16\
    \ = mutable.Set.empty[Long]\n        val collisionsCount17 = mutable.Set.empty[Long]\n\
    \        val collisionsCount18 = mutable.Set.empty[Long]\n        val collisionsCount19\
    \ = mutable.Set.empty[Long]\n        val collisionsCount20 = mutable.Set.empty[Long]\n\
    \        val collisionsCount21 = mutable.Set.empty[Long]\n        val collisionsCount22\
    \ = mutable.Set.empty[Long]\n        val collisionsCount23 = mutable.Set.empty[Long]\n\
    \        val collisionsCount24 = mutable.Set.empty[Long]\n        val collisionsCount25\
    \ = mutable.Set.empty[Long]\n        val collisionsCount26 = mutable.Set.empty[Long]\n\
    \        val collisionsCount27 = mutable.Set.empty[Long]\n        val collisionsCount28\
    \ = mutable.Set.empty[Long]\n        val collisionsCount29 = mutable.Set.empty[Long]\n\
    \        val collisionsCount30 = mutable.Set.empty[Long]\n        val collisionsCount31\
    \ = mutable.Set.empty[Long]\n        val collisionsCount32 = mutable.Set.empty[Long]\n\
    \        val collisionsCount", "        val cars = Array.fill(2 * n)(0)\n    \
    \    val collisions = mutable.ListBuffer[Long]()\n        val speed = Array.fill(2\
    \ * n)(0)\n        val speeds = Array.fill(2 * n)(0)\n        val speedsDiff =\
    \ Array.fill(2 * n)(0)\n        val speedsDiffs = Array.fill(2 * n)(0)\n     \
    \   val speedsDiffsDiff = Array.fill(2 * n)(0)\n        val speedsDiffsDiffs =\
    \ Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiff = Array.fill(2 * n)(0)\n\
    \        val speedsDiffsDiffsDiffs = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiff\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffs = Array.fill(2\
    \ * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiff = Array.fill(2 * n)(0)\n\
    \        val speedsDiffsDiffsDiffsDiffsDiffs = Array.fill(2 * n)(0)\n        val\
    \ speedsDiffsDiffsDiffsDiffsDiffsDiff = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffs\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiff\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiffs\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiff\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffs\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiff\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffs\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiff\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffs\
    \ = Array.fill(2 * n)(0)\n        val speedsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiffsDiff\
    \ = ", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i +\
    \ j))\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val collisions = mutable.Set[Long]()\n        val collisionsLeft = carsLeft.foldLeft(0)((acc,\
    \ car) => acc + (car.zip(collisions).find(_._1 == car._1).getOrElse(0)))\n   \
    \     val collisionsRight = carsRight.foldLeft(0)((acc, car) => acc + (car.zip(collisions).find(_._1\
    \ == car._1).getOrElse(0)))\n        collisions += collisionsLeft + collisionsRight\n\
    \        collisions.sum", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collides = mutable.ListBuffer.empty[Long]\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount3 = mutable.ListBuffer.empty[Long]\n        val collisionsCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount6 = mutable.ListBuffer.empty[Long]\n        val collisionsCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount9 = mutable.ListBuffer.empty[Long]\n        val collisionsCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount12 = mutable.ListBuffer.empty[Long]\n        val collisionsCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount14 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount15 = mutable.ListBuffer.empty[Long]\n        val collisionsCount16\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount17 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount18 = mutable.ListBuffer.empty[Long]\n        val collisionsCount19\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount20 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount21 = mutable.ListBuffer.empty[Long]\n        val collisionsCount22\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount23 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount24 = mutable.ListBuffer.empty[Long]\n        val collisionsCount25\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount26 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount27 = mutable.ListBuffer.empty[Long]\n        val collisionsCount28\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount29 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount30", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val collisions = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = 0\n        val collisionsCount2 = collisionsCount\n        val collisionsCount3\
    \ = collisionsCount2\n        val collisionsCount4 = collisionsCount3\n      \
    \  val collisionsCount5 = collisionsCount4\n        val collisionsCount6 = collisionsCount5\n\
    \        val collisionsCount7 = collisionsCount6\n        val collisionsCount8\
    \ = collisionsCount7\n        val collisionsCount9 = collisionsCount8\n      \
    \  val collisionsCount10 = collisionsCount9\n        val collisionsCount11 = collisionsCount10\n\
    \        val collisionsCount12 = collisionsCount11\n        val collisionsCount13\
    \ = collisionsCount12\n        val collisionsCount14 = collisionsCount13\n   \
    \     val collisionsCount15 = collisionsCount14\n        val collisionsCount16\
    \ = collisionsCount15\n        val collisionsCount17 = collisionsCount16\n   \
    \     val collisionsCount18 = collisionsCount17\n        val collisionsCount19\
    \ = collisionsCount18\n        val collisionsCount20 = collisionsCount19\n   \
    \     val collisionsCount21 = collisionsCount20\n        val collisionsCount22\
    \ = collisionsCount21\n        val collisionsCount23 = collisionsCount22\n   \
    \     val collisionsCount24 = collisionsCount23\n        val collisionsCount25\
    \ = collisionsCount24\n        val collisionsCount26 = collisionsCount25\n   \
    \     val collisionsCount27 = collisionsCount26\n        val collisionsCount28\
    \ = collisionsCount27\n        val collisionsCount29 = collisionsCount28\n   \
    \     val collisionsCount30 = collisionsCount29\n        val collisionsCount31\
    \ = collisionsCount30\n        val collisionsCount32 = collisionsCount31\n   \
    \     val collisionsCount33 = collisionsCount32\n        val collisionsCount34\
    \ = collisionsCount33\n        val collisionsCount35 = collisionsCount34\n   \
    \     val collisionsCount36 = collisionsCount35\n        val collisionsCount37\
    \ = collisionsCount36\n        val collisionsCount38 = collisionsCount37\n   \
    \     val collisionsCount39 = collisionsCount38\n        val collisionsCount40\
    \ = collisionsCount39\n        val collisionsCount41 = collisionsCount40", " \
    \       val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer",
  "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n  \
    \      val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val collisions = carsLeft.zip(carsRight).filter(_._1 == _._2).length\n\
    \        collisions", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(10),\
    \ Vector.random(10)))\n        val carsLeft = cars.filter(_.p1.x < _.p2.x)\n \
    \       val carsRight = cars.filter(_.p1.x > _.p2.x)\n        val carsCollisions\
    \ = carsLeft.filter(_.p1.x == _.p2.x).length + carsRight.filter(_.p1.x == _.p2.x).length\n\
    \        carsCollisions", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val carsLeft = cars.takeRight(n)\n        val carsRight\
    \ = cars.dropRight(n)\n        val collisions = carsLeft.zip(carsRight).filter(_._1._1\
    \ == _._1._2).length\n        collisions", "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.HashSet[Car]()\n\
    \        val collisions = mutable.HashSet[Car]()\n        val collisionsSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFar = mutable.HashSet[Car]()\n\
    \        val collisionsSoFarSoFarSoFar = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar =\
    \ mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.HashSet", '        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j
    => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n
    => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r
    => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v
    => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z
    => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d
    => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h
    => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l
    => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p
    => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t
    => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x
    => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b
    => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f
    => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j
    => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul', "        val\
    \ cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n    \
    \    val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n      \
    \  val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]", "        var count = 0\n        var cars\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRight = scala.collection.mutable.ListBuffer[Int]()", "      \
    \  val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n      \
    \  val collisions = mutable.Set[Long]()\n        val collisionsCount = mutable.Set[Long]()\n\
    \        val collisionsCount2 = mutable.Set[Long]()\n        val collisionsCount3\
    \ = mutable.Set[Long]()\n        val collisionsCount4 = mutable.Set[Long]()\n\
    \        val collisionsCount5 = mutable.Set[Long]()\n        val collisionsCount6\
    \ = mutable.Set[Long]()\n        val collisionsCount7 = mutable.Set[Long]()\n\
    \        val collisionsCount8 = mutable.Set[Long]()\n        val collisionsCount9\
    \ = mutable.Set[Long]()\n        val collisionsCount10 = mutable.Set[Long]()\n\
    \        val collisionsCount11 = mutable.Set[Long]()\n        val collisionsCount12\
    \ = mutable.Set[Long]()\n        val collisionsCount13 = mutable.Set[Long]()\n\
    \        val collisionsCount14 = mutable.Set[Long]()\n        val collisionsCount15\
    \ = mutable.Set[Long]()\n        val collisionsCount16 = mutable.Set[Long]()\n\
    \        val collisionsCount17 = mutable.Set[Long]()\n        val collisionsCount18\
    \ = mutable.Set[Long]()\n        val collisionsCount19 = mutable.Set[Long]()\n\
    \        val collisionsCount20 = mutable.Set[Long]()\n        val collisionsCount21\
    \ = mutable.Set[Long]()\n        val collisionsCount22 = mutable.Set[Long]()\n\
    \        val collisionsCount23 = mutable.Set[Long]()\n        val collisionsCount24\
    \ = mutable.Set[Long]()\n        val collisionsCount25 = mutable.Set[Long]()\n\
    \        val collisionsCount26 = mutable.Set[Long]()\n        val collisionsCount27\
    \ = mutable.Set[Long]()\n        val collisionsCount28 = mutable.Set[Long]()\n\
    \        val collisionsCount29 = mutable.Set[Long]()\n        val collisionsCount30\
    \ = mutable.Set[Long]()\n        val collisionsCount31 = mutable.Set[Long]()\n\
    \        val collisionsCount32 = mutable.Set[Long]()\n        val collisionsCount33\
    \ = ", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collisionsSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val\
    \ collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n", "        val collisions = 0\n        val cars\
    \ = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1 to n).map(j =>\
    \ new Car(i, j)))\n        val carsLeft = mutable.ArrayBuffer(1 to n).map(i =>\
    \ mutable.ArrayBuffer(1 to n).map(j => new Car(i, j)))\n        val carsRight\
    \ = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1 to n).map(j =>\
    \ new Car(i, j)))\n        val carsCollisions = mutable.ArrayBuffer(1 to n).map(i\
    \ => mutable.ArrayBuffer(1 to n).map(j => new Car(i, j)))\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1 to n).map(j =>\
    \ new Car(i, j)))\n        val carsCollisionsRight = mutable.ArrayBuffer(1 to\
    \ n).map(i => mutable.ArrayBuffer(1 to n).map(j => new Car(i, j)))\n        val\
    \ carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1\
    \ to n).map(j => new Car(i, j)))\n        val carsCollisionsRight = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => new Car(i, j)))\n      \
    \  val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1\
    \ to n).map(j => new Car(i, j)))\n        val carsCollisionsRight = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => new Car(i, j)))\n      \
    \  val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1\
    \ to n).map(j => new Car(i, j)))\n        val carsCollisionsRight = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => new Car(i, j)))\n      \
    \  val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1\
    \ to n).map(j => new Car(i, j)))\n        val carsCollisionsRight = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => new Car(i, j)))\n      \
    \  val carsCollisionsLeft = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1\
    \ to n).map(j => new Car(i, j)))\n        val carsCollisionsRight = mutable.ArrayBuffer(1\
    \ to n", "        val collisions = 0\n        val cars = mutable.ListBuffer(1\
    \ to n).reverse\n        val carsLeft = mutable.ListBuffer(1 to n).reverse\n \
    \       val carsRight = mutable.ListBuffer(1 to n).reverse\n        val carsLeft\
    \ = carsLeft.drop(1).take(n)\n        val carsRight = carsRight.drop(1).take(n)\n\
    \        val carsLeft = carsLeft.take(n)\n        val carsRight = carsRight.take(n)\n\
    \        val carsLeft = carsLeft.take(n)\n        val carsRight = carsRight.take(n)\n\
    \        cars.foreach { car =>\n            carsLeft.foreach { carLeft =>\n  \
    \              carsRight.foreach { carRight =>\n                    val distanceLeft\
    \ = carLeft.x - car.x\n                    val distanceRight = carRight.x - car.x\n\
    \                    val distanceDiff = distanceRight - distanceLeft\n       \
    \             val speedLeft = carLeft.speed\n                    val speedRight\
    \ = carRight.speed\n                    val speedDiff = speedRight - speedLeft\n\
    \                    val speedDiffSquared = speedDiff * speedDiff\n          \
    \          val speedDiffSquaredDiff = speedDiffSquared - speedDiff\n         \
    \           if (distanceDiff < 0 && speedDiffSquared < speedDiffSquaredDiff) {\n\
    \                        collisions += 1\n                    }\n            \
    \    }\n            }\n        }\n        collisions", "        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFar\
    \ = ", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = mutable.Set.empty[Long]\n        val collisionsCount2 = mutable.Set.empty[Long]\n\
    \        val collisionsCount3 = mutable.Set.empty[Long]\n        val collisionsCount4\
    \ = mutable.Set.empty[Long]\n        val collisionsCount5 = mutable.Set.empty[Long]\n\
    \        val collisionsCount6 = mutable.Set.empty[Long]\n        val collisionsCount7\
    \ = mutable.Set.empty[Long]\n        val collisionsCount8 = mutable.Set.empty[Long]\n\
    \        val collisionsCount9 = mutable.Set.empty[Long]\n        val collisionsCount10\
    \ = mutable.Set.empty[Long]\n        val collisionsCount11 = mutable.Set.empty[Long]\n\
    \        val collisionsCount12 = mutable.Set.empty[Long]\n        val collisionsCount13\
    \ = mutable.Set.empty[Long]\n        val collisionsCount14 = mutable.Set.empty[Long]\n\
    \        val collisionsCount15 = mutable.Set.empty[Long]\n        val collisionsCount16\
    \ = mutable.Set.empty[Long]\n        val collisionsCount17 = mutable.Set.empty[Long]\n\
    \        val collisionsCount18 = mutable.Set.empty[Long]\n        val collisionsCount19\
    \ = mutable.Set.empty[Long]\n        val collisionsCount20 = mutable.Set.empty[Long]\n\
    \        val collisionsCount21 = mutable.Set.empty[Long]\n        val collisionsCount22\
    \ = mutable.Set.empty[Long]\n        val collisionsCount23 = mutable.Set.empty[Long]\n\
    \        val collisionsCount24 = mutable.Set.empty[Long]\n        val collisionsCount25\
    \ = mutable.Set.empty[Long]\n        val collisionsCount26 = mutable.Set.empty[Long]\n\
    \        val collisionsCount27 = mutable.Set.empty[Long]\n        val collisionsCount28\
    \ = mutable.Set.empty[Long]\n        val collisionsCount29 = mutable.Set.empty[Long]\n\
    \        val collisionsCount30 = mutable.Set.empty[Long]\n        val collisionsCount31\
    \ = mutable.Set.empty[Long]\n        val collisionsCount32 = mutable.Set.empty[Long]\n\
    \        val collisionsCount", "        val cars = mutable.ListBuffer[Int]()\n\
    \        val collisions = mutable.ListBuffer[Int]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val collisions = mutable.ListBuffer[Int]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mut", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val carsLeft = cars.takeRight(n)\n        val carsRight\
    \ = cars.dropRight(n)\n        val carsCollisions = carsLeft.foldLeft(0)((acc,\
    \ car) => acc + (carsRight.contains(car) ? 1 : 0))\n        carsCollisions", " \
    \       val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collisionsSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarIter = collisionsSoFar.iterator\n\
    \        val collisionsSoFarIterIter = collisionsSoFarIter.iterator\n        val\
    \ collisionsSoFarIterIterIter = collisionsSoFarIterIter.iterator\n        val\
    \ collisionsSoFarIterIterIterIter = collisionsSoFarIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIter = collisionsSoFarIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter =\
    \ collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = collisionsSoFar", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n   \
    \     val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisions = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.", "        val cars = Vector.tabulate(n)(i =>\
    \ Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = cars.takeRight(n)\n\
    \        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.zip(carsRight).count(_._1.x\
    \ == _._1.y)\n        collisions", "        var collisions = 0\n        var cars\
    \ = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l\
    \ => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p\
    \ => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t\
    \ => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x\
    \ => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b\
    \ => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f\
    \ => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n\
    \ => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r\
    \ => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v\
    \ => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z\
    \ => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d\
    \ => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h\
    \ => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l\
    \ => Vector", "        val cars = mutable.ListBuffer[Long]()\n        val carsLeft\
    \ = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsCollision = mutable.ListBuffer[Long]()\n        val carsCollisionLeft\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionRight = mutable.ListBuffer[Long]()\n\
    \        val carsCollisionCollision = mutable.ListBuffer[Long]()\n        val\
    \ carsCollisionCollisionLeft = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionRight\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollision =\
    \ mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionLeft\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionRight\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollision\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionLeft\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionRight\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollision\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionLeft\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionRight\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollision\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionLeft\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionRight\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionCollision\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionCollisionLeft\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionCollisionRight\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionCollision\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionCollisionLeft\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionCollisionRight\
    \ = mutable.ListBuffer[Long]()\n        val carsCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollision\
    \ = mutable.ListBuffer[Long]()", "        val cars = Vector.tabulate(n)(i => i)\n\
    \        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val collisions = carsLeft.zip(carsRight).filter(_._1 == _._2).length\n\
    \        collisions", "        val cars = mutable.ListBuffer[Long]()\n       \
    \ val collisions = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.", "        val cars = Vector.tabulate(n)(i =>\
    \ Car(Vector.random(100), Vector.random(100)))\n        val collided = mutable.Set.empty[Car]\n\
    \        val collisions = mutable.Set.empty[Car]\n        val collisionCount =\
    \ 0\n        val carsLeft = cars.takeWhile(_ => !collided.contains(_))\n     \
    \   val carsRight = cars.dropWhile(_ => !collided.contains(_))\n        carsLeft.foreach(c\
    \ => collided += c)\n        carsRight.foreach(c => collided += c)\n        carsLeft.foreach(c\
    \ => {\n            collisions += c\n            collisionCount += 1\n       \
    \ })\n        carsRight.foreach(c => {\n            collisions += c\n        \
    \    collisionCount += 1\n        })\n        collisionCount", "        val cars\
    \ = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n   \
    \     val collides = mutable.Set.empty[Long]\n        val collide = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collision = mutable.Set.empty[Long]\n\
    \        val ", "        val cars = mutable.ListBuffer[Int]()\n        val carsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisions = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsBoth = mutable.ListBuffer[Int]()\n        val carsCollisionsBothLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsBothRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsBothBothLeft = mutable.ListBuffer[Int]()\n        val\
    \ carsCollisionsBothRight = mutable.ListBuffer[Int]()\n        val carsCollisionsBothLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsBothRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsBothRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsBothRight = mutable.ListBuffer[Int]()\n        val\
    \ carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsBothRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsBothRight = mutable.ListBuffer[Int]()\n        val\
    \ carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsBothRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsBothRight = mutable.ListBuffer[Int]()\n        val\
    \ carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsBothRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsBothRight = mutable.ListBuffer[Int]()\n        val\
    \ carsCollisionsBothLeft = mutable.ListBuffer[Int]()\n        val ", "       \
    \ val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collided = mutable.Set.empty[Car]\n        val collisions = mutable.Set.empty[Car]\n\
    \        val collisionsCount = mutable.Set.empty[Car]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]", "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.ListBuffer.empty[Long]\n\
    \        val collide = mutable.ListBuffer.empty[Long]\n        val collisions\
    \ = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCount = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[Long]\n        val collisionCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionCounts = mutable.ListBuffer.empty[Long]\n\
    \        val collisionCounts = mutable.ListBuffer.empty[", "        val collisions\
    \ = mutable.Set[Long]()\n        val cars = mutable.Set[Long]()\n        val carsLeft\
    \ = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n       \
    \ val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n\
    \        val ", "        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1\
    \ to n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n        val\
    \ collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSo", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.",
  "        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to\
    \ n).map(j => new Car(i, j)))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer", "        val cars = mutable.ArrayBuffer.fill(n)(new Car)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(new Car)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(new Car)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val ", " \
    \       val cars = Vector.tabulate(n)(i => Car(Vector.random(2), Vector.random(2),\
    \ Vector.random(2)))\n        val collided = mutable.Set[Car]()\n        val colliding\
    \ = mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n        val\
    \ collisionsSoFar = mutable.Set[Car]()\n        val collisionsSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFar = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()",
  "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n  \
    \      val collisions = mutable.Set.empty[Long]\n        val collisionsCount =\
    \ mutable.Set.empty[Long]\n        val collisionsCount2 = mutable.Set.empty[Long]\n\
    \        val collisionsCount3 = mutable.Set.empty[Long]\n        val collisionsCount4\
    \ = mutable.Set.empty[Long]\n        val collisionsCount5 = mutable.Set.empty[Long]\n\
    \        val collisionsCount6 = mutable.Set.empty[Long]\n        val collisionsCount7\
    \ = mutable.Set.empty[Long]\n        val collisionsCount8 = mutable.Set.empty[Long]\n\
    \        val collisionsCount9 = mutable.Set.empty[Long]\n        val collisionsCount10\
    \ = mutable.Set.empty[Long]\n        val collisionsCount11 = mutable.Set.empty[Long]\n\
    \        val collisionsCount12 = mutable.Set.empty[Long]\n        val collisionsCount13\
    \ = mutable.Set.empty[Long]\n        val collisionsCount14 = mutable.Set.empty[Long]\n\
    \        val collisionsCount15 = mutable.Set.empty[Long]\n        val collisionsCount16\
    \ = mutable.Set.empty[Long]\n        val collisionsCount17 = mutable.Set.empty[Long]\n\
    \        val collisionsCount18 = mutable.Set.empty[Long]\n        val collisionsCount19\
    \ = mutable.Set.empty[Long]\n        val collisionsCount20 = mutable.Set.empty[Long]\n\
    \        val collisionsCount21 = mutable.Set.empty[Long]\n        val collisionsCount22\
    \ = mutable.Set.empty[Long]\n        val collisionsCount23 = mutable.Set.empty[Long]\n\
    \        val collisionsCount24 = mutable.Set.empty[Long]\n        val collisionsCount25\
    \ = mutable.Set.empty[Long]\n        val collisionsCount26 = mutable.Set.empty[Long]\n\
    \        val collisionsCount27 = mutable.Set.empty[Long]\n        val collisionsCount28\
    \ = mutable.Set.empty[Long]\n        val collisionsCount29 = mutable.Set.empty[Long]\n\
    \        val collisionsCount30 = mutable.Set.empty[Long]\n        val collisionsCount31\
    \ = mutable.Set.empty[Long]\n        val collisionsCount32 = mutable.Set.empty[Long]\n\
    \        val collisionsCount33 = ", "        val cars = Vector.tabulate(n)(i =>\
    \ Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]", "        val cars = mutable.ListBuffer(1\
    \ to n).map(x => mutable.ListBuffer(1 to n).map(y => x + y))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val carsLeft = cars.takeWhile(_ => cars.forall(_.forall(_.head\
    \ < _.last)))\n        val carsRight = cars.takeWhile(_ => cars.forall(_.forall(_.last\
    \ > _.head)))\n        carsLeft.foreach(x => carsRight.foreach(y => if (x.head\
    \ < y.last) collisions += 1 ))\n        collisions.sum", "        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val ", "        val cars = mutable.ArrayBuffer.fill(n\
    \ / 2)(true)\n        val collisions = mutable.ArrayBuffer.fill(n / 2)(false)\n\
    \        val speed = mutable.ArrayBuffer.fill(n / 2)(1.0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(false)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(false)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(false)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(false)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(false)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(false)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(false)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft\
    \ = ", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.", "     \
    \   val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collisionsSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val\
    \ collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val carsLeft = cars.filter(_.p2.x < cars.head.x)\n\
    \        val carsRight = cars.filter(_.p2.x > cars.last.x)\n        val collide\
    \ = carsLeft.filter(car => carsRight.exists(car2 => car.collide(car2)))\n    \
    \    carsLeft.length + collide.length", "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collided = mutable.Set[Car]()\n\
    \        val colliding = mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n\
    \        val collisionsCount = mutable.Set[Car]()\n        val collisionsCounts\
    \ = mutable.Set[Car]()\n        val collisionsCountOf = mutable.Set[Car]()\n \
    \       val collisionsCountOfs = mutable.Set[Car]()\n        val collisionsCountOfsOf\
    \ = mutable.Set[Car]()\n        val collisionsCountOfsOfs = mutable.Set[Car]()\n\
    \        val collisionsCountOfsOfsOf = mutable.Set[Car]()\n        val collisionsCountOfsOfsOfs\
    \ = mutable.Set[Car]()\n        val collisionsCountOfsOfsOfsOf = mutable.Set[Car]()\n\
    \        val collisionsCountOfsOfsOfsOfs = mutable.Set[Car]()\n        val collisionsCountOfsOfsOfsOfsOf\
    \ = mutable.Set[Car]()\n        val collisionsCountOfsOfsOfsOfsOfs = mutable.Set[Car]()\n\
    \        val collisionsCountOfsOfsOfsOfsOfsOf = mutable.Set[Car]()\n        val\
    \ collisionsCountOfsOfsOfsOfsOfsOfs = mutable.Set[Car]()\n        val collisionsCountOfsOfsOfsOfsOfsOf\
    \ = mutable.Set[Car]()\n        val collisionsCountOfsOfsOfsOfsOfsOfs = mutable.Set[Car]()\n\
    \        val collisionsCountOfsOfsOfsOfsOfsOfsOf = mutable.Set[Car]()\n      \
    \  val collisionsCountOfsOfsOfsOfsOfsOfsOfs = mutable.Set[Car]()\n        val\
    \ collisionsCountOfsOfsOfsOfsOfsOfsOf = mutable.Set[Car]()\n        val collisionsCountOfsOfsOfsOfsOfsOfsOfs\
    \ = mutable.Set[Car]()\n        val collisionsCountOfsOfsOfsOfsOfsOfsOf = mutable.Set",
  "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n  \
    \      val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n    \
    \    val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]", "        val cars = Vector.tabulate(n)(i\
    \ => new Car(Vector.random))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val carsLeft = carsLeft.zip(carsRight)\n        val carsRight = carsRight.zip(carsLeft)\n\
    \        carsLeft.foreach(c => collisions += c.collide(c))\n        carsRight.foreach(c\
    \ => collisions += c.collide(c))\n        collisions.sum", "        val cars =\
    \ Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions\
    \ = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n \
    \       val collisionsSoFarIter = collisionsSoFar.iterator\n        val collisionsSoFarIterIter\
    \ = collisionsSoFarIter.iterator\n        val collisionsSoFarIterIterIter = collisionsSoFarIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIter = collisionsSoFarIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIter = collisionsSoFarIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter =\
    \ collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = collisionsSoFarIterIter", "        val collisions = mutable.ListBuffer[Long]()\n\
    \        var currentCar = 0\n        var previousCar = 0\n        var currentCollision\
    \ = 0\n        var previousCollision = 0\n        var currentCollisionCount =\
    \ 0\n        var previousCollisionCount = 0\n        var currentCollisionCount2\
    \ = 0\n        var previousCollisionCount2 = 0\n        var currentCollisionCount3\
    \ = 0\n        var previousCollisionCount3 = 0\n        var currentCollisionCount4\
    \ = 0\n        var previousCollisionCount4 = 0\n        var currentCollisionCount5\
    \ = 0\n        var previousCollisionCount5 = 0\n        var currentCollisionCount6\
    \ = 0\n        var previousCollisionCount6 = 0\n        var currentCollisionCount7\
    \ = 0\n        var previousCollisionCount7 = 0\n        var currentCollisionCount8\
    \ = 0\n        var previousCollisionCount8 = 0\n        var currentCollisionCount9\
    \ = 0\n        var previousCollisionCount9 = 0\n        var currentCollisionCount10\
    \ = 0\n        var previousCollisionCount10 = 0\n        var currentCollisionCount11\
    \ = 0\n        var previousCollisionCount11 = 0\n        var currentCollisionCount12\
    \ = 0\n        var previousCollisionCount12 = 0\n        var currentCollisionCount13\
    \ = 0\n        var previousCollisionCount13 = 0\n        var currentCollisionCount14\
    \ = 0\n        var previousCollisionCount14 = 0\n        var currentCollisionCount15\
    \ = 0\n        var previousCollisionCount15 = 0\n        var currentCollisionCount16\
    \ = 0\n        var previousCollisionCount16 = 0\n        var currentCollisionCount17\
    \ = 0\n        var previousCollisionCount17 = 0\n        var currentCollisionCount18\
    \ = 0\n        var previousCollisionCount18 = 0\n        var currentCollisionCount19\
    \ = 0\n        var previousCollisionCount19 = 0\n        var currentCollisionCount20\
    \ = 0\n        var previousCollisionCount20 = 0\n        var currentCollisionCount21\
    \ = 0\n        var previousCollisionCount21 = 0\n        var currentCollisionCount22\
    \ = 0\n        var previousCollisionCount22 = 0\n        var currentCollisionCount23\
    \ = 0\n        var previousCollisionCount23 = 0\n        var currentCollisionCount24\
    \ = 0\n        var previousCollisionCount24 = 0\n        var currentCollisionCount25\
    \ = 0\n        var previousCollisionCount25 = 0\n        var currentCollisionCount26\
    \ = 0\n        var previousCollisionCount26 = 0\n        var currentCollisionCount27\
    \ = 0\n        var previousCollisionCount27 = 0\n        var currentCollisionCount28\
    \ = 0\n        var previousCollisionCount28 = 0\n        var currentCollisionCount29\
    \ = 0\n        var previousCollisionCount29 = 0\n        var currentCollisionCount30\
    \ = 0\n        var previousCollisionCount30 = 0\n        var currentCollisionCount31\
    \ = 0\n        var previousCollisionCount31 = 0\n        var currentCollisionCount32\
    \ = 0\n        var previousCollisionCount32 = 0\n        var currentCollisionCount33\
    \ = 0\n        var previousCollisionCount33 = 0\n        var currentCollisionCount34\
    \ = 0\n        var previousCollisionCount34 = 0\n        var currentCollisionCount35",
  "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n  \
    \      val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val carsCollisions = carsLeft.zip(\n            carsRight.zipWithIndex.filter(_._1\
    \ == _._2).map(_._2)\n        ).count(_ == 0)\n        carsCollisions", "    \
    \    val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n    \
    \    val collisions = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n     \
    \   val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n     \
    \   val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val ", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n      \
    \  val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount = mutable.ListBuffer.empty[", "        val cars =\
    \ Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions\
    \ = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n \
    \       val collisionsSoFarSize = mutable.Set[Long]()\n        val collisionsSoFarSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSize = mutable.Set[Long]()\n        val\
    \ collisionsSoFarSizeSizeSizeSizeSize = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSize", " \
    \       var collisions = 0\n        var cars = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        var carsRight = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    var carsLeft = scala.collection.mutable.ListBuffer.empty[Int]\n        var\
    \ carsRightToLeft = scala.collection.mutable.ListBuffer.empty[Int]\n        var\
    \ carsLeftToRight = scala.collection.mutable.ListBuffer.empty[Int]\n        var\
    \ carsRightToLeftToRight = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      var carsLeftToRightToLeft = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        var carsRightToLeftToRightToLeft = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        var carsLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        var carsRightToLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        var carsLeftToRightToLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        var carsRightToLeftToRightToLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        var carsLeftToRightToLeftToRightToLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        var carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        var carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        var carsLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeft",
  "        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val collisions =\
    \ mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val collisions =\
    \ mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val collisions =\
    \ mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val collisions =\
    \ mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val collisions =\
    \ mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val collisions =\
    \ mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mutable.ListBuffer[Long]()\n        val collisions =\
    \ mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n\
    \        val collision = mut", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val carsLeft = cars.takeRight(n)\n        val\
    \ carsRight = cars.dropRight(n)\n        val collisions = carsLeft.zip(carsRight).filter(_._1.collidesWith(_._2)).length\n\
    \        collisions", '        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j
    => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n
    => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r
    => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v
    => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z
    => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d
    => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h
    => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l
    => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p
    => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t
    => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x
    => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b
    => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f
    => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j
    => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul', "        val\
    \ cars = mutable.ArrayBuffer.fill(n)(new Car)\n        val collided = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n    \
    \    val collisionsSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSo",
  "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n  \
    \      val collisions = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n     \
    \   val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n     \
    \   val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val ", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(10),\
    \ Vector.random(10)))\n        val collides = mutable.HashSet[Car]()\n       \
    \ val collisions = mutable.HashSet[Car]()\n        cars.foreach(c => {\n     \
    \       val collide = cars.find(cc => cc.x != c.x && cc.y != c.y && cc.x + cc.y\
    \ > c.x + c.y)\n            if (collide.isDefined) {\n                collides\
    \ += collide.get\n                collisions += c\n            }\n        })\n\
    \        collisions.size", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.",
  '        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k
    => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o
    => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s
    => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w
    => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a
    => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e
    => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i
    => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m
    => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q
    => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u
    => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y
    => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c
    => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g
    => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k
    => Vector.tabulate(n)(l => Vector.tabul', "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collided = mutable.Set[Car]()\n\
    \        val colliding = mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n\
    \        val collisionsSoFar = mutable.Set[Car]()\n        val collisionsSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSo",
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        var collision\
    \ = 0\n        cars.foreach{ car =>\n            val otherCars = cars.filterNot(_\
    \ == car)\n            otherCars.foreach{ otherCar =>\n                val collision\
    \ = car.collidesWith(otherCar)\n                if (collision) {\n           \
    \         collisions += collision\n                }\n            }\n        }\n\
    \        collisions.sum", "        val cars = Vector.tabulate(n)(i => new Car(Vector.random))\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n    \
    \    val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar", "        val\
    \ cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val\
    \ collisions = mutable.ListBuffer[Long]()\n        val collisionsLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsRight = mutable.ListBuffer[Long]()\n        val collisionsBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothRight = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBoth = mutable.ListBuffer[Long]()\n       \
    \ val collisionsBothBothBothBothLeft = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothRight\
    \ = mutable.ListBuffer[Long]", "        var collisions = 0\n        var cars =\
    \ scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ speed = scala.collection.mutable.ListBuffer[Int]()\n        var speedLeft =\
    \ scala.collection.mutable.ListBuffer[Int]()\n        var speedRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var speedTotal = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ var speedTotalLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ speedTotalRight = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotal\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotal\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotal\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotal\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotalLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotalRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotal\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotalLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotalRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotalTotal\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotalLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotalRight\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var speedTotalTotalTotalTotalTotalTotal\
    \ = scala.collection.mutable.ListBuffer", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisions = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsBoth = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsBothLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsBothRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsCollisionsBothBoth = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n   \
    \     val carsCollisionsBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n     \
    \   val carsCollisionsBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n        val\
    \ carsCollisionsBothBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n      \
    \  val carsCollisionsBothBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsBothBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsBothBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsBothBothBothBothBoth = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsBothBothBothBothLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsCollisionsBothBothBothBothRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        ", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j =>\
    \ i + j))\n        val collisions = mutable.Set.empty[Long]\n        val collisionsCount\
    \ = 0\n        val collisionsCountPerCar = mutable.Map.empty[Long, Long]\n   \
    \     val collisionsCountPerCarPerCar = mutable.Map.empty[Long, mutable.Map[Long,\
    \ Long]]\n        val collisionsCountPerCarPerCarPerCar = mutable.Map.empty[Long,\
    \ mutable.Map[Long, mutable.Map[Long, Long]]]\n        val collisionsCountPerCarPerCarPerCarPerCar\
    \ = mutable.Map.empty[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ Long]]]]\n        val collisionsCountPerCarPerCarPerCarPerCarPerCar = mutable.Map.empty[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, Long]]]]]\n\
    \        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Map.empty[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ Long]]]]]]\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Map.empty[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, Long]]]]]]]\n        val\
    \ collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Map.empty[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ mutable.Map[Long, mutable.Map[Long, Long]]]]]]]]\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar\
    \ = mutable.Map.empty[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, Long]]]]]]]]\n\
    \        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Map.empty[Long,\
    \ mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.Map[Long, mutable.",
  "        val collisions = mutable.Set[Long]()\n        val cars = mutable.Set[Long]()\n\
    \        val speed = mutable.Set[Double]()\n        val collisionCount = 0\n \
    \       val carCount = 0\n        val speedCount = 0\n        val speedLimit =\
    \ 10000.0\n        val speedLimit2 = 10000.0\n        val speedLimit3 = 10000.0\n\
    \        val speedLimit4 = 10000.0\n        val speedLimit5 = 10000.0\n      \
    \  val speedLimit6 = 10000.0\n        val speedLimit7 = 10000.0\n        val speedLimit8\
    \ = 10000.0\n        val speedLimit9 = 10000.0\n        val speedLimit10 = 10000.0\n\
    \        val speedLimit11 = 10000.0\n        val speedLimit12 = 10000.0\n    \
    \    val speedLimit13 = 10000.0\n        val speedLimit14 = 10000.0\n        val\
    \ speedLimit15 = 10000.0\n        val speedLimit16 = 10000.0\n        val speedLimit17\
    \ = 10000.0\n        val speedLimit18 = 10000.0\n        val speedLimit19 = 10000.0\n\
    \        val speedLimit20 = 10000.0\n        val speedLimit21 = 10000.0\n    \
    \    val speedLimit22 = 10000.0\n        val speedLimit23 = 10000.0\n        val\
    \ speedLimit24 = 10000.0\n        val speedLimit25 = 10000.0\n        val speedLimit26\
    \ = 10000.0\n        val speedLimit27 = 10000.0\n        val speedLimit28 = 10000.0\n\
    \        val speedLimit29 = 10000.0\n        val speedLimit30 = 10000.0\n    \
    \    val speedLimit31 = 10000.0\n        val speedLimit32 = 10000.0\n        val\
    \ speedLimit33 = 10000.0\n        val speedLimit34 = 10000.0\n        val speedLimit35\
    \ = 10000.0\n        val speedLimit36 = 10000.0\n        val speedLimit37 = 10000.0\n\
    \        val speedLimit38 = 10000.0\n        val speedLimit39 = 10000.0\n    \
    \    val speedLimit40 = 10000.0\n        val speedLimit41 = 10000.0\n        val\
    \ speedLimit42 = 10000.0\n        val speedLimit43 = 10000.0\n        val speedLimit44\
    \ = 10000.0\n        val speedLimit45 = 10000.0\n        val speedLimit46 = 10000.0\n\
    \        val speedLimit47 = 10000.0\n        val speedLimit48 = 10000.0\n    \
    \    val speedLimit49 = 10000.0\n        val speedLimit50 = 10000.0\n        val\
    \ speedLimit51 = 10000.0\n        val speedLimit52 = 10000.0\n        val ", " \
    \       var collisions = 0\n        var cars = mutable.ListBuffer(1 to n)\n  \
    \      var cars2 = mutable.ListBuffer(1 to n)\n        var cars3 = mutable.ListBuffer(1\
    \ to n)\n        var cars4 = mutable.ListBuffer(1 to n)\n        var cars5 = mutable.ListBuffer(1\
    \ to n)\n        var cars6 = mutable.ListBuffer(1 to n)\n        var cars7 = mutable.ListBuffer(1\
    \ to n)\n        var cars8 = mutable.ListBuffer(1 to n)\n        var cars9 = mutable.ListBuffer(1\
    \ to n)\n        var cars10 = mutable.ListBuffer(1 to n)\n        var cars11 =\
    \ mutable.ListBuffer(1 to n)\n        var cars12 = mutable.ListBuffer(1 to n)\n\
    \        var cars13 = mutable.ListBuffer(1 to n)\n        var cars14 = mutable.ListBuffer(1\
    \ to n)\n        var cars15 = mutable.ListBuffer(1 to n)\n        var cars16 =\
    \ mutable.ListBuffer(1 to n)\n        var cars17 = mutable.ListBuffer(1 to n)\n\
    \        var cars18 = mutable.ListBuffer(1 to n)\n        var cars19 = mutable.ListBuffer(1\
    \ to n)\n        var cars20 = mutable.ListBuffer(1 to n)\n        var cars21 =\
    \ mutable.ListBuffer(1 to n)\n        var cars22 = mutable.ListBuffer(1 to n)\n\
    \        var cars23 = mutable.ListBuffer(1 to n)\n        var cars24 = mutable.ListBuffer(1\
    \ to n)\n        var cars25 = mutable.ListBuffer(1 to n)\n        var cars26 =\
    \ mutable.ListBuffer(1 to n)\n        var cars27 = mutable.ListBuffer(1 to n)\n\
    \        var cars28 = mutable.ListBuffer(1 to n)\n        var cars29 = mutable.ListBuffer(1\
    \ to n)\n        var cars30 = mutable.ListBuffer(1 to n)\n        var cars31 =\
    \ mutable.ListBuffer(1 to n)\n        var cars32 = mutable.ListBuffer(1 to n)\n\
    \        var cars33 = mutable.ListBuffer(1 to n)\n        var cars34 = mutable.ListBuffer(1\
    \ to n)\n        var cars35 = mutable.ListBuffer(1 to n)\n        var cars36 =\
    \ mutable.ListBuffer(1 to n)\n        var cars37 = mutable.ListBuffer(1 to n)\n\
    \        var cars38 = mutable.ListBuffer(1 to n)\n        var cars39 = mutable.ListBuffer(1\
    \ to n)\n        var cars40 = mutable.ListBuffer(1 to n)\n        var cars41 =\
    \ mutable.ListBuffer(1 to n)\n        var cars42 = mutable.ListBuffer(1 to n)\n\
    \        var cars43 = mutable.ListBuffer(1 to n)\n        var cars44 = mutable.List",
  "        var collisions = 0\n        var cars = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n\
    \        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var\
    \ carsRight = scala.collection.mutable.ListBuffer[Int]", "        val cars = Vector.tabulate(n)(i\
    \ => new Car(i))\n        val carsLeft = cars.takeRight(n)\n        val carsRight\
    \ = cars.dropRight(n)\n        val carsCollisions = carsLeft.zip(carsRight).filter(_._1.collides(_._1)).length\n\
    \        carsCollisions", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n      \
    \  val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        ", "        var collisions = 0\n        var collisionsCount = 0\n   \
    \     var collisionsCount2 = 0\n        var collisionsCount3 = 0\n        var\
    \ collisionsCount4 = 0\n        var collisionsCount5 = 0\n        var collisionsCount6\
    \ = 0\n        var collisionsCount7 = 0\n        var collisionsCount8 = 0\n  \
    \      var collisionsCount9 = 0\n        var collisionsCount10 = 0\n        var\
    \ collisionsCount11 = 0\n        var collisionsCount12 = 0\n        var collisionsCount13\
    \ = 0\n        var collisionsCount14 = 0\n        var collisionsCount15 = 0\n\
    \        var collisionsCount16 = 0\n        var collisionsCount17 = 0\n      \
    \  var collisionsCount18 = 0\n        var collisionsCount19 = 0\n        var collisionsCount20\
    \ = 0\n        var collisionsCount21 = 0\n        var collisionsCount22 = 0\n\
    \        var collisionsCount23 = 0\n        var collisionsCount24 = 0\n      \
    \  var collisionsCount25 = 0\n        var collisionsCount26 = 0\n        var collisionsCount27\
    \ = 0\n        var collisionsCount28 = 0\n        var collisionsCount29 = 0\n\
    \        var collisionsCount30 = 0\n        var collisionsCount31 = 0\n      \
    \  var collisionsCount32 = 0\n        var collisionsCount33 = 0\n        var collisionsCount34\
    \ = 0\n        var collisionsCount35 = 0\n        var collisionsCount36 = 0\n\
    \        var collisionsCount37 = 0\n        var collisionsCount38 = 0\n      \
    \  var collisionsCount39 = 0\n        var collisionsCount40 = 0\n        var collisionsCount41\
    \ = 0\n        var collisionsCount42 = 0\n        var collisionsCount43 = 0\n\
    \        var collisionsCount44 = 0\n        var collisionsCount45 = 0\n      \
    \  var collisionsCount46 = 0\n        var collisionsCount47 = 0\n        var collisionsCount48\
    \ = 0\n        var collisionsCount49 = 0\n        var collisionsCount50 = 0\n\
    \        var collisionsCount51 = 0\n        var collisionsCount52 = 0\n      \
    \  var collisionsCount53 = 0\n        var collisionsCount54 = 0\n        var collisionsCount55\
    \ = 0\n        var collisionsCount56 = 0\n        var collisionsCount57 = 0\n\
    \        var collisionsCount58 = 0\n        var collisionsCount59 = 0\n      \
    \  var collisionsCount60 = 0\n        var collisionsCount61 = 0\n        var collisionsCount62\
    \ = 0\n        var collisionsCount63 = 0\n        var collisionsCount64 = 0\n\
    \        var collisionsCount65 = 0\n        var collisionsCount66 = 0\n      \
    \  var collisionsCount67 = 0\n        var collisionsCount68 = 0\n        var collisionsCount69\
    \ = 0\n        var collisionsCount70 = 0\n        var collisionsCount71 = 0\n\
    \        var collisionsCount72 = 0\n        var collisionsCount73", "        val\
    \ cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to n).map(j\
    \ => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n        val\
    \ collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSo", "        val cars = mutable.ArrayBuffer(1\
    \ to n).map(i => mutable.ArrayBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ArrayBuffer(0)\n        val carsLeft = mutable.ArrayBuffer(1 to n).map(i\
    \ => i)\n        val carsRight = mutable.ArrayBuffer(1 to n).map(i => i)\n   \
    \     val carsLeft = carsLeft.zip(carsRight).map(x => x._1).distinct\n       \
    \ val carsRight = carsLeft.zip(carsRight).map(x => x._2).distinct\n        val\
    \ carsLeft = carsLeft.zip(carsRight).map(x => x._1).distinct\n        val carsRight\
    \ = carsLeft.zip(carsRight).map(x => x._2).distinct\n        val carsLeft = carsLeft.zip(carsRight).map(x\
    \ => x._1).distinct\n        val carsRight = carsLeft.zip(carsRight).map(x =>\
    \ x._2).distinct\n        val carsLeft = carsLeft.zip(carsRight).map(x => x._1).distinct\n\
    \        val carsRight = carsLeft.zip(carsRight).map(x => x._2).distinct\n   \
    \     val carsLeft = carsLeft.zip(carsRight).map(x => x._1).distinct\n       \
    \ val carsRight = carsLeft.zip(carsRight).map(x => x._2).distinct\n        val\
    \ carsLeft = carsLeft.zip(carsRight).map(x => x._1).distinct\n        val carsRight\
    \ = carsLeft.zip(carsRight).map(x => x._2).distinct\n        val carsLeft = carsLeft.zip(carsRight).map(x\
    \ => x._1).distinct\n        val carsRight = carsLeft.zip(carsRight).map(x =>\
    \ x._2).distinct\n        val carsLeft = carsLeft.zip(carsRight).map(x => x._1).distinct\n\
    \        val carsRight = carsLeft.zip(carsRight).map(x => x._2).distinct\n   \
    \     val carsLeft = carsLeft.zip(carsRight).map(x => x._1).distinct\n       \
    \ val carsRight = carsLeft.zip(carsRight).map(x => x._2).distinct\n        val\
    \ carsLeft = carsLeft.zip(carsRight).map(", "        val cars = Vector.tabulate(n)(i\
    \ => new Car(Vector.random(100), Vector.random(100)))\n        val collisions\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.Set[Long]()\n       \
    \ val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar2 = mutable.Set[Long]()\n\
    \        val collisionsSoFar3 = mutable.Set[Long]()\n        val collisionsSoFar4\
    \ = mutable.Set[Long]()\n        val collisionsSoFar5 = mutable.Set[Long]()\n\
    \        val collisionsSoFar6 = mutable.Set[Long]()\n        val collisionsSoFar7\
    \ = mutable.Set[Long]()\n        val collisionsSoFar8 = mutable.Set[Long]()\n\
    \        val collisionsSoFar9 = mutable.Set[Long]()\n        val collisionsSoFar10\
    \ = mutable.Set[Long]()\n        val collisionsSoFar11 = mutable.Set[Long]()\n\
    \        val collisionsSoFar12 = mutable.Set[Long]()\n        val collisionsSoFar13\
    \ = mutable.Set[Long]()\n        val collisionsSoFar14 = mutable.Set[Long]()\n\
    \        val collisionsSoFar15 = mutable.Set[Long]()\n        val collisionsSoFar16\
    \ = mutable.Set[Long]()\n        val collisionsSoFar17 = mutable.Set[Long]()\n\
    \        val collisionsSoFar18 = mutable.Set[Long]()\n        val collisionsSoFar19\
    \ = mutable.Set[Long]()\n        val collisionsSoFar20 = mutable.Set[Long]()\n\
    \        val collisionsSoFar21 = mutable.Set[Long]()\n        val collisionsSoFar22\
    \ = mutable.Set[Long]()\n        val collisionsSoFar23 = mutable.Set[Long]()\n\
    \        val collisionsSoFar24 = mutable.Set[Long]()\n        val collisionsSoFar25\
    \ = mutable.Set[Long]()\n        val collisionsSoFar26 = mutable.Set[Long]()\n\
    \        val collisionsSoFar27 = mutable.Set[Long]()\n        val collisionsSoFar28\
    \ = mutable.Set[Long]()\n        val collisionsSoFar29 = mutable.Set[Long]()\n\
    \        val collisionsSoFar30 = mutable.Set[Long]()\n        val collisions",
  "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n  \
    \      val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val carsCollisions = carsLeft.zip(carsRight).filter(_._1._ == _._1._).length\n\
    \        carsCollisions", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill", "        val cars = Vector.tabulate(n)(i => new\
    \ Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        carsLeft.foreach(c => carsRight.foreach(d => {\n            val collision\
    \ = c.collidesWith(d)\n            if (collision) collisions += collision\n  \
    \      }))\n        collisions.sum", "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[", "        val cars = mutable.ListBuffer(1 to n).map(i\
    \ => mutable.ListBuffer(1 to n).map(j => Car(i, j)))\n        val collisions =\
    \ mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[", "        var collisions = 0\n        var cars = mutable.ArrayBuffer(1\
    \ to n).map(x => mutable.ArrayBuffer(1 to n).map(y => 0))\n        cars.foreach(x\
    \ => cars.foreach(y => cars(y) = cars(y) + 1))\n        cars.foreach(x => cars.foreach(y\
    \ => cars(y) = cars(y) - 1))\n        cars.foreach(x => cars.foreach(y => cars(y)\
    \ = cars(y) * -1))\n        cars.foreach(x => cars.foreach(y => cars(y) = cars(y)\
    \ / 2))\n        cars.foreach(x => cars.foreach(y => cars(y) = cars(y) * 2))\n\
    \        cars.foreach(x => cars.foreach(y => cars(y) = cars(y) / 2))\n       \
    \ cars.foreach(x => cars.foreach(y => cars(y) = cars(y) * 2))\n        cars.foreach(x\
    \ => cars.foreach(y => cars(y) = cars(y) / 2))\n        cars.foreach(x => cars.foreach(y\
    \ => cars(y) = cars(y) * 2))\n        cars.foreach(x => cars.foreach(y => cars(y)\
    \ = cars(y) / 2))\n        cars.foreach(x => cars.foreach(y => cars(y) = cars(y)\
    \ * 2))\n        cars.foreach(x => cars.foreach(y => cars(y) = cars(y) / 2))\n\
    \        cars.foreach(x => cars.foreach(y => cars(y) = cars(y) * 2))\n       \
    \ cars.foreach(x => cars.foreach(y => cars(y) = cars(y) / 2))\n        cars.foreach(x\
    \ => cars.foreach(y => cars(y) = cars(y) * 2))\n        cars.foreach(x => cars.foreach(y\
    \ => cars(y) = cars(y) / 2))\n        cars.foreach(x => cars.foreach(y => cars(y)\
    \ = cars(y) * 2))\n        cars.foreach(x => cars.foreach(y => cars(y) = cars(y)\
    \ / 2))\n        cars.foreach(x => cars.foreach(y => cars(y) = cars(y) * 2))\n\
    \        cars.foreach(x => cars.foreach(y => cars(y) = cars(y) / 2))\n       \
    \ cars.foreach(x => cars.foreach(y => cars(y) = cars(y) * 2))\n", '        val
    cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k =>
    Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o
    => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s
    => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w
    => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a
    => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e
    => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i
    => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m
    => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q
    => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u
    => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y
    => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c
    => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g
    => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k
    => Vector.tabulate(n)(l => Vector.tabul', "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Car]()\n\
    \        val collisionCount = 0\n        val carsLeft = cars.takeRight(n)\n  \
    \      val carsRight = cars.dropRight(n)\n        val carsCollisions = carsLeft.zip(carsRight).filter(_._1.collidesWith(_._2))\n\
    \        carsCollisions.foreach { case (carLeft, carRight) => collisions += carLeft\
    \ }\n        collisionCount += collisions.size\n        collisionCount", "   \
    \     val cars = Array.fill(2 * n)(0)\n        val collisions = mutable.HashSet[Long]()\n\
    \        val collisionsCount = mutable.HashMap[Long, Long]()\n        val collisionsCount2\
    \ = mutable.HashMap[Long, Long]()\n        val collisionsCount3 = mutable.HashMap[Long,\
    \ Long]()\n        val collisionsCount4 = mutable.HashMap[Long, Long]()\n    \
    \    val collisionsCount5 = mutable.HashMap[Long, Long]()\n        val collisionsCount6\
    \ = mutable.HashMap[Long, Long]()\n        val collisionsCount7 = mutable.HashMap[Long,\
    \ Long]()\n        val collisionsCount8 = mutable.HashMap[Long, Long]()\n    \
    \    val collisionsCount9 = mutable.HashMap[Long, Long]()\n        val collisionsCount10\
    \ = mutable.HashMap[Long, Long]()\n        val collisionsCount11 = mutable.HashMap[Long,\
    \ Long]()\n        val collisionsCount12 = mutable.HashMap[Long, Long]()\n   \
    \     val collisionsCount13 = mutable.HashMap[Long, Long]()\n        val collisionsCount14\
    \ = mutable.HashMap[Long, Long]()\n        val collisionsCount15 = mutable.HashMap[Long,\
    \ Long]()\n        val collisionsCount16 = mutable.HashMap[Long, Long]()\n   \
    \     val collisionsCount17 = mutable.HashMap[Long, Long]()\n        val collisionsCount18\
    \ = mutable.HashMap[Long, Long]()\n        val collisionsCount19 = mutable.HashMap[Long,\
    \ Long]()\n        val collisionsCount20 = mutable.HashMap[Long, Long]()\n   \
    \     val collisionsCount21 = mutable.HashMap[Long, Long]()\n        val collisionsCount22\
    \ = mutable.HashMap[Long, Long]()\n        val collisionsCount23 = mutable.HashMap[Long,\
    \ Long]()\n        val collisionsCount24 = mutable.HashMap[Long, Long]()\n   \
    \     val collisionsCount25 = mutable.HashMap[Long, Long]()\n        val collisionsCount26\
    \ = mutable.HashMap[Long, Long]()\n        val collisionsCount27 = mutable.HashMap[Long,\
    \ Long]()\n        val collisionsCount28 = mutable.HashMap[Long, Long]()\n   \
    \     val collisionsCount29 = mutable.HashMap[Long, Long]()\n        val collisionsCount30\
    \ = mut", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j =>\
    \ i + j))\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val carsCollisions = carsLeft.foldLeft(0)((acc, car) => acc + carsRight.count(car.contains))\n\
    \        carsCollisions", "        val cars = mutable.ListBuffer(1 to n).map(i\
    \ => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        cars.foreach { car =>\n            car.foreach { car =>\n           \
    \     val collision = car.foldLeft(0)((acc, car) => acc + (car.head == car.last))\n\
    \                collisions += collision\n            }\n        }\n        collisions.sum",
  "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n  \
    \      val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBoth = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothRight\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothLeft = mutable.ListBuffer.empty[Long]\n   \
    \     val collisionsBothBothBothRight = mutable.ListBuffer.empty[Long]\n     \
    \   val collisionsBothBothBothBoth = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n      \
    \  val collisionsBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long",
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n    \
    \    val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => Vector(i, j)))\n        val collisions = mutable.Set.empty[Long]\n      \
    \  val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount33", "        var collisions\
    \ = 0\n        var cars = Vector.fill(n / 2)(Vector.zero)\n        cars(0) = Vector(1.0,\
    \ 0.0)\n        cars(1) = Vector(-1.0, 0.0)\n        cars(2) = Vector(0.0, 1.0)\n\
    \        cars(3) = Vector(0.0, -1.0)\n        cars(4) = Vector(1.0, 1.0)\n   \
    \     cars(5) = Vector(-1.0, 1.0)\n        cars(6) = Vector(1.0, -1.0)\n     \
    \   cars(7) = Vector(-1.0, -1.0)\n        cars(8) = Vector(0.0, 0.0)\n       \
    \ cars(9) = Vector(0.0, 0.0)\n        cars(10) = Vector(1.0, 0.0)\n        cars(11)\
    \ = Vector(-1.0, 0.0)\n        cars(12) = Vector(0.0, 1.0)\n        cars(13) =\
    \ Vector(0.0, -1.0)\n        cars(14) = Vector(1.0, 1.0)\n        cars(15) = Vector(-1.0,\
    \ 1.0)\n        cars(16) = Vector(1.0, -1.0)\n        cars(17) = Vector(-1.0,\
    \ -1.0)\n        cars(18) = Vector(0.0, 0.0)\n        cars(19) = Vector(0.0, 0.0)\n\
    \        cars(20) = Vector(1.0, 0.0)\n        cars(21) = Vector(-1.0, 0.0)\n \
    \       cars(22) = Vector(0.0, 1.0)\n        cars(23) = Vector(0.0, -1.0)\n  \
    \      cars(24) = Vector(1.0, 1.0)\n        cars(25) = Vector(-1.0, 1.0)\n   \
    \     cars(26) = Vector(1.0, -1.0)\n        cars(27) = Vector(-1.0, -1.0)\n  \
    \      cars(28) = Vector(0.0, 0.0)\n        cars(29) = Vector(0.0, 0.0)\n    \
    \    cars(30) = Vector(1.0, 0.0)\n        cars(31) = Vector(-1.0, 0.0)\n     \
    \   cars(32) = Vector(0.0, 1.0)\n        cars(33) = Vector(0.0, -1.0)\n      \
    \  cars(34) = Vector(1.0, 1.0)\n        cars(35) = Vector(-1.0, 1.0)\n       \
    \ cars(36) = Vector(1.0, -1.0)\n        cars(37) = Vector(-1.0, -1.0)\n      \
    \  cars(38) = Vector(0.0, 0.0)\n        cars(39) = Vector(0.0, 0.0)\n        cars(40)\
    \ = Vector(1.0, 0.0)\n        cars(41) = Vector(-1.0, 0.0)\n        cars(42) =\
    \ Vector(0.0, 1.0)\n        cars(43) = Vector(0.0, -1.0)\n        cars(44) = Vector(1.0,\
    \ 1.0)\n        cars(45) = Vector(-1.0, 1.0)\n        cars(46) = Vector(1.0, -1.0)\n\
    \        cars(47) = Vector", "        val cars = mutable.ListBuffer(1 to n).map(i\
    \ => mutable.ListBuffer(1 to n).map(j => new Car(i, j)))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collides = mutable.Set[Car]()\n        val\
    \ collide = mutable.Set[Car]()\n        val collide2 = mutable.Set[Car]()\n  \
    \      val collide3 = mutable.Set[Car]()\n        val collide4 = mutable.Set[Car]()\n\
    \        val collide5 = mutable.Set[Car]()\n        val collide6 = mutable.Set[Car]()\n\
    \        val collide7 = mutable.Set[Car]()\n        val collide8 = mutable.Set[Car]()\n\
    \        val collide9 = mutable.Set[Car]()\n        val collide10 = mutable.Set[Car]()\n\
    \        val collide11 = mutable.Set[Car]()\n        val collide12 = mutable.Set[Car]()\n\
    \        val collide13 = mutable.Set[Car]()\n        val collide14 = mutable.Set[Car]()\n\
    \        val collide15 = mutable.Set[Car]()\n        val collide16 = mutable.Set[Car]()\n\
    \        val collide17 = mutable.Set[Car]()\n        val collide18 = mutable.Set[Car]()\n\
    \        val collide19 = mutable.Set[Car]()\n        val collide20 = mutable.Set[Car]()\n\
    \        val collide21 = mutable.Set[Car]()\n        val collide22 = mutable.Set[Car]()\n\
    \        val collide23 = mutable.Set[Car]()\n        val collide24 = mutable.Set[Car]()\n\
    \        val collide25 = mutable.Set[Car]()\n        val collide26 = mutable.Set[Car]()\n\
    \        val collide27 = mutable.Set[Car]()\n        val collide28 = mutable.Set[Car]()\n\
    \        val collide29 = mutable.Set[Car]()\n        val collide30 = mutable.Set[Car]()\n\
    \        val collide31 = mutable.Set[Car]()\n        val collide32 = mutable.Set[Car]()\n\
    \        val collide33 = mutable.Set[Car]()\n        val collide34 = mutable.Set[Car]()\n\
    \        val collide35 = mut", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(10),\
    \ Vector.random(10)))\n        val collides = mutable.Set.empty[Car]\n       \
    \ val collisions = mutable.Set.empty[Car]\n        val collisionsCount = mutable.Set.empty[Car]\n\
    \        val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]\n       \
    \ val collisionsCounts = mutable.Map.empty[Car, Long]\n        val collisionsCounts\
    \ = mutable.Map.empty[Car, Long]\n        val collisionsCounts = mutable.Map.empty[Car,\
    \ Long]\n        val collisionsCounts = mutable.Map.empty[Car, Long]", "     \
    \   val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n     \
    \   val collisions = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n\
    \        val collisionsCount2 = mutable.Set.empty[Long]\n        val collisionsCount3\
    \ = mutable.Set.empty[Long]\n        val collisionsCount4 = mutable.Set.empty[Long]\n\
    \        val collisionsCount5 = mutable.Set.empty[Long]\n        val collisionsCount6\
    \ = mutable.Set.empty[Long]\n        val collisionsCount7 = mutable.Set.empty[Long]\n\
    \        val collisionsCount8 = mutable.Set.empty[Long]\n        val collisionsCount9\
    \ = mutable.Set.empty[Long]\n        val collisionsCount10 = mutable.Set.empty[Long]\n\
    \        val collisionsCount11 = mutable.Set.empty[Long]\n        val collisionsCount12\
    \ = mutable.Set.empty[Long]\n        val collisionsCount13 = mutable.Set.empty[Long]\n\
    \        val collisionsCount14 = mutable.Set.empty[Long]\n        val collisionsCount15\
    \ = mutable.Set.empty[Long]\n        val collisionsCount16 = mutable.Set.empty[Long]\n\
    \        val collisionsCount17 = mutable.Set.empty[Long]\n        val collisionsCount18\
    \ = mutable.Set.empty[Long]\n        val collisionsCount19 = mutable.Set.empty[Long]\n\
    \        val collisionsCount20 = mutable.Set.empty[Long]\n        val collisionsCount21\
    \ = mutable.Set.empty[Long]\n        val collisionsCount22 = mutable.Set.empty[Long]\n\
    \        val collisionsCount23 = mutable.Set.empty[Long]\n        val collisionsCount24\
    \ = mutable.Set.empty[Long]\n        val collisionsCount25 = mutable.Set.empty[Long]\n\
    \        val collisionsCount26 = mutable.Set.empty[Long]\n        val collisionsCount27\
    \ = mutable.Set.empty[Long]\n        val collisionsCount28 = mutable.Set.empty[Long]\n\
    \        val collisionsCount29 = mutable.Set.empty[Long]\n        val collisionsCount30\
    \ = mutable.Set.empty[Long]\n        val collisionsCount31 = mutable.Set.empty[Long]\n\
    \        val collisionsCount32 = mutable.Set.empty[Long]\n        val collisionsCount33\
    \ = ", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n     \
    \   val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n     \
    \   val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n",
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n    \
    \    val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[", "        var collisions = 0\n        var cars\
    \ = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l\
    \ => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p\
    \ => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t\
    \ => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x\
    \ => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b\
    \ => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f\
    \ => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n\
    \ => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r\
    \ => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v\
    \ => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z\
    \ => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d\
    \ => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h\
    \ => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l\
    \ => Vector", "        val cars = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1\
    \ to n).map(j => i + j))\n        val collisions = mutable.ArrayBuffer(0)\n  \
    \      val collisionsLeft = mutable.ArrayBuffer(0)\n        val collisionsRight\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBoth = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothLeft = mutable.ArrayBuffer(0)\n        val collisionsBothRight\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBoth = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothLeft = mutable.ArrayBuffer(0)\n        val collisionsBothBothRight\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBoth = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothLeft = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothRight = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBoth\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothRight = mutable.ArrayBuffer(0)\n      \
    \  val collisionsBothBothBothBothBoth = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothLeft\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothRight =\
    \ mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n   \
    \     val collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n     \
    \   val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothRight\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n   \
    \     val collisionsBothBothBothBothBothRight = mutable.ArrayBuffer(0)\n     \
    \   val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n        val\
    \ collisionsBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothRight\
    \ = mutable.ArrayBuffer(0)\n        val collisionsBothBothBothBothBothBoth = mutable.ArrayBuffer(0)\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ArrayBuffer(0)\n\
    \        val ", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(2),\
    \ Vector.random(2), Vector.random(2)))\n        val carsLeft = cars.filter(_._1.x\
    \ < 0)\n        val carsRight = cars.filter(_._1.x > 0)\n        val carsCollisions\
    \ = carsLeft.filter(_._2.intersects(_._1).nonEmpty).length\n        val carsCollisions2\
    \ = carsRight.filter(_._2.intersects(_._1).nonEmpty).length\n        carsCollisions\
    \ + carsCollisions2", "        val collisions = mutable.ListBuffer[Long]()\n \
    \       val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.", "        val cars = Array.fill(2*n)(new Car)\n\
    \        val collides = mutable.ListBuffer[Long]()\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount = mutable.ListBuffer[Long]()\n        val collisionsCount2\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount3 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount4 = mutable.ListBuffer[Long]()\n        val collisionsCount5\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount6 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount7 = mutable.ListBuffer[Long]()\n        val collisionsCount8\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount9 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount10 = mutable.ListBuffer[Long]()\n        val collisionsCount11\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount12 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount13 = mutable.ListBuffer[Long]()\n        val collisionsCount14\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount15 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount16 = mutable.ListBuffer[Long]()\n        val collisionsCount17\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount18 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount19 = mutable.ListBuffer[Long]()\n        val collisionsCount20\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount21 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount22 = mutable.ListBuffer[Long]()\n        val collisionsCount23\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount24 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount25 = mutable.ListBuffer[Long]()\n        val collisionsCount26\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount27 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount28 = mutable.ListBuffer[Long]()\n        val collisionsCount29\
    \ = mutable.ListBuffer[Long]()\n        val collisionsCount30 = mutable.ListBuffer[Long]()\n\
    \        val collisionsCount", "        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val cars = mutable.ListBuffer.fill(n)(new Car)\n        val carsLeft\
    \ = mutable.ListBuffer.fill(n)(new Car)\n        val carsRight = mutable.ListBuffer.fill(n)(new\
    \ Car)\n        val carsLeft = cars.toList\n        val carsRight = cars.toList.reverse\n\
    \        val carsLeft = carsLeft.toList\n        val carsRight = carsRight.toList\n\
    \        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n\
    \        val carsLeft = carsLeft.takeWhile(_ => carsLeft.forall(_.speed > 0))\n\
    \        val carsRight = carsRight.takeWhile(_ => carsRight.forall(_.speed > 0))\n\
    \        val carsLeft = carsLeft.takeWhile(_ => carsLeft.forall(_.speed < 0))\n\
    \        val carsRight = carsRight.takeWhile(_ => carsRight.forall(_.speed < 0))\n\
    \        val carsLeft = carsLeft.takeWhile(_ => carsLeft.forall(_.speed > 0))\n\
    \        val carsRight = carsRight.takeWhile(_ => carsRight.forall(_.speed > 0))\n\
    \        val carsLeft = carsLeft.takeWhile(_ => carsLeft.forall(_.speed < 0))\n\
    \        val carsRight = carsRight.takeWhile(_ => carsRight.forall(_.speed < 0))\n\
    \        val carsLeft = carsLeft.takeWhile(_ => carsLeft.forall(_.speed > 0))\n\
    \        val carsRight = carsRight.takeWhile(_ => carsRight.forall(_.speed > 0))\n\
    \        val carsLeft = carsLeft.takeWhile(_ => carsLeft.forall(_.speed < 0))\n\
    \        val carsRight = carsRight.takeWhile(_ => carsRight.forall(_.speed < 0))\n\
    \        val carsLeft = carsLeft.takeWhile(_ => carsLeft.forall(_.speed > 0))\n\
    \        val carsRight = carsRight.takeWhile(_ => carsRight.forall(_.speed > 0))\n\
    \        val carsLeft = carsLeft.takeWhile(_ => carsLeft.forall(_.speed < 0))\n\
    \        ", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[", "        val cars = mutable.ListBuffer(1 to n).map(i\
    \ => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        cars.foreach(c => {\n            c.foreach(d => {\n                val\
    \ collision = c.zip(d)\n                collision foreach { case (c1, c2) => collisions\
    \ += c1 }\n            })\n        })\n        collisions.toList.length", "  \
    \      val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n  \
    \      val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n    \
    \    val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]", "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSize = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSize = mutable.Set[Long]()\n     \
    \   val collisionsSoFarSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n      \
    \  val collisionsSoFarSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n   \
    \     val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize =\
    \ mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]", "        val collisions = mutable.ListBuffer[Long]()\n\
    \        var carsLeft = n\n        var carsRight = n - 1\n        val speed =\
    \ 1.0;\n        val cars = mutable.ListBuffer[Car]()\n        val carsLeft = mutable.ListBuffer[Car]()\n\
    \        val carsRight = mutable.ListBuffer[Car]()\n        val carsCollisions\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsRight = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsRight = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsRight = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsRight = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Car]()\n        val carsCollisionsLeft = mutable.ListBuffer[Car]()\n\
    \        val carsCollisionsRight = mut", "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[", "        val cars = mutable.ArrayBuffer.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val carsLeft = mutable.ArrayBuffer.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val carsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(mutable.Queue[Int]())\n        val collisions = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n \
    \       val collisionsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val\
    \ carsLeft = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n        val\
    \ carsRight = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n        val\
    \ collisions = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val collisions = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val collisions = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val collisions = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft\
    \ = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n\
    \ / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[Int]())\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n / 2)(mutable.Queue[", "  \
    \      var collisions = 0\n        var cars = List[Car]()\n        for( i <- 1\
    \ to n){\n            cars = cars :+ new Car(math.random,math.random)\n      \
    \  }\n        cars.foreach(c => c.move())\n        cars.foreach(c => c.collide(cars))\n\
    \        cars.foreach(c => collisions += c.collisions)\n        collisions", " \
    \       val cars = Vector.tabulate(n)(i => Car(Vector.random(Vector.zero), Vector.zero))\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collisionsSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val\
    \ collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val carsLeft = cars.takeRight(n)\n        val\
    \ carsRight = cars.dropRight(n)\n        val collisions = carsLeft.foldLeft(0)((acc,\
    \ car) => acc + (car.collide(carsRight)))\n        collisions", "        val cars\
    \ = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsRight = mutable.ListBuffer.empty[Long]\n        val collisionsBoth\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothRight = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBoth = mutable.ListBuffer.empty[Long]\n       \
    \ val collisionsBothBothBothLeft = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothBothBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBoth\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothRight\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBoth\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothRight\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBoth\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothRight\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothBoth\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothBothRight\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothBothBoth\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothBothBothLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothBothBothRight\
    \ = mut", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsLeft = mutable.ListBuffer[Long]()\n        val collisionsRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothLeft = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothRight = mutable.ListBuffer[Long]()\n      \
    \  val collisionsBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothRight =\
    \ mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothRight = mutable.ListBuffer[",
  "        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed = mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit2 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit2s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit3\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit3s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit4 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit4s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit5 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit5s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit6\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit6s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit7 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit7s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit8 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit8s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit9\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit9s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit10 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit10s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit11 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit11s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit12\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit12s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit13 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit13s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit14 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit14s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit15\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit15s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit16 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit16s\
    \ = mutable.", "        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n        val\
    \ collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSo", "        var collisions =\
    \ 0\n        var cars = List[Car]()\n        var carsLeft = List[Car]()\n    \
    \    var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n       \
    \ var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var\
    \ carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight\
    \ = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n\
    \        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n   \
    \     var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n      \
    \  var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var\
    \ carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft\
    \ = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n\
    \        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n   \
    \     var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n      \
    \  var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var\
    \ carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight\
    \ = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n\
    \        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n   \
    \     var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n      \
    \  var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var\
    \ carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft\
    \ = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n\
    \        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n   \
    \     var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n      \
    \  var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var\
    \ carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight\
    \ = List[Car]()\n        var carsLeft = List[Car", "        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill", "        val cars = Array.fill(n / 2)(math.random)\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val carsLeft\
    \ = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val\
    \ carsRightToLeft = carsRight.zip(carsLeft)\n        val carsLeftToRight = carsLeft.zip(carsRight)\n\
    \        val carsRightToLeftAndLeftToRight = carsRightToLeft.zip(carsLeftToRight)\n\
    \        val carsRightToLeftAndLeftToRightAndLeftToRight = carsRightToLeftAndLeftToRight.zip(carsLeftToRightAndLeftToRight)\n\
    \        val carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRight = carsRightToLeftAndLeftToRightAndLeftToRight.zip(carsLeftToRightAndLeftToRightAndLeftToRight)\n\
    \        val carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight\
    \ = carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRight.zip(carsLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight)\n\
    \        val carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight\
    \ = carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight.zip(carsLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight)\n\
    \        val carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight\
    \ = carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight.zip(carsLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight)\n\
    \        val carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRight\
    \ = carsRightToLeftAndLeftToRightAndLeftToRightAndLeftToRightAndLeftToRightAndLeftTo",
  "        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to\
    \ n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n \
    \       cars.foreach { cars =>\n            cars.foreach { car =>\n          \
    \      cars.foreach { otherCar =>\n                    val collision = car.zip(otherCar).forall\
    \ { case (car1, car2) =>\n                        (car1._1 - car2._1) * (car1._2\
    \ - car2._2) < 0\n                    }\n                    if (collision) collisions\
    \ += car._1\n                }\n            }\n        }\n        collisions.toList.size",
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val collisions = carsLeft.zip(carsRight).filter(_._1.collidesWith(_._2)).length\n\
    \        collisions", "        val cars = Vector.tabulate(n)(i => i)\n       \
    \ val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount3 = mutable.ListBuffer.empty[Long]\n        val collisionsCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount6 = mutable.ListBuffer.empty[Long]\n        val collisionsCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount9 = mutable.ListBuffer.empty[Long]\n        val collisionsCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount12 = mutable.ListBuffer.empty[Long]\n        val collisionsCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount14 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount15 = mutable.ListBuffer.empty[Long]\n        val collisionsCount16\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount17 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount18 = mutable.ListBuffer.empty[Long]\n        val collisionsCount19\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount20 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount21 = mutable.ListBuffer.empty[Long]\n        val collisionsCount22\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount23 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount24 = mutable.ListBuffer.empty[Long]\n        val collisionsCount25\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount26 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount27 = mutable.ListBuffer.empty[Long]\n        val collisionsCount28\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsCount29 = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsCount30 = mutable.ListBuffer.empty[Long]\n        val collisionsCount31\
    \ = mutable.ListBuffer.empty[Long]\n        ", "        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2\
    \ = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n\
    \        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5\
    \ = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n\
    \        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8\
    \ = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n\
    \        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11\
    \ = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n\
    \        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14\
    \ = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n\
    \        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17\
    \ = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n\
    \        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20\
    \ = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n\
    \        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23\
    \ = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n\
    \        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26\
    \ = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n\
    \        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29\
    \ = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n\
    \        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32\
    \ = mutable.Set.empty[Long]\n        val collisionsCount", "        val cars =\
    \ Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n     \
    \   val collides = mutable.Set.empty[Long]\n        val collide = mutable.Set.empty[Long]\n\
    \        val collideLeft = mutable.Set.empty[Long]\n        val collideRight =\
    \ mutable.Set.empty[Long]\n        val collideLeft = mutable.Set.empty[Long]\n\
    \        val collideRight = mutable.Set.empty[Long]\n        val collideLeft =\
    \ mutable.Set.empty[Long]\n        val collideRight = mutable.Set.empty[Long]\n\
    \        val collideLeft = mutable.Set.empty[Long]\n        val collideRight =\
    \ mutable.Set.empty[Long]\n        val collideLeft = mutable.Set.empty[Long]\n\
    \        val collideRight = mutable.Set.empty[Long]\n        val collideLeft =\
    \ mutable.Set.empty[Long]\n        val collideRight = mutable.Set.empty[Long]\n\
    \        val collideLeft = mutable.Set.empty[Long]\n        val collideRight =\
    \ mutable.Set.empty[Long]\n        val collideLeft = mutable.Set.empty[Long]\n\
    \        val collideRight = mutable.Set.empty[Long]\n        val collideLeft =\
    \ mutable.Set.empty[Long]\n        val collideRight = mutable.Set.empty[Long]\n\
    \        val collideLeft = mutable.Set.empty[Long]\n        val collideRight =\
    \ mutable.Set.empty[Long]\n        val collideLeft = mutable.Set.empty[Long]\n\
    \        val collideRight = mutable.Set.empty[Long]\n        val collideLeft =\
    \ mutable.Set.empty[Long]\n        val collideRight = mutable.Set.empty[Long]\n\
    \        val collideLeft = mutable.Set.empty[Long]\n        val collideRight =\
    \ mutable.Set.empty[Long]\n        val collideLeft = mutable.Set.empty[Long]\n\
    \        val collideRight = mutable.Set.empty[Long]\n        val collideLeft =\
    \ mutable.Set.empty[Long]\n        val collideRight = mutable.Set.empty[Long]\n\
    \        val collideLeft = mutable.Set.empty[Long]\n        val collideRight =\
    \ mutable.Set.empty[Long]\n        val collideLeft = mutable.Set.empty[Long]\n\
    \        val collideRight = mutable.Set.empty[Long]", "        val cars = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollision = mutable.ListBuffer[Int]()\n        val carsCollisionLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionRight", "        val cars = Vector.tabulate(n)(i =>\
    \ Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n      \
    \  val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n       \
    \ val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n",
  "        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n\
    \        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.",
  "        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speed = mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit2 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit2s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit3\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit3s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit4 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit4s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit5 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit5s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit6\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit6s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit7 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit7s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit8 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit8s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit9\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit9s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit10 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit10s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit11 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit11s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit12\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit12s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit13 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit13s\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit14 = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit14s = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit15\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit15s = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedLimit16 = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit16s\
    \ = mutable.", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collided = mutable.Set.empty[Car]\n      \
    \  val colliding = mutable.Set.empty[Car]\n        val collisions = mutable.Set.empty[Car]\n\
    \        val collisionsSoFar = mutable.Set.empty[Car]\n        val collisionsSoFarSoFar\
    \ = mutable.Set.empty[Car]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n       \
    \ val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Car]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar", "        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer.empty[Long]", "        val collisions = mutable.ListBuffer.empty[Long]\n\
    \        val cars = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n\
    \        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight\
    \ = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n\
    \        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight\
    \ = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n\
    \        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight\
    \ = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n\
    \        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight\
    \ = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n\
    \        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n\
    \        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight\
    \ = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n\
    \        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.", "     \
    \   val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collisionsSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val\
    \ collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set.empty[Long]\n", "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100),\
    \ Vector.random(100)))\n        val collided = mutable.Set[Car]()\n        val\
    \ colliding = mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n\
    \        val collisionsSoFar = mutable.Set[Car]()\n        val collisionsSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Car]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Car]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSo",
  "        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n\
    \        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothLeft\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBoth = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothRight\
    \ = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothLeft = mutable.ListBuffer.empty[Long]\n   \
    \     val collisionsBothBothBothRight = mutable.ListBuffer.empty[Long]\n     \
    \   val collisionsBothBothBothBoth = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n        val\
    \ collisionsBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n      \
    \  val collisionsBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n\
    \        val collisionsBothBothBothBothBothBothBothRight = mutable.ListBuffer.empty",
  "        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to\
    \ n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long", "        val collisions = 0\n        val cars =\
    \ Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val carsLeft\
    \ = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val\
    \ carsCollisions = carsLeft.zip(\n            carsRight\n        ).filter(_._1._1\
    \ == _._1._2).filter(_._1._2 == _._2._1).length\n        val carsCollisionsLeft\
    \ = carsLeft.zip(\n            carsRight\n        ).filter(_._1._1 == _._1._2).filter(_._1._2\
    \ == _._2._2).length\n        val carsCollisionsRight = carsRight.zip(\n     \
    \       carsLeft\n        ).filter(_._1._1 == _._1._2).filter(_._1._2 == _._2._1).length\n\
    \        collisions += carsCollisions\n        collisions += carsCollisionsLeft\n\
    \        collisions += carsCollisionsRight\n        collisions"]
stop_tokens:
- "\n    }\n"
