name: HumanEval_108_count_nums
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function count_nums which takes a list of integers and returns\n\
  \    // the number of elements which has a sum of digits > 0.\n    // If a number\
  \ is negative, then its first signed digit will be negative:\n    // e.g. -123 has\
  \ signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    // (0l)\n\
  \    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n    //\
  \ (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n  \
  \  // (3l)\n    def countNums(arr : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
  \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
  \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
  \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
  \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
  \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
  \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n   \
  \ assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
  \ == (1l));\n    }\n\n}\n"
completions: ["        val nums = arr.toSet\n        val sums = arr.map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.", "        val nums = arr.filter(_ > 0).map(_.toInt)\n        val sums\
    \ = nums.map(x => math.abs(x))\n        val count = sums.count(_ > 0)\n      \
    \  count", "        val digits = arr.map(_.toString.toInt)\n        val sums =\
    \ digits.map(_.sum)\n        val positiveSums = sums.filter(sum > 0)\n       \
    \ val negativeSums = sums.filter(sum < 0)\n        positiveSums.size + (negativeSums.size\
    \ - positiveSums.size)", "        var count = 0\n        for(i <- arr) {\n   \
    \         val digit = i % 10\n            val sign = if (i < 0) -1 else 1\n  \
    \          count += sign * digit\n        }\n        count", "        val sum\
    \ = 0\n        arr.foreach(x => sum += x.toInt)\n        arr.count(x => x > 0)",
  "        val nums = arr.toSet\n        val numsSum = arr.map(x => math.abs(x)).reduceLeft(_\
    \ + _)\n        nums.count(x => x > 0 && numsSum - math.abs(x) > 0)", "      \
    \  val digits = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n\
    \        val positiveSums = sums.filter(sum => sum > 0)\n        val negativeSums\
    \ = sums.filter(sum => sum < 0)\n        val positiveSumsCount = positiveSums.length\n\
    \        val negativeSumsCount = negativeSums.length\n        val positiveSumsSum\
    \ = positiveSums.sum\n        val negativeSumsSum = negativeSums.sum\n       \
    \ val positiveSumsSumAbs = positiveSumsSum.abs\n        val negativeSumsSumAbs\
    \ = negativeSumsSum.abs\n        val positiveSumsSumAbsCount = positiveSumsSumAbs.length\n\
    \        val negativeSumsSumAbsCount = negativeSumsSumAbs.length\n        val\
    \ positiveSumsSumAbsSum = positiveSumsSumAbs.sum\n        val negativeSumsSumAbsSum\
    \ = negativeSumsSumAbs.sum\n        val positiveSumsSumAbsSumAbs = positiveSumsSumAbsSum.abs\n\
    \        val negativeSumsSumAbsSumAbs = negativeSumsSumAbsSum.abs\n        val\
    \ positiveSumsSumAbsSumAbsCount = positiveSumsSumAbsSumAbs.length\n        val\
    \ negativeSumsSumAbsSumAbsCount = negativeSumsSumAbsSumAbs.length\n        val\
    \ positiveSumsSumAbsSumAbsSum = positiveSumsSumAbsSumAbs.sum\n        val negativeSumsSumAbsSumAbsSum\
    \ = negativeSumsSumAbsSumAbs.sum\n        val positiveSumsSumAbsSumAbsSumAbs =\
    \ positiveSumsSumAbsSumAbsSumAbs.abs\n        val negativeSumsSumAbsSumAbsSumAbs\
    \ = negativeSumsSumAbsSumAbsSumAbs.abs\n        val positiveSumsSumAbsSumAbsSumAbsCount\
    \ = positiveSumsSumAbsSumAbsSumAbsCount.toLong\n        val negativeSumsSumAbsSumAbsSumAbsCount\
    \ = negativeSumsSumAbsSumAbsSumAbsCount.toLong\n        val positiveSumsSumAbsSumAbsSumAbsSum\
    \ = positiveSumsSumAbsSumAbsSumAbsSum.toLong\n        val negativeSumsSumAbsSumAbsSumAbsSum\
    \ = negativeSumsSumAbsSumAbsSumAbsSum.toLong\n        ", "        val nums = arr.filter(x\
    \ => x > 0).map(x => x.toString.toInt)\n        val sums = nums.map(x => x.sum)\n\
    \        sums.count(x => x > 0)", "        val n = arr.size\n        val sum =\
    \ 0\n        var i = 0\n        while (i < n) {\n            val digit = arr(i).toInt\n\
    \            sum += digit\n            i += 1\n        }\n        if (sum > 0)\
    \ {\n            return n\n        }\n        else {\n            val sign = if\
    \ (arr(0) < 0) -1 else 1\n            val digit = arr(0).toInt\n            val\
    \ sum = digit + sign\n            val newArr = arr.drop(1)\n            newArr\
    \ :+ sum\n        }", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val numsWithSum = sums.filter(x => x > 0).length\n\
    \        numsWithSum", "        val nums = arr.toList\n        val numsLen = nums.length\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val sumsLen = sums.length\n\
    \        val numsSums = mutable.ArrayBuffer.empty[Long]\n        val numsSumsLen\
    \ = numsSums.length\n        val numsSumsLen2 = numsSumsLen * numsSumsLen\n  \
    \      val numsSumsLen3 = numsSumsLen2 * numsSumsLen\n        val numsSumsLen4\
    \ = numsSumsLen3 * numsSumsLen\n        val numsSumsLen5 = numsSumsLen4 * numsSumsLen\n\
    \        val numsSumsLen6 = numsSumsLen5 * numsSumsLen\n        val numsSumsLen7\
    \ = numsSumsLen6 * numsSumsLen\n        val numsSumsLen8 = numsSumsLen7 * numsSumsLen\n\
    \        val numsSumsLen9 = numsSumsLen8 * numsSumsLen\n        val numsSumsLen10\
    \ = numsSumsLen9 * numsSumsLen\n        val numsSumsLen11 = numsSumsLen10 * numsSumsLen\n\
    \        val numsSumsLen12 = numsSumsLen11 * numsSumsLen\n        val numsSumsLen13\
    \ = numsSumsLen12 * numsSumsLen\n        val numsSumsLen14 = numsSumsLen13 * numsSumsLen\n\
    \        val numsSumsLen15 = numsSumsLen14 * numsSumsLen\n        val numsSumsLen16\
    \ = numsSumsLen15 * numsSumsLen\n        val numsSumsLen17 = numsSumsLen16 * numsSumsLen\n\
    \        val numsSumsLen18 = numsSumsLen17 * numsSumsLen\n        val numsSumsLen19\
    \ = numsSumsLen18 * numsSumsLen\n        val numsSumsLen20 = numsSumsLen19 * numsSumsLen\n\
    \        val numsSumsLen21 = numsSumsLen20 * numsSumsLen\n        val numsSumsLen22\
    \ = numsSumsLen21 * numsSumsLen\n        ", "        val digits = arr.map(_.toInt)\n\
    \        val sum = digits.sum\n        if (sum > 0) {\n            val digitSum\
    \ = digits.map(_.toInt).sum\n            if (digitSum > 0) {\n               \
    \ val digitSum = digits.map(_.toInt).sum\n                if (digitSum > 0) {\n\
    \                    val digitSum = digits.map(_.toInt).sum\n                \
    \    if (digitSum > 0) {\n                        val digitSum = digits.map(_.toInt).sum\n\
    \                        if (digitSum > 0) {\n                            val\
    \ digitSum = digits.map(_.toInt).sum\n                            if (digitSum\
    \ > 0) {\n                                val digitSum = digits.map(_.toInt).sum\n\
    \                                if (digitSum > 0) {\n                       \
    \             val digitSum = digits.map(_.toInt).sum\n                       \
    \             if (digitSum > 0) {\n                                        val\
    \ digitSum = digits.map(_.toInt).sum\n                                       \
    \ if (digitSum > 0) {\n                                            val digitSum\
    \ = digits.map(_.toInt).sum\n                                            if (digitSum\
    \ > 0) {\n                                                val digitSum = digits.map(_.toInt).sum\n\
    \                                                if (digitSum > 0) {\n       \
    \                                             val digitSum = digits.map(_.toInt).sum\n\
    \                                                    if (digitSum > 0) {\n   \
    \                                                     val digitSum = digits.map(_.toInt).sum\n\
    \                                                        if (digitSum > 0) {\n\
    \                                                            val digitSum = digits.map(_.toInt).sum\n\
    \                                                            if (digitSum > 0)\
    \ {\n                                                                val digitSum\
    \ = digits.map(_.toInt).sum\n                                                \
    \                if (digitSum > 0) {\n                                       \
    \                             val digitSum = digits.map(_.toInt).sum\n       \
    \                                                             if (digitSum > 0)\
    \ {\n                                                                        val\
    \ digitSum = digits.map(_.toInt).sum\n                                       \
    \                                 if (digitSum > 0) {\n                      \
    \                                                      val digitSum = digits.map(_.toInt).sum\n\
    \                                                                            if\
    \ (digitSum > 0) {\n                                                         \
    \                       val digitSum = digits.map(_.toInt).sum\n             \
    \                                                                   if (digitSum\
    \ > 0) {\n                                                                   \
    \                 val digitSum = digits.map(_.toInt).sum\n                   \
    \                                                                 if (digitSum\
    \ > 0) {\n                                                                   \
    \                     val digitSum = digits.map(_.toInt).sum\n               \
    \                                                                         if (digitSum\
    \ > 0) {\n                                                                   \
    \                         val digitSum = digits.map(_.toInt).sum\n           \
    \                                                                            \
    \     if (digitSum > 0) {\n                                                  \
    \                                              val digitSum = digits.map(_.toInt).sum\n\
    \                                                                            \
    \                    if (digitSum > 0) {\n                                   \
    \                                                                 val digitSum\
    \ = digits.map(_.toInt).sum\n                                                \
    \                                                    if (digitSum > 0) {\n   \
    \                                                                            \
    \                         val digitSum = digits.map(_.toInt).sum\n           \
    \                                                                            \
    \                 if (digitSum > ", "        val n = arr.size\n        val sum\
    \ = 0\n        for(i <- 0 until n){\n            val x = arr(i)\n            sum\
    \ += x\n        }\n        sum", "        val nums = arr.toSet\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val numsSum = sums.toSet\n        val numsSumSum\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSumSum = numsSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSum = numsSumSumSum.map(x => math.abs(x))\n\
    \        val numsSumSumSumSumSum = numsSumSumSumSum.map(x => math.abs(x))\n  \
    \      val numsSumSumSumSumSumSum = numsSumSumSumSumSum.map(x => math.abs(x))\n\
    \        val numsSumSumSumSumSumSumSum = numsSumSumSumSumSumSum.map(x => math.abs(x))\n\
    \        val numsSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSum.map(x =>\
    \ math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSum", "        val\
    \ digits = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n \
    \       val nums = arr.filter(_ > 0).map(_.toString.toInt).sum\n        sums.filter(_\
    \ > 0).count(_ > 0)", "        val nums = arr.toSet\n        val numsSet = nums.toSet\n\
    \        val numsSum = nums.map(x => x.toString.toInt).sum\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet2 = numsSumSet.filter(x => x < 0)\n \
    \       val numsSumSet3 = numsSumSet.filter(x => x > 0)\n        numsSumSet3.size",
  "        val nums = arr.toSet\n        val numsSet = nums.toSeq\n        val numsSetLen\
    \ = numsSet.length\n        val numsSetSum = numsSet.sum\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigitsLen = numsSetSumDigits.length\n\
    \        val numsSetSumDigitsSum = numsSetSumDigits.sum\n        val numsSetSumDigitsSumDigits\
    \ = numsSetSumDigitsSum.toString.length\n        val numsSetSumDigitsSumDigitsLen\
    \ = numsSetSumDigitsSumDigits.length\n        val numsSetSumDigitsSumDigitsSum\
    \ = numsSetSumDigitsSumDigits.sum\n        val numsSetSumDigitsSumDigitsSumDigits\
    \ = numsSetSumDigitsSumDigitsSum.toString.length\n        val numsSetSumDigitsSumDigitsSumDigitsLen\
    \ = numsSetSumDigitsSumDigitsSumDigits.length\n        val numsSetSumDigitsSumDigitsSumDigitsSum\
    \ = numsSetSumDigitsSumDigitsSumDigitsSum.toString.length\n        val numsSetSumDigitsSumDigitsSumDigitsSumDigitsLen\
    \ = numsSetSumDigitsSumDigitsSumDigitsSumDigits.length\n        val numsSetSumDigitsSumDigitsSumDigitsSumDigitsSum\
    \ = numsSetSumDigitsSumDigitsSumDigitsSumDigitsSum.toString.length\n        val\
    \ numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsLen = numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsLen\n\
    \        val numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsSum = numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsSum.toString.length\n\
    \        val numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsLen\
    \ = numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsLen\n       \
    \ val numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsLen = numsSetSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsLen\n\
    \        val ", "        val nums = arr.toSet\n        val numsSum = arr.map(x\
    \ => if (x < 0) x.toLong % 10 else x.toLong / 10).sum\n        nums.count(x =>\
    \ x > 0 && numsSum - x == 0)", "        val nums = arr.filter(_ > 0)\n       \
    \ val sums = nums.map(x => math.abs(x))\n        val count = sums.count(_ > 0)\n\
    \        count", "        val nums = arr.toSet\n        val sums = arr.map(x =>\
    \ math.abs(x))\n        val count = sums.count(x => x > 0)\n        val sign =\
    \ sums.count(x => x < 0)\n        val firstSign = math.abs(sums.head)\n      \
    \  val firstSignCount = sums.count(x => x < firstSign)\n        val firstSignSum\
    \ = sums.filter(x => x < firstSign).sum\n        val firstSignSumCount = sums.count(x\
    \ => x < firstSignSum)\n        val firstSignSumCount = sums.count(x => x < firstSignSum)\n\
    \        val firstSignSumCount = sums.count(x => x < firstSignSum)\n        val\
    \ firstSignSumCount = sums.count(x => x < firstSignSum)\n        val firstSignSumCount\
    \ = sums.count(x => x < firstSignSum)\n        val firstSignSumCount = sums.count(x\
    \ => x < firstSignSum)\n        val firstSignSumCount = sums.count(x => x < firstSignSum)\n\
    \        val firstSignSumCount = sums.count(x => x < firstSignSum)\n        val\
    \ firstSignSumCount = sums.count(x => x < firstSignSum)\n        val firstSignSumCount\
    \ = sums.count(x => x < firstSignSum)\n        val firstSignSumCount = sums.count(x\
    \ => x < firstSignSum)\n        val firstSignSumCount = sums.count(x => x < firstSignSum)\n\
    \        val firstSignSumCount = sums.count(x => x < firstSignSum)\n        val\
    \ firstSignSumCount = sums.count(x => x < firstSignSum)\n        val firstSignSumCount\
    \ = sums.count(x => x < firstSignSum)\n        val firstSignSumCount = sums.count(x\
    \ => x < firstSignSum)\n        val firstSignSumCount = sums.count(x => x < firstSignSum)\n\
    \        val firstSignSumCount = sums.count(x => x < firstSignSum)\n        val\
    \ firstSignSumCount = sums.count(x => x < firstSignSum)\n        val firstSignSumCount\
    \ = sums.count(x => x < firstSignSum)\n        val firstSignSumCount = sums.count(x\
    \ => x < firstSignSum)\n        val firstSignSumCount = sums.count(x => x < firstSignSum)\n\
    \        val firstSignSumCount = sums.count(x => x < firstSignSum)\n        val\
    \ firstSignSumCount = sums.count(x => x < firstSignSum)\n        val firstSignSumCount\
    \ = sums.count(x => x < firstSignSum)\n        ", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val sumsSet = sums.toSet\n\
    \        val numsSet = nums.toSet\n        val numsSum = nums.map(x => math.abs(x))\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet2 = numsSum.map(x\
    \ => math.abs(x))\n        val numsSumSet3 = numsSum.map(x => math.abs(x))\n \
    \       val numsSumSet4 = numsSum.map(x => math.abs(x))\n        val numsSumSet5\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSet6 = numsSum.map(x =>\
    \ math.abs(x))\n        val numsSumSet7 = numsSum.map(x => math.abs(x))\n    \
    \    val numsSumSet8 = numsSum.map(x => math.abs(x))\n        val numsSumSet9\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSet10 = numsSum.map(x =>\
    \ math.abs(x))\n        val numsSumSet11 = numsSum.map(x => math.abs(x))\n   \
    \     val numsSumSet12 = numsSum.map(x => math.abs(x))\n        val numsSumSet13\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSet14 = numsSum.map(x =>\
    \ math.abs(x))\n        val numsSumSet15 = numsSum.map(x => math.abs(x))\n   \
    \     val numsSumSet16 = numsSum.map(x => math.abs(x))\n        val numsSumSet17\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSet18 = numsSum.map(x =>\
    \ math.abs(x))\n        val numsSumSet19 = numsSum.map(x => math.abs(x))\n   \
    \     val numsSumSet20 = numsSum.map(x => math.abs(x))\n        val numsSumSet21\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSet22 = numsSum.map(x =>\
    \ math.abs(x))\n        val numsSumSet23 = numsSum.map(x => math.abs(x))\n   \
    \     val numsSumSet24 = numsSum.map(x => math.abs(x))\n        val numsSumSet25\
    \ = numsSum.map(x => math.", "        val nums = arr.toSet\n        val numsSum\
    \ = arr.toList.map(_.toString.toInt).sum\n        nums.filter(_ > 0).count(numsSum)",
  "        val sums = arr.map(x => if (x < 0) x.toLong.signum else x).toList\n   \
    \     val count = sums.count(x => x > 0)\n        count", "        val n = arr.length\n\
    \        val sums = arr.map(x => x.toString.toLong).map(x => x.toInt).map(x =>\
    \ x.toLong)\n        val sumsSum = sums.sum\n        val sumsSumInt = sumsSum.toInt\n\
    \        val sumsSumIntInt = sumsSumInt.toInt\n        val sumsSumIntIntInt =\
    \ sumsSumIntInt.toInt\n        val sumsSumIntIntIntInt = sumsSumIntIntInt.toInt\n\
    \        val sumsSumIntIntIntIntInt = sumsSumIntIntIntInt.toInt\n        val sumsSumIntIntIntIntIntInt\
    \ = sumsSumIntIntIntIntInt.toInt\n        val sumsSumIntIntIntIntIntIntInt = sumsSumIntIntIntIntIntInt.toInt\n\
    \        val sumsSumIntIntIntIntIntIntIntInt = sumsSumIntIntIntIntIntIntInt.toInt\n\
    \        val sumsSumIntIntIntIntIntIntIntIntInt = sumsSumIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val sumsSumIntIntIntIntIntIntIntIntIntInt = sumsSumIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val sumsSumIntIntIntIntIntIntIntIntIntIntInt = sumsSumIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val sumsSumIntIntIntIntIntIntIntIntIntIntIntInt = sumsSumIntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val sumsSumIntIntIntIntIntIntIntIntIntIntIntIntInt = sumsSumIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val sumsSumIntIntIntIntIntIntIntIntIntIntIntIntInt = sumsSumIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val sumsSumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = sumsSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val sumsSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = sumsSumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.",
  "        val sums = arr.map(x => x.toString.toInt).map(x => x.toInt).map(x => x\
    \ * x).sum\n        sums.toLong", "        val n = arr.size\n        val m = arr.head\n\
    \        val sum = 0\n        for(i <- 0 until n){\n            val x = arr(i)\n\
    \            sum += x\n            if(sum > 0){\n                break\n     \
    \       }\n        }\n        sum", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        sums.count(_ > 0)", "        val\
    \ digits = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n \
    \       val positiveSums = sums.filter(_.isPositive)\n        val negativeSums\
    \ = sums.filter(_.isNegative)\n        val positiveSumCount = positiveSums.count(_\
    \ > 0)\n        val negativeSumCount = negativeSums.count(_ < 0)\n        val\
    \ positiveSumCountAndNegativeSumCount = positiveSumCount + negativeSumCount\n\
    \        val positiveSumCountAndNegativeSumCountAndSumCount = positiveSumCountAndNegativeSumCount\
    \ + positiveSums.sum\n        val positiveSumCountAndNegativeSumCountAndSumCountAndSum\
    \ = positiveSumCountAndNegativeSumCountAndSumCount + positiveSums.sum\n      \
    \  val positiveSumCountAndNegativeSumCountAndSumCountAndSumCountAndSum = positiveSumCountAndNegativeSumCountAndSumCountAndSumCount\
    \ + positiveSums.sum\n        val positiveSumCountAndNegativeSumCountAndSumCountAndSumCountAndSumCountAndSum\
    \ = positiveSumCountAndNegativeSumCountAndSumCountAndSumCountAndSumCount + positiveSums.sum\n\
    \        val positiveSumCountAndNegativeSumCountAndSumCountAndSumCountAndSumCountAndSumCountAndSum\
    \ = positiveSumCountAndNegativeSumCountAndSumCountAndSumCountAndSumCountAndSumCount\
    \ + positiveSums.sum\n        val positiveSumCountAndNegativeSumCountAndSumCountAndSumCountAndSumCountAndSumCountAndSumCountAndSum\
    \ = positiveSumCountAndNegativeSumCountAndSumCountAndSumCountAndSumCountAndSumCountAndSumCount\
    \ + positiveSums.sum\n        val positiveSumCountAndNegativeSumCountAndSumCountAndSumCountAndSumCountAndSumCountAndSumCountAndSum\
    \ = positiveSumCountAndNegativeSumCountAndSumCountAndSumCountAndSumCountAndSumCountAndSumCount\
    \ + positiveSums.sum\n        val positiveSumCountAndNegativeSumCountAndSumCountAndSumCountAndSumCountAndSumCountAndSumCountAndSumCountAndSum\
    \ = positiveSumCountAndNegativeSumCountAndSumCountAndSumCountAndSumCountAndSumCountAndSumCountAndSumCount\
    \ + positiveSums.sum\n        val positiveSumCountAndNegativeSumCountAndSumCountAndSumCountAndSumCountAndSumCountAndSumCountAndSumCountAndSum\
    \ = positiveSumCountAndNegativeSumCountAndSumCountAndSumCountAndSumCountAndSumCountAndSumCountAndSumCount\
    \ + positiveSums.sum\n        val positive", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val positiveSums = sums.filter(_.isPositive)\n\
    \        val negativeSums = sums.filter(_.isNegative)\n        val positiveSumsCount\
    \ = positiveSums.count(_ > 0)\n        val negativeSumsCount = negativeSums.count(_\
    \ > 0)\n        val positiveSumsCountAndNegativeSumsCount = positiveSumsCount\
    \ + negativeSumsCount\n        val positiveSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ = positiveSumsCountAndNegativeSumsCount + negativeSumsCountAndNegativeSumsCount\n\
    \        val positiveSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ = positiveSumsCountAndNegativeSumsCountAndNegativeSumsCount + negativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\n\
    \        val positiveSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ = positiveSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ + negativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\n\
    \        val positiveSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ = positiveSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ + negativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\n\
    \        val positiveSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ = positiveSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ + negativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\n\
    \        val positiveSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ = positiveSumsCountAndNegativeSums", "        val n = arr.length\n        val\
    \ sum = 0\n        for (i <- 0 until n) {\n            sum += arr(i)\n       \
    \ }\n        sum", "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x\
    \ => x.toString.toInt).sum\n        sums.toLong", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sum = digits.sum\n        val nums = arr.filter(_ > 0).map(_ - sum)\n\
    \        nums.count(_ > 0)", "        val nums = arr.filter(_ > 0)\n        val\
    \ sums = nums.map(_.toString.toInt).sum\n        sums.toLong", "        val nums\
    \ = arr.filter(x => x >= 0)\n        val sums = nums.map(x => math.abs(x))\n \
    \       sums.count(x => x > 0)", "        val nums = arr.toSet\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val numsSum = nums.map(x => digits.sum)\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSetSize = numsSumSet.size\n\
    \        val numsSumSetSize = numsSumSet.size\n        val numsSumSetSize = numsSumSet.size\n\
    \        numsSumSetSize / numsSumSet.toSet.size ", "        val nums = arr.toSet\n\
    \        val numsSum = nums.map(x => x.toString.toInt).sum\n        nums.count(x\
    \ => x.toString.toInt > 0 && x.toString.toInt <= numsSum)", "        val nums\
    \ = arr.filter(x => x >= 0).map(x => x.toString.toInt)\n        val sums = nums.map(x\
    \ => x.sum)\n        sums.sum", "        val nums = arr.toSet\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val sumsSet = sums.toSet\n        val numsSet\
    \ = nums.toSet\n        val numsSums = nums.map(x => math.abs(x))\n        val\
    \ numsSumsSet = numsSums.toSet\n        val numsSumsSetSet = numsSumsSet.toSet\n\
    \        val numsSumsSetSetSet = numsSumsSetSet.toSet\n        val numsSumsSetSetSetSet\
    \ = numsSumsSetSetSet.toSet\n        val numsSumsSetSetSetSetSet = numsSumsSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSet = numsSumsSetSetSetSetSet.toSet\n    \
    \    val numsSumsSetSetSetSetSetSet = numsSumsSetSetSetSetSet.toSet\n        val\
    \ numsSumsSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSet.toSet\n        val\
    \ numsSumsSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSet.toSet\n   \
    \     val numsSumsSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSet", "        val nums = arr.toSet\n        val numsSet\
    \ = nums.toSeq\n        val numsSet2 = numsSet.map(_.toString.toInt)\n       \
    \ val numsSet3 = numsSet2.map(_.toString.toInt)\n        val numsSet4 = numsSet3.map(_.toString.toInt)\n\
    \        val numsSet5 = numsSet4.map(_.toString.toInt)\n        val numsSet6 =\
    \ numsSet5.map(_.toString.toInt)\n        val numsSet7 = numsSet6.map(_.toString.toInt)\n\
    \        val numsSet8 = numsSet7.map(_.toString.toInt)\n        val numsSet9 =\
    \ numsSet8.map(_.toString.toInt)\n        val numsSet10 = numsSet9.map(_.toString.toInt)\n\
    \        val numsSet11 = numsSet10.map(_.toString.toInt)\n        val numsSet12\
    \ = numsSet11.map(_.toString.toInt)\n        val numsSet13 = numsSet12.map(_.toString.toInt)\n\
    \        val numsSet14 = numsSet13.map(_.toString.toInt)\n        val numsSet15\
    \ = numsSet14.map(_.toString.toInt)\n        val numsSet16 = numsSet15.map(_.toString.toInt)\n\
    \        val numsSet17 = numsSet16.map(_.toString.toInt)\n        val numsSet18\
    \ = numsSet17.map(_.toString.toInt)\n        val numsSet19 = numsSet18.map(_.toString.toInt)\n\
    \        val numsSet20 = numsSet19.map(_.toString.toInt)\n        val numsSet21\
    \ = numsSet20.map(_.toString.toInt)\n        val numsSet22 = numsSet21.map(_.toString.toInt)\n\
    \        val numsSet23 = numsSet22.map(_.toString.toInt)\n        val numsSet24\
    \ = numsSet23.map(_.toString.toInt)\n        val numsSet25 = numsSet24.map(_.toString.toInt)\n\
    \        val numsSet26 = numsSet25.map(_.toString.toInt)\n        val numsSet27\
    \ = numsSet26.map(_.toString.toInt)\n        val numsSet28 = numsSet27.", "  \
    \      var sum = 0\n        var count = 0\n        for (i <- arr) {\n        \
    \    sum += i\n            if (sum > 0) {\n                count += 1\n      \
    \      }\n        }\n        count", "        val n = arr.size\n        val sum\
    \ = 0\n        var i = 0\n        while (i < n) {\n            val digit = arr(i).toInt\n\
    \            if (digit < 0) {\n                digit *= -1\n            }\n  \
    \          sum += digit\n            i += 1\n        }\n        if (sum > 0) {\n\
    \            return n\n        } else {\n            return sum\n        }", " \
    \       var sum = 0\n        var count = 0\n        for (i <- arr) {\n       \
    \     sum += i\n            if (sum > 0) {\n                count += 1\n     \
    \       }\n        }\n        count", "        val nums = arr.filter(_ > 0)\n\
    \        val numsSum = nums.sum\n        val numsSumDigits = numsSum.toString.length\n\
    \        val numsSumDigit = numsSum.toString.charAt(0)\n        val numsSumDigits\
    \ = numsSumDigit - numsSumDigits.toString.length\n        numsSumDigits", "  \
    \      val nums = arr.filter(x => x > 0).map(x => x.toString.toInt)\n        val\
    \ sums = nums.map(x => x.sum)\n        sums.filter(x => x > 0).length", "    \
    \    val nums = arr.filter(_ > 0)\n        val sums = nums.map(_.toString.toInt).sum\n\
    \        sums.toLong", "        val sums = arr.map(x => x.toString.toInt).map(x\
    \ => if (x < 0) -x else x)\n        val counts = sums.groupBy(x => x).map(x =>\
    \ (x._1, x._2.size))\n        val maxCount = counts.max\n        val maxSum =\
    \ sums.max\n        val nums = maxCount match {\n            case (count, sum)\
    \ if (sum == maxSum) => count\n            case _ => 0\n        }\n        nums",
  "        val nums = arr.toList\n        val sums = nums.map(x => x.toString.toInt).map(x\
    \ => x.toInt)\n        val sumsMap = sums.toMap\n        val numsMap = nums.toMap\n\
    \        val numsMapWithSum = numsMap.mapValues(x => sumsMap.getOrElse(x, 0l))\n\
    \        val numsMapWithSumAndNegative = numsMapWithSum.mapValues(x => if (x <\
    \ 0l) -x else x)\n        val numsMapWithSumAndNegativeAndNegative = numsMapWithSumAndNegative.filter(_\
    \ < 0l)\n        val numsMapWithSumAndNegativeAndNegativeAndNegative = numsMapWithSumAndNegativeAndNegative.filter(_\
    \ > 0l)\n        numsMapWithSumAndNegativeAndNegativeAndNegative.size", "    \
    \    val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n    \
    \    val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n        val numsSums\
    \ = nums.map(x => math.abs(x))\n        val numsSumsSet = numsSums.toSet\n   \
    \     val numsSumsSet = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSet = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSet = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSet = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSet = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSet = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSet = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSet = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSet = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSet = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSet = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSet = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSet = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSet = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSet = numsSums.toSet\n        val numsSum", "        val\
    \ nums = arr.toList\n        var sum = 0\n        var count = 0\n        for (i\
    \ <- 0 until nums.size) {\n            sum += nums(i)\n            if (sum > 0)\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       val n = arr.size\n        val sum = 0\n        for(i <- 0 until n){\n\
    \            val digit = arr(i).toInt\n            sum += digit\n            if(sum\
    \ > 0)\n                sum -= digit\n        }\n        sum", "        val nums\
    \ = arr.toSet\n        val numsSum = arr.map(x => x.toString.toInt).sum\n    \
    \    nums.count(x => x > 0 && numsSum - x > 0)", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sum = digits.foldLeft(0L)(_ + _)\n        val negative = arr.exists(_\
    \ < 0)\n        val firstSign = arr.takeWhile(_ < 0).head.toString.toInt\n   \
    \     val firstSignDigit = if (negative) firstSign * -1 else firstSign\n     \
    \   val firstSignDigitCount = digits.count(_ == firstSignDigit)\n        val firstSignDigitSum\
    \ = digits.sum(_ == firstSignDigit)\n        val firstSignDigitSumCount = digits.count(_\
    \ == firstSignDigitSum)\n        val firstSignDigitSumSum = digits.sum(_ == firstSignDigitSum)\n\
    \        val firstSignDigitSumSumCount = digits.count(_ == firstSignDigitSumSum)\n\
    \        val firstSignDigitSumSumSum = digits.sum(_ == firstSignDigitSumSum)\n\
    \        val firstSignDigitSumSumSumCount = digits.count(_ == firstSignDigitSumSumSum)\n\
    \        val firstSignDigitSumSumSumSum = digits.sum(_ == firstSignDigitSumSumSum)\n\
    \        val firstSignDigitSumSumSumSumCount = digits.count(_ == firstSignDigitSumSumSumSum)\n\
    \        val firstSignDigitSumSumSumSumSum = digits.sum(_ == firstSignDigitSumSumSumSum)\n\
    \        val firstSignDigitSumSumSumSumSumCount = digits.count(_ == firstSignDigitSumSumSumSumSum)\n\
    \        val firstSignDigitSumSumSumSumSumSum = digits.sum(_ == firstSignDigitSumSumSumSumSum)\n\
    \        val firstSignDigitSumSumSumSumSumSumCount = digits.count(_ == firstSignDigitSumSumSumSumSumSum)\n\
    \        val firstSignDigitSumSumSumSumSumSumSum = digits.sum(_ == firstSignDigitSumSumSumSumSumSum)\n\
    \        val firstSignDigitSumSumSumSumSumSumSumCount = digits.count(_ == firstSignDigitSumSumSumSumSumSumSum)\n\
    \        val firstSignDigitSumSumSumSumSumSumSumSum = digits.sum(_ == firstSignDigitSumSumSumSumSumSumSum)\n\
    \        val firstSignDigitSumSumSumSumSumSumSumSumCount = digits.count(_ == firstSignDigitSumSumSumSumSumSumSumSum)\n\
    \        val firstSignDigitSumSumSumSumSumSumSumSumSum = digits.sum(_ == firstSignDigitSumSumSumSumSumSumSumSum)\n\
    \        val firstSignDigitSumSumSumSumSumSumSumSumSumCount = digits.", "    \
    \    val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        val counts = sums.groupBy(x => math.abs(x))\n        val count = counts.map(_._2.size).sum\n\
    \        count", "        val nums = arr.toSet\n        val sums = arr.map(x =>\
    \ math.abs(x))\n        val numsSums = nums.map(x => sums.filter(_ > x).size)\n\
    \        numsSums.sum", "        val n = arr.size\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until n) {\n            val digits = arr(i).abs\n       \
    \     sums += digits\n        }\n        sums.sum", "        val nums = arr.toSet\n\
    \        val numsCount = nums.size\n        val numsSum = nums.foldLeft(0l) {\
    \ (sum, num) => sum + num }\n        numsSum", "        val nums = arr.toSet\n\
    \        val digits = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n\
    \        sums.count(_ > 0)", "        var sum = 0\n        var count = 0\n   \
    \     for (i <- arr) {\n            sum += i\n            if (sum > 0) {\n   \
    \             count += 1\n            }\n        }\n        count", "        val\
    \ n = arr.size\n        val sums = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 0 until n){\n            val digit = arr(i).toInt\n            sums += digit\n\
    \        }\n        sums.sum", "        val nums = arr.toSet\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x => sums.filter(_\
    \ > x).size)\n        numsSums.sum", "        val nums = arr.toSet\n        val\
    \ sums = arr.map(x => math.abs(x))\n        val numsWithSum = sums.filter(x =>\
    \ x > 0)\n        numsWithSum.size ", "        val nums = arr.filter(x => x >\
    \ 0).map(x => x.toString.toInt).sum\n        if (nums < 0) nums.toLong * -1\n\
    \        else nums", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val numsSum = sums.filter(x => x > 0).size\n      \
    \  numsSum.toLong", "        val sums = arr.map(x => x.toString.toInt).map(x =>\
    \ x * x)\n        val positiveSums = sums.filter(x => x > 0)\n        val negativeSums\
    \ = sums.filter(x => x < 0)\n        val positiveSumsCount = positiveSums.count(x\
    \ => x > 0)\n        val negativeSumsCount = negativeSums.count(x => x < 0)\n\
    \        val positiveSumsSum = positiveSums.sum\n        val negativeSumsSum =\
    \ negativeSums.sum\n        val positiveSumsSumCount = positiveSums.count(x =>\
    \ x > 0)\n        val negativeSumsSumCount = negativeSums.count(x => x < 0)\n\
    \        val positiveSumsSumCount = positiveSums.count(x => x > 0)\n        val\
    \ negativeSumsSumCount = negativeSums.count(x => x < 0)\n        val positiveSumsSumCount\
    \ = positiveSums.count(x => x > 0)\n        val negativeSumsSumCount = negativeSums.count(x\
    \ => x < 0)\n        val positiveSumsSumCount = positiveSums.count(x => x > 0)\n\
    \        val negativeSumsSumCount = negativeSums.count(x => x < 0)\n        val\
    \ positiveSumsSumCount = positiveSums.count(x => x > 0)\n        val negativeSumsSumCount\
    \ = negativeSums.count(x => x < 0)\n        val positiveSumsSumCount = positiveSums.count(x\
    \ => x > 0)\n        val negativeSumsSumCount = negativeSums.count(x => x < 0)\n\
    \        val positiveSumsSumCount = positiveSums.count(x => x > 0)\n        val\
    \ negativeSumsSumCount = negativeSums.count(x => x < 0)\n        val positiveSumsSumCount\
    \ = positiveSums.count(x => x > 0)\n        val negativeSumsSumCount = negativeSums.count(x\
    \ => x < 0)\n        val positiveSumsSumCount = positiveSums.count(x => x > 0)\n\
    \        val negativeSumsSumCount = negativeSums.count(x => x < 0)\n        val\
    \ positiveSumsSumCount = positiveSums.count(x => x > 0)\n        val negativeSumsSumCount\
    \ = negativeSums.count(x => x < 0)\n        val positiveSumsSumCount = positiveSums.count(x\
    \ => x > 0)\n        val negativeSumsSumCount = negativeSums.count(x => x < 0)\n\
    \        val positiveSumsSumCount = positiveSums.count(x => x > 0)\n        val\
    \ negativeSumsSumCount = negativeSums.count(x => x < 0)\n        val positiveSumsSumCount\
    \ = positiveSums.count(x => x > 0)\n        val negativeSumsSumCount = negativeSums.count(x ",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val count = sums.count(x => x > 0)\n        val negative = sums.count(x\
    \ => x < 0)\n        val firstNegative = sums.takeWhile(x => x < 0).head\n   \
    \     val firstPositive = sums.takeWhile(x => x > 0).head\n        val firstNegativeNegative\
    \ = sums.takeWhile(x => x < 0 && x > 0).head\n        val firstPositivePositive\
    \ = sums.takeWhile(x => x > 0 && x < 0).head\n        val firstNegativePositive\
    \ = sums.takeWhile(x => x < 0 && x > 0).head\n        val firstPositiveNegative\
    \ = sums.takeWhile(x => x > 0 && x < 0).head\n        val firstNegativeNegativeNegative\
    \ = sums.takeWhile(x => x < 0 && x > 0 && x < 0).head\n        val firstPositivePositivePositive\
    \ = sums.takeWhile(x => x > 0 && x < 0 && x < 0).head\n        val firstNegativePositiveNegative\
    \ = sums.takeWhile(x => x < 0 && x > 0 && x < 0).head\n        val firstPositivePositiveNegativeNegative\
    \ = sums.takeWhile(x => x > 0 && x < 0 && x > 0 && x < 0).head\n        val firstNegativePositivePositiveNegative\
    \ = sums.takeWhile(x => x < 0 && x > 0 && x < 0 && x > 0).head\n        val firstPositivePositivePositiveNegativeNegative\
    \ = sums.takeWhile(x => x > 0 && x < 0 && x > 0 && x < 0 && x < 0).head\n    \
    \    val firstNegativePositivePositivePositiveNegativeNegative = sums.takeWhile(x\
    \ => x < 0 && x > 0 && x < 0 && x > 0 && x < 0 && x < 0).head\n        val firstPositivePositivePositiveNegativeNegativeNegativeNegative\
    \ = sums.takeWhile(x => x > 0 && x < 0 && x > 0 && x < 0 && x > 0 && x < 0 &&\
    \ x < 0).head\n        val firstNegativePositivePositivePositiveNegativeNegativeNegative\
    \ = sums.takeWhile(x => x < 0 && x > 0 && x < 0 && x > 0 && x < 0 && x > 0 &&\
    \ x < 0).head\n        val firstPositivePositivePositiveNegativeNegativeNegativeNegativeNegative\
    \ = sums.takeWhile(x => x > 0 && x < 0 && x > 0 && x < 0 && x > 0 && x < 0 &&\
    \ x > 0 && x < 0).head\n        val firstNegativePositivePositivePositiveNegativeNegativeNegativeNegativeNegative\
    \ = sums.takeWhile(x => x < 0 && x > 0 && x < 0 && x > 0 && x < 0 && x > 0 &&\
    \ x < 0 && x > 0 && x < 0).head\n        val firstPositivePositivePositiveNegativeNegativeNegativeNegativeNegativeNegativeNegative\
    \ = sums.takeWhile(x => x > 0 && x < 0 && x > 0 && x < 0 && x > 0 && x < 0 &&\
    \ x > 0 && x < 0 && x > 0).head\n", "        val n = arr.length\n        val sums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n        for (i <- 0\
    \ until n) {\n            sum += arr(i)\n            sums += sum\n        }\n\
    \        sums.toList.count(_ > 0)", "        val nums = arr.filter(_ > 0)\n  \
    \      val sums = nums.map(x => x.toString.toInt).sum\n        sums.toLong", " \
    \       val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n \
    \       val numsWithSums = nums.filter(x => sums.contains(x))\n        numsWithSums.size",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n        val\
    \ numsSum = nums.map(x => math.abs(x))\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet2 = numsSum.filter(x => x > 0).toSet\n        val numsSumSet3\
    \ = numsSum.filter(x => x < 0).toSet\n        val numsSumSet4 = numsSum.filter(x\
    \ => x == 0).toSet\n        val numsSumSet5 = numsSum.filter(x => x == 1).toSet\n\
    \        val numsSumSet6 = numsSum.filter(x => x == 2).toSet\n        val numsSumSet7\
    \ = numsSum.filter(x => x == 3).toSet\n        val numsSumSet8 = numsSum.filter(x\
    \ => x == 4).toSet\n        val numsSumSet9 = numsSum.filter(x => x == 5).toSet\n\
    \        val numsSumSet10 = numsSum.filter(x => x == 6).toSet\n        val numsSumSet11\
    \ = numsSum.filter(x => x == 7).toSet\n        val numsSumSet12 = numsSum.filter(x\
    \ => x == 8).toSet\n        val numsSumSet13 = numsSum.filter(x => x == 9).toSet\n\
    \        val numsSumSet14 = numsSum.filter(x => x == 10).toSet\n        val numsSumSet15\
    \ = numsSum.filter(x => x == 11).toSet\n        val numsSumSet16 = numsSum.filter(x\
    \ => x == 12).toSet\n        val numsSumSet17 = numsSum.filter(x => x == 13).toSet\n\
    \        val numsSumSet18 = numsSum.filter(x => x == 14).toSet\n        val numsSumSet19\
    \ = numsSum.filter(x => x == 15).toSet\n        val numsSumSet20 = numsSum.filter(x\
    \ => x == 16).toSet\n        val numsSumSet21 = numsSum.filter(x => x == 17).toSet\n\
    \        val numsSumSet22 = numsSum.filter(x => x == 18).toSet\n        val numsSumSet23\
    \ = numsSum.filter(x => x == 19).toSet\n        val numsSumSet24 = numsSum.filter(",
  "        val nums = arr.toSet\n        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.toInt).sum\n        nums.count(x => sums.contains(x.toInt))",
  "        val nums = arr.filter(_ > 0)\n        val digits = arr.filter(_ < 0)\n\
    \        val numsDigits = nums.map(_.toString.toInt)\n        val digitsSum =\
    \ digits.map(_.toString.toInt).sum\n        numsDigits.sum - digitsSum", "   \
    \     val sums = arr.map(x => math.abs(x))\n        val nums = arr.filter(x =>\
    \ math.abs(x) > 0).length\n        sums.zip(nums).filter(_._1 > 0).length", " \
    \       val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n \
    \       val numsSums = nums.map(x => sums.count(y => y == x))\n        numsSums.sum",
  "        val digits = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n\
    \        sums.count(_ > 0)", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val positiveSums = sums.filter(sum\
    \ => sum > 0)\n        val negativeSums = sums.filter(sum => sum < 0)\n      \
    \  val positiveCount = positiveSums.count(_ > 0)\n        val negativeCount =\
    \ negativeSums.count(_ < 0)\n        positiveCount + negativeCount", "       \
    \ val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums.toLong", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x)).toSet\n        val numsWithSum = nums.filter(x => sums.contains(math.abs(x)))\n\
    \        numsWithSum.size", "        val digits = arr.map(_.toInt)\n        val\
    \ sum = digits.sum\n        val nums = arr.filter(x => x > 0).map(x => digits(x)\
    \ - digits(x - 1))\n        nums.count(x => x > 0).sum", "        var sum = 0\n\
    \        var count = 0\n        for (i <- arr) {\n            if (i >= 0) {\n\
    \                sum += i\n                count += 1\n            }\n       \
    \ }\n        if (count > 0) {\n            sum\n        } else {\n           \
    \ -1\n        }", "        val sums = arr.map(x => math.abs(x))\n        val counts\
    \ = sums.groupBy(x => math.abs(x))\n        val count = counts.map(x => x._2.length).sum\n\
    \        count", "        val nums = arr.toSet\n        val sums = arr.map(x =>\
    \ math.abs(x))\n        val counts = sums.groupBy(x => math.abs(x))\n        val\
    \ count = counts.mapValues(_.size).sum\n        val negs = nums.filter(x => math.abs(x)\
    \ < 0).map(x => math.abs(x))\n        val negCount = negs.groupBy(x => math.abs(x))\n\
    \        val negCounts = negCount.mapValues(_.size).sum\n        val negCountSum\
    \ = negCounts.toLong\n        val negCountSumAbs = math.abs(negCountSum)\n   \
    \     val negCountSumAbsAbs = math.abs(negCountSumAbs)\n        val negCountSumAbsAbsAbs\
    \ = math.abs(negCountSumAbsAbs)\n        val negCountSumAbsAbsAbsAbs = math.abs(negCountSumAbsAbsAbsAbs)\n\
    \        val negCountSumAbsAbsAbsAbsAbs = math.abs(negCountSumAbsAbsAbsAbsAbs)\n\
    \        val negCountSumAbsAbsAbsAbsAbsAbs = math.abs(negCountSumAbsAbsAbsAbsAbsAbs)\n\
    \        val negCountSumAbsAbsAbsAbsAbsAbsAbs = math.abs(negCountSumAbsAbsAbsAbsAbsAbsAbs)\n\
    \        val negCountSumAbsAbsAbsAbsAbsAbsAbsAbs = math.abs(negCountSumAbsAbsAbsAbsAbsAbsAbsAbs)\n\
    \        val negCountSumAbsAbsAbsAbsAbsAbsAbsAbsAbs = math.abs(negCountSumAbsAbsAbsAbsAbsAbsAbsAbsAbs)\n\
    \        val negCountSumAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs = math.abs(negCountSumAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs)\n\
    \        val negCountSumAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs = math.abs(negCountSumAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs)\n\
    \        val negCountSumAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs", "        val digits\
    \ = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n        sums.count(_\
    \ > 0)", "        val nums = arr.toSet\n        val sums = arr.map(x => x.toString.toInt).map(x\
    \ => x*x).map(x => x.toLong)\n        val numsSum = sums.toSet\n        val numsSumSum\
    \ = numsSum.map(x => x*x).sum\n        numsSumSum.toLong", "        val nums =\
    \ arr.filter(x => x > 0).map(x => x.toString.toInt)\n        val sums = nums.map(x\
    \ => x.sum)\n        sums.count(x => x > 0)", "        val nums = arr.filter(_\
    \ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n        sums.toLong",
  "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(_.toString.toInt).sum\n\
    \        sums.toLong", "        val nums = arr.filter(x => x > 0).map(x => x.toString.toInt)\n\
    \        val sum = nums.sum\n        val digits = nums.map(x => x.toString.toInt).sum\n\
    \        val negative = nums.map(x => x.toString.toInt).sum > 0\n        if (negative\
    \ && digits < sum) sum - digits else sum", "        val arr = arr.toList\n   \
    \     val sums = arr.map(x => x.toString.toInt).map(x => x * x).map(x => x.toInt)\n\
    \        val counts = sums.groupBy(x => x).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxSum = counts.map(x => x._2).max\n        val maxSumIndex\
    \ = counts.map(x => x._2).indexOf(maxSum)\n        val maxSumDigit = maxSumIndex\
    \ / 10\n        val maxSumDigitIndex = maxSumIndex % 10\n        val maxSumDigitDigit\
    \ = maxSumDigit + maxSumDigitIndex\n        val maxSumDigitDigitIndex = maxSumDigit\
    \ - maxSumDigitIndex\n        val maxSumDigitDigitDigit = maxSumDigit - maxSumDigitIndex\n\
    \        val maxSumDigitDigitDigitDigit = maxSumDigit - maxSumDigitIndex - maxSumDigitIndex\n\
    \        val maxSumDigitDigitDigitDigitDigit = maxSumDigit - maxSumDigitIndex\
    \ - maxSumDigitIndex - maxSumDigitIndex\n        val maxSumDigitDigitDigitDigitDigit\
    \ = maxSumDigit - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex\n\
    \        val maxSumDigitDigitDigitDigitDigitDigit = maxSumDigit - maxSumDigitIndex\
    \ - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex\
    \ - maxSumDigitIndex\n        val maxSumDigitDigitDigitDigitDigitDigit = maxSumDigit\
    \ - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex\
    \ - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex\
    \ - maxSumDigitIndex\n        val maxSumDigitDigitDigitDigitDigitDigit = maxSumDigit\
    \ - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex\
    \ - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex\
    \ - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex\n        val maxSumDigitDigitDigitDigitDigitDigit\
    \ = maxSumDigit - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex\
    \ - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex\
    \ - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex - maxSumDigitIndex\
    \ - maxSumDigitIndex\n", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val numsSum = sums.filter(x => x > 0)\n        val\
    \ numsSumSum = numsSum.map(x => math.pow(x, 2))\n        val numsSumSumSum = numsSumSum.filter(x\
    \ => x > 0)\n        val numsSumSumSumSum = numsSumSumSum.map(x => math.pow(x,\
    \ 3))\n        val numsSumSumSumSumSum = numsSumSumSumSum.filter(x => x > 0)\n\
    \        numsSumSumSumSumSumSum.sum", "        val arr = arr.toList\n        var\
    \ count = 0\n        for(i <- arr.indices) {\n            val num = arr(i)\n \
    \           if(num < 0) num *= -1\n            val digits = num.toString.reverse.grouped(2).map(_.toInt)\n\
    \            count += digits.sum\n        }\n        count", "        val digits\
    \ = arr.map(_.toString.toInt)\n        val sum = digits.sum\n        val positiveSum\
    \ = sum.filter(_ > 0)\n        val negativeSum = sum.filter(_ < 0)\n        val\
    \ positiveCount = positiveSum.count(_ > 0)\n        val negativeCount = negativeSum.count(_\
    \ < 0)\n        val positiveSumDigits = positiveSum.map(_.toString.toInt)\n  \
    \      val negativeSumDigits = negativeSum.map(_.toString.toInt)\n        val\
    \ positiveSumDigitCount = positiveSumDigits.sum\n        val negativeSumDigitCount\
    \ = negativeSumDigits.sum\n        val positiveSumDigitCount = positiveSumDigits.sum\n\
    \        val negativeSumDigitCount = negativeSumDigits.sum\n        val positiveSumDigitCount\
    \ = positiveSumDigits.sum\n        val negativeSumDigitCount = negativeSumDigits.sum\n\
    \        val positiveSumDigitCount = positiveSumDigits.sum\n        val negativeSumDigitCount\
    \ = negativeSumDigits.sum\n        val positiveSumDigitCount = positiveSumDigits.sum\n\
    \        val negativeSumDigitCount = negativeSumDigits.sum\n        val positiveSumDigitCount\
    \ = positiveSumDigits.sum\n        val negativeSumDigitCount = negativeSumDigits.sum\n\
    \        val positiveSumDigitCount = positiveSumDigits.sum\n        val negativeSumDigitCount\
    \ = negativeSumDigits.sum\n        val positiveSumDigitCount = positiveSumDigits.sum\n\
    \        val negativeSumDigitCount = negativeSumDigits.sum\n        val positiveSumDigitCount\
    \ = positiveSumDigits.sum\n        val negativeSumDigitCount = negativeSumDigits.sum\n\
    \        val positiveSumDigitCount = positiveSumDigits.sum\n        val negativeSumDigitCount\
    \ = negativeSumDigits.sum\n        val positiveSumDigitCount = positiveSumDigits.sum\n\
    \        val negativeSumDigitCount = negativeSumDigits.sum\n        val positiveSumDigitCount\
    \ = positiveSumDigits.sum\n        val negativeSumDigitCount = negativeSumDigits.sum\n\
    \        val positiveSumDigitCount = positiveSumDigits.sum\n        val negativeSumDigitCount\
    \ = negativeSumDigits.sum\n        val positiveSumDigitCount = positiveSumDigits.sum\n\
    \        val negativeSumDigitCount = negativeSumDigits.sum\n        val positiveSumDigitCount\
    \ = positiveSumDigits.sum\n        val negativeSumDigitCount = negativeSumDigits.sum\n\
    \        val positiveSumDigitCount = positiveSumDigits.sum\n        val negativeSumDigitCount\
    \ = negativeSumDigits.sum\n        val positiveSumDigitCount = positiveSumDigits.sum\n\
    \        val negativeSumDigitCount = negativeSumDigits.sum\n        val positive",
  "        val n = arr.length\n        val sum = 0\n        for (i <- 0 until n) {\n\
    \            sum += arr(i)\n        }\n        if (sum > 0) {\n            sum\n\
    \        } else {\n            sum - arr.takeWhile(x => x < 0).sum\n        }",
  "        val digits = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n\
    \        sums.filter(_.toLong > 0).size", "        val digits = arr.map(_.toString.toInt)\n\
    \        val digitSums = digits.map(_.sum)\n        val nums = arr.filter(x =>\
    \ digitSums.contains(x.toString.toInt))\n        nums.size + (arr.filter(x =>\
    \ digitSums.contains(-x.toString.toInt)).size)", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        sums.filter(_ > 0).size", "   \
    \     var sum = 0\n        var count = 0\n        for (i <- arr) {\n         \
    \   if (i < 0) sum += i\n            else {\n                sum += i % 10\n \
    \               count += 1\n            }\n        }\n        count", "      \
    \  val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        val count = sums.count(_ > 0)\n        count", "        val nums = arr.filter(_\
    \ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n        if (sums\
    \ > 0) sums else 0", "        val nums = arr.toList\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val numsSums = nums.zip(sums)\n        numsSums.count(_._2\
    \ > 0)", "        val nums = arr.toSet\n        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val numsSum = sums.filter(_ > 0)\n\
    \        numsSum.count(_ > 0)", "        val arr = arr.toList\n        val sums\
    \ = arr.map(x => x.toString.toInt).map(x => x * x)\n        val count = sums.count(x\
    \ => x > 0)\n        count", "        val nums = arr.toSet\n        val sums =\
    \ arr.map(x => math.abs(x))\n        val numsSum = sums.filter(x => x > 0).size\n\
    \        numsSum", "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(_.toString.toInt).sum\n\
    \        sums.toLong", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => x.toString.toInt).map(x => x.toInt)\n        val sumsSet = sums.toSet\n \
    \       val numsSet = nums.toSet\n        val numsSum = nums.map(x => x.toString.toInt).sum\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSetSet = numsSumSet.toSet\n\
    \        val numsSumSetSetSet = numsSumSetSet.toSet\n        val numsSumSetSetSetSet\
    \ = numsSumSetSetSet.toSet\n        val numsSumSetSetSetSetSet = numsSumSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSet = numsSumSetSetSetSetSet.toSet\n      \
    \  val numsSumSetSetSetSetSetSet = numsSumSetSetSetSetSet.toSet\n        val numsSumSetSetSetSetSetSet\
    \ = numsSumSetSetSetSetSetSet.toSet\n        val numsSumSetSetSetSetSetSetSet\
    \ = numsSumSetSetSetSetSetSet.toSet\n        val numsSumSetSetSetSetSetSetSetSet\
    \ = numsSumSetSetSetSetSetSet.toSet\n        val numsSumSetSetSetSetSetSetSetSet\
    \ = numsSumSetSetSetSetSetSetSet.toSet\n        val numsSumSetSetSetSetSetSetSetSet\
    \ = numsSumSetSetSetSetSetSetSetSet.toSet\n        val numsSumSetSetSetSetSetSetSetSetSet\
    \ = numsSumSetSetSetSetSetSetSetSet.toSet\n        val numsSumSetSetSetSetSetSetSetSetSet\
    \ = numsSumSetSetSetSetSetSetSetSet.toSet\n        val numsSumSetSetSetSetSetSetSetSetSet\
    \ = numsSumSetSetSetSetSetSetSetSet.toSet\n        val numsSumSetSetSetSetSetSetSetSetSet\
    \ = numsSumSetSetSetSetSetSetSetSet.toSet\n        val numsSumSetSetSetSetSetSetSetSetSet\
    \ = numsSumSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumSetSetSetSetSetSetSetSetSet.toSet\n        val num", "        val nums\
    \ = arr.toList\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.zip(sums)\n        numsSums.count(_._2 > 0)", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val sumsSet = sums.toSet\n\
    \        val numsSet = nums.toSet\n        val numsSetWithSum = nums.filter(x\
    \ => sumsSet.contains(x))\n        val numsSetWithSumSet = numsSetWithSum.toSet\n\
    \        val numsSetWithSumSetWithSum = numsSetWithSumSet.filter(x => sumsSetWithSumSet.contains(x))\n\
    \        val numsSetWithSumSetWithSumSet = numsSetWithSumSetWithSum.toSet\n  \
    \      val numsSetWithSumSetWithSumSetWithSum = numsSetWithSumSetWithSumSet.toSet\n\
    \        val numsSetWithSumSetWithSumSetWithSumSet = numsSetWithSumSetWithSumSetWithSum.toSet\n\
    \        val numsSetWithSumSetWithSumSetWithSumSetWithSum = numsSetWithSumSetWithSumSetWithSumSet.toSet\n\
    \        val numsSetWithSumSetWithSumSetWithSumSetWithSum = numsSetWithSumSetWithSumSetWithSumSetWithSum.toSet\n\
    \        val numsSetWithSumSetWithSumSetWithSumSetWithSumSet = numsSetWithSumSetWithSumSetWithSumSetWithSum.toSet\n\
    \        val numsSetWithSumSetWithSumSetWithSumSetWithSumSetWithSum = numsSetWithSumSetWithSumSetWithSumSetWithSumSet.toSet\n\
    \        val numsSetWithSumSetWithSumSetWithSumSetWithSumSetWithSum = numsSetWithSumSetWithSumSetWithSumSetWithSumSetWithSum.toSet\n\
    \        val numsSetWithSumSetWithSumSetWithSumSetWithSumSetWithSumSet = numsSetWithSumSetWithSumSetWithSumSetWithSumSetWithSum.toSet\n\
    \        val numsSetWithSumSetWithSumSetWithSumSetWithSumSetWithSumSetWithSum\
    \ = numsSetWithSumSetWithSumSetWithSumSetWithSumSetWithSumSet.toSet\n        val\
    \ numsSetWithSumSetWithSumSetWithSumSetWithSumSetWithSumSetWithSum = numsSetWithSumSetWithSumSetWithSumSetWithSumSetWithSumSetWithSum.toSet\n\
    \        val numsSetWithSumSetWithSumSetWithSumSetWithSumSet", "        var count\
    \ = 0\n        var sum = 0\n        var neg = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            sum = sum + arr(i)\n            i = i + 1\n\
    \        }\n        while (sum > 0) {\n            sum = sum % 10\n          \
    \  count = count + 1\n        }\n        if (neg > 0) {\n            count = count\
    \ - neg\n        }\n        count", "        val nums = arr.filter(_ > 0)\n  \
    \      val numsSum = nums.sum\n        val numsSumDigits = numsSum.toString.length\n\
    \        val numsSumDigit = numsSum.toString.charAt(numsSumDigits-1)\n       \
    \ val numsSumDigitSigned = if (numsSumDigit == '-') -1 else 1\n        val numsSumDigitSignedDigit\
    \ = numsSumDigitSigned * numsSumDigit\n        val numsSumDigitSignedDigits =\
    \ numsSumDigitSignedDigit * numsSumDigits\n        val numsSumDigitSignedDigitsSum\
    \ = numsSumDigitSignedDigits + numsSumDigitSignedDigit\n        if (numsSumDigitSignedDigitsSum\
    \ > 9) {\n            numsSumDigitSignedDigitsSum - 9\n        } else {\n    \
    \        numsSumDigitSignedDigitsSum\n        }", "        val n = arr.length\n\
    \        val sums = arr.map(x => x.toString.toInt).map(x => x * x).map(x => x.toInt)\n\
    \        val sumsSum = sums.sum\n        val sumsSumAbs = sumsSum.abs\n      \
    \  val sumsSumAbsSum = sumsSumAbs.sum\n        val sumsSumAbsSumAbs = sumsSumAbsSum.abs\n\
    \        val sumsSumAbsSumAbsSum = sumsSumAbsSumAbs.sum\n        val sumsSumAbsSumAbsSumAbs\
    \ = sumsSumAbsSumAbsSum.abs\n        val sumsSumAbsSumAbsSumAbsSum = sumsSumAbsSumAbsSumAbsSum.abs\n\
    \        val sumsSumAbsSumAbsSumAbsSumAbs = sumsSumAbsSumAbsSumAbsSumAbs.abs\n\
    \        val sumsSumAbsSumAbsSumAbsSumAbsSum = sumsSumAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val sumsSumAbsSumAbsSumAbsSumAbsSumAbs = sumsSumAbsSumAbsSumAbsSumAbsSumAbs.abs\n\
    \        val sumsSumAbsSumAbsSumAbsSumAbsSumAbsSum = sumsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val sumsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbs = sumsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbs.abs\n\
    \        val sumsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum = sumsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val sumsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbs = sumsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbs.abs\n\
    \        val sumsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum = sumsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n",
  "        val n = arr.size\n        val sum = 0\n        for(i <- 0 until n){\n \
    \           val digit = arr(i).toInt\n            sum += digit\n            if(sum\
    \ > 0){\n                break\n            }\n        }\n        sum", "    \
    \    val n = arr.length\n        val sum = 0\n        for(i <- 0 until n){\n \
    \           val digit = arr(i).toInt\n            sum += digit\n            if(sum\
    \ > 0)\n                sum -= digit\n        }\n        sum", "        var count\
    \ = 0\n        for(i <- arr) {\n            val digit = i % 10\n            val\
    \ sign = if (i < 0) -1 else 1\n            count += digit * sign\n        }\n\
    \        count", "        val digits = arr.map(_.toString.toInt)\n        val\
    \ sums = digits.map(_.sum)\n        sums.filter(_.toLong > 0).size", "       \
    \ val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n       \
    \ val numsSums = nums.map(x => sums.count(_ > x))\n        numsSums.sum", "  \
    \      val digits = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n\
    \        val counts = sums.toSet\n        val count = counts.size\n        count",
  "        val nums = arr.toSet\n        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorNext = numsSetIterator.next\n\
    \        val numsSetIteratorNextAsLong = numsSetIteratorNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextAsLongAsString = numsSetIteratorNext.asInstanceOf[Long].toString\n\
    \        val numsSetIteratorNextAsLongAsStringAsDigit = numsSetIteratorNext.asInstanceOf[Long].toString.toDigit\n\
    \        val numsSetIteratorNextAsLongAsStringAsDigitAsDigit = numsSetIteratorNext.asInstanceOf[Long].toString.toDigit.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextAsLongAsStringAsDigitAsDigitAsDigit = numsSetIteratorNext.asInstanceOf[Long].toString.toDigit.asInstanceOf[Long].asInstanceOf[Long]\n\
    \        val numsSetIteratorNextAsLongAsStringAsDigitAsDigitAsDigitAsDigit = numsSetIteratorNext.asInstanceOf[Long].toString.toDigit.asInstanceOf[Long].asInstanceOf[Long].asInstanceOf[Long]\n\
    \        val numsSetIteratorNextAsLongAsStringAsDigitAsDigitAsDigitAsDigit = numsSetIteratorNext.asInstanceOf[Long].toString.toDigit.asInstanceOf[Long].asInstanceOf[Long].asInstanceOf[Long].asInstanceOf[Long]\n\
    \        val numsSetIteratorNextAsLongAsStringAsDigitAsDigitAsDigitAsDigitAsDigit\
    \ = numsSetIteratorNext.asInstanceOf[Long].toString.toDigit.asInstanceOf[Long].asInstanceOf[Long].asInstanceOf[Long].asInstanceOf[Long].asInstanceOf[Long]\n\
    \        val numsSetIteratorNextAsLongAsStringAsDigitAsDigitAsDigitAsDigitAsDigit\
    \ = numsSetIteratorNext.asInstanceOf[Long].toString.toDigit.asInstanceOf[Long].asInstanceOf[Long].asInstanceOf[Long].asInstanceOf[Long].asInstanceOf[Long].asInstanceOf[Long]\n\
    \        val numsSetIteratorNextAsLongAsStringAsDigitAsDigitAsDigitAsDigitAsDigit\
    \ = numsSetIteratorNext.asInstanceOf[Long].to", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => x.toString.toLong).map(x => x.toString.toInt).map(x\
    \ => x.sum)\n        val positiveSums = sums.filter(x => x > 0)\n        val negativeSums\
    \ = sums.filter(x => x < 0)\n        val positiveSumsCount = positiveSums.count(x\
    \ => x > 0)\n        val negativeSumsCount = negativeSums.count(x => x < 0)\n\
    \        val positiveSumsSum = positiveSums.sum\n        val negativeSumsSum =\
    \ negativeSums.sum\n        val positiveSumsSumAbs = positiveSumsSum.abs\n   \
    \     val negativeSumsSumAbs = negativeSumsSum.abs\n        val positiveSumsSumAbsCount\
    \ = positiveSumsSumAbs.count(x => x > 0)\n        val negativeSumsSumAbsCount\
    \ = negativeSumsSumAbs.count(x => x < 0)\n        val positiveSumsSumAbsSum =\
    \ positiveSumsSumAbs.sum\n        val negativeSumsSumAbsSum = negativeSumsSumAbs.sum\n\
    \        val positiveSumsSumAbsSumAbs = positiveSumsSumAbsSum.abs\n        val\
    \ negativeSumsSumAbsSumAbs = negativeSumsSumAbsSum.abs\n        val positiveSumsSumAbsSumAbsCount\
    \ = positiveSumsSumAbsSumAbs.count(x => x > 0)\n        val negativeSumsSumAbsSumAbsCount\
    \ = negativeSumsSumAbsSumAbs.count(x => x < 0)\n        val positiveSumsSumAbsSumAbsSum\
    \ = positiveSumsSumAbsSumAbs.sum\n        val negativeSumsSumAbsSumAbsSum = negativeSumsSumAbsSumAbs.sum\n\
    \        val positiveSumsSumAbsSumAbsSumAbs = positiveSumsSumAbsSumAbsSum.abs\n\
    \        val negativeSumsSumAbsSumAbsSumAbs = negativeSumsSumAbsSumAbsSum.abs\n\
    \        val positiveSumsSumAbsSumAbsSumAbsCount = positiveSumsSumAbsSumAbsSumAbsCount.count(x\
    \ => x > 0)\n        val negativeSumsSumAbsSumAbsSumAbsCount = negativeSumsSumAbsSumAbsSumAbsCount.count(x\
    \ => x < 0)\n        val positiveSumsSumAbsSumAbsSumAbsSum = positiveSum", " \
    \       val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n \
    \       val numsSums = nums.map(x => sums.filter(y => y > x).length)\n       \
    \ numsSums.sum", "        val nums = arr.filter(_ > 0)\n        val numsSum =\
    \ nums.sum\n        val numsDigits = nums.map(_.toString.toInt).sum\n        val\
    \ numsDigitSum = numsDigits + numsSum\n        if (numsDigitSum > 0) numsDigitSum\n\
    \        else 0", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val numsSums = nums.map(x => sums.filter(_ > x).length)\n\
    \        numsSums.sum", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x)).toSet\n        val numsSum = nums.filter(x => sums.contains(math.abs(x)))\n\
    \        numsSum.size ", "        val digits = arr.map(_.toString.toInt)\n   \
    \     val sums = digits.map(_.sum)\n        sums.filter(_.isDefined).length",
  "        val digits = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n\
    \        val positiveSums = sums.filter(sum > 0)\n        positiveSums.count(_\
    \ > 0)", "        val digits = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n\
    \        val nums = arr.filter(x => sums.contains(x.toString.toInt))\n       \
    \ nums.size + (arr.filter(x => x.toString.toInt == 0).size)", "        val sums\
    \ = arr.foldLeft(mutable.Map[Long, Long]()){\n            case (acc, x) => acc\
    \ + (x -> (acc.getOrElse(x, 0l) + x.toString.toLong))\n        }\n        sums.filter(_._2\
    \ > 0).length", "        val n = arr.size\n        val m = arr.max\n        val\
    \ nums = mutable.ListBuffer[Long]()\n        var sum = 0\n        for (i <- 0\
    \ until n) {\n            sum += arr(i)\n            if (sum > 0) {\n        \
    \        nums += sum\n            }\n        }\n        nums.toList.size", " \
    \       val digits = arr.map(_.toString.toInt)\n        val sum = digits.sum\n\
    \        if (sum < 0) (digits.sum + digits.head.toInt) % 10\n        else sum",
  "        var count = 0\n        arr.foreach(x => {\n            val digits = x.toString.reverse.map(_.toInt)\n\
    \            val sum = digits.sum\n            if (sum > 0) {\n              \
    \  count += 1\n            }\n        })\n        count", "        val sums =\
    \ arr.map(x => math.abs(x))\n        val counts = sums.groupBy(x => math.abs(x))\n\
    \        val count = counts.mapValues(_.size)\n        count.values.sum", "  \
    \      val n = arr.size\n        val sums = arr.map(x => x.toString.toInt).map(x\
    \ => x.toInt).map(x => x * x)\n        val positiveSums = sums.filter(x => x >\
    \ 0)\n        val negativeSums = sums.filter(x => x < 0)\n        val positiveSumsCount\
    \ = positiveSums.size\n        val negativeSumsCount = negativeSums.size\n   \
    \     val positiveSumsSum = positiveSums.sum\n        val negativeSumsSum = negativeSums.sum\n\
    \        val positiveSumsSumOfDigits = positiveSums.map(x => x.toString.toInt).sum\n\
    \        val negativeSumsSumOfDigits = negativeSums.map(x => x.toString.toInt).sum\n\
    \        val positiveSumsSumOfDigitsCount = positiveSums.map(x => x.toString.toInt).count\n\
    \        val negativeSumsSumOfDigitsCount = negativeSums.map(x => x.toString.toInt).count\n\
    \        val positiveSumsSumOfDigitsSum = positiveSums.map(x => x.toString.toInt).sum\n\
    \        val negativeSumsSumOfDigitsSum = negativeSums.map(x => x.toString.toInt).sum\n\
    \        val positiveSumsSumOfDigitsSumOfDigits = positiveSums.map(x => x.toString.toInt).map(x\
    \ => x.toString.toInt).sum\n        val negativeSumsSumOfDigitsSumOfDigits = negativeSums.map(x\
    \ => x.toString.toInt).map(x => x.toString.toInt).sum\n        val positiveSumsSumOfDigitsSumOfDigitsCount\
    \ = positiveSums.map(x => x.toString.toInt).map(x => x.toString.toInt).count\n\
    \        val negativeSumsSumOfDigitsSumOfDigitsCount = negativeSums.map(x => x.toString.toInt).map(x\
    \ => x.toString.toInt).count\n        val positiveSumsSumOfDigitsSumOfDigitsSum\
    \ = positiveSums.map(x => x.toString.toInt).map(x => x.toString.toInt).sum\n \
    \       val negativeSumsSumOfDigitsSumOfDigitsSum = negativeSums.map(x => x.toString.toInt).map(x\
    \ => x.toString.toInt).sum\n        val positiveSumsSumOfDigitsSumOfDigitsSumOfDigits\
    \ = positiveSums.map(x => x.toString.toInt).map(x => x.toString.toInt).map(x =>\
    \ x.to", "        val digits = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n\
    \        sums.count(_ > 0)", "        val nums = arr.toSet\n        val numsSum\
    \ = arr.map(x => math.abs(x))\n        val numsSumSum = numsSum.map(x => math.abs(x))\n\
    \        val numsSumSumSum = numsSumSum.map(x => math.abs(x))\n        val numsSumSumSumSum\
    \ = numsSumSumSum.map(x => math.abs(x))\n        val numsSumSumSumSumSum = numsSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSum = numsSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSum = numsSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = numsSumSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x => math.abs(x))\n   \
    \     val numsSumSumSumSumSumSumSumSumSumSumSum", "        var count = 0\n   \
    \     for (i <- arr) {\n            if (i < 0) {\n                val digit =\
    \ math.abs(i).toInt\n                count += digit * digit\n            } else\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       val nums = arr.filter(_ > 0)\n        val numsSum = nums.sum\n       \
    \ if (numsSum < 0) nums.sum.toLong * -1\n        else numsSum", "        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val count\
    \ = sums.count(x => x > 0)\n        val negCount = sums.count(x => x < 0)\n  \
    \      val negSum = sums.sum\n        val negSums = sums.filter(x => x < 0)\n\
    \        val negSumsCount = negSums.count(x => x > 0)\n        val negSumsSum\
    \ = negSums.sum\n        val negSumsSums = negSums.map(x => math.abs(x))\n   \
    \     val negSumsSumsCount = negSumsSums.count(x => x > 0)\n        val negSumsSumsSum\
    \ = negSumsSums.sum\n        val negSumsSumsSums = negSumsSums.map(x => math.abs(x))\n\
    \        val negSumsSumsSumsCount = negSumsSumsSums.count(x => x > 0)\n      \
    \  val negSumsSumsSumsSum = negSumsSumsSums.sum\n        val negSumsSumsSumsSums\
    \ = negSumsSumsSums.map(x => math.abs(x))\n        val negSumsSumsSumsSumsCount\
    \ = negSumsSumsSumsSums.count(x => x > 0)\n        val negSumsSumsSumsSumsSum\
    \ = negSumsSumsSumsSums.sum\n        val negSumsSumsSumsSumsSums = negSumsSumsSumsSums.map(x\
    \ => math.abs(x))\n        val negSumsSumsSumsSumsSumsCount = negSumsSumsSumsSumsSums.count(x\
    \ => x > 0)\n        val negSumsSumsSumsSumsSum = negSumsSumsSumsSumsSums.sum\n\
    \        val negSumsSumsSumsSumsSums = negSumsSumsSumsSumsSums.map(x => math.abs(x))\n\
    \        val negSumsSumsSumsSumsSumsCount = negSumsSumsSumsSumsSumsSums.count(x\
    \ => x > 0)\n        val negSumsSumsSumsSumsSum = negSumsSumsSumsSumsSumsSums.sum\n\
    \        val negSumsSumsSumsSumsSums = negSumsSumsSumsSumsSumsSums.map(x => math.abs(x))\n\
    \        val negSumsSumsSumsSumsSumsCount = negSums", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        sums.count(_ > 0)", "        val\
    \ nums = arr.toSet\n        val sums = arr.map(x => math.abs(x)).toSet\n     \
    \   val count = nums.filter(x => sums.contains(math.abs(x))).length\n        count",
  "        val n = arr.length\n        val sum = 0\n        for (i <- 0 until n) {\n\
    \            val digit = arr(i).toInt\n            sum += digit\n            if\
    \ (sum > 0) {\n                sum -= digit\n            }\n        }\n      \
    \  n", "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n\
    \        val numsSums = nums.map(x => sums.filter(_ > x).length)\n        numsSums.sum",
  "        val nums = arr.filter(_ > 0)\n        val digits = arr.filter(_ < 0)\n\
    \        val digitSums = digits.map(x => x.toString.toInt).sum\n        nums.count(x\
    \ => digitSums > 0)", "        var count = 0\n        for(i <- arr) {\n      \
    \      if(i.toString.length() > 0 && i.signum <= 0) {\n                count +=\
    \ 1\n            }\n        }\n        count", "        val digits = arr.map(_.toInt)\n\
    \        val sums = digits.map(x => math.abs(x))\n        val count = sums.count(x\
    \ => x > 0)\n        count", "        val nums = arr.filter(_ > 0)\n        val\
    \ sums = nums.map(x => x.toString.toInt).sum\n        sums.toLong", "        val\
    \ nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val\
    \ numsWithSum = sums.filter(x => x > 0)\n        numsWithSum.size + 1", "    \
    \    val nums = arr.toList\n        var sum = 0\n        var count = 0\n     \
    \   for (i <- 0 until nums.size) {\n            sum += nums(i)\n            if\
    \ (sum > 0) {\n                count += 1\n            }\n        }\n        count",
  "        val digits = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n\
    \        val nums = sums.filter(x => x > 0)\n        nums.sum", "        val sums\
    \ = arr.map(x => math.abs(x))\n        val nums = arr.filter(x => sums.contains(math.abs(x)))\n\
    \        nums.count(x => math.abs(x) > 0)", "        val nums = arr.toSet\n  \
    \      val numsSet = nums.toSet\n        val numsSum = nums.map(x => x.toString.toInt).sum\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSetLen = numsSumSet.size\n\
    \        val numsSumSetLenLen = numsSumSetLen.size\n        val numsSumSetLenLen\
    \ = numsSumSetLenLen.size\n        val numsSumSetLenLenLen = numsSumSetLenLenLen.size\n\
    \        val numsSumSetLenLenLenLen = numsSumSetLenLenLenLen.size\n        val\
    \ numsSumSetLenLenLenLenLen = numsSumSetLenLenLenLenLen.size\n        val numsSumSetLenLenLenLenLenLen\
    \ = numsSumSetLenLenLenLenLenLen.size\n        val numsSumSetLenLenLenLenLenLenLen\
    \ = numsSumSetLenLenLenLenLenLenLen.size\n        val numsSumSetLenLenLenLenLenLenLenLen\
    \ = numsSumSetLenLenLenLenLenLenLenLenLen.size\n        val numsSumSetLenLenLenLenLenLenLenLenLen\
    \ = numsSumSetLenLenLenLenLenLenLenLenLenLen.size\n        val numsSumSetLenLenLenLenLenLenLenLenLen\
    \ = numsSumSetLenLenLenLenLenLenLenLenLenLenLen.size\n        val numsSumSetLenLenLenLenLenLenLenLenLenLen\
    \ = numsSumSetLenLenLenLenLenLenLenLenLenLenLen.size\n        val numsSumSetLenLenLenLenLenLenLenLenLenLen\
    \ = numsSumSetLenLenLenLenLenLenLenLenLenLenLenLenLen.size\n        val numsSumSetLenLenLenLenLenLenLenLenLenLenLen\
    \ = numsSumSetLenLenLenLenLenLenLenLenLenLenLenLenLen.size\n        val numsSumSetLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = numsSumSetLenLenLenLenLenLenLenLenLenLenLenLenLenLen.size\n        val numsSumSetLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = numsSumSetLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen.size\n        val\
    \ numsSumSetLenLenLenLenLenLenLenLenLenLenLen", "        val nums = arr.filter(_\
    \ > 0)\n        val sums = nums.map(x => math.abs(x))\n        val maxSum = sums.max\n\
    \        val numsWithMaxSum = sums.filter(x => x == maxSum)\n        numsWithMaxSum.size",
  "        val digits = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n\
    \        sums.count(_ > 0)", "        var count = 0\n        for(i <- arr) {\n\
    \            val digit = i % 10\n            val sign = if (i < 0) -1 else 1\n\
    \            count += sign * digit\n        }\n        count", "        val sums\
    \ = arr.map(x => x.toString.toInt).map(x => x.toInt)\n        val sumsSorted =\
    \ sums.sortWith(_ < _)\n        val sumsSortedCount = sumsSorted.length\n    \
    \    val sumsSortedCountWithZero = sumsSortedCount - sumsSorted.take(sumsSortedCount).length\n\
    \        val sumsSortedCountWithZeroAndNegative = sumsSortedCountWithZero - sumsSorted.take(sumsSortedCountWithZero).length\n\
    \        val sumsSortedCountWithZeroAndNegativeAndNegative = sumsSortedCountWithZeroAndNegative\
    \ - sumsSorted.take(sumsSortedCountWithZeroAndNegative).length\n        sumsSortedCountWithZeroAndNegativeAndNegative",
  "        val nums = arr.toList\n        val sums = arr.map(x => math.abs(x))\n \
    \       val count = sums.count(x => x > 0)\n        val negatives = sums.count(x\
    \ => x < 0)\n        val negativesFirst = sums.count(x => x < 0 && x > 0)\n  \
    \      val negativesLast = sums.count(x => x < 0 && x < 0)\n        val negativesFirstLast\
    \ = sums.count(x => x < 0 && x < 0 && x > 0)\n        val negativesFirstLastLast\
    \ = sums.count(x => x < 0 && x < 0 && x < 0 && x > 0)\n        val negativesFirstLastLastLast\
    \ = sums.count(x => x < 0 && x < 0 && x < 0 && x < 0 && x > 0)\n        val negativesFirstLastLastLastLast\
    \ = sums.count(x => x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x > 0)\n    \
    \    val negativesFirstLastLastLastLastLast = sums.count(x => x < 0 && x < 0 &&\
    \ x < 0 && x < 0 && x < 0 && x < 0 && x > 0)\n        val negativesFirstLastLastLastLastLastLast\
    \ = sums.count(x => x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x <\
    \ 0 && x > 0)\n        val negativesFirstLastLastLastLastLastLastLast = sums.count(x\
    \ => x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x\
    \ > 0)\n        val negativesFirstLastLastLastLastLastLastLastLast = sums.count(x\
    \ => x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x\
    \ < 0 && x > 0)\n        val negativesFirstLastLastLastLastLastLastLastLast =\
    \ sums.count(x => x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0\
    \ && x < 0 && x < 0 && x > 0)\n        val negativesFirstLastLastLastLastLastLastLastLastLast\
    \ = sums.count(x => x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x <\
    \ 0 && x < 0 && x < 0 && x > 0)\n        val negativesFirstLastLastLastLastLastLastLastLastLast\
    \ = sums.count(x => x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x <\
    \ 0 && x < 0 && x < 0 && x < 0 && x > 0)\n        val negativesFirstLastLastLastLastLastLastLastLastLast\
    \ = sums.count(x => x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x <\
    \ 0 && x < 0 && x < 0 && x < 0 && x > 0)\n        val negativesFirstLastLastLastLastLastLastLastLastLastLast\
    \ = sums.count(x => x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < ",
  "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums", "        var sum = 0\n        var count = 0\n        for (i <-\
    \ arr) {\n            sum += i\n            if (sum > 0) {\n                count\
    \ += 1\n            }\n        }\n        count", "        val sums = arr.map(x\
    \ => math.abs(x))\n        val count = sums.count(x => x > 0)\n        count",
  "        val nums = arr.toSet\n        val sums = arr.map(x => x.toString.toLong).map(x\
    \ => x.toString.toInt).map(x => x.sum)\n        sums.filter(x => x > 0).size",
  "        val sum = 0\n        arr.foreach(x => sum += x)\n        arr.count(x =>\
    \ x > 0)", "        val n = arr.size\n        val sums = arr.map(x => x.toString.toInt).map(x\
    \ => x.toInt)\n        val sumsSum = sums.sum\n        if (sumsSum < 0) sums.map(x\
    \ => x.toString.toInt).map(x => x.toInt).sum\n        else sumsSum", "       \
    \ val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums.toLong", "        val nums = arr.filter(_ > 0)\n        val numsSum\
    \ = nums.sum\n        if (numsSum < 0) nums.sum.toLong * -1\n        else numsSum",
  "        val sums = arr.map(x => x.toString.toInt).map(x => x.toInt)\n        val\
    \ counts = sums.groupBy(x => x).mapValues(_.size)\n        val result = counts.filter(_._2\
    \ > 0).map(_._1).sum\n        result", "        val n = arr.size\n        val\
    \ sum = 0\n        for(i <- 0 until n) {\n            val digit = arr(i).toInt\n\
    \            sum += digit\n            if(sum > 0) {\n                sum -= digit\n\
    \            }\n        }\n        n", "        val sums = arr.map(x => if (x\
    \ < 0) x.toLong.signum else x.toLong).sum\n        sums.toLong", "        val\
    \ nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val\
    \ sumsSet = sums.toSet\n        val numsSet = nums.toSet\n        val numsSum\
    \ = nums.map(x => math.abs(x))\n        val numsSumSet = numsSum.toSet\n     \
    \   val numsSumSet = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n \
    \       val numsSumSet = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n",
  "        val sum = 0\n        arr.foreach(x => sum += x)\n        sum", "      \
    \  val digits = arr.map(_.toString.toInt)\n        val sum = digits.foldLeft(0L)\
    \ { (sum, digit) =>\n            val newSum = sum + digit\n            if (newSum\
    \ > 9) newSum - 10\n            else newSum\n        }\n        if (sum < 0) sum\
    \ + digits.head.toInt\n        else sum", "        val sums = arr.map(x => x.toString.toInt).map(x\
    \ => x * x)\n        val maxSum = sums.max\n        val maxSumIndex = sums.indexWhere(x\
    \ => x == maxSum)\n        val maxSumDigit = maxSumIndex / 10\n        val maxSumDigitIndex\
    \ = maxSumIndex % 10\n        val nums = arr.filter(x => x.toString.toInt % 10\
    \ == maxSumDigit)\n        nums.count(x => x.toString.toInt % 10 > maxSumDigitIndex)",
  "        val nums = arr.filter(_ > 0)\n        val numsSum = nums.sum\n        if\
    \ (numsSum > 0) {\n            nums.count(_ > 0)\n        } else {\n         \
    \   nums.count(_ < 0)\n        }", "        val nums = arr.toList\n        val\
    \ numsSum = nums.map(x => if (x < 0) -x else x).sum\n        numsSum", "     \
    \   val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n     \
    \   val sumsSet = sums.toSet\n        sumsSet.count(x => x > 0)", "        var\
    \ count = 0\n        var sum = 0\n        for (i <- arr) {\n            sum +=\
    \ i\n            if (sum > 0) {\n                count += 1\n            }\n \
    \       }\n        count", "        val nums = arr.toSet\n        val numsSum\
    \ = arr.map(x => math.abs(x)).reduceLeft(_ + _)\n        nums.filter(x => x >\
    \ 0).count(x => numsSum - math.abs(x) > 0)", "        val nums = arr.filter(_\
    \ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n        if (sums\
    \ > 0) sums else 0", "        val nums = arr.toSet\n        val numsSet = nums.toSet\n\
    \        val numsSet2 = nums.toSet\n        val numsSet3 = nums.toSet\n      \
    \  val numsSet4 = nums.toSet\n        val numsSet5 = nums.toSet\n        val numsSet6\
    \ = nums.toSet\n        val numsSet7 = nums.toSet\n        val numsSet8 = nums.toSet\n\
    \        val numsSet9 = nums.toSet\n        val numsSet10 = nums.toSet\n     \
    \   val numsSet11 = nums.toSet\n        val numsSet12 = nums.toSet\n        val\
    \ numsSet13 = nums.toSet\n        val numsSet14 = nums.toSet\n        val numsSet15\
    \ = nums.toSet\n        val numsSet16 = nums.toSet\n        val numsSet17 = nums.toSet\n\
    \        val numsSet18 = nums.toSet\n        val numsSet19 = nums.toSet\n    \
    \    val numsSet20 = nums.toSet\n        val numsSet21 = nums.toSet\n        val\
    \ numsSet22 = nums.toSet\n        val numsSet23 = nums.toSet\n        val numsSet24\
    \ = nums.toSet\n        val numsSet25 = nums.toSet\n        val numsSet26 = nums.toSet\n\
    \        val numsSet27 = nums.toSet\n        val numsSet28 = nums.toSet\n    \
    \    val numsSet29 = nums.toSet\n        val numsSet30 = nums.toSet\n        val\
    \ numsSet31 = nums.toSet\n        val numsSet32 = nums.toSet\n        val numsSet33\
    \ = nums.toSet\n        val numsSet34 = nums.toSet\n        val numsSet35 = nums.toSet\n\
    \        val numsSet36 = nums.toSet\n        val numsSet37 = nums.toSet\n    \
    \    val numsSet38 = nums.toSet\n        val numsSet39 = nums.toSet\n        val\
    \ numsSet40 = nums.toSet\n        val numsSet41 = nums.toSet\n        val numsSet42\
    \ = nums.toSet\n        val numsSet43 = nums.toSet\n", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val positiveSums = sums.filter(sum\
    \ => sum > 0)\n        val negativeSums = sums.filter(sum => sum < 0)\n      \
    \  val positiveSumsCount = positiveSums.count(_ > 0)\n        val negativeSumsCount\
    \ = negativeSums.count(_ < 0)\n        val positiveSumsCountAndNegativeSumsCount\
    \ = positiveSumsCount + negativeSumsCount\n        val positiveSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ = positiveSumsCountAndNegativeSumsCount + negativeSumsCountAndNegativeSumsCount\n\
    \        val positiveSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ = positiveSumsCountAndNegativeSumsCountAndNegativeSumsCount + negativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\n\
    \        val positiveSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ = positiveSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ + negativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\n\
    \        val positiveSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ = positiveSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ + negativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\n\
    \        val positiveSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ = positiveSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ + negativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\n\
    \        val positiveSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCountAndNegativeSumsCount\
    \ = positiveSumsCountAndNegative", "        var count = 0\n        var sum = 0\n\
    \        for(i <- arr) {\n            sum += i\n            if(sum > 0) {\n  \
    \              count += 1\n            }\n        }\n        count", "       \
    \ val digits = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n\
    \        val positiveSums = sums.filter(sum => sum > 0)\n        positiveSums.size",
  "        val nums = arr.filter(x => x >= 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums > 0 ? sums : 0", "        val sums = arr.map(x => x.toString.toInt).map(x\
    \ => x.toString.toInt).map(x => x.toString.toInt).map(x => x.toString.toInt)\n\
    \        val maxSum = sums.max\n        val maxSumIndex = sums.indexOf(maxSum)\n\
    \        val maxSumDigit = sums(maxSumIndex)\n        val maxSumDigitIndex = sums.indexOf(maxSumDigit)\n\
    \        val maxSumDigitIndex = maxSumIndex - maxSumDigitIndex\n        val maxSumDigit\
    \ = maxSumDigit - maxSumDigitIndex\n        if (maxSumDigit < 0) maxSumDigit *\
    \ -1\n        else maxSumDigit", "        val nums = arr.toSet\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val positiveSums = sums.filter(x => x >\
    \ 0)\n        val negativeSums = sums.filter(x => x < 0)\n        val positiveSumsCount\
    \ = positiveSums.size\n        val negativeSumsCount = negativeSums.size\n   \
    \     val positiveSumsSum = positiveSums.sum\n        val negativeSumsSum = negativeSums.sum\n\
    \        val positiveSumsSumAbs = math.abs(positiveSumsSum)\n        val negativeSumsSumAbs\
    \ = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount = positiveSumsSumAbs.size\n\
    \        val negativeSumsSumAbsCount = negativeSumsSumAbs.size\n        val positiveSumsSumAbsSum\
    \ = positiveSumsSumAbs.sum\n        val negativeSumsSumAbsSum = negativeSumsSumAbs.sum\n\
    \        val positiveSumsSumAbsSumAbs = math.abs(positiveSumsSumAbsSum)\n    \
    \    val negativeSumsSumAbsSumAbs = math.abs(negativeSumsSumAbsSum)\n        val\
    \ positiveSumsSumAbsSumAbsCount = positiveSumsSumAbsSumAbs.size\n        val negativeSumsSumAbsSumAbsCount\
    \ = negativeSumsSumAbsSumAbs.size\n        val positiveSumsSumAbsSumAbsSum = positiveSumsSumAbsSumAbs.sum\n\
    \        val negativeSumsSumAbsSumAbsSum = negativeSumsSumAbsSumAbs.sum\n    \
    \    val positiveSumsSumAbsSumAbsSumAbs = math.abs(positiveSumsSumAbsSumAbsSum)\n\
    \        val negativeSumsSumAbsSumAbsSumAbs = math.abs(negativeSumsSumAbsSumAbsSum)\n\
    \        val positiveSumsSumAbsSumAbsSumAbsCount = positiveSumsSumAbsSumAbsSumAbs.size\n\
    \        val negativeSumsSumAbsSumAbsSumAbsCount = negativeSumsSumAbsSumAbsSumAbs.size\n\
    \        val positiveSumsSumAbsSumAbsSumAbsSum = positiveSumsSumAbsSumAbsSumAbs.sum\n\
    \        val negativeSumsSumAbsSumAbsSumAbsSum = negativeSumsSumAbsSumAbsSumAbs.sum\n\
    \        val positiveSumsSumAbsSumAbsSumAbs", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val count = sums.count(x\
    \ => x > 0)\n        nums.count(x => math.abs(x) > 0) * (count - 1)", "      \
    \  val digits = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n\
    \        sums.count(_ > 0)", "        val nums = arr.toSet\n        val numsSum\
    \ = arr.map(x => math.abs(x)).sum\n        nums.count(x => x > 0 && math.abs(x)\
    \ == numsSum)", "        val nums = arr.toList\n        val sums = nums.map(x\
    \ => x.toString.toInt).map(x => x.toInt).sum\n        val negatives = nums.map(x\
    \ => x.toString.toInt).map(x => x.toInt).filter(x => x < 0).sum\n        sums\
    \ + negatives", "        val digits = arr.map(_.toInt)\n        val sums = digits.map(x\
    \ => if (x < 0) -x else x)\n        val sumsSum = sums.sum\n        val nums =\
    \ arr.filter(x => sumsSum > 0).length\n        nums", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val positiveSums = sums.filter(sum\
    \ => sum > 0)\n        val negativeSums = sums.filter(sum => sum < 0)\n      \
    \  val positiveCount = positiveSums.count(_ > 0)\n        val negativeCount =\
    \ negativeSums.count(_ < 0)\n        positiveCount + negativeCount", "       \
    \ val digits = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n\
    \        val positiveSums = sums.filter(sum => sum > 0)\n        val negativeSums\
    \ = sums.filter(sum => sum < 0)\n        positiveSums.size + (negativeSums.size\
    \ * negativeSums.sum)", "        val digits = arr.map(_.toString.toInt)\n    \
    \    val sums = digits.map(_.sum)\n        val positiveSums = sums.filter(x =>\
    \ x > 0)\n        positiveSums.head", "        val n = arr.length\n        var\
    \ sum = 0\n        var count = 0\n        for (i <- 0 until n) {\n           \
    \ sum += arr(i)\n            if (sum > 0) {\n                count += 1\n    \
    \        }\n        }\n        count", "        var count = 0\n        var sum\
    \ = 0\n        for(i <- arr) {\n            sum += i\n            if(sum > 0)\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n \
    \       val numsSums = nums.map(x => sums.count(y => y > x))\n        numsSums.sum",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val count = sums.count(x => x > 0)\n        val negative = sums.count(x\
    \ => x < 0)\n        val firstSigned = sums.count(x => x < 0)\n        val firstNegative\
    \ = sums.count(x => x > 0)\n        val firstPositive = sums.count(x => x > 0)\n\
    \        val firstPositiveNegative = sums.count(x => x > 0 && x < 0)\n       \
    \ val firstPositiveNegativePositive = sums.count(x => x > 0 && x < 0 && x > 0)\n\
    \        val firstPositiveNegativePositiveNegative = sums.count(x => x > 0 &&\
    \ x < 0 && x < 0 && x > 0)\n        val firstPositiveNegativePositiveNegativePositive\
    \ = sums.count(x => x > 0 && x < 0 && x < 0 && x > 0 && x < 0)\n        val firstPositiveNegativePositiveNegativePositiveNegative\
    \ = sums.count(x => x > 0 && x < 0 && x < 0 && x < 0 && x > 0 && x < 0 && x <\
    \ 0)\n        val firstPositiveNegativePositiveNegativePositiveNegativePositive\
    \ = sums.count(x => x > 0 && x < 0 && x < 0 && x < 0 && x < 0 && x > 0 && x <\
    \ 0 && x < 0 && x < 0)\n        val firstPositiveNegativePositiveNegativePositiveNegativePositiveNegative\
    \ = sums.count(x => x > 0 && x < 0 && x < 0 && x < 0 && x < 0 && x > 0 && x <\
    \ 0 && x < 0 && x < 0 && x < 0)\n        val firstPositiveNegativePositiveNegativePositiveNegativePositiveNegativePositive\
    \ = sums.count(x => x > 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x >\
    \ 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0)\n        val firstPositiveNegativePositiveNegativePositiveNegativePositiveNegativePositiveNegative\
    \ = sums.count(x => x > 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x <\
    \ 0 && x > 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0)\n        val firstPositiveNegativePositiveNegativePositiveNegativePositiveNegativePositiveNegativePositive\
    \ = sums.count(x => x > 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x <\
    \ 0 && x > 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0)\n        val firstPositiveNegativePositiveNegativePositiveNegativePositiveNegativePositiveNegativePositiveNegative\
    \ = sums.count(x => x > 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x <\
    \ 0 && x < 0 && x > 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0)\n        val\
    \ firstPositiveNegativePositiveNegativePositiveNegativePositiveNegativePositiveNegativePositiveNegative\
    \ = sums.count(x => x > 0 && x < 0 && x < 0 && x < 0 && x < 0 && x < 0 && x <\
    \ 0 && x < 0 && x > 0 && x < 0 && x < 0 && x < 0 && x < 0)\n        val firstPositiveNegativePositiveNegativePositiveNegativePositive",
  "        val n = arr.size\n        val sums = arr.map(x => math.abs(x))\n      \
    \  val counts = sums.groupBy(x => math.abs(x)).mapValues(_.size)\n        val\
    \ result = counts.foldLeft(0l) { (acc, x) => acc + x }\n        result", "   \
    \     var count = 0\n        for(i <- arr) {\n            count += i.toString.toLong.filter(_\
    \ > 0).length\n        }\n        count", "        val nums = arr.toSet\n    \
    \    val sums = arr.map(x => x.toString.toInt).map(x => math.abs(x))\n       \
    \ val numsSums = nums.map(x => sums.filter(_ > x).length)\n        numsSums.sum",
  "        val sum = 0\n        arr.foreach(x => sum += x)\n        arr.filter(x =>\
    \ x > 0).length", "        val digits = arr.map(_.toString.toInt)\n        val\
    \ sum = digits.sum\n        val nums = arr.filter(x => x > 0).map(x => digits(x)\
    \ - digits(x - 1))\n        nums.count(x => x > 0).sum", "        val sums = arr.map(x\
    \ => math.abs(x))\n        val sumsSum = sums.sum\n        val nums = arr.filter(x\
    \ => math.abs(x) > 0).length\n        val numsSum = nums.sum\n        val numsSumAbs\
    \ = numsSum.abs\n        val numsSumAbsAbs = numsSumAbs.abs\n        val numsSumAbsAbsAbs\
    \ = numsSumAbsAbs.abs\n        val numsSumAbsAbsAbsAbs = numsSumAbsAbsAbs.abs\n\
    \        val numsSumAbsAbsAbsAbsAbs = numsSumAbsAbsAbsAbs.abs\n        val numsSumAbsAbsAbsAbsAbsAbs\
    \ = numsSumAbsAbsAbsAbsAbs.abs\n        val numsSumAbsAbsAbsAbsAbsAbsAbs = numsSumAbsAbsAbsAbsAbsAbs.abs\n\
    \        val numsSumAbsAbsAbsAbsAbsAbsAbsAbs = numsSumAbsAbsAbsAbsAbsAbsAbsAbs.abs\n\
    \        val numsSumAbsAbsAbsAbsAbsAbsAbsAbsAbs = numsSumAbsAbsAbsAbsAbsAbsAbsAbsAbs.abs\n\
    \        val numsSumAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs = numsSumAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs.abs\n\
    \        val numsSumAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs = numsSumAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs.abs\n\
    \        val numsSumAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs = numsSumAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs.abs\n\
    \        val numsSumAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs = numsSumAbsAbsAbsAbsAbsAbs",
  "        val sums = arr.map(x => x.toString.toInt).map(x => if (x < 0) -x else x)\n\
    \        val sumsSorted = sums.sortWith(_ < _)\n        val sumsSortedLength =\
    \ sumsSorted.length\n        val sumsSortedSum = sumsSorted.sum\n        if (sumsSortedLength\
    \ == 0) 0\n        else if (sumsSortedSum < 0) sumsSortedLength\n        else\
    \ sumsSortedLength - sumsSortedSum"]
stop_tokens:
- "\n    }\n"
